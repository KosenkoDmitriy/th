/* Generated by JSIL v0.8.2 build 30252. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm03 = JSIL.DeclareAssembly("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Contracts");
/* class Microsoft.Contracts.PureAttribute */ 

(function PureAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "Microsoft.Contracts.PureAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Event", "Method", "Property")]; });

})();

/* class Microsoft.Contracts.ContractClassAttribute */ 

(function ContractClassAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "Microsoft.Contracts.ContractClassAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_typeWithContracts", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Interface")]; });

})();

/* class Microsoft.Contracts.InvariantMethodAttribute */ 

(function InvariantMethodAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "Microsoft.Contracts.InvariantMethodAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Method]; });

})();

/* class Microsoft.Contracts.RuntimeContractsAttribute */ 

(function RuntimeContractsAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "Microsoft.Contracts.RuntimeContractsAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Assembly]; });

})();

/* class Microsoft.Contracts.ImmutableAttribute */ 

(function ImmutableAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "Microsoft.Contracts.ImmutableAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Struct")]; });

})();

/* class Microsoft.Contracts.VerifyAttribute */ 

(function VerifyAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "Microsoft.Contracts.VerifyAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_value", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags(
          "Assembly", "Class", "Constructor", "Method", 
          "Property", "Struct"
      )]; });

})();

/* class Microsoft.Contracts.Contract */ 

(function Contract$Members () {
  var $, $thisType;





















  JSIL.MakeStaticClass("Microsoft.Contracts.Contract", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assert", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertOnException", 
      new JSIL.MethodSignature(null, [$.Boolean], ["E"])
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; })
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AssertOnReturn", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; })
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assume", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Assume", 
      new JSIL.MethodSignature(null, [$.Boolean, $.String])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "DebugRequires", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; })
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Ensures", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("System.Predicate`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ForAll", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $asm00.TypeRef("System.Predicate`1", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invariant", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    $.ExternalMethod({Static:true , Public:true }, "Old", 
      new JSIL.MethodSignature("!!0", ["!!0"], ["T"])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature("!!0", [$jsilcore.TypeRef("JSIL.Reference", ["!!0"])], ["T"])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Requires", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Requires", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Result", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RewriterEnsures", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "RewriterInvariant", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Throws", 
      new JSIL.MethodSignature(null, null, ["E"])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });

    $.ExternalMethod({Static:true , Public:true }, "ThrowsEnsures", 
      new JSIL.MethodSignature(null, [$.Boolean], ["E"])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["USE_SPECSHARP_ASSEMBLY_REWRITER"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Contracts.Contract+PreconditionException */ 

(function PreconditionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "Microsoft.Contracts.Contract+PreconditionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Contracts.Contract+PostconditionException */ 

(function PostconditionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "Microsoft.Contracts.Contract+PostconditionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Contracts.Contract+InvariantException */ 

(function InvariantException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "Microsoft.Contracts.Contract+InvariantException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Contracts.Contract+AssertionException */ 

(function AssertionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "Microsoft.Contracts.Contract+AssertionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Contracts.Contract+AssumptionException */ 

(function AssumptionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "Microsoft.Contracts.Contract+AssumptionException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Diagnostics");
JSIL.DeclareNamespace("System.Diagnostics.Eventing");
/* struct System.Diagnostics.Eventing.EventDescriptor */ 

(function EventDescriptor$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.Eventing.EventDescriptor", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 7, 
      ExplicitLayout: true, 
      SizeBytes: 16, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int32, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Channel", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.Field({Static:false, Public:false, Offset: 0}, "m_id", $.UInt16);

    $.Field({Static:false, Public:false, Offset: 2}, "m_version", $.Byte);

    $.Field({Static:false, Public:false, Offset: 3}, "m_channel", $.Byte);

    $.Field({Static:false, Public:false, Offset: 4}, "m_level", $.Byte);

    $.Field({Static:false, Public:false, Offset: 5}, "m_opcode", $.Byte);

    $.Field({Static:false, Public:false, Offset: 6}, "m_task", $.UInt16);

    $.Field({Static:false, Public:false, Offset: 8}, "m_keywords", $.Int64);

    $.Property({Static:false, Public:true }, "EventId", $.Int32);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "Channel", $.Byte);

    $.Property({Static:false, Public:true }, "Level", $.Byte);

    $.Property({Static:false, Public:true }, "Opcode", $.Byte);

    $.Property({Static:false, Public:true }, "Task", $.Int32);

    $.Property({Static:false, Public:true }, "Keywords", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.EventProvider */ 

(function EventProvider$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.EventProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Guid"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateActivityId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Guid"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Deregister", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EncodeObject", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Object]), $jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("System.Diagnostics.Eventing.EventProvider+EventData")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwEnableCallBack", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), $.Int32, 
          $.Byte, $.Int64, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EtwRegister", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetActivityId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Guid"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GetLastWriteEventError", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEnabled", 
      new JSIL.MethodSignature($.Boolean, [$.Byte, $.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "SetActivityId", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetLastError", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(1, "eventPayload", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $.Int32, 
          $.IntPtr
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.Byte, 
          $.Int64
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WriteMessageEvent", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm00.TypeRef("System.Guid"), 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(2, "eventPayload", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "WriteTransferEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), $asm00.TypeRef("System.Guid"), 
          $.Int32, $.IntPtr
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "s_basicTypeAllocationBufferSize", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "s_etwMaxMumberArguments", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "s_etwAPIMaxStringCount", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "s_maxEventDataDescriptors", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "s_traceEventMaximumSize", $.Int32, 65482);

    $.Constant({Static:true , Public:false}, "s_traceEventMaximumStringSize", $.Int32, 32724);

    $.Field({Static:false, Public:false}, "m_etwCallback", $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback"));

    $.Field({Static:false, Public:false}, "m_regHandle", $.Int64);

    $.Field({Static:false, Public:false}, "m_level", $.Byte);

    $.Field({Static:false, Public:false}, "m_anyKeywordMask", $.Int64);

    $.Field({Static:false, Public:false}, "m_allKeywordMask", $.Int64);

    $.Field({Static:false, Public:false}, "m_enabled", $.Int32);

    $.Field({Static:false, Public:false}, "m_providerId", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_disposed", $.Int32);

    $.Field({Static:true , Public:false}, "s_returnCodeSlot", $asm00.TypeRef("System.LocalDataStoreSlot"));

    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NoError: 0, 
    NoFreeBuffers: 1, 
    EventTooBig: 2, 
  }
);

/* struct System.Diagnostics.Eventing.EventProvider+EventData */ 

(function EventData$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Diagnostics.Eventing.EventProvider+EventData", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 16, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "DataPointer", $.UInt64);

    $.Field({Static:false, Public:false, Offset: 8}, "Size", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 12}, "Reserved", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.EventProvider+ActivityControl */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.EventProvider+ActivityControl", 
    BaseType: $asm00.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EVENT_ACTIVITY_CTRL_GET_ID: 1, 
    EVENT_ACTIVITY_CTRL_SET_ID: 2, 
    EVENT_ACTIVITY_CTRL_CREATE_ID: 3, 
    EVENT_ACTIVITY_CTRL_GET_SET_ID: 4, 
    EVENT_ACTIVITY_CTRL_CREATE_SET_ID: 5, 
  }
);

/* class System.Diagnostics.Eventing.EventProviderTraceListener */ 

(function EventProviderTraceListener$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Diagnostics.TraceListener"), 
      Name: "System.Diagnostics.Eventing.EventProviderTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Delimiter", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitProvider", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Delimiter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(4, "data", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Parameter(5, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm00.TypeRef("System.Guid")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "s_nullStringValue", $.String, "null");

    $.Constant({Static:true , Public:false}, "s_nullStringComaValue", $.String, "null,");

    $.Constant({Static:true , Public:false}, "s_nullCStringValue", $.String, ": null");

    $.Constant({Static:true , Public:false}, "s_activityIdString", $.String, "activityId=");

    $.Constant({Static:true , Public:false}, "s_relatedActivityIdString", $.String, "relatedActivityId=");

    $.Constant({Static:true , Public:false}, "s_callStackString", $.String, " : CallStack:");

    $.Constant({Static:true , Public:false}, "s_optionDelimiter", $.String, "delimiter");

    $.Constant({Static:true , Public:false}, "s_keyWordMask", $.UInt32, 4294967040);

    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", $.Int32, 512);

    $.Field({Static:false, Public:false}, "m_provider", $asm03.TypeRef("System.Diagnostics.Eventing.EventProvider"));

    $.Field({Static:false, Public:false}, "m_delimiter", $.String);

    $.Field({Static:false, Public:false}, "m_initializedDelim", $.Int32);

    $.Field({Static:false, Public:false}, "m_Lock", $.Object);

    $.Property({Static:false, Public:true }, "Delimiter", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Management");
JSIL.DeclareNamespace("System.Management.Instrumentation");
/* class System.Management.Instrumentation.ManagementEntityAttribute */ 

(function ManagementEntityAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementEntityAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_External", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Singleton", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_External", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Singleton", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_nounName", $.String);

    $.Field({Static:false, Public:false}, "_isExternalClass", $.Boolean);

    $.Field({Static:false, Public:false}, "_isSingleton", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "External", $.Boolean);

    $.Property({Static:false, Public:true }, "Singleton", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Class]; });

})();

/* enum System.Management.Instrumentation.ManagementHostingModel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Management.Instrumentation.ManagementHostingModel", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Decoupled: 0, 
    NetworkService: 1, 
    LocalService: 2, 
    LocalSystem: 3, 
  }
);

/* class System.Management.Instrumentation.WmiConfigurationAttribute */ 

(function WmiConfigurationAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.WmiConfigurationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingGroup", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HostingModel", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Management.Instrumentation.ManagementHostingModel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IdentifyLevel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceSecurity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Scope", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityRestriction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostingGroup", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HostingModel", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Management.Instrumentation.ManagementHostingModel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IdentifyLevel", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceSecurity", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityRestriction", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_Scope", $.String);

    $.Field({Static:false, Public:false}, "_SecurityRestriction", $.String);

    $.Field({Static:false, Public:false}, "_NamespaceSecurity", $.String);

    $.Field({Static:false, Public:false}, "_HostingModel", $asm03.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

    $.Field({Static:false, Public:false}, "_HostingGroup", $.String);

    $.Field({Static:false, Public:false}, "_IdentifyLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityRestriction", $.String);

    $.Property({Static:false, Public:true }, "NamespaceSecurity", $.String);

    $.Property({Static:false, Public:true }, "IdentifyLevel", $.Boolean);

    $.Property({Static:false, Public:true }, "HostingModel", $asm03.TypeRef("System.Management.Instrumentation.ManagementHostingModel"));

    $.Property({Static:false, Public:true }, "HostingGroup", $.String);

    $.Property({Static:false, Public:true }, "Scope", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Assembly]; });

})();

/* class System.Management.Instrumentation.ManagementMemberAttribute */ 

(function ManagementMemberAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementMemberAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_Name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Management.Instrumentation.ManagementNewInstanceAttribute */ 

(function ManagementNewInstanceAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementNewInstanceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementBindAttribute */ 

(function ManagementBindAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementBindAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementCreateAttribute */ 

(function ManagementCreateAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementCreateAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementRemoveAttribute */ 

(function ManagementRemoveAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementRemoveAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementEnumeratorAttribute */ 

(function ManagementEnumeratorAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementNewInstanceAttribute"), 
      Name: "System.Management.Instrumentation.ManagementEnumeratorAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Constructor", "Method")]; });

})();

/* class System.Management.Instrumentation.ManagementProbeAttribute */ 

(function ManagementProbeAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementProbeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementTaskAttribute */ 

(function ManagementTaskAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementTaskAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "_schema", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Schema", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementKeyAttribute */ 

(function ManagementKeyAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementKeyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementReferenceAttribute */ 

(function ManagementReferenceAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementReferenceAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "_Type", $.String);

    $.Property({Static:false, Public:true }, "Type", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property")]; });

})();

/* enum System.Management.Instrumentation.ManagementConfigurationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Management.Instrumentation.ManagementConfigurationType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Apply: 0, 
    OnCommit: 1, 
  }
);

/* class System.Management.Instrumentation.ManagementConfigurationAttribute */ 

(function ManagementConfigurationAttribute$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementConfigurationAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "updateMode", $asm03.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

    $.Field({Static:false, Public:false}, "_schema", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Mode", $asm03.TypeRef("System.Management.Instrumentation.ManagementConfigurationType"));

    $.Property({Static:false, Public:true }, "Schema", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Property")]; });

})();

/* class System.Management.Instrumentation.ManagementCommitAttribute */ 

(function ManagementCommitAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.ManagementMemberAttribute"), 
      Name: "System.Management.Instrumentation.ManagementCommitAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Method]; });

})();

/* class System.Management.Instrumentation.ManagementNameAttribute */ 

(function ManagementNameAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Management.Instrumentation.ManagementNameAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_Name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Parameter]; });

})();

/* class System.Management.Instrumentation.InstrumentationBaseException */ 

(function InstrumentationBaseException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.Management.Instrumentation.InstrumentationBaseException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Management.Instrumentation.InstrumentationException */ 

(function InstrumentationException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.InstrumentationBaseException"), 
      Name: "System.Management.Instrumentation.InstrumentationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Management.Instrumentation.InstanceNotFoundException */ 

(function InstanceNotFoundException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Management.Instrumentation.InstrumentationException"), 
      Name: "System.Management.Instrumentation.InstanceNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.Eventing.Reader");
/* class System.Diagnostics.Eventing.Reader.EventBookmark */ 

(function EventBookmark$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventBookmark", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BookmarkText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData")
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "bookmark", $.String);

    $.Property({Static:false, Public:false}, "BookmarkText", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Runtime.Serialization.ISerializable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.EventLogType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.EventLogType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Administrative: 0, 
    Operational: 1, 
    Analytical: 2, 
    Debug: 3, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.EventLogIsolation */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.EventLogIsolation", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Application: 0, 
    System: 1, 
    Custom: 2, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.EventLogMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.EventLogMode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Circular: 0, 
    AutoBackup: 1, 
    Retain: 2, 
  }
);

/* class System.Diagnostics.Eventing.Reader.EventLogConfiguration */ 

(function EventLogConfiguration$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogConfiguration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsClassicLog", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEnabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogIsolation", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogType", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumSizeInBytes", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwningProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderBufferSize", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderControlGuid", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderKeywords", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLatency", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderLevel", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMaximumNumberOfBuffers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMinimumNumberOfBuffers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderNames", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecurityDescriptor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SaveChanges", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEnabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogFilePath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LogMode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaximumSizeInBytes", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderKeywords", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProviderLevel", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecurityDescriptor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "session", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "channelName", $.String);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "LogType", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogType"));

    $.Property({Static:false, Public:true }, "LogIsolation", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogIsolation"));

    $.Property({Static:false, Public:true }, "IsEnabled", $.Boolean);

    $.Property({Static:false, Public:true }, "IsClassicLog", $.Boolean);

    $.Property({Static:false, Public:true }, "SecurityDescriptor", $.String);

    $.Property({Static:false, Public:true }, "LogFilePath", $.String);

    $.Property({Static:false, Public:true }, "MaximumSizeInBytes", $.Int64);

    $.Property({Static:false, Public:true }, "LogMode", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogMode"));

    $.Property({Static:false, Public:true }, "OwningProviderName", $.String);

    $.Property({Static:false, Public:true }, "ProviderNames", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true }, "ProviderLevel", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderKeywords", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "ProviderBufferSize", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMinimumNumberOfBuffers", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderMaximumNumberOfBuffers", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderLatency", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "ProviderControlGuid", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogLink */ 

(function EventLogLink$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogLink", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $.String, $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChannelId", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsImported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "channelName", $.String);

    $.Field({Static:false, Public:false}, "isImported", $.Boolean);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "channelId", $.UInt32);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "IsImported", $.Boolean);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:false}, "ChannelId", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogStatus */ 

(function EventLogStatus$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogStatus", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StatusCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "channelName", $.String);

    $.Field({Static:false, Public:false}, "win32ErrorCode", $.Int32);

    $.Property({Static:false, Public:true }, "LogName", $.String);

    $.Property({Static:false, Public:true }, "StatusCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventProperty */ 

(function EventProperty$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventProperty", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogPropertySelector */ 

(function EventLogPropertySelector$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogPropertySelector", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    );

    $.Field({Static:false, Public:false}, "renderContextHandleValues", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:false}, "Handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventRecord */ 

(function EventRecord$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm00.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm00.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventKeyword */ 

(function EventKeyword$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventKeyword", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int64, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int64, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int64);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int64);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLevel */ 

(function EventLevel$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLevel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogRecord */ 

(function EventLogRecord$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogRecord", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FormatDescription", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ActivityId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Bookmark", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ContainerLog", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeywordsDisplayNames", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LevelDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LogName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MachineName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MatchedQueryIds", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int16]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OpcodeDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProcessId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Qualifiers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RecordId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_RelatedActivityId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TaskDisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ThreadId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TimeCreated", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UserId", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Principal.SecurityIdentifier"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Version", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBookmarkHandleFromBookmark", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetPropertyValues", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogPropertySelector")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareSystemData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXml", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "SYSTEM_PROPERTY_COUNT", $.Int32, 18);

    $.Field({Static:false, Public:false}, "handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.Field({Static:false, Public:false}, "session", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "systemProperties", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties"));

    $.Field({Static:false, Public:false}, "containerChannel", $.String);

    $.Field({Static:false, Public:false}, "matchedQueryIds", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Field({Static:false, Public:false}, "levelName", $.String);

    $.Field({Static:false, Public:false}, "taskName", $.String);

    $.Field({Static:false, Public:false}, "opcodeName", $.String);

    $.Field({Static:false, Public:false}, "keywordsNames", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Field({Static:false, Public:false}, "levelNameReady", $.Boolean);

    $.Field({Static:false, Public:false}, "taskNameReady", $.Boolean);

    $.Field({Static:false, Public:false}, "opcodeNameReady", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation"));

    $.Property({Static:false, Public:false}, "Handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Id", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Version", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Qualifiers", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Level", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Task", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Opcode", $asm00.TypeRef("System.Nullable`1", [$.Int16]));

    $.Property({Static:false, Public:true , Virtual:true }, "Keywords", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "RecordId", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProviderId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "LogName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ProcessId", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "ThreadId", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "MachineName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UserId", $asm00.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Property({Static:false, Public:true , Virtual:true }, "TimeCreated", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ActivityId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true , Virtual:true }, "RelatedActivityId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Property({Static:false, Public:true }, "ContainerLog", $.String);

    $.Property({Static:false, Public:true }, "MatchedQueryIds", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "Bookmark", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Property({Static:false, Public:true , Virtual:true }, "LevelDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OpcodeDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TaskDisplayName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "KeywordsDisplayNames", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventProperty")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogReader */ 

(function EventLogReader$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelReading", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BatchSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogStatus", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "GetNextBatch", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadEvent", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"), [$asm00.TypeRef("System.TimeSpan")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), $.Int64])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Seek", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.SeekOrigin"), $.Int64])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekCommon", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SeekReset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_BatchSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "eventQuery", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"));

    $.Field({Static:false, Public:false}, "batchSize", $.Int32);

    $.Field({Static:false, Public:false}, "handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$.IntPtr]));

    $.Field({Static:false, Public:false}, "currentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "eventCount", $.Int32);

    $.Field({Static:false, Public:false}, "isEof", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation"));

    $.Property({Static:false, Public:true }, "BatchSize", $.Int32);

    $.Property({Static:false, Public:true }, "LogStatus", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogStatus")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogWatcher */ 

(function EventLogWatcher$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogWatcher", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_EventRecordWritten", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.EventHandler`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Enabled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEventsRequestCompletion", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IssueCallback", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_EventRecordWritten", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.EventHandler`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "RequestEvents", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Enabled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartSubscribing", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "StopSubscribing", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SubscribedEventsAvailableCallback", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.Field({Static:false, Public:false}, "EventRecordWritten", $asm00.TypeRef("System.EventHandler`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]));

    $.Field({Static:false, Public:false}, "eventQuery", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogQuery"));

    $.Field({Static:false, Public:false}, "bookmark", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventBookmark"));

    $.Field({Static:false, Public:false}, "readExistingEvents", $.Boolean);

    $.Field({Static:false, Public:false}, "handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "eventsBuffer", $jsilcore.TypeRef("System.Array", [$.IntPtr]));

    $.Field({Static:false, Public:false}, "numEventsInBuffer", $.Int32);

    $.Field({Static:false, Public:false}, "isSubscribing", $.Boolean);

    $.Field({Static:false, Public:false}, "callbackThreadId", $.Int32);

    $.Field({Static:false, Public:false}, "subscriptionWaitHandle", $asm00.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "unregisterDoneHandle", $asm00.TypeRef("System.Threading.AutoResetEvent"));

    $.Field({Static:false, Public:false}, "registeredWaitHandle", $asm00.TypeRef("System.Threading.RegisteredWaitHandle"));

    $.Field({Static:false, Public:false}, "cachedMetadataInformation", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation"));

    $.Field({Static:false, Public:false}, "asyncException", $asm00.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "Enabled", $.Boolean);

    $.Event({Static:false, Public:true }, "EventRecordWritten", $asm00.TypeRef("System.EventHandler`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs */ 

(function EventRecordWrittenEventArgs$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogRecord"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventException", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventRecord", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"))
    );

    $.Field({Static:false, Public:false}, "record", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

    $.Field({Static:false, Public:false}, "exception", $asm00.TypeRef("System.Exception"));

    $.Property({Static:false, Public:true }, "EventRecord", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventRecord"));

    $.Property({Static:false, Public:true }, "EventException", $asm00.TypeRef("System.Exception"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogQuery */ 

(function EventLogQuery$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogQuery", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Path", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Query", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ReverseDirection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Session", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ThePathType", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TolerateQueryErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ReverseDirection", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Session", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TolerateQueryErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "query", $.String);

    $.Field({Static:false, Public:false}, "path", $.String);

    $.Field({Static:false, Public:false}, "session", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "pathType", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

    $.Field({Static:false, Public:false}, "tolerateErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "reverseDirection", $.Boolean);

    $.Property({Static:false, Public:true }, "Session", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Property({Static:false, Public:true }, "TolerateQueryErrors", $.Boolean);

    $.Property({Static:false, Public:true }, "ReverseDirection", $.Boolean);

    $.Property({Static:false, Public:false}, "Path", $.String);

    $.Property({Static:false, Public:false}, "ThePathType", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"));

    $.Property({Static:false, Public:false}, "Query", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogHandle */ 

(function EventLogHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogPermissionHolder */ 

(function EventLogPermissionHolder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogPermissionHolder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetEventLogPermission", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.EventLogPermission"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.SessionAuthentication */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.SessionAuthentication", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Negotiate: 1, 
    Kerberos: 2, 
    Ntlm: 3, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.PathType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.PathType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LogName: 1, 
    FilePath: 2, 
  }
);

/* class System.Diagnostics.Eventing.Reader.EventLogSession */ 

(function EventLogSession$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogSession", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm00.TypeRef("System.Security.SecureString"), 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "CancelCurrentOperations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ClearLog", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLog", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportLogAndMessages", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType"), 
          $.String, $.String, 
          $.Boolean, $asm00.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GlobalSession", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogInformation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogInformation"), [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLogNames", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProviderNames", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupSystemContext", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SetupUserContext", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.Field({Static:false, Public:false}, "renderContextHandleSystem", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "renderContextHandleUser", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Field({Static:false, Public:false}, "server", $.String);

    $.Field({Static:false, Public:false}, "user", $.String);

    $.Field({Static:false, Public:false}, "domain", $.String);

    $.Field({Static:false, Public:false}, "logOnType", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.SessionAuthentication"));

    $.Field({Static:false, Public:false}, "handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:true , Public:false}, "globalSession", $.Type);

    $.Property({Static:false, Public:false}, "Handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:true , Public:true }, "GlobalSession", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventMetadata */ 

(function EventMetadata$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.Byte, 
          $.Byte, $.Byte, 
          $.Byte, $.Int16, 
          $.Int64, $.String, 
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Level", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLink", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Task", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Template", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.Field({Static:false, Public:false}, "id", $.Int64);

    $.Field({Static:false, Public:false}, "version", $.Byte);

    $.Field({Static:false, Public:false}, "channelId", $.Byte);

    $.Field({Static:false, Public:false}, "level", $.Byte);

    $.Field({Static:false, Public:false}, "opcode", $.Int16);

    $.Field({Static:false, Public:false}, "task", $.Int32);

    $.Field({Static:false, Public:false}, "keywords", $.Int64);

    $.Field({Static:false, Public:false}, "template", $.String);

    $.Field({Static:false, Public:false}, "description", $.String);

    $.Field({Static:false, Public:false}, "pmReference", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Property({Static:false, Public:true }, "Id", $.Int64);

    $.Property({Static:false, Public:true }, "Version", $.Byte);

    $.Property({Static:false, Public:true }, "LogLink", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink"));

    $.Property({Static:false, Public:true }, "Level", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel"));

    $.Property({Static:false, Public:true }, "Opcode", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode"));

    $.Property({Static:false, Public:true }, "Task", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventTask"));

    $.Property({Static:false, Public:true }, "Keywords", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Template", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventOpcode */ 

(function EventOpcode$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventOpcode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventTask */ 

(function EventTask$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventTask", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.String, $asm00.TypeRef("System.Guid")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventGuid", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareData", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "value", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "displayName", $.String);

    $.Field({Static:false, Public:false}, "guid", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "dataReady", $.Boolean);

    $.Field({Static:false, Public:false}, "pmReference", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Value", $.Int32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "EventGuid", $asm00.TypeRef("System.Guid"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogException */ 

(function EventLogException$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "Throw", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "errorCode", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogNotFoundException */ 

(function EventLogNotFoundException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogReadingException */ 

(function EventLogReadingException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogReadingException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException */ 

(function EventLogProviderDisabledException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogInvalidDataException */ 

(function EventLogInvalidDataException$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogException"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogInvalidDataException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.EventLogInformation */ 

(function EventLogInformation$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.EventLogInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FileSize", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLogFull", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Boolean]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastAccessTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LastWriteTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldestRecordNumber", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecordCount", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$.Int64]))
    );

    $.Field({Static:false, Public:false}, "creationTime", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "lastAccessTime", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "lastWriteTime", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:false}, "fileSize", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "fileAttributes", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "recordCount", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "oldestRecordNumber", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Field({Static:false, Public:false}, "isLogFull", $asm00.TypeRef("System.Nullable`1", [$.Boolean]));

    $.Property({Static:false, Public:true }, "CreationTime", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastAccessTime", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "LastWriteTime", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Property({Static:false, Public:true }, "FileSize", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "Attributes", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "RecordCount", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "OldestRecordNumber", $asm00.TypeRef("System.Nullable`1", [$.Int64]));

    $.Property({Static:false, Public:true }, "IsLogFull", $asm00.TypeRef("System.Nullable`1", [$.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.NativeWrapper */ 

(function NativeWrapper$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.NativeWrapper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertFileTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToAnsiString", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToBinaryArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToGuid", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Guid"), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToIntArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConvertToObject", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToObject", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariantType")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSafeHandle", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToSid", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Principal.SecurityIdentifier"), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToString", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ConvertToStringArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCancel", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClearLog", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtClose", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtCreateRenderContext", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtExportLog", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessage", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.UInt32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageRenderKeywords", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtFormatMessageRenderName", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetChannelConfigProperty", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetEventInfo", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetEventMetadataProperty", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetLogInfo", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Object, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetPublisherMetadataProperty", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "EvtGetPublisherMetadataPropertyHandle", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtGetQueryInfo", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenLog", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenProviderMetadata", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtOpenSession", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin")]), 
          $.Int32, $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtQuery", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRender", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $asm00.TypeRef("System.Text.StringBuilder")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBookmark", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextSystem", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties"), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtRenderBufferWithContextUserOrValues", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IList`1", [$.Object]), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSeek", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int64, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSetChannelConfigProperty", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId"), 
          $.Object
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtSubscribe", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.IntPtr, 
          $.IntPtr, $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "EvtUpdateBookmark", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_platformNotSupported", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties */ 

(function SystemProperties$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.NativeWrapper+SystemProperties", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "filled", $.Boolean);

    $.Field({Static:false, Public:true }, "Id", $asm00.TypeRef("System.Nullable`1", [$.UInt16]));

    $.Field({Static:false, Public:true }, "Version", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Field({Static:false, Public:true }, "Qualifiers", $asm00.TypeRef("System.Nullable`1", [$.UInt16]));

    $.Field({Static:false, Public:true }, "Level", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Field({Static:false, Public:true }, "Task", $asm00.TypeRef("System.Nullable`1", [$.UInt16]));

    $.Field({Static:false, Public:true }, "Opcode", $asm00.TypeRef("System.Nullable`1", [$.Byte]));

    $.Field({Static:false, Public:true }, "Keywords", $asm00.TypeRef("System.Nullable`1", [$.UInt64]));

    $.Field({Static:false, Public:true }, "RecordId", $asm00.TypeRef("System.Nullable`1", [$.UInt64]));

    $.Field({Static:false, Public:true }, "ProviderName", $.String);

    $.Field({Static:false, Public:true }, "ProviderId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Field({Static:false, Public:true }, "ChannelName", $.String);

    $.Field({Static:false, Public:true }, "ProcessId", $asm00.TypeRef("System.Nullable`1", [$.UInt32]));

    $.Field({Static:false, Public:true }, "ThreadId", $asm00.TypeRef("System.Nullable`1", [$.UInt32]));

    $.Field({Static:false, Public:true }, "ComputerName", $.String);

    $.Field({Static:false, Public:true }, "UserId", $asm00.TypeRef("System.Security.Principal.SecurityIdentifier"));

    $.Field({Static:false, Public:true }, "TimeCreated", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.DateTime")]));

    $.Field({Static:false, Public:true }, "ActivityId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));

    $.Field({Static:false, Public:true }, "RelatedActivityId", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Guid")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadata */ 

(function ProviderMetadata$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadata", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm00.TypeRef("System.Globalization.CultureInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), 
          $asm00.TypeRef("System.Globalization.CultureInfo"), $.String
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReleased", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "FindStandardKeywordDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindStandardTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $.UInt32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Events", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_Handle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HelpLink", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Keywords", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Levels", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LogLinks", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_MessageFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Opcodes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProviderMessageID", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ResourceFilePath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Tasks", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetProviderListProperty", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.Field({Static:false, Public:false}, "handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "defaultProviderHandle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Field({Static:false, Public:false}, "session", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "providerName", $.String);

    $.Field({Static:false, Public:false}, "cultureInfo", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "logFilePath", $.String);

    $.Field({Static:false, Public:false}, "levels", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Field({Static:false, Public:false}, "opcodes", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Field({Static:false, Public:false}, "tasks", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Field({Static:false, Public:false}, "keywords", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Field({Static:false, Public:false}, "standardLevels", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Field({Static:false, Public:false}, "standardOpcodes", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Field({Static:false, Public:false}, "standardTasks", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Field({Static:false, Public:false}, "standardKeywords", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Field({Static:false, Public:false}, "channelReferences", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

    $.Field({Static:false, Public:false}, "syncObject", $.Object);

    $.Property({Static:false, Public:false}, "Handle", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Id", $asm00.TypeRef("System.Guid"));

    $.Property({Static:false, Public:true }, "MessageFilePath", $.String);

    $.Property({Static:false, Public:true }, "ResourceFilePath", $.String);

    $.Property({Static:false, Public:true }, "ParameterFilePath", $.String);

    $.Property({Static:false, Public:true }, "HelpLink", $asm01.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "ProviderMessageID", $.UInt32);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "LogLinks", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogLink")]));

    $.Property({Static:false, Public:true }, "Levels", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLevel")]));

    $.Property({Static:false, Public:true }, "Opcodes", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventOpcode")]));

    $.Property({Static:false, Public:true }, "Keywords", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventKeyword")]));

    $.Property({Static:false, Public:true }, "Tasks", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventTask")]));

    $.Property({Static:false, Public:true }, "Events", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventMetadata")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.Eventing.Reader.ProviderMetadata+ObjectTypeName */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.ProviderMetadata+ObjectTypeName", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Level: 0, 
    Opcode: 1, 
    Task: 2, 
    Keyword: 3, 
  }
);

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation */ 

(function ProviderMetadataCachedInformation$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"), $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCacheEntry", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeleteCacheEntry", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushOldestEntry", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetFormatDescription", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetKeywordDisplayNames", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.String]), [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Parameter(1, "eventHandle", function (_) {
          _.Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "GetLevelDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Parameter(1, "eventHandle", function (_) {
          _.Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true }, "GetOpcodeDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Parameter(1, "eventHandle", function (_) {
          _.Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "GetProviderMetadata", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTaskDisplayName", 
      new JSIL.MethodSignature($.String, [$.String, $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Parameter(1, "eventHandle", function (_) {
          _.Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "IsCacheFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsProviderinCache", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UpdateCacheValueInfoForHit", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem"))
    );

    $.Field({Static:false, Public:false}, "cache", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem")]));

    $.Field({Static:false, Public:false}, "maximumCacheSize", $.Int32);

    $.Field({Static:false, Public:false}, "session", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogSession"));

    $.Field({Static:false, Public:false}, "logfile", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId */ 

(function ProviderMetadataId$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+ProviderMetadataId", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Globalization.CultureInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TheCultureInfo", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "providerName", $.String);

    $.Field({Static:false, Public:false}, "cultureInfo", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:false, Public:true }, "ProviderName", $.String);

    $.Property({Static:false, Public:true }, "TheCultureInfo", $asm00.TypeRef("System.Globalization.CultureInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem */ 

(function CacheItem$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.Eventing.Reader.ProviderMetadataCachedInformation+CacheItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderMetadata", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TheTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TheTime", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.DateTime"))
    );

    $.Field({Static:false, Public:false}, "pm", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));

    $.Field({Static:false, Public:false}, "theTime", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "TheTime", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "ProviderMetadata", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.ProviderMetadata"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle */ 

(function CoTaskMemUnicodeSafeHandle$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle */ 

(function CoTaskMemSafeHandle$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Runtime.InteropServices.SafeHandle"), 
      Name: "System.Diagnostics.Eventing.Reader.CoTaskMemSafeHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsInvalid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemory", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMemory", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsInvalid", $.Boolean);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum System.Diagnostics.Eventing.Reader.StandardEventLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventLevel", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    LogAlways: 0, 
    Critical: 1, 
    Error: 2, 
    Warning: 3, 
    Informational: 4, 
    Verbose: 5, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventTask */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventTask", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventOpcode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventOpcode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Info: 0, 
    Start: 1, 
    Stop: 2, 
    DataCollectionStart: 3, 
    DataCollectionStop: 4, 
    Extension: 5, 
    Reply: 6, 
    Resume: 7, 
    Suspend: 8, 
    Send: 9, 
    Receive: 240, 
  }
);

/* enum System.Diagnostics.Eventing.Reader.StandardEventKeywords */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.Eventing.Reader.StandardEventKeywords", 
    BaseType: $asm00.TypeRef("System.Int64"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    WdiContext: 562949953421312, 
    WdiDiagnostic: 1125899906842624, 
    Sqm: 2251799813685248, 
    AuditFailure: 4503599627370496, 
    CorrelationHint: 4503599627370496, 
    AuditSuccess: 9007199254740992, 
    EventLogClassic: 36028797018963968, 
  }
);

/* delegate System.Action */ 

JSIL.MakeDelegate("System.Action", true, [], 
  JSIL.MethodSignature.Void);

/* delegate System.Action`2 */ 

JSIL.MakeDelegate("System.Action`2", true, ["T1", "T2"], 
  new JSIL.MethodSignature(null, [new JSIL.GenericParameter("T1", "System.Action`2"), new JSIL.GenericParameter("T2", "System.Action`2")]));

/* delegate System.Action`3 */ 

JSIL.MakeDelegate("System.Action`3", true, ["T1", "T2", "T3"], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`3"), new JSIL.GenericParameter("T2", "System.Action`3"), 
      new JSIL.GenericParameter("T3", "System.Action`3")
    ]));

/* delegate System.Action`4 */ 

JSIL.MakeDelegate("System.Action`4", true, ["T1", "T2", "T3", "T4"], 
  new JSIL.MethodSignature(null, [
      new JSIL.GenericParameter("T1", "System.Action`4"), new JSIL.GenericParameter("T2", "System.Action`4"), 
      new JSIL.GenericParameter("T3", "System.Action`4"), new JSIL.GenericParameter("T4", "System.Action`4")
    ]));

/* delegate System.Func`1 */ 

JSIL.MakeDelegate("System.Func`1", true, ["TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`1"), null));

/* delegate System.Func`2 */ 

JSIL.MakeDelegate("System.Func`2", true, ["T", "TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`2"), [new JSIL.GenericParameter("T", "System.Func`2")]));

/* delegate System.Func`3 */ 

JSIL.MakeDelegate("System.Func`3", true, ["T1", "T2", "TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`3"), [new JSIL.GenericParameter("T1", "System.Func`3"), new JSIL.GenericParameter("T2", "System.Func`3")]));

/* delegate System.Func`4 */ 

JSIL.MakeDelegate("System.Func`4", true, ["T1", "T2", "T3", "TResult"], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`4"), [
      new JSIL.GenericParameter("T1", "System.Func`4"), new JSIL.GenericParameter("T2", "System.Func`4"), 
      new JSIL.GenericParameter("T3", "System.Func`4")
    ]));

/* delegate System.Func`5 */ 

JSIL.MakeDelegate("System.Func`5", true, [
    "T1", "T2", "T3", "T4", 
    "TResult"
  ], 
  new JSIL.MethodSignature(new JSIL.GenericParameter("TResult", "System.Func`5"), [
      new JSIL.GenericParameter("T1", "System.Func`5"), new JSIL.GenericParameter("T2", "System.Func`5"), 
      new JSIL.GenericParameter("T3", "System.Func`5"), new JSIL.GenericParameter("T4", "System.Func`5")
    ]));

JSIL.DeclareNamespace("System.Linq");
JSIL.DeclareNamespace("System.Linq.Expressions");
/* enum System.Linq.Expressions.ExpressionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.ExpressionType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Add: 0, 
    AddChecked: 1, 
    And: 2, 
    AndAlso: 3, 
    ArrayLength: 4, 
    ArrayIndex: 5, 
    Call: 6, 
    Coalesce: 7, 
    Conditional: 8, 
    Constant: 9, 
    Convert: 10, 
    ConvertChecked: 11, 
    Divide: 12, 
    Equal: 13, 
    ExclusiveOr: 14, 
    GreaterThan: 15, 
    GreaterThanOrEqual: 16, 
    Invoke: 17, 
    Lambda: 18, 
    LeftShift: 19, 
    LessThan: 20, 
    LessThanOrEqual: 21, 
    ListInit: 22, 
    MemberAccess: 23, 
    MemberInit: 24, 
    Modulo: 25, 
    Multiply: 26, 
    MultiplyChecked: 27, 
    Negate: 28, 
    UnaryPlus: 29, 
    NegateChecked: 30, 
    New: 31, 
    NewArrayInit: 32, 
    NewArrayBounds: 33, 
    Not: 34, 
    NotEqual: 35, 
    Or: 36, 
    OrElse: 37, 
    Parameter: 38, 
    Power: 39, 
    Quote: 40, 
    RightShift: 41, 
    Subtract: 42, 
    SubtractChecked: 43, 
    TypeAs: 44, 
    TypeIs: 45, 
  }
);

/* class System.Linq.Expressions.Expression */ 

(function Expression$Members () {
  var $, $thisType;











































































































































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.Expression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AddChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "And", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "AndAlso", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ApplyTypeArgs", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreReferenceAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "indexes", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ArrayIndex", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ArrayLength", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm00.TypeRef("System.Reflection.MemberInfo"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Bind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $.Type, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Call", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), [
          $asm00.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(3, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "CheckMethod", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm03.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Coalesce", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Condition", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ConditionalExpression"), [
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "Constant", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ConstantExpression"), [$.Object, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Convert", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $.Type, $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ElementInit"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ElementInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ElementInit"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExclusiveOr", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm00.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Field", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindBestMethod", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Reflection.MethodInfo")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), 
          $jsilcore.TypeRef("System.Array", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Reflection.MethodInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindConversionOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Reflection.MethodInfo")]), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [
          $asm00.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $asm00.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.ExpressionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetActionType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    )
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetComparisonOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEqualityComparisonOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFuncType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    )
      .Parameter(0, "typeArgs", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedBinaryOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedCoercionOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodBasedUnaryOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.PropertyInfo"), [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedBinaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercion", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedCoercionOrThrow", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUserDefinedUnaryOperatorOrThrow", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThan", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreaterThanOrEqual", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasBuiltInEqualityOperator", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasIdentityPrimitiveOrNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Invoke", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.InvocationExpression"), [$.Type, $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsArithmetic", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsBool", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatible", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIdentityConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitBoxingConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitlyConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNullableConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitNumericConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsImplicitReferenceConversion", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsIntegerOrBool", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLiftingConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Reflection.MethodInfo"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullComparison", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNumeric", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSameOrSubclass", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnSigned", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidLiftedConditionalLogicalOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Reflection.ParameterInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    )
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"]), [$.Type, $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])], ["TDelegate"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm00.TypeRef("System.Type"), $.Type, 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    )
      .Parameter(2, "parameters", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), [
          $asm00.TypeRef("System.Type"), $.Type, 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Lambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), [$.Type, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    )
      .Parameter(1, "parameters", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeftShift", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThan", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "LessThanOrEqual", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm00.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm00.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Type])
        ])
    )
      .Parameter(2, "initializers", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ListInitExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "ListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ListInitExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeBinary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $.Type, $.Boolean, 
          $asm00.TypeRef("System.Reflection.MethodInfo"), $asm03.TypeRef("System.Linq.Expressions.LambdaExpression")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeMemberAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeUnary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.Type, 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm00.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm00.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberBind", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    )
      .Parameter(1, "bindings", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "MemberInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberInitExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Modulo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "MultiplyChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NegateChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [$asm00.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "arguments", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [$asm00.TypeRef("System.Reflection.ConstructorInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm00.TypeRef("System.Reflection.ConstructorInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [
          $asm00.TypeRef("System.Reflection.ConstructorInfo"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Reflection.MemberInfo")])
        ])
    )
      .Parameter(2, "members", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [$asm00.TypeRef("System.Reflection.ConstructorInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "New", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm00.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "bounds", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "NewArrayBounds", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm00.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$.Type])])
    )
      .Parameter(1, "initializers", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "NewArrayInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewArrayExpression"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Not", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "NotEqual", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $.Boolean, $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Or", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrElse", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parameter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ParameterExpression"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterIsAssignable", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.ParameterInfo"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Power", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm00.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Property", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "PropertyOrField", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberExpression"), [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Quote", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "RightShift", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "SubtractChecked", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), [
          $.Type, $.Type, 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeAs", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "TypeIs", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.TypeBinaryExpression"), [$.Type, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "UnaryPlus", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), [$.Type, $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateAnonymousTypeMember", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateArgumentTypes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateBoolArg", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallArgs", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCallInstanceType", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCoalesceArgTypes", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateConvertibleArg", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateElementInitAddMethodInfo", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateGettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIntegerArg", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateIntegerOrBoolArg", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLambdaArgs", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateLift", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateListInitArgs", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMemberInitArgs", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateMethodInfo", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.ConstructorInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])]), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNewArgs", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.ConstructorInfo"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNumericArg", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateOperator", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateParamswithOperandsOrThrow", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSameArgTypes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateSettableFieldOrPropertyMember", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MemberInfo"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateUserDefinedConditionalLogicOperator", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "nodeType", $asm03.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:true , Public:false}, "lambdaTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "funcTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "actionTypes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]));

    $.Property({Static:false, Public:true }, "NodeType", $asm03.TypeRef("System.Linq.Expressions.ExpressionType"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.BinaryExpression */ 

(function BinaryExpression$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.BinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Conversion", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.LambdaExpression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Left", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Right", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOperator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "left", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "right", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "conversion", $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "Left", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Right", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Conversion", $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ConditionalExpression */ 

(function ConditionalExpression$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConditionalExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfFalse", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IfTrue", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Test", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false}, "test", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "ifTrue", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "ifFalse", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Test", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfTrue", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "IfFalse", $asm03.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.MemberBindingType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.MemberBindingType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Assignment: 0, 
    MemberBinding: 1, 
    ListBinding: 2, 
  }
);

/* class System.Linq.Expressions.MemberBinding */ 

(function MemberBinding$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.MemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Linq.Expressions.MemberBindingType"), $asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BindingType", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.MemberBindingType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.MemberInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "type", $asm03.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Field({Static:false, Public:false}, "member", $asm00.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "BindingType", $asm03.TypeRef("System.Linq.Expressions.MemberBindingType"));

    $.Property({Static:false, Public:true }, "Member", $asm00.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberAssignment */ 

(function MemberAssignment$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberAssignment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MemberInfo"), $asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberMemberBinding */ 

(function MemberMemberBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberMemberBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]))
    );

    $.Field({Static:false, Public:false}, "bindings", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "Bindings", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberListBinding */ 

(function MemberListBinding$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.MemberBinding"), 
      Name: "System.Linq.Expressions.MemberListBinding", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]))
    );

    $.Field({Static:false, Public:false}, "initializers", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "Initializers", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ElementInit */ 

(function ElementInit$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ElementInit", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AddMethod", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "addMethod", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "$arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "AddMethod", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ConstantExpression */ 

(function ConstantExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ConstantExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "value", $.Object);

    $.Property({Static:false, Public:true }, "Value", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.InvocationExpression */ 

(function InvocationExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.InvocationExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false}, "$arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "lambda", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.LambdaExpression */ 

(function LambdaExpression$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.LambdaExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Delegate"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Body", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")]))
    );

    $.Field({Static:false, Public:false}, "parameters", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")]));

    $.Field({Static:false, Public:false}, "body", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Body", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Parameters", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Expression`1 */ 

(function Expression$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), 
      Name: "System.Linq.Expressions.Expression`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TDelegate"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($.GenericParameter("TDelegate"), null)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberExpression */ 

(function MemberExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Reflection.MemberInfo"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Member", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.MemberInfo"))
    );

    $.Field({Static:false, Public:false}, "expr", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "member", $asm00.TypeRef("System.Reflection.MemberInfo"));

    $.Property({Static:false, Public:true }, "Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Member", $asm00.TypeRef("System.Reflection.MemberInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MethodCallExpression */ 

(function MethodCallExpression$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MethodCallExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false}, "method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "obj", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "$arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Object", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewExpression */ 

(function NewExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.ConstructorInfo"), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.ConstructorInfo"), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("System.Reflection.MemberInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Arguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constructor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.ConstructorInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Members", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyNoThrow", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.PropertyInfo"), [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:false}, "$constructor", $asm00.TypeRef("System.Reflection.ConstructorInfo"));

    $.Field({Static:false, Public:false}, "$arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:false}, "members", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("System.Reflection.MemberInfo")]));

    $.Property({Static:false, Public:true }, "Constructor", $asm00.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:true }, "Arguments", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Members", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm00.TypeRef("System.Reflection.MemberInfo")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.NewArrayExpression */ 

(function NewArrayExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.NewArrayExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expressions", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]))
    );

    $.Field({Static:false, Public:false}, "expressions", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Property({Static:false, Public:true }, "Expressions", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.MemberInitExpression */ 

(function MemberInitExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.MemberInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Bindings", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.Field({Static:false, Public:false}, "newExpression", $asm03.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Field({Static:false, Public:false}, "bindings", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]));

    $.Property({Static:false, Public:true }, "NewExpression", $asm03.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Bindings", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ListInitExpression */ 

(function ListInitExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ListInitExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Linq.Expressions.NewExpression"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Initializers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewExpression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.NewExpression"))
    );

    $.Field({Static:false, Public:false}, "newExpression", $asm03.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Field({Static:false, Public:false}, "initializers", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]));

    $.Property({Static:false, Public:true }, "NewExpression", $asm03.TypeRef("System.Linq.Expressions.NewExpression"));

    $.Property({Static:false, Public:true }, "Initializers", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ParameterExpression */ 

(function ParameterExpression$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.ParameterExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.TypeBinaryExpression */ 

(function TypeBinaryExpression$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.TypeBinaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOperand", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "typeop", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "TypeOperand", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.UnaryExpression */ 

(function UnaryExpression$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.Expression"), 
      Name: "System.Linq.Expressions.UnaryExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BuildString", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLifted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsLiftedToNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Method", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.MethodInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Field({Static:false, Public:false}, "operand", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "Operand", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:true }, "Method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Property({Static:false, Public:true }, "IsLifted", $.Boolean);

    $.Property({Static:false, Public:true }, "IsLiftedToNull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions */ 

(function ReadOnlyCollectionExtensions$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ToReadOnlyCollection", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["T"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Expressions.ReadOnlyCollectionExtensions+DefaultReadOnlyCollection`1 */ 

(function DefaultReadOnlyCollection$b1$Members () {
  var $, $thisType;


  JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions+DefaultReadOnlyCollection`1", false, ["T"], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_Empty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:true , Public:false}, "_defaultCollection", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));

    $.GenericProperty({Static:true , Public:false}, "Empty", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionCompiler */ 

(function ExpressionCompiler$Members () {
  var $, $thisType;







































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddGlobal", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.Expressions.Expression`1", ["!!0"])], ["D"])
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Delegate"), [$asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileDynamicLambda", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Delegate"), [$asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Generate", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateAndAlso", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArgAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArgs", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+WriteBack")]), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Reflection.ParameterInfo")]), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArrayAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateArrayAssign", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinaryMethod", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinaryOp", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBinding", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MemberBinding"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCastToType", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCoalesce", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConditional", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstant", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ConstantExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstant", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $.Object, $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConstInt", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConvert", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateConvertToType", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateCreateDelegate", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateFieldAccess", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Reflection.FieldInfo"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetValue", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetValueOrDefault", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGlobalAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $asm00.TypeRef("System.Type"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHasValue", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHoistedLocalAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $.Int32, 
          $asm00.TypeRef("System.Type"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitHoistedLocals", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitLocal", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInvoke", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.InvocationExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLambda", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLambdaReferenceCoalesce", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLift", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedAndAlso", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBinaryArithmetic", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBinaryOp", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBooleanAnd", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedBooleanOr", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedOrElse", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiftedRelational", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateListInit", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]), 
          $.Boolean, $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateLoadExecutionScope", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLoadHoistedLocals", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.Emit.ILGenerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MemberExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm00.TypeRef("System.Reflection.MemberInfo"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Reflection.MemberInfo"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberAssignment", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MemberAssignment"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberInit", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]), 
          $.Boolean, $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberListBinding", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberMemberBinding", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMemberWriteBack", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.Expression"), 
          $asm00.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodAndAlso", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodCall", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.MethodCallExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodCall", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMethodOrElse", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNew", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.NewExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNewArray", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNonNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableCoalesce", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToNonNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToNonNullableStructConversion", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToNullableConversion", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullableToReferenceConversion", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNullEquality", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm03.TypeRef("System.Linq.Expressions.Expression"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateNumericConversion", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateOrElse", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateParameterAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ParameterExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateQuote", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateReferenceCoalesceWithoutConversion", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypeIs", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnaryMethod", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.UnaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnaryOp", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnliftedAndAlso", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnliftedBinaryOp", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateUnliftedEquality", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionType"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUnliftedOrElse", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserdefinedLiftedAndAlso", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserdefinedLiftedOrElse", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression"), 
          $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUserDefinedReferenceCoalesce", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateWriteBack", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+WriteBack")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetParameterTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsConvertible", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFloatingPoint", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsHoisted", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsInteger", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsLiftedLogicalBinaryOperator", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Reflection.MethodInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullable", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullConstant", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsUnsigned", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeStrongBoxType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareInitLocal", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnFromLocal", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), [
          $asm00.TypeRef("System.Reflection.Emit.ILGenerator"), $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+StackType"), 
          $asm00.TypeRef("System.Reflection.Emit.LocalBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UseVirtual", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:false}, "lambdas", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+LambdaInfo")]));

    $.Field({Static:false, Public:false}, "globals", $asm00.TypeRef("System.Collections.Generic.List`1", [$.Object]));

    $.Field({Static:false, Public:false}, "scope", $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+CompileScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionCompiler+LambdaInfo */ 

(function LambdaInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionCompiler+LambdaInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"), $asm00.TypeRef("System.Reflection.MethodInfo"), 
          $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]), $asm00.TypeRef("System.Collections.Generic.List`1", [$.Type])
        ])
    );

    $.Field({Static:false, Public:false}, "Lambda", $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Field({Static:false, Public:false}, "Lambdas", $asm00.TypeRef("System.Collections.Generic.List`1", [$.Type]));

    $.Field({Static:false, Public:false}, "Method", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "HoistedLocals", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionCompiler+CompileScope */ 

(function CompileScope$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionCompiler+CompileScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.Field({Static:false, Public:false}, "Parent", $.Type);

    $.Field({Static:false, Public:false}, "Lambda", $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Field({Static:false, Public:false}, "Locals", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression"), $asm00.TypeRef("System.Reflection.Emit.LocalBuilder")]));

    $.Field({Static:false, Public:false}, "HoistedLocals", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression"), $.Int32]));

    $.Field({Static:false, Public:false}, "HoistedLocalsVar", $asm00.TypeRef("System.Reflection.Emit.LocalBuilder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Linq.Expressions.ExpressionCompiler+StackType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Linq.Expressions.ExpressionCompiler+StackType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Value: 0, 
    Address: 1, 
  }
);

/* class System.Linq.Expressions.ExpressionVisitor */ 

(function ExpressionVisitor$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.ExpressionVisitor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Visit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.BinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBinding", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberBinding"), [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitBindingList", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")]), [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.MemberBinding")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConditional", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ConditionalExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializer", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.ElementInit"), [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitElementInitializerList", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")]), [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.ElementInit")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitExpressionList", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), [$asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitListInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ListInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAccess", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.MemberExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberAssignment", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberAssignment"), [$asm03.TypeRef("System.Linq.Expressions.MemberAssignment")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberInit", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.MemberInitExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberListBinding", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberListBinding"), [$asm03.TypeRef("System.Linq.Expressions.MemberListBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMemberMemberBinding", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding"), [$asm03.TypeRef("System.Linq.Expressions.MemberMemberBinding")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNew", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.NewExpression"), [$asm03.TypeRef("System.Linq.Expressions.NewExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitNewArray", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.NewArrayExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitTypeIs", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.TypeBinaryExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitUnary", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.UnaryExpression")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.ExpressionCompiler+Hoister */ 

(function Hoister$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.Expressions.ExpressionCompiler+Hoister", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Hoist", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+CompileScope"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitInvocation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.InvocationExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:false, Public:false}, "expressionScope", $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+CompileScope"));

    $.Field({Static:false, Public:false}, "current", $asm03.TypeRef("System.Linq.Expressions.LambdaExpression"));

    $.Field({Static:false, Public:false}, "locals", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Expressions.ExpressionCompiler+WriteBack */ 

(function WriteBack$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Linq.Expressions.ExpressionCompiler+WriteBack", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.Emit.LocalBuilder"), $asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.Field({Static:false, Public:true }, "loc", $asm00.TypeRef("System.Reflection.Emit.LocalBuilder"));

    $.Field({Static:false, Public:true }, "arg", $asm03.TypeRef("System.Linq.Expressions.Expression"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Strings */ 

(function Strings$Members () {
  var $, $thisType;




























































































  JSIL.MakeStaticClass("System.Linq.Expressions.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCastTypeToType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeCollectionType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchArrayType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($.String, [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentCannotBeOfTypeVoid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArray", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeArrayIndexType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeBoolean", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeCheckable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeComparable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeConvertible", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfo", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInstanceMember", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInt32", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeInteger", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeIntegerOrBoolean", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeNumeric", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentMustBeSingleDimensionalArrayType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ArgumentTypesMustMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_CoalesceUsedOnNonNullType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodNotAdd", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodStatic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ElementInitializerMethodWithZeroArgs", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ExpressionMayNotContainByrefParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfArgumentsForMembers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfConstructorArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfIndexes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaArguments", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfLambdaDeclarationParameters", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfMembersForGivenConstructor", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForAction", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncorrectNumberOfTypeArgsForFunc", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaParameterNotInScope", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LambdaTypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ListInitializerWithZeroMembers", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParameterNotCaptured", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnexpectedCoalesceOperator", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnhandledBinding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnknownBindingType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveConsistentTypes", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledCall", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertFromDecimal", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertToDecimal", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledMemberAccess", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArray", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeComparable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeConvertible", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInteger", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeInt32", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeCheckable", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeIntegerOrBoolean", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeNumeric", $.String);

    $.Property({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String);

    $.Property({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String);

    $.Property({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String);

    $.Property({Static:true , Public:false}, "LambdaParameterNotInScope", $.String);

    $.Property({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String);

    $.Property({Static:true , Public:false}, "ParameterNotCaptured", $.String);

    $.Property({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String);

    $.Property({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String);

    $.Property({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String);

    $.Property({Static:true , Public:false}, "UnhandledBinding", $.String);

    $.Property({Static:true , Public:false}, "UnknownBindingType", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String);

    $.Property({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String);

    $.Property({Static:true , Public:false}, "ExpressionMayNotContainByrefParameters", $.String);

    $.Property({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.Error */ 

(function Error$Members () {
  var $, $thisType;































































































  JSIL.MakeStaticClass("System.Linq.Expressions.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeBoolean", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeCheckable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeComparable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeConvertible", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInstanceMember", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInt32", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeInteger", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeIntegerOrBoolean", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeNumeric", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentTypesMustMatch", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BinaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CannotCastTypeToType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "CoalesceUsedOnNonNullType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CoercionOperatorNotDefined", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodNotAdd", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodStatic", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionMayNotContainByrefParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeCannotInitializeCollectionType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchArrayType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Object, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExpressionTypeNotInvocable", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "FieldNotDefinedForType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfIndexes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IncorrectTypeForTypeAs", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCast", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaParameterNotInScope", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ListInitializerWithZeroMembers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "LogicalOperatorMustHaveConsistentTypes", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MemberNotFieldOrProperty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodContainsGenericParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodDoesNotExistOnType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodIsGeneric", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotDefinedForType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodNotPropertyAccessor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "MethodWithMoreThanOneMatch", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotAMemberOfType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "OperatorNotImplementedForType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParameterNotCaptured", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveGetter", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyDoesNotHaveSetter", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "PropertyNotDefinedForType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeContainsGenericParameters", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeIsGeneric", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeMissingDefaultConstructor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeNotIEnumerable", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeParameterIsNotDelegate", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnaryOperatorNotDefined", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedCoalesceOperator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinary", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBinding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledBindingType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledCall", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvert", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertFromDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledConvertToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledExpressionType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledMemberAccess", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnhandledUnary", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnknownBindingType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable", true, [], function ($) {
    $.Method({}, "get_Expression", JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression")));
    $.Method({}, "get_ElementType", JSIL.MethodSignature.Return($asm00.TypeRef("System.Type")));
    $.Method({}, "get_Provider", JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.IQueryProvider")));
    $.Property({}, "Expression");
    $.Property({}, "ElementType");
    $.Property({}, "Provider");
  }, [$asm00.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IQueryable`1", true, ["T"], function ($) {
  }, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IQueryable`1")]), $asm03.TypeRef("System.Linq.IQueryable"), $asm00.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IQueryProvider */ 

JSIL.MakeInterface(
  "System.Linq.IQueryProvider", true, [], function ($) {
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable"), [$asm03.TypeRef("System.Linq.Expressions.Expression")]));
    $.Method({}, "CreateQuery", new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.Expressions.Expression")], ["TElement"]));
    $.Method({}, "Execute", new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Linq.Expressions.Expression")]));
    $.Method({}, "Execute", new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.Expressions.Expression")], ["TResult"]));
  }, []);

/* interface System.Linq.IOrderedQueryable */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable", true, [], function ($) {
  }, [$asm03.TypeRef("System.Linq.IQueryable"), $asm00.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IOrderedQueryable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedQueryable`1", true, ["T"], function ($) {
  }, [$asm03.TypeRef("System.Linq.IQueryable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1")]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("T", "System.Linq.IOrderedQueryable`1")]), $asm03.TypeRef("System.Linq.IOrderedQueryable"), $asm03.TypeRef("System.Linq.IQueryable"), $asm00.TypeRef("System.Collections.IEnumerable")]);

/* class System.Linq.Queryable */ 

(function Queryable$Members () {
  var $, $thisType;




























































































































  JSIL.MakeStaticClass("System.Linq.Queryable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
              "!!0", "!!0", 
              "!!0"
            ])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!1", 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!1", "!!0", 
                "!!1"
              ])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!1", "!!2"])])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsQueryable", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable"), [$asm00.TypeRef("System.Collections.IEnumerable")])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Int32])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Int64])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Single])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Double])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Decimal")])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0", 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSourceExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
                "!!2"
              ])]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
                "!!3"
              ])]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
                "!!3"
              ])]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!3"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!2"])]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!1", "!!2"])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!3"
              ])]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable")], ["TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              "!!1"
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!1"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", $.Int32, 
                $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
              ])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!2"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])]), 
          $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
                "!!0", "!!1", 
                "!!2"
              ])])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Int32])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Int64])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Single])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", [$.Double])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Decimal")])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm03.TypeRef("System.Linq.IQueryable`1", [$asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Int32])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int32])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Int64])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int64])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Single])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Single])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Double])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Double])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IOrderedQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"])]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), $asm03.TypeRef("System.Linq.Expressions.Expression`1", [$asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $.Boolean
            ])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Enumerable */ 

(function Enumerable$Members () {
  var $, $thisType;










































































































































































































  JSIL.MakeStaticClass("System.Linq.Enumerable", true, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", "!!0", 
            "!!0"
          ])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!1", [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm03.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ])
        ], ["TSource", "TAccumulate"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Aggregate", 
      new JSIL.MethodSignature("!!2", [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!1", 
          $asm03.TypeRef("System.Func`3", [
              "!!1", "!!0", 
              "!!1"
            ]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"])
        ], ["TSource", "TAccumulate", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "All", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Any", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "AsEnumerable", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Decimal")])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Average", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Cast", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CastIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombinePredicates", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Func`2", ["!!0", $.Boolean]), [$asm03.TypeRef("System.Func`2", ["!!0", $.Boolean]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CombineSelectors", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), [$asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"])], ["TSource", "TMiddle", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Concat", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ConcatIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0", 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "DefaultIfEmpty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DefaultIfEmptyIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), "!!0"], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Distinct", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DistinctIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ElementAt", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ElementAtOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Empty", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), null, ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Except", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExceptIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "First", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FirstOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!0"])]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", ["!!1", "!!2"])]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`3", [
              "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
              "!!2"
            ]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupBy", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`3", [
              "!!1", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), 
              "!!3"
            ]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "GroupJoin", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GroupJoinIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
              "!!3"
            ]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Intersect", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "IntersectIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Join", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "JoinIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!3"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm03.TypeRef("System.Func`2", ["!!1", "!!2"]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!3"
            ]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!2"])
        ], ["TOuter", "TInner", "TKey", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Last", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LastOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "LongCount", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Decimal")])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Max", 
      new JSIL.MethodSignature("!!1", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Decimal")])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Min", 
      new JSIL.MethodSignature("!!1", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OfType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OfTypeIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.IEnumerable")], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "OrderByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Range", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "RangeIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Repeat", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "RepeatIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), ["!!0", $.Int32], ["TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Reverse", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            "!!1"
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SelectMany", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
          ])], ["TSource", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
              "!!0", $.Int32, 
              $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])
            ]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SelectManyIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!1"])]), 
          $asm03.TypeRef("System.Func`3", [
              "!!0", "!!1", 
              "!!2"
            ])
        ], ["TSource", "TCollection", "TResult"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SequenceEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Single", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SingleOrDefault", 
      new JSIL.MethodSignature("!!0", [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Skip", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "SkipWhile", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "SkipWhileIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int32])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int64])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Int64])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Single])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Single])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Double])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$.Double])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Decimal")])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int32])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int32]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int32])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Int64])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Int64]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Int64])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Single])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Single]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Single])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Double])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Double]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$.Double])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Decimal")])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Sum", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $asm00.TypeRef("System.Nullable`1", [$asm00.TypeRef("System.Decimal")])])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Take", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $.Int32], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "TakeWhile", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "TakeWhileIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenBy", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ThenByDescending", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), [
          $asm03.TypeRef("System.Linq.IOrderedEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToDictionary", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.Dictionary`2", ["!!1", "!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToList", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.List`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"])], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.ILookup`2", ["!!1", "!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "ToLookup", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.ILookup`2", ["!!1", "!!2"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", "!!1"]), 
          $asm03.TypeRef("System.Func`2", ["!!0", "!!2"]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!1"])
        ], ["TSource", "TKey", "TElement"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnionIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", ["!!0"])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.Boolean])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    )
      .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WhereIterator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`3", [
            "!!0", $.Int32, 
            $.Boolean
          ])], ["TSource"])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("System.Runtime.CompilerServices.ExtensionAttribute"));

})();

/* class System.Linq.Enumerable+Iterator`1 */ 

(function Iterator$b1$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+Iterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "threadId", $.Int32);

    $.Field({Static:false, Public:false}, "state", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.IDisposable"), 
      /* 4 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereEnumerableIterator`1 */ 

(function WhereEnumerableIterator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereEnumerableIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereEnumerableIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereArrayIterator`1 */ 

(function WhereArrayIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereArrayIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereArrayIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereListIterator`1 */ 

(function WhereListIterator$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TSource", "System.Linq.Enumerable+WhereListIterator`1")]), 
      Name: "System.Linq.Enumerable+WhereListIterator`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TSource")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), "!!0"])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "enumerator", $asm00.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectEnumerableIterator`2 */ 

(function WhereSelectEnumerableIterator$b2$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectEnumerableIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectEnumerableIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectArrayIterator`2 */ 

(function WhereSelectArrayIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectArrayIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectArrayIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+WhereSelectListIterator`2 */ 

(function WhereSelectListIterator$b2$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [new JSIL.GenericParameter("TResult", "System.Linq.Enumerable+WhereSelectListIterator`2")]), 
      Name: "System.Linq.Enumerable+WhereSelectListIterator`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]), 
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Enumerable+Iterator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TResult"), "!!0"])], ["TResult2"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Where", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), [$asm03.TypeRef("System.Func`2", [$.GenericParameter("TResult"), $.Boolean])])
    );

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.List`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:false}, "selector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TResult")]));

    $.Field({Static:false, Public:false}, "enumerator", $asm00.TypeRef("System.Collections.Generic.List`1+Enumerator", [$.GenericParameter("TSource")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Enumerable+<WhereIterator>d__0`1 */ 

(function $lWhereIterator$gd__0$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<WhereIterator>d__0`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "predicate", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$lindex$g5__1", $.Int32);

    $.Field({Static:false, Public:true }, "$lelement$g5__2", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap3", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectIterator>d__7`2 */ 

(function $lSelectIterator$gd__7$b2$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectIterator>d__7`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyb", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "selector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$lindex$g5__8", $.Int32);

    $.Field({Static:false, Public:true }, "$lelement$g5__9", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrapa", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClassf`1 */ 

(function $l$gc__DisplayClassf$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClassf`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "$lCombinePredicates$gb__e", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "predicate1", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "predicate2", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<>c__DisplayClass12`3 */ 

(function $l$gc__DisplayClass12$b3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<>c__DisplayClass12`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TMiddle", "TResult"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "$lCombineSelectors$gb__11", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), [$.GenericParameter("TSource")])
    );

    $.Field({Static:false, Public:true }, "selector1", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TMiddle")]));

    $.Field({Static:false, Public:true }, "selector2", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TMiddle"), $.GenericParameter("TResult")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__14`2 */ 

(function $lSelectManyIterator$gd__14$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__14`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally18", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally1a", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "selector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])]));

    $.Field({Static:false, Public:true }, "$lelement$g5__15", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$lsubElement$g5__16", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap17", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g7__wrap19", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__1d`2 */ 

(function $lSelectManyIterator$gd__1d$b2$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__1d`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally22", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally24", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "selector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__selector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")])
        ]));

    $.Field({Static:false, Public:true }, "$lindex$g5__1e", $.Int32);

    $.Field({Static:false, Public:true }, "$lelement$g5__1f", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$lsubElement$g5__20", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap21", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g7__wrap23", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__27`3 */ 

(function $lSelectManyIterator$gd__27$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__27`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2c", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally2e", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "collectionSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__collectionSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])
        ]));

    $.Field({Static:false, Public:true }, "resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$lindex$g5__28", $.Int32);

    $.Field({Static:false, Public:true }, "$lelement$g5__29", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$lsubElement$g5__2a", $.GenericParameter("TCollection"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap2b", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g7__wrap2d", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SelectManyIterator>d__31`3 */ 

(function $lSelectManyIterator$gd__31$b3$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SelectManyIterator>d__31`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TCollection", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally35", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally37", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "collectionSelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])]));

    $.Field({Static:false, Public:true }, "$l$g3__collectionSelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TCollection")])]));

    $.Field({Static:false, Public:true }, "resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.GenericParameter("TCollection"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$lelement$g5__32", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$lsubElement$g5__33", $.GenericParameter("TCollection"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap34", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g7__wrap36", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TCollection")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeIterator>d__3a`1 */ 

(function $lTakeIterator$gd__3a$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeIterator>d__3a`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally3d", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:true }, "$lelement$g5__3b", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap3c", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeWhileIterator>d__40`1 */ 

(function $lTakeWhileIterator$gd__40$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeWhileIterator>d__40`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally43", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$lelement$g5__41", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap42", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<TakeWhileIterator>d__46`1 */ 

(function $lTakeWhileIterator$gd__46$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<TakeWhileIterator>d__46`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4a", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "predicate", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$lindex$g5__47", $.Int32);

    $.Field({Static:false, Public:true }, "$lelement$g5__48", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap49", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipIterator>d__4d`1 */ 

(function $lSkipIterator$gd__4d$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipIterator>d__4d`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally4f", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:true }, "$le$g5__4e", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipWhileIterator>d__52`1 */ 

(function $lSkipWhileIterator$gd__52$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipWhileIterator>d__52`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally56", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.Boolean]));

    $.Field({Static:false, Public:true }, "$lyielding$g5__53", $.Boolean);

    $.Field({Static:false, Public:true }, "$lelement$g5__54", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap55", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<SkipWhileIterator>d__59`1 */ 

(function $lSkipWhileIterator$gd__59$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<SkipWhileIterator>d__59`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally5e", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "predicate", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__predicate", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TSource"), $.Int32, 
          $.Boolean
        ]));

    $.Field({Static:false, Public:true }, "$lindex$g5__5a", $.Int32);

    $.Field({Static:false, Public:true }, "$lyielding$g5__5b", $.Boolean);

    $.Field({Static:false, Public:true }, "$lelement$g5__5c", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap5d", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<JoinIterator>d__61`4 */ 

(function $lJoinIterator$gd__61$b4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<JoinIterator>d__61`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally67", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "outer", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "$l$g3__outer", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "inner", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$l$g3__inner", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "outerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__outerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "innerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__innerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $.GenericParameter("TInner"), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$llookup$g5__62", $asm03.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$litem$g5__63", $.GenericParameter("TOuter"));

    $.Field({Static:false, Public:true }, "$lg$g5__64", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$li$g5__65", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g7__wrap66", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<GroupJoinIterator>d__6a`4 */ 

(function $lGroupJoinIterator$gd__6a$b4$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<GroupJoinIterator>d__6a`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TOuter", "TInner", "TKey", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally6e", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "outer", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "$l$g3__outer", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TOuter")]));

    $.Field({Static:false, Public:true }, "inner", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$l$g3__inner", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "outerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__outerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TOuter"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "innerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__innerKeySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TInner"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TOuter"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TInner")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:true }, "$llookup$g5__6b", $asm03.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TInner")]));

    $.Field({Static:false, Public:true }, "$litem$g5__6c", $.GenericParameter("TOuter"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap6d", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TOuter")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ConcatIterator>d__71`1 */ 

(function $lConcatIterator$gd__71$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ConcatIterator>d__71`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally75", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally77", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lelement$g5__72", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$lelement$g5__73", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap74", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g7__wrap76", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DistinctIterator>d__7a`1 */ 

(function $lDistinctIterator$gd__7a$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DistinctIterator>d__7a`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally7e", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lset$g5__7b", $asm03.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lelement$g5__7c", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap7d", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<UnionIterator>d__81`1 */ 

(function $lUnionIterator$gd__81$b1$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<UnionIterator>d__81`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally86", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally88", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lset$g5__82", $asm03.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lelement$g5__83", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$lelement$g5__84", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap85", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g7__wrap87", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<IntersectIterator>d__8b`1 */ 

(function $lIntersectIterator$gd__8b$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<IntersectIterator>d__8b`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally8f", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lset$g5__8c", $asm03.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lelement$g5__8d", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap8e", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ExceptIterator>d__92`1 */ 

(function $lExceptIterator$gd__92$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ExceptIterator>d__92`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finally96", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__first", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__second", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lset$g5__93", $asm03.TypeRef("System.Linq.Set`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lelement$g5__94", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g7__wrap95", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<ReverseIterator>d__99`1 */ 

(function $lReverseIterator$gd__99$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<ReverseIterator>d__99`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$lbuffer$g5__9a", $asm03.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$li$g5__9b", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<DefaultIfEmptyIterator>d__9e`1 */ 

(function $lDefaultIfEmptyIterator$gd__9e$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<DefaultIfEmptyIterator>d__9e`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallya0", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTSource$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TSource"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:true }, "defaultValue", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$l$g3__defaultValue", $.GenericParameter("TSource"));

    $.Field({Static:false, Public:true }, "$le$g5__9f", $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTSource$g.Current", $.GenericParameter("TSource"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TSource")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<OfTypeIterator>d__a3`1 */ 

(function $lOfTypeIterator$gd__a3$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<OfTypeIterator>d__a3`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallya7", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$lobj$g5__a4", $.Object);

    $.Field({Static:false, Public:true }, "$l$g7__wrapa5", $asm00.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:true }, "$l$g7__wrapa6", $asm00.TypeRef("System.IDisposable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<CastIterator>d__aa`1 */ 

(function $lCastIterator$gd__aa$b1$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<CastIterator>d__aa`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "$l$gm__Finallyae", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "source", $asm00.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$l$g3__source", $asm00.TypeRef("System.Collections.IEnumerable"));

    $.Field({Static:false, Public:true }, "$lobj$g5__ab", $.Object);

    $.Field({Static:false, Public:true }, "$l$g7__wrapac", $asm00.TypeRef("System.Collections.IEnumerator"));

    $.Field({Static:false, Public:true }, "$l$g7__wrapad", $asm00.TypeRef("System.IDisposable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<RangeIterator>d__b1 */ 

(function $lRangeIterator$gd__b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<RangeIterator>d__b1", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Int32$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]))
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm00.TypeRef("System.Int32")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.get_Current", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm00.TypeRef("System.Int32")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.Int32);

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "start", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__start", $.Int32);

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:true }, "$li$g5__b2", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Int32$g.Current", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.Int32]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.Int32]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Enumerable+<RepeatIterator>d__b5`1 */ 

(function $lRepeatIterator$gd__b5$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Enumerable+<RepeatIterator>d__b5`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:true }, "$l$g3__element", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:true }, "count", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g3__count", $.Int32);

    $.Field({Static:false, Public:true }, "$li$g5__b6", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EmptyEnumerable`1 */ 

(function EmptyEnumerable$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.EmptyEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), null)
    );

    $.Field({Static:true , Public:false}, "instance", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.IdentityFunction`1 */ 

(function IdentityFunction$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.IdentityFunction`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "$lget_Instance$gb__0", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), [$.GenericParameter("TElement")])
    )
      .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Instance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]), null)
    );

    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate1", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]))
      .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.GenericProperty({Static:true , Public:true }, "Instance", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Linq.IOrderedEnumerable`1 */ 

JSIL.MakeInterface(
  "System.Linq.IOrderedEnumerable`1", true, ["TElement"], function ($) {
    $.Method({}, "CreateOrderedEnumerable", new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), [
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), "!!0"]), $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"]));
  }, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IOrderedEnumerable`1")]), $asm00.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.IGrouping`2 */ 

JSIL.MakeInterface(
  "System.Linq.IGrouping`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Key", new JSIL.MethodSignature($.GenericParameter("TKey"), null));
    $.Property({}, "Key");
  }, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.IGrouping`2")]), $asm00.TypeRef("System.Collections.IEnumerable")]);

/* interface System.Linq.ILookup`2 */ 

JSIL.MakeInterface(
  "System.Linq.ILookup`2", true, ["TKey", "TElement"], function ($) {
    $.Method({}, "get_Count", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Item", new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")]));
    $.Method({}, "Contains", new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")]));
    $.Property({}, "Count");
    $.Property({}, "Item");
  }, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [new JSIL.GenericParameter("TKey", "System.Linq.ILookup`2"), new JSIL.GenericParameter("TElement", "System.Linq.ILookup`2")])]), $asm00.TypeRef("System.Collections.IEnumerable")])
  .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* class System.Linq.Lookup`2 */ 

(function Lookup$b2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ApplyResultSelector", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), [$asm03.TypeRef("System.Func`3", [
            $.GenericParameter("TKey"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
            "!!0"
          ])], ["TResult"])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"]), $asm03.TypeRef("System.Func`2", ["!!0", $.GenericParameter("TKey")]), 
          $asm03.TypeRef("System.Func`2", ["!!0", $.GenericParameter("TElement")]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ], ["TSource"])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateForJoin", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetGrouping", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), [$.GenericParameter("TKey"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TKey")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "groupings", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "lastGrouping", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Linq.ILookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 2 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Linq.Lookup`2+Grouping */ 

(function Grouping$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+Grouping", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      new JSIL.MethodSignature($.GenericParameter("TKey"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("TElement")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.get_Item", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), [$.Int32])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TElement")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "RemoveAt");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("TElement")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), "set_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "key", $.GenericParameter("TKey"));

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "hashNext", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "next", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.GenericParameter("TKey"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lTElement$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IList$lTElement$g.Item", $.GenericParameter("TElement"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("TElement")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 4 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Lookup`2+Grouping+<GetEnumerator>d__7 */ 

(function $lGetEnumerator$gd__7$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+Grouping+<GetEnumerator>d__7", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$li$g5__8", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2+<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.get_Current", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm03.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$lg$g5__1", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lSystem.Linq.IGrouping$lTKey$cmTElement$g$g.Current", $asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Lookup`2+<ApplyResultSelector>d__3`1 */ 

(function $lApplyResultSelector$gd__3$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Lookup`2+<ApplyResultSelector>d__3`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lTResult$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TResult"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TResult"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:false}, "$l$gl__initialThreadId", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm03.TypeRef("System.Linq.Lookup`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$l$g3__resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.Field({Static:false, Public:true }, "$lg$g5__4", $asm03.TypeRef("System.Linq.Lookup`2+Grouping", [$.GenericParameter("TKey"), $.GenericParameter("TElement")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTResult$g.Current", $.GenericParameter("TResult"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 4 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.Set`1 */ 

(function Set$b1$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Set`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("TElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Resize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "slots", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Linq.Set`1+Slot", [$.GenericParameter("TElement")])]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "freeList", $.Int32);

    $.Field({Static:false, Public:false}, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TElement")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Set`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Linq.Set`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`4 */ 

(function GroupedEnumerable$b4$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`4", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement", "TResult"], 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), 
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm03.TypeRef("System.Func`3", [
              $.GenericParameter("TKey"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
              $.GenericParameter("TResult")
            ]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TResult")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "elementSelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "resultSelector", $asm03.TypeRef("System.Func`3", [
          $.GenericParameter("TKey"), $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
          $.GenericParameter("TResult")
        ]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TResult")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.GroupedEnumerable`3 */ 

(function GroupedEnumerable$b3$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.GroupedEnumerable`3", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TSource", "TKey", "TElement"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]), 
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TSource")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "elementSelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TSource"), $.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("TKey")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm03.TypeRef("System.Linq.IGrouping`2", [$.GenericParameter("TKey"), $.GenericParameter("TElement")])]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1 */ 

(function OrderedEnumerable$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]), [$asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IOrderedEnumerable$lTElement$g.CreateOrderedEnumerable", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), [
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), "!!0"]), $asm00.TypeRef("System.Collections.Generic.IComparer`1", ["!!0"]), 
          $.Boolean
        ], ["TKey"])
    )
      .Overrides($asm03.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), "CreateOrderedEnumerable");

    $.Field({Static:false, Public:false}, "source", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Linq.IOrderedEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), 
      /* 2 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.OrderedEnumerable`1+<GetEnumerator>d__0 */ 

(function $lGetEnumerator$gd__0$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.OrderedEnumerable`1+<GetEnumerator>d__0", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.get_Current", 
      new JSIL.MethodSignature($.GenericParameter("TElement"), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset")
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerHiddenAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.Field({Static:false, Public:false}, "$l$g2__current", $.GenericParameter("TElement"));

    $.Field({Static:false, Public:false}, "$l$g1__state", $.Int32);

    $.Field({Static:false, Public:true }, "$l$g4__this", $asm03.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$lbuffer$g5__1", $asm03.TypeRef("System.Linq.Buffer`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$lsorter$g5__2", $asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:true }, "$lmap$g5__3", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "$li$g5__4", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerator$lTElement$g.Current", $.GenericParameter("TElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("TElement")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerator"), 
      /* 2 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.OrderedEnumerable`2 */ 

(function OrderedEnumerable$b2$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.OrderedEnumerable`1", [new JSIL.GenericParameter("TElement", "System.Linq.OrderedEnumerable`2")]), 
      Name: "System.Linq.OrderedEnumerable`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")]), $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), 
          $asm00.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEnumerableSorter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]), [$asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])])
    );

    $.Field({Static:false, Public:false}, "parent", $asm03.TypeRef("System.Linq.OrderedEnumerable`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "keySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm00.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "descending", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`1 */ 

(function EnumerableSorter$b1$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableSorter`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "QuickSort", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Sort", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableSorter`2 */ 

(function EnumerableSorter$b2$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.EnumerableSorter`1", [new JSIL.GenericParameter("TElement", "System.Linq.EnumerableSorter`2")]), 
      Name: "System.Linq.EnumerableSorter`2", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["TElement", "TKey"], 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]), $asm00.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]), 
          $.Boolean, $asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CompareKeys", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ComputeKeys", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "keySelector", $asm03.TypeRef("System.Func`2", [$.GenericParameter("TElement"), $.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm00.TypeRef("System.Collections.Generic.IComparer`1", [$.GenericParameter("TKey")]));

    $.Field({Static:false, Public:false}, "descending", $.Boolean);

    $.Field({Static:false, Public:false}, "next", $asm03.TypeRef("System.Linq.EnumerableSorter`1", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TKey")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Linq.Buffer`1 */ 

(function Buffer$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Linq.Buffer`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["TElement"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("TElement")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]), null)
    );

    $.Field({Static:false, Public:false}, "items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("TElement")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView`1 */ 

(function SystemCore_EnumerableDebugView$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugViewEmptyException */ 

(function SystemCore_EnumerableDebugViewEmptyException$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.Linq.SystemCore_EnumerableDebugViewEmptyException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Empty", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true }, "Empty", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SystemCore_EnumerableDebugView */ 

(function SystemCore_EnumerableDebugView$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.SystemCore_EnumerableDebugView", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.Field({Static:false, Public:false}, "enumerable", $asm00.TypeRef("System.Collections.IEnumerable"))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "cachedCollection", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Field({Static:false, Public:false}, "count", $.Int32)
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.Never]; });

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.Object]))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableQuery */ 

(function EnumerableQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Collections.IEnumerable")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable"), [$asm00.TypeRef("System.Type"), $asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm00.TypeRef("System.Collections.IEnumerable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableQuery`1 */ 

(function EnumerableQuery$b1$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.EnumerableQuery"), 
      Name: "System.Linq.EnumerableQuery`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Enumerable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerable"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_ElementType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryable"), "get_ElementType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Expression", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.Expressions.Expression"))
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryable"), "get_Expression");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.get_Provider", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Linq.IQueryProvider"))
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryable"), "get_Provider");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable"), [$asm03.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryProvider"), "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.CreateQuery", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.IQueryable`1", ["!!0"]), [$asm03.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryProvider"), "CreateQuery");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature($.Object, [$asm03.TypeRef("System.Linq.Expressions.Expression")])
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryProvider"), "Execute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryProvider.Execute", 
      new JSIL.MethodSignature("!!0", [$asm03.TypeRef("System.Linq.Expressions.Expression")], ["S"])
    )
      .Overrides($asm03.TypeRef("System.Linq.IQueryProvider"), "Execute");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "enumerable", $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Provider", $asm03.TypeRef("System.Linq.IQueryProvider"));

    $.Property({Static:false, Public:false, Virtual:true }, "Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "Enumerable", $asm00.TypeRef("System.Collections.IEnumerable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.Expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Linq.IQueryable.ElementType", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Linq.IOrderedQueryable`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm03.TypeRef("System.Linq.IQueryable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm03.TypeRef("System.Linq.IOrderedQueryable"), 
      /* 3 */ $asm03.TypeRef("System.Linq.IQueryable"), 
      /* 4 */ $asm03.TypeRef("System.Linq.IQueryProvider"), 
      /* 5 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 6 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableExecutor */ 

(function EnumerableExecutor$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableExecutor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      JSIL.MethodSignature.Return($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableExecutor`1 */ 

(function EnumerableExecutor$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.EnumerableExecutor"), 
      Name: "System.Linq.EnumerableExecutor`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Linq.Expressions.Expression"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Execute", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExecuteBoxed", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "expression", $asm03.TypeRef("System.Linq.Expressions.Expression"));

    $.Field({Static:false, Public:false}, "func", $asm03.TypeRef("System.Func`1", [$.GenericParameter("T")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter */ 

(function EnumerableRewriter$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Linq.EnumerableRewriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "$lFindEnumerableMethod$gb__0", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Reflection.MethodInfo")])
    )
      .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ArgsMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindEnumerableMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [
          $.String, $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])
        ])
    )
      .Parameter(2, "typeArgs", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "FindMethod", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [
          $asm00.TypeRef("System.Type"), $.String, 
          $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), 
          $asm00.TypeRef("System.Reflection.BindingFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedArgs", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]), [$asm00.TypeRef("System.Reflection.MethodInfo"), $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupQuotedExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm00.TypeRef("System.Type"), $asm03.TypeRef("System.Linq.Expressions.Expression")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPublicType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StripExpression", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitConstant", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ConstantExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitLambda", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.LambdaExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitMethodCall", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.MethodCallExpression")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:true , Public:false}, "_seqMethods", $asm03.TypeRef("System.Linq.ILookup`2", [$.String, $asm00.TypeRef("System.Reflection.MethodInfo")]));

    $.Field({Static:true , Public:false}, "CS$$l$g9__CachedAnonymousMethodDelegate2", $asm03.TypeRef("System.Func`2", [$asm00.TypeRef("System.Reflection.MethodInfo"), $.String]))
      .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.EnumerableRewriter+<>c__DisplayClass3 */ 

(function $l$gc__DisplayClass3$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c__DisplayClass3", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "$lFindEnumerableMethod$gb__1", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "args", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.EnumerableRewriter+<>c__DisplayClass7 */ 

(function $l$gc__DisplayClass7$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.EnumerableRewriter+<>c__DisplayClass7", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "$lFindMethod$gb__5", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "$lFindMethod$gb__6", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.MethodInfo")])
    );

    $.Field({Static:false, Public:true }, "$name", $.String);

    $.Field({Static:false, Public:true }, "args", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Linq.Expressions.Expression")]));

    $.Field({Static:false, Public:true }, "typeArgs", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class System.Linq.TypeHelper */ 

(function TypeHelper$Members () {
  var $, $thisType;







  JSIL.MakeStaticClass("System.Linq.TypeHelper", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FindGenericType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetElementType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNonNullableType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsEnumerableType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKindOfGeneric", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNullableType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Strings */ 

(function Strings$Members () {
  var $, $thisType;

















  JSIL.MakeStaticClass("System.Linq.Strings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyEnumerable", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IncompatibleElementTypes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MoreThanOneMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NoMatch", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_OwningTeam", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($.String, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.Property({Static:true , Public:false}, "OwningTeam", $.String);

    $.Property({Static:true , Public:false}, "IncompatibleElementTypes", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneElement", $.String);

    $.Property({Static:true , Public:false}, "MoreThanOneMatch", $.String);

    $.Property({Static:true , Public:false}, "NoElements", $.String);

    $.Property({Static:true , Public:false}, "NoMatch", $.String);

    $.Property({Static:true , Public:false}, "EmptyEnumerable", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Error */ 

(function Error$Members () {
  var $, $thisType;



















  JSIL.MakeStaticClass("System.Linq.Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotLambda", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotSequence", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNotValid", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentNull", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ArgumentOutOfRange", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IncompatibleElementTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneElement", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "MoreThanOneMatch", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoElements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMatch", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NotImplemented", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:true , Public:false}, "NotSupported", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
/* class System.Runtime.CompilerServices.ExtensionAttribute */ 

(function ExtensionAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Runtime.CompilerServices.ExtensionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Assembly", "Class", "Method")]; });

})();

/* interface System.Runtime.CompilerServices.IStrongBox */ 

JSIL.MakeInterface(
  "System.Runtime.CompilerServices.IStrongBox", true, [], function ($) {
    $.Method({}, "get_Value", JSIL.MethodSignature.Return($.Object));
    $.Method({}, "set_Value", JSIL.MethodSignature.Action($.Object));
    $.Property({}, "Value");
  }, []);

/* class System.Runtime.CompilerServices.StrongBox`1 */ 

(function StrongBox$b1$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.StrongBox`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.get_Value", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm03.TypeRef("System.Runtime.CompilerServices.IStrongBox"), "get_Value");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.set_Value", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm03.TypeRef("System.Runtime.CompilerServices.IStrongBox"), "set_Value");

    $.Field({Static:false, Public:true }, "Value", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Runtime.CompilerServices.IStrongBox.Value", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm03.TypeRef("System.Runtime.CompilerServices.IStrongBox")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.ExecutionScope */ 

(function ExecutionScope$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Runtime.CompilerServices.ExecutionScope", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+LambdaInfo"), 
          $jsilcore.TypeRef("System.Array", [$.Object]), $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateDelegate", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Delegate"), [$.Int32, $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateHoistedLocals", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Object]))
    );

    $.ExternalMethod({Static:false, Public:true }, "IsolateExpression", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.Expression"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.Field({Static:false, Public:true }, "Parent", $.Type);

    $.Field({Static:false, Public:true }, "Globals", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:true }, "Locals", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "Lambda", $asm03.TypeRef("System.Linq.Expressions.ExpressionCompiler+LambdaInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Runtime.CompilerServices.ExecutionScope+ExpressionIsolator */ 

(function ExpressionIsolator$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Linq.Expressions.ExpressionVisitor"), 
      Name: "System.Runtime.CompilerServices.ExecutionScope+ExpressionIsolator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Runtime.CompilerServices.ExecutionScope"), $jsilcore.TypeRef("System.Array", [$.Object])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VisitParameter", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Linq.Expressions.Expression"), [$asm03.TypeRef("System.Linq.Expressions.ParameterExpression")])
    );

    $.Field({Static:false, Public:false}, "top", $asm03.TypeRef("System.Runtime.CompilerServices.ExecutionScope"));

    $.Field({Static:false, Public:false}, "toplocals", $jsilcore.TypeRef("System.Array", [$.Object]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.DeclareNamespace("Microsoft.Win32.SafeHandles");
/* class Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle */ 

(function SafeBCryptAlgorithmHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptCloseAlgorithmProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [$.IntPtr, $.Int32]), 
      {
        Module: "bcrypt", 
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeBCryptHashHandle */ 

(function SafeBCryptHashHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeBCryptHashHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptDestroyHash", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [$.IntPtr]), 
      {
        Module: "bcrypt", 
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "get_HashObject", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HashObject", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.Field({Static:false, Public:false}, "m_hashObject", $.IntPtr);

    $.Property({Static:false, Public:false}, "HashObject", $.IntPtr);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeAxlBufferHandle */ 

(function SafeAxlBufferHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeAxlBufferHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetProcessHeap", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32", 
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "HeapFree", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiHashHandle */ 

(function SafeCapiHashHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiHashHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptDestroyHash", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:true }, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:true , Public:true }, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCapiKeyHandle */ 

(function SafeCapiKeyHandle$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCapiKeyHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "CryptDestroyKey", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.Int32]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidHandle", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCsp", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"))
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:false, Public:false}, "SetCsp", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.Field({Static:false, Public:false}, "m_csp", $.IntPtr);

    $.Property({Static:true , Public:false}, "InvalidHandle", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeCspHandle */ 

(function SafeCspHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeCspHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "CryptContextAddRef", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "CryptReleaseContext", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr, $.Int32]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptHandle */ 

(function SafeNCryptHandle$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateDuplicatedHandle", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "DuplicateOwnerHandle", 
      new JSIL.MethodSignature("!!0", null, ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Holder", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false}, "set_Holder", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:false, Public:false}, "m_ownershipState", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle+OwnershipState"));

    $.Field({Static:false, Public:false}, "m_holder", $.Type);

    $.Property({Static:false, Public:false}, "Holder", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum Microsoft.Win32.SafeHandles.SafeNCryptHandle+OwnershipState */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.SafeHandles.SafeNCryptHandle+OwnershipState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Owner: 0, 
    Duplicate: 1, 
    Holder: 2, 
  }
);

/* class Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle */ 

(function SafeNCryptKeyHandle$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ncrypt.dll", 
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle */ 

(function SafeNCryptProviderHandle$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Duplicate", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ncrypt.dll", 
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetHandleValue", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle */ 

(function SafeNCryptSecretHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), 
      Name: "Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFreeObject", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr]), 
      {
        Module: "ncrypt.dll", 
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseNativeHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

JSIL.DeclareNamespace("System.Security");
/* enum System.Security.ManifestKinds */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.ManifestKinds", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Deployment: 1, 
    Application: 2, 
    ApplicationAndDeployment: 3, 
  }
);

JSIL.DeclareNamespace("System.Security.Cryptography");
/* class System.Security.Cryptography.Aes */ 

(function Aes$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.Aes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.Field({Static:true , Public:false}, "s_legalBlockSizes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.AesCryptoServiceProvider */ 

(function AesCryptoServiceProvider$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesCryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateDecryptor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CreateEncryptor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FindSupportedKeySizes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Security.Cryptography.KeySizes")]), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmId", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_supportedKeySizes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:true , Public:false}, "s_defaultKeySize", $.Int32);

    $.Field({Static:false, Public:false}, "m_cspHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"));

    $.Field({Static:false, Public:false}, "m_key", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.AesManaged */ 

(function AesManaged$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Security.Cryptography.Aes"), 
      Name: "System.Security.Cryptography.AesManaged", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDecryptor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEncryptor", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateIV", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GenerateKey", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FeedbackSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IV", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.CipherMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Padding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.PaddingMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_FeedbackSize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IV", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Key", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_KeySize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Mode", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Security.Cryptography.CipherMode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Padding", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Security.Cryptography.PaddingMode"))
    );

    $.Field({Static:false, Public:false}, "m_rijndael", $asm00.TypeRef("System.Security.Cryptography.RijndaelManaged"));

    $.Property({Static:false, Public:true , Virtual:true }, "FeedbackSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IV", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true , Virtual:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Mode", $asm00.TypeRef("System.Security.Cryptography.CipherMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Padding", $asm00.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative */ 

(function BCryptNative$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_BCryptSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetInt32Property", 
      new JSIL.MethodSignature($.Int32, ["!!0", $.String], ["T"])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), ["!!0", $.String], ["T"])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MapAlgorithmIdToMagic", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "OpenAlgorithm", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), [$.String, $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_bcryptSupported", $asm00.TypeRef("System.Nullable`1", [$.Boolean]));


    function BCryptNative__cctor () {
      $thisType.s_bcryptSupported = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      BCryptNative__cctor
    );

    $.Property({Static:true , Public:false}, "BCryptSupported", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+AlgorithmName */ 

(function AlgorithmName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+AlgorithmName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ECDHP256", $.String, "ECDH_P256");

    $.Constant({Static:true , Public:true }, "ECDHP384", $.String, "ECDH_P384");

    $.Constant({Static:true , Public:true }, "ECDHP521", $.String, "ECDH_P521");

    $.Constant({Static:true , Public:true }, "ECDsaP256", $.String, "ECDSA_P256");

    $.Constant({Static:true , Public:true }, "ECDsaP384", $.String, "ECDSA_P384");

    $.Constant({Static:true , Public:true }, "ECDsaP521", $.String, "ECDSA_P521");

    $.Constant({Static:true , Public:true }, "MD5", $.String, "MD5");

    $.Constant({Static:true , Public:true }, "Sha1", $.String, "SHA1");

    $.Constant({Static:true , Public:true }, "Sha256", $.String, "SHA256");

    $.Constant({Static:true , Public:true }, "Sha384", $.String, "SHA384");

    $.Constant({Static:true , Public:true }, "Sha512", $.String, "SHA512");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.BCryptNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.BCryptNative+ErrorCode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BufferToSmall: -1073741789, 
    ObjectNameNotFound: -1073741772, 
    Success: 0, 
  }
);

/* class System.Security.Cryptography.BCryptNative+HashPropertyName */ 

(function HashPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+HashPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "HashLength", $.String, "HashDigestLength");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.BCryptNative+KeyBlobMagicNumber", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ECDHPublicP256: 827016005, 
    ECDsaPublicP256: 827540293, 
    ECDHPublicP384: 860570437, 
    ECDsaPublicP384: 861094725, 
    ECDHPublicP521: 894124869, 
    ECDsaPublicP521: 894649157, 
  }
);

/* class System.Security.Cryptography.BCryptNative+KeyDerivationFunction */ 

(function KeyDerivationFunction$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+KeyDerivationFunction", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "Hash", $.String, "HASH");

    $.Constant({Static:true , Public:true }, "Hmac", $.String, "HMAC");

    $.Constant({Static:true , Public:true }, "Tls", $.String, "TLS_PRF");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+ProviderName */ 

(function ProviderName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+ProviderName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "MicrosoftPrimitiveProvider", $.String, "Microsoft Primitive Provider");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+ObjectPropertyName */ 

(function ObjectPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+ObjectPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "ObjectLength", $.String, "ObjectLength");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.BCryptNative+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Security.Cryptography.BCryptNative+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "BCryptCreateHash", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle")]), 
          $.IntPtr, $.Int32, 
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptFinishHash", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetAlgorithmProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
        EntryPoint: "BCryptGetProperty", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetHashProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
        EntryPoint: "BCryptGetProperty", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptGetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptHashData", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "BCryptOpenAlgorithmProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle")]), $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "bcrypt.dll", 
        CharSet: 'unicode',
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"))
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* delegate System.Security.Cryptography.BCryptNative+BCryptPropertyGetter`1 */ 

JSIL.MakeDelegate("System.Security.Cryptography.BCryptNative+BCryptPropertyGetter`1", false, ["T"], 
  new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.BCryptNative+ErrorCode"), [
      new JSIL.GenericParameter("T", "System.Security.Cryptography.BCryptNative+BCryptPropertyGetter`1"), $asm00.TypeRef("System.String"), 
      $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Byte")]), $asm00.TypeRef("System.Int32"), 
      $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Int32")]), $asm00.TypeRef("System.Int32")
    ]));

/* class System.Security.Cryptography.BCryptHashAlgorithm */ 

(function BCryptHashAlgorithm$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.BCryptHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashStream", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptAlgorithmHandle"));

    $.Field({Static:false, Public:false}, "m_hashHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeBCryptHashHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngAlgorithm */ 

(function CngAlgorithm$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngAlgorithm", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP256", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP384", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellmanP521", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP256", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP384", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsaP521", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MD5", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha1", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha256", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha384", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Sha512", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_ecdhp256", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdhp384", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdhp521", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdsap256", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdsap384", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdsap521", $.Type);

    $.Field({Static:true , Public:false}, "s_md5", $.Type);

    $.Field({Static:true , Public:false}, "s_sha1", $.Type);

    $.Field({Static:true , Public:false}, "s_sha256", $.Type);

    $.Field({Static:true , Public:false}, "s_sha384", $.Type);

    $.Field({Static:true , Public:false}, "s_sha512", $.Type);

    $.Field({Static:false, Public:false}, "m_algorithm", $.String);

    $.Property({Static:false, Public:true }, "Algorithm", $.String);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellmanP521", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP256", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP384", $.Type);

    $.Property({Static:true , Public:true }, "ECDsaP521", $.Type);

    $.Property({Static:true , Public:true }, "MD5", $.Type);

    $.Property({Static:true , Public:true }, "Sha1", $.Type);

    $.Property({Static:true , Public:true }, "Sha256", $.Type);

    $.Property({Static:true , Public:true }, "Sha384", $.Type);

    $.Property({Static:true , Public:true }, "Sha512", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngAlgorithmGroup */ 

(function CngAlgorithmGroup$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngAlgorithmGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DiffieHellman", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Dsa", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_ECDiffieHellman", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_ECDsa", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Rsa", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_dh", $.Type);

    $.Field({Static:true , Public:false}, "s_dsa", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdh", $.Type);

    $.Field({Static:true , Public:false}, "s_ecdsa", $.Type);

    $.Field({Static:true , Public:false}, "s_rsa", $.Type);

    $.Field({Static:false, Public:false}, "m_algorithmGroup", $.String);

    $.Property({Static:false, Public:true }, "AlgorithmGroup", $.String);

    $.Property({Static:true , Public:true }, "DiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "Dsa", $.Type);

    $.Property({Static:true , Public:true }, "ECDiffieHellman", $.Type);

    $.Property({Static:true , Public:true }, "ECDsa", $.Type);

    $.Property({Static:true , Public:true }, "Rsa", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngKeyHandleOpenOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyHandleOpenOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    EphemeralKey: 1, 
  }
);

/* class System.Security.Cryptography.CngKey */ 

(function CngKey$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BuildKeyContainerPermission", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Permissions.KeyContainerPermission"), [$asm00.TypeRef("System.Security.Permissions.KeyContainerPermissionFlags")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("System.Security.Cryptography.CngAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Delete", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm03.TypeRef("System.Security.Cryptography.CngProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm03.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm03.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Export", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Algorithm", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_AlgorithmGroup", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngExportPolicies"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Handle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsEphemeral", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsMachineKey", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeySize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngKeyUsages"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngProvider"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_ProviderHandle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngUIPolicy"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_UniqueName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.CngProperty"), [$.String, $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HasProperty", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Import", 
      new JSIL.MethodSignature($.Type, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"), 
          $asm03.TypeRef("System.Security.Cryptography.CngProvider")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$.String, $asm03.TypeRef("System.Security.Cryptography.CngProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm03.TypeRef("System.Security.Cryptography.CngProvider"), 
          $asm03.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "Open", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm03.TypeRef("System.Security.Cryptography.CngKeyHandleOpenOptions")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_IsEphemeral", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      JSIL.MethodSignature.Action($.IntPtr)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyProperties", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm03.TypeRef("System.Security.Cryptography.CngKeyCreationParameters")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SetProperty", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngProperty"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_keyHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Field({Static:false, Public:false}, "m_kspHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

    $.Property({Static:false, Public:true }, "AlgorithmGroup", $asm03.TypeRef("System.Security.Cryptography.CngAlgorithmGroup"));

    $.Property({Static:false, Public:true }, "Algorithm", $asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "ExportPolicy", $asm03.TypeRef("System.Security.Cryptography.CngExportPolicies"));

    $.Property({Static:false, Public:true }, "Handle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"));

    $.Property({Static:false, Public:true }, "IsEphemeral", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMachineKey", $.Boolean);

    $.Property({Static:false, Public:true }, "KeyName", $.String);

    $.Property({Static:false, Public:true }, "KeySize", $.Int32);

    $.Property({Static:false, Public:true }, "KeyUsage", $asm03.TypeRef("System.Security.Cryptography.CngKeyUsages"));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $.IntPtr);

    $.Property({Static:false, Public:true }, "Provider", $asm03.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "ProviderHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"));

    $.Property({Static:false, Public:true }, "UniqueName", $.String);

    $.Property({Static:false, Public:true }, "UIPolicy", $asm03.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngKeyBlobFormat */ 

(function CngKeyBlobFormat$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKeyBlobFormat", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPrivateBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_EccPublicBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Format", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPrivateBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_GenericPublicBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_OpaqueTransportBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Pkcs8PrivateBlob", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_eccPrivate", $.Type);

    $.Field({Static:true , Public:false}, "s_eccPublic", $.Type);

    $.Field({Static:true , Public:false}, "s_genericPrivate", $.Type);

    $.Field({Static:true , Public:false}, "s_genericPublic", $.Type);

    $.Field({Static:true , Public:false}, "s_opaqueTransport", $.Type);

    $.Field({Static:true , Public:false}, "s_pkcs8Private", $.Type);

    $.Field({Static:false, Public:false}, "m_format", $.String);

    $.Property({Static:false, Public:true }, "Format", $.String);

    $.Property({Static:true , Public:true }, "EccPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "EccPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPrivateBlob", $.Type);

    $.Property({Static:true , Public:true }, "GenericPublicBlob", $.Type);

    $.Property({Static:true , Public:true }, "OpaqueTransportBlob", $.Type);

    $.Property({Static:true , Public:true }, "Pkcs8PrivateBlob", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngKeyCreationParameters */ 

(function CngKeyCreationParameters$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngKeyCreationParameters", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExportPolicy", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngExportPolicies")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyCreationOptions", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyUsage", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngKeyUsages")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parameters", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParametersNoDemand", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentWindowHandle", 
      JSIL.MethodSignature.Return($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UIPolicy", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngUIPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ExportPolicy", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngExportPolicies")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyCreationOptions", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyUsage", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngKeyUsages")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentWindowHandle", 
      JSIL.MethodSignature.Action($.IntPtr)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Provider", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UIPolicy", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngUIPolicy"))
    );

    $.Field({Static:false, Public:false}, "m_exportPolicy", $asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

    $.Field({Static:false, Public:false}, "m_keyCreationOptions", $asm03.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

    $.Field({Static:false, Public:false}, "m_keyUsage", $asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

    $.Field({Static:false, Public:false}, "m_parameters", $asm03.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Field({Static:false, Public:false}, "m_parentWindowHandle", $.IntPtr);

    $.Field({Static:false, Public:false}, "m_provider", $asm03.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Field({Static:false, Public:false}, "m_uiPolicy", $asm03.TypeRef("System.Security.Cryptography.CngUIPolicy"));

    $.Property({Static:false, Public:true }, "ExportPolicy", $asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngExportPolicies")]));

    $.Property({Static:false, Public:true }, "KeyCreationOptions", $asm03.TypeRef("System.Security.Cryptography.CngKeyCreationOptions"));

    $.Property({Static:false, Public:true }, "KeyUsage", $asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.Security.Cryptography.CngKeyUsages")]));

    $.Property({Static:false, Public:true }, "ParentWindowHandle", $.IntPtr);

    $.Property({Static:false, Public:true }, "Parameters", $asm03.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:false}, "ParametersNoDemand", $asm03.TypeRef("System.Security.Cryptography.CngPropertyCollection"));

    $.Property({Static:false, Public:true }, "Provider", $asm03.TypeRef("System.Security.Cryptography.CngProvider"));

    $.Property({Static:false, Public:true }, "UIPolicy", $asm03.TypeRef("System.Security.Cryptography.CngUIPolicy"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CngProperty */ 

(function CngProperty$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CngProperty", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Options", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetValue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.Field({Static:false, Public:false}, "m_name", $.String);

    $.Field({Static:false, Public:false}, "m_propertyOptions", $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

    $.Field({Static:false, Public:false}, "m_value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_hashCode", $asm00.TypeRef("System.Nullable`1", [$.Int32]));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Options", $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions"));

    $.Property({Static:false, Public:false}, "Value", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngPropertyCollection */ 

(function CngPropertyCollection$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.ObjectModel.Collection`1", [$asm03.TypeRef("System.Security.Cryptography.CngProperty")]), 
      Name: "System.Security.Cryptography.CngPropertyCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngProvider */ 

(function CngProvider$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSmartCardKeyStorageProvider", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MicrosoftSoftwareKeyStorageProvider", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Provider", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:true , Public:false}, "s_msSmartCardKsp", $.Type);

    $.Field({Static:true , Public:false}, "s_msSoftwareKsp", $.Type);

    $.Field({Static:false, Public:false}, "m_provider", $.String);

    $.Property({Static:false, Public:true }, "Provider", $.String);

    $.Property({Static:true , Public:true }, "MicrosoftSmartCardKeyStorageProvider", $.Type);

    $.Property({Static:true , Public:true }, "MicrosoftSoftwareKeyStorageProvider", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CngUIPolicy */ 

(function CngUIPolicy$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CngUIPolicy", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CreationTitle", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FriendlyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProtectionLevel", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseContext", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_creationTitle", $.String);

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_friendlyName", $.String);

    $.Field({Static:false, Public:false}, "m_protectionLevel", $asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Field({Static:false, Public:false}, "m_useContext", $.String);

    $.Property({Static:false, Public:true }, "CreationTitle", $.String);

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "FriendlyName", $.String);

    $.Property({Static:false, Public:true }, "ProtectionLevel", $asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Property({Static:false, Public:true }, "UseContext", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiHashAlgorithm */ 

(function CapiHashAlgorithm$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CapiHashAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderType"), 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_algorithmId", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:false}, "m_cspHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"));

    $.Field({Static:false, Public:false}, "m_hashHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiNative */ 

(function CapiNative$Members () {
  var $, $thisType;










  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "AcquireCsp", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), [
          $.String, $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderType"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+CryptAcquireContextFlags"), 
          $.Boolean
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportSymmetricKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetAlgorithmName", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetHashParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+HashParameter")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProviderParameterStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameter"), 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameterFlags")
        ], ["T"])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HResultForVerificationResult", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ImportSymmetricKey", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+KeyParameter"), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetKeyParameter", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CapiNative+AlgorithmClass */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmClass", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DataEncryption: 24576, 
    Hash: 32768, 
  }
);

/* enum System.Security.Cryptography.CapiNative+AlgorithmType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Any: 0, 
    Block: 1536, 
  }
);

/* enum System.Security.Cryptography.CapiNative+AlgorithmSubId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmSubId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    MD5: 3, 
    Sha1: 4, 
    Sha256: 12, 
    Sha384: 13, 
    Aes128: 14, 
    Sha512: 14, 
    Aes192: 15, 
    Aes256: 16, 
  }
);

/* enum System.Security.Cryptography.CapiNative+AlgorithmId */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+AlgorithmId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Aes128: 26126, 
    Aes192: 26127, 
    Aes256: 26128, 
    MD5: 32771, 
    Sha1: 32772, 
    Sha256: 32780, 
    Sha384: 32781, 
    Sha512: 32782, 
  }
);

/* enum System.Security.Cryptography.CapiNative+CryptAcquireContextFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+CryptAcquireContextFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    VerifyContext: -268435456, 
    None: 0, 
  }
);

/* enum System.Security.Cryptography.CapiNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ErrorCode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BadData: -2146893819, 
    BadAlgorithmId: -2146893816, 
    ProviderTypeNotDefined: -2146893801, 
    KeysetNotDefined: -2146893799, 
    Success: 0, 
    MoreData: 234, 
    NoMoreItems: 259, 
  }
);

/* enum System.Security.Cryptography.CapiNative+HashParameter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+HashParameter", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AlgorithmId: 1, 
    HashValue: 2, 
    HashSize: 4, 
  }
);

/* enum System.Security.Cryptography.CapiNative+KeyBlobType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+KeyBlobType", 
    BaseType: $asm00.TypeRef("System.Byte"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PlainText: 8, 
  }
);

/* enum System.Security.Cryptography.CapiNative+KeyFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+KeyFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Exportable: 1, 
  }
);

/* enum System.Security.Cryptography.CapiNative+KeyParameter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+KeyParameter", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    IV: 1, 
    Mode: 4, 
    ModeBits: 5, 
  }
);

/* class System.Security.Cryptography.CapiNative+ProviderNames */ 

(function ProviderNames$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative+ProviderNames", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAes", $.String, "Microsoft Enhanced RSA and AES Cryptographic Provider");

    $.Constant({Static:true , Public:true }, "MicrosoftEnhancedRsaAesPrototype", $.String, "Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CapiNative+ProviderParameter */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ProviderParameter", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    EnumerateAlgorithms: 1, 
  }
);

/* enum System.Security.Cryptography.CapiNative+ProviderParameterFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ProviderParameterFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    RestartEnumeration: 1, 
  }
);

/* enum System.Security.Cryptography.CapiNative+ProviderType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CapiNative+ProviderType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    RsaAes: 24, 
  }
);

/* struct System.Security.Cryptography.CapiNative+BLOBHEADER */ 

(function BLOBHEADER$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+BLOBHEADER", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "bType", $asm03.TypeRef("System.Security.Cryptography.CapiNative+KeyBlobType"));

    $.Field({Static:false, Public:true }, "bVersion", $.Byte);

    $.Field({Static:false, Public:true }, "reserved", $.Int16);

    $.Field({Static:false, Public:true }, "aiKeyAlg", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB */ 

(function CRYPTOAPI_BLOB$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbData", $.Int32);

    $.Field({Static:false, Public:true }, "pbData", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.CapiNative+PROV_ENUMALGS */ 

(function PROV_ENUMALGS$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.CapiNative+PROV_ENUMALGS", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "aiAlgId", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:true }, "dwBitLen", $.Int32);

    $.Field({Static:false, Public:true }, "dwNameLen", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.CapiNative+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;















  JSIL.MakeStaticClass("System.Security.Cryptography.CapiNative+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "_AxlPublicKeyBlobToPublicKeyToken", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB")]), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])]), 
      {
        Module: "mscorwks", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptAcquireContext", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle")]), $.String, 
          $.String, $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderType"), 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+CryptAcquireContextFlags")
        ]), 
      {
        Module: "advapi32", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptCreateHash", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), 
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle")])
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptDecrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Boolean"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptDuplicateKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $.IntPtr, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; })
      .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

    $.PInvokeMethod({Static:true , Public:true }, "CryptEncrypt", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), 
          $.Boolean, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Boolean"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptExportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGenKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"), 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGenRandom", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }
        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGetHashParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+HashParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptGetProvParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameter"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+ProviderParameterFlags")
        ]), 
      {
        Module: "advapi32", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptHashData", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiHashHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptImportKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $asm03.TypeRef("System.Security.Cryptography.CapiNative+KeyFlags"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle")])
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CryptSetKeyParam", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $asm03.TypeRef("System.Security.Cryptography.CapiNative+KeyParameter"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32
        ]), 
      {
        Module: "advapi32", 
        Parameters: [
          {
            NativeType: "Array"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; })
    .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* enum System.Security.Cryptography.EncryptionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.EncryptionMode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Encrypt: 0, 
    Decrypt: 1, 
  }
);

/* class System.Security.Cryptography.CapiSymmetricAlgorithm */ 

(function CapiSymmetricAlgorithm$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.CapiSymmetricAlgorithm", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm00.TypeRef("System.Security.Cryptography.CipherMode"), 
          $asm00.TypeRef("System.Security.Cryptography.PaddingMode"), $asm03.TypeRef("System.Security.Cryptography.EncryptionMode")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "DepadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EncryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReuseTransform", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanTransformMultipleBlocks", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutputBlockSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PadBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ProcessIV", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm00.TypeRef("System.Security.Cryptography.CipherMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawDecryptBlocks", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetupKey", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm00.TypeRef("System.Security.Cryptography.CipherMode"), $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformBlock", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TransformFinalBlock", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_blockSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_depadBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_encryptionMode", $asm03.TypeRef("System.Security.Cryptography.EncryptionMode"));

    $.Field({Static:false, Public:false}, "m_key", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCapiKeyHandle"));

    $.Field({Static:false, Public:false}, "m_paddingMode", $asm00.TypeRef("System.Security.Cryptography.PaddingMode"));

    $.Field({Static:false, Public:false}, "m_provider", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeCspHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReuseTransform", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanTransformMultipleBlocks", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InputBlockSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutputBlockSize", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Security.Cryptography.ICryptoTransform"), 
      /* 1 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellman */ 

(function ECDiffieHellman$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.ECDiffieHellman", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellmanPublicKey */ 

(function ECDiffieHellmanPublicKey$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanPublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_keyBlob", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Hash: 0, 
    Hmac: 1, 
    Tls: 2, 
  }
);

/* class System.Security.Cryptography.ECDiffieHellmanCng */ 

(function ECDiffieHellmanCng$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Security.Cryptography.ECDiffieHellman"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("System.Security.Cryptography.CngKey")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey")])
    );

    $.ExternalMethod({Static:false, Public:true }, "DeriveSecretAgreementHandle", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm03.TypeRef("System.Security.Cryptography.CngKey")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HmacKey", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_KeyDerivationFunction", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Label", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SecretAppend", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SecretPrepend", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seed", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseSecretAgreementAsHmacKey", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HmacKey", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_KeyDerivationFunction", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Label", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecretAppend", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SecretPrepend", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Seed", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Field({Static:false, Public:false}, "m_hmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_key", $asm03.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false}, "m_kdf", $asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

    $.Field({Static:false, Public:false}, "m_label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_secretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_secretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "m_seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "HmacKey", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "KeyDerivationFunction", $asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanKeyDerivationFunction"));

    $.Property({Static:false, Public:true }, "Label", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretAppend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "SecretPrepend", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Seed", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "Key", $asm03.TypeRef("System.Security.Cryptography.CngKey"));

    $.Property({Static:false, Public:true , Virtual:true }, "PublicKey", $asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"));

    $.Property({Static:false, Public:true }, "UseSecretAgreementAsHmacKey", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDiffieHellmanCngPublicKey */ 

(function ECDiffieHellmanCngPublicKey$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), 
      Name: "System.Security.Cryptography.ECDiffieHellmanCngPublicKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "FromByteArray", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.ECDiffieHellmanPublicKey"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FromXmlString", 
      new JSIL.MethodSignature($.Type, [$.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BlobFormat", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Import", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "m_key", $asm03.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false}, "m_format", $asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.Property({Static:false, Public:true }, "BlobFormat", $asm03.TypeRef("System.Security.Cryptography.CngKeyBlobFormat"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDsa */ 

(function ECDsa$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"), 
      Name: "System.Security.Cryptography.ECDsa", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_KeyExchangeAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SignatureAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "KeyExchangeAlgorithm", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SignatureAlgorithm", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ECDsaCng */ 

(function ECDsaCng$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.Security.Cryptography.ECDsa"), 
      Name: "System.Security.Cryptography.ECDsaCng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FromXmlString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "FromXmlString", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Key", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HashAlgorithm", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Key", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.CngKey"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SignData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm00.TypeRef("System.IO.Stream")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToXmlString", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Security.Cryptography.ECKeyXmlFormat")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "VerifyData", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "VerifyHash", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_legalKeySizes", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Security.Cryptography.KeySizes")]));

    $.Field({Static:false, Public:false}, "m_key", $asm03.TypeRef("System.Security.Cryptography.CngKey"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"));

    $.Property({Static:false, Public:true }, "Key", $asm03.TypeRef("System.Security.Cryptography.CngKey"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.ECKeyXmlFormat */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.ECKeyXmlFormat", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Rfc4050: 0, 
  }
);

/* class System.Security.Cryptography.CoreCryptoConfig */ 

(function CoreCryptoConfig$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Security.Cryptography.CoreCryptoConfig", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CreateFromName", 
      new JSIL.MethodSignature("!!0", [$.String], ["T"])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AlgorithmNameMap", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EnforceFipsAlgorithms", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:true , Public:false}, "s_nameMap", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("System.Type")]));

    $.Field({Static:true , Public:false}, "s_enforceFipsAlgorithms", $asm00.TypeRef("System.Nullable`1", [$.Boolean]));


    function CoreCryptoConfig__cctor () {
      $thisType.s_enforceFipsAlgorithms = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      CoreCryptoConfig__cctor
    );

    $.Property({Static:true , Public:false}, "AlgorithmNameMap", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm00.TypeRef("System.Type")]));

    $.Property({Static:true , Public:false}, "EnforceFipsAlgorithms", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ManifestSignatureInformation */ 

(function ManifestSignatureInformation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.ManifestSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Security.ManifestKinds"), $asm03.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), 
          $asm03.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AuthenticodeSignature", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Manifest", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.ManifestKinds"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StrongNameSignature", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetManifestXml", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlDocument"), [$asm00.TypeRef("System.ActivationContext"), $asm03.TypeRef("System.Security.ManifestKinds")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm00.TypeRef("System.ActivationContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [$asm00.TypeRef("System.ActivationContext"), $asm03.TypeRef("System.Security.ManifestKinds")])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.ManifestSignatureInformationCollection"), [
          $asm00.TypeRef("System.ActivationContext"), $asm03.TypeRef("System.Security.ManifestKinds"), 
          $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_manifest", $asm03.TypeRef("System.Security.ManifestKinds"));

    $.Field({Static:false, Public:false}, "m_strongNameSignature", $asm03.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));

    $.Field({Static:false, Public:false}, "m_authenticodeSignature", $asm03.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

    $.Property({Static:false, Public:true }, "AuthenticodeSignature", $asm03.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"));

    $.Property({Static:false, Public:true }, "Manifest", $asm03.TypeRef("System.Security.ManifestKinds"));

    $.Property({Static:false, Public:true }, "StrongNameSignature", $asm03.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.ManifestSignatureInformationCollection */ 

(function ManifestSignatureInformationCollection$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$asm03.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]), 
      Name: "System.Security.Cryptography.ManifestSignatureInformationCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Generic.IList`1", [$asm03.TypeRef("System.Security.Cryptography.ManifestSignatureInformation")]))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.MD5Cng */ 

(function MD5Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.MD5"), 
      Name: "System.Security.Cryptography.MD5Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.CngExportPolicies */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngExportPolicies", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    AllowExport: 1, 
    AllowPlaintextExport: 2, 
    AllowArchiving: 4, 
    AllowPlaintextArchiving: 8, 
  }
);

/* enum System.Security.Cryptography.CngKeyCreationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyCreationOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    MachineKey: 32, 
    OverwriteExistingKey: 128, 
  }
);

/* enum System.Security.Cryptography.CngKeyOpenOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyOpenOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    UserKey: 0, 
    None: 0, 
    MachineKey: 32, 
    Silent: 64, 
  }
);

/* enum System.Security.Cryptography.CngKeyTypes */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyTypes", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    MachineKey: 32, 
  }
);

/* enum System.Security.Cryptography.CngKeyUsages */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngKeyUsages", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Decryption: 1, 
    Signing: 2, 
    KeyAgreement: 4, 
    AllUsages: 16777215, 
  }
);

/* enum System.Security.Cryptography.CngPropertyOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngPropertyOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Persist: -2147483648, 
    None: 0, 
    CustomProperty: 1073741824, 
  }
);

/* enum System.Security.Cryptography.CngUIProtectionLevels */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.CngUIProtectionLevels", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ProtectKey: 1, 
    ForceHighProtection: 2, 
  }
);

/* class System.Security.Cryptography.NCryptNative */ 

(function NCryptNative$Members () {
  var $, $thisType;































  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "BuildEccPublicBlob", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $.String, $asm03.TypeRef("System.Numeric.BigInteger"), 
          $asm03.TypeRef("System.Numeric.BigInteger")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreatePersistedKey", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $.String, $asm03.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeleteKey", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm03.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterial", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Security.Cryptography.NCryptNative+NCryptBuffer")]), $asm03.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm03.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialHmac", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveKeyMaterialTls", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DeriveSecretAgreement", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ExportKey", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "FillKeyParameter", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "FinalizeKey", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_NCryptSupported", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetProperty", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsDWord", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsIntPtr", 
      new JSIL.MethodSignature($.IntPtr, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsString", 
      new JSIL.MethodSignature($.String, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetPropertyAsStruct", 
      new JSIL.MethodSignature("!!0", [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImportKey", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.String
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenKey", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.String, 
          $asm03.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "OpenStorageProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), [$.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReverseBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.Int32, $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          "!!0", $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ], ["T"])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SetProperty", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "SignHash", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnpackEccPublicBlob", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Numeric.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Numeric.BigInteger")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifySignature", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false}, "s_ncryptSupported", $asm00.TypeRef("System.Nullable`1", [$.Boolean]));


    function NCryptNative__cctor () {
      $thisType.s_ncryptSupported = null;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      NCryptNative__cctor
    );

    $.Property({Static:true , Public:false}, "NCryptSupported", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.NCryptNative+BufferType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.NCryptNative+BufferType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    KdfHashAlgorithm: 0, 
    KdfSecretPrepend: 1, 
    KdfSecretAppend: 2, 
    KdfHmacKey: 3, 
    KdfTlsLabel: 4, 
    KdfTlsSeed: 5, 
  }
);

/* enum System.Security.Cryptography.NCryptNative+ErrorCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.NCryptNative+ErrorCode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BadSignature: -2146893818, 
    NotFound: -2146893807, 
    KeyDoesNotExist: -2146893802, 
    BufferTooSmall: -2146893784, 
    Success: 0, 
  }
);

/* class System.Security.Cryptography.NCryptNative+KeyPropertyName */ 

(function KeyPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative+KeyPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Algorithm", $.String, "Algorithm Name");

    $.Constant({Static:true , Public:false}, "AlgorithmGroup", $.String, "Algorithm Group");

    $.Constant({Static:true , Public:false}, "ExportPolicy", $.String, "Export Policy");

    $.Constant({Static:true , Public:false}, "KeyType", $.String, "Key Type");

    $.Constant({Static:true , Public:false}, "KeyUsage", $.String, "Key Usage");

    $.Constant({Static:true , Public:false}, "Length", $.String, "Length");

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");

    $.Constant({Static:true , Public:false}, "ParentWindowHandle", $.String, "HWND Handle");

    $.Constant({Static:true , Public:false}, "ProviderHandle", $.String, "Provider Handle");

    $.Constant({Static:true , Public:false}, "UIPolicy", $.String, "UI Policy");

    $.Constant({Static:true , Public:false}, "UniqueName", $.String, "Unique Name");

    $.Constant({Static:true , Public:false}, "UseContext", $.String, "Use Context");

    $.Constant({Static:true , Public:false}, "ClrIsEphemeral", $.String, "CLR IsEphemeral");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.NCryptNative+ProviderPropertyName */ 

(function ProviderPropertyName$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative+ProviderPropertyName", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Name", $.String, "Name");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.NCryptNative+SecretAgreementFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.NCryptNative+SecretAgreementFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    UseSecretAsHmacKey: 1, 
  }
);

/* struct System.Security.Cryptography.NCryptNative+NCRYPT_UI_POLICY */ 

(function NCRYPT_UI_POLICY$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative+NCRYPT_UI_POLICY", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "dwVersion", $.Int32);

    $.Field({Static:false, Public:true }, "dwFlags", $asm03.TypeRef("System.Security.Cryptography.CngUIProtectionLevels"));

    $.Field({Static:false, Public:true }, "pszCreationTitle", $.String);

    $.Field({Static:false, Public:true }, "pszFriendlyName", $.String);

    $.Field({Static:false, Public:true }, "pszDescription", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.NCryptNative+NCryptBuffer */ 

(function NCryptBuffer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative+NCryptBuffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbBuffer", $.Int32);

    $.Field({Static:false, Public:true }, "BufferType", $asm03.TypeRef("System.Security.Cryptography.NCryptNative+BufferType"));

    $.Field({Static:false, Public:true }, "pvBuffer", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.NCryptNative+NCryptBufferDesc */ 

(function NCryptBufferDesc$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.NCryptNative+NCryptBufferDesc", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "ulVersion", $.Int32);

    $.Field({Static:false, Public:true }, "cBuffers", $.Int32);

    $.Field({Static:false, Public:true }, "pBuffers", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.NCryptNative+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;

















  JSIL.MakeStaticClass("System.Security.Cryptography.NCryptNative+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "NCryptCreatePersistedKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.String, 
          $.Int32, $asm03.TypeRef("System.Security.Cryptography.CngKeyCreationOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDeleteKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32]), 
      {
        Module: "ncrypt.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptDeriveKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.NCryptNative+NCryptBufferDesc")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm03.TypeRef("System.Security.Cryptography.NCryptNative+SecretAgreementFlags")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptExportKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.IntPtr, 
          $.String, $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptFinalizeKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.Int32]), 
      {
        Module: "ncrypt.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array", 
            Out: true
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptGetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.IntPtr]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "NCryptImportKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $.IntPtr, 
          $.String, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptOpenKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle")]), 
          $.String, $.Int32, 
          $asm03.TypeRef("System.Security.Cryptography.CngKeyOpenOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptOpenStorageProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle")]), $.String, 
          $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSecretAgreement", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle")]), $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.String, $.Int32, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSetProperty", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptHandle"), $.String, 
          $.IntPtr, $.Int32, 
          $asm03.TypeRef("System.Security.Cryptography.CngPropertyOptions")
        ]), 
      {
        Module: "ncrypt.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptSignHash", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "NCryptVerifySignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.NCryptNative+ErrorCode"), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle"), $.IntPtr, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ]), 
      {
        Module: "ncrypt.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , 
          {
            NativeType: "Array"
          }, null
          , null

        ]
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class System.Security.Cryptography.Rfc4050KeyFormatter */ 

(function Rfc4050KeyFormatter$Members () {
  var $, $thisType;









  JSIL.MakeStaticClass("System.Security.Cryptography.Rfc4050KeyFormatter", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "FromXml", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.CngKey"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurveUrn", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Security.Cryptography.CngAlgorithm")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKeySize", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadAlgorithm", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.CngAlgorithm"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadPublicKey", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Numeric.BigInteger")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Numeric.BigInteger")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXml", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.Security.Cryptography.CngKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDomainParameters", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriter"), $asm03.TypeRef("System.Security.Cryptography.CngKey")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WritePublicKeyValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriter"), $asm03.TypeRef("System.Security.Cryptography.CngKey")])
    );

    $.Constant({Static:true , Public:false}, "DomainParametersRoot", $.String, "DomainParameters");

    $.Constant({Static:true , Public:false}, "ECDHRoot", $.String, "ECDHKeyValue");

    $.Constant({Static:true , Public:false}, "ECDsaRoot", $.String, "ECDSAKeyValue");

    $.Constant({Static:true , Public:false}, "NamedCurveElement", $.String, "NamedCurve");

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://www.w3.org/2001/04/xmldsig-more#");

    $.Constant({Static:true , Public:false}, "PublicKeyRoot", $.String, "PublicKey");

    $.Constant({Static:true , Public:false}, "UrnAttribute", $.String, "URN");

    $.Constant({Static:true , Public:false}, "ValueAttribute", $.String, "Value");

    $.Constant({Static:true , Public:false}, "XElement", $.String, "X");

    $.Constant({Static:true , Public:false}, "YElement", $.String, "Y");

    $.Constant({Static:true , Public:false}, "Prime256CurveUrn", $.String, "urn:oid:1.2.840.10045.3.1.7");

    $.Constant({Static:true , Public:false}, "Prime384CurveUrn", $.String, "urn:oid:1.3.132.0.34");

    $.Constant({Static:true , Public:false}, "Prime521CurveUrn", $.String, "urn:oid:1.3.132.0.35");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA1Cng */ 

(function SHA1Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA1"), 
      Name: "System.Security.Cryptography.SHA1Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA256Cng */ 

(function SHA256Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA256"), 
      Name: "System.Security.Cryptography.SHA256Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA256CryptoServiceProvider */ 

(function SHA256CryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA256"), 
      Name: "System.Security.Cryptography.SHA256CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CapiHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA384Cng */ 

(function SHA384Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA384"), 
      Name: "System.Security.Cryptography.SHA384Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA384CryptoServiceProvider */ 

(function SHA384CryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA384"), 
      Name: "System.Security.Cryptography.SHA384CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CapiHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA512Cng */ 

(function SHA512Cng$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA512"), 
      Name: "System.Security.Cryptography.SHA512Cng", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.BCryptHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.SHA512CryptoServiceProvider */ 

(function SHA512CryptoServiceProvider$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.Cryptography.SHA512"), 
      Name: "System.Security.Cryptography.SHA512CryptoServiceProvider", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "HashFinal", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Initialize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithm", $asm03.TypeRef("System.Security.Cryptography.CapiHashAlgorithm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.SignatureVerificationResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.SignatureVerificationResult", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    SystemError: -2146869247, 
    InvalidSignerCertificate: -2146869246, 
    InvalidCountersignature: -2146869245, 
    InvalidCertificateSignature: -2146869244, 
    InvalidTimestamp: -2146869243, 
    BadDigest: -2146869232, 
    BasicConstraintsNotObserved: -2146869223, 
    UnknownTrustProvider: -2146762751, 
    UnknownVerificationAction: -2146762750, 
    BadSignatureFormat: -2146762749, 
    CertificateNotExplicitlyTrusted: -2146762748, 
    MissingSignature: -2146762496, 
    CertificateExpired: -2146762495, 
    InvalidTimePeriodNesting: -2146762494, 
    InvalidCertificateRole: -2146762493, 
    PathLengthConstraintViolated: -2146762492, 
    UnknownCriticalExtension: -2146762491, 
    CertificateUsageNotAllowed: -2146762490, 
    IssuerChainingError: -2146762489, 
    CertificateMalformed: -2146762488, 
    UntrustedRootCertificate: -2146762487, 
    CouldNotBuildChain: -2146762486, 
    GenericTrustFailure: -2146762485, 
    CertificateRevoked: -2146762484, 
    UntrustedTestRootCertificate: -2146762483, 
    RevocationCheckFailure: -2146762482, 
    InvalidCertificateUsage: -2146762480, 
    CertificateExplicitlyDistrusted: -2146762479, 
    UntrustedCertificationAuthority: -2146762478, 
    InvalidCertificatePolicy: -2146762477, 
    InvalidCertificateName: -2146762476, 
    Valid: 0, 
    AssemblyIdentityMismatch: 1, 
    ContainingSignatureInvalid: 2, 
    PublicKeyTokenMismatch: 3, 
    PublisherMismatch: 4, 
  }
);

/* class System.Security.Cryptography.StrongNameSignatureInformation */ 

(function StrongNameSignatureInformation$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.StrongNameSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicKey", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    $.Field({Static:false, Public:false}, "m_publicKey", $asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StrongNameHashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicKey", $asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Security.Cryptography.X509Certificates");
/* class System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation */ 

(function AuthenticodeSignatureInformation$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO"), $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), 
          $asm03.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DescriptionUrl", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TrustStatus", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.Field({Static:false, Public:false}, "m_description", $.String);

    $.Field({Static:false, Public:false}, "m_descriptionUrl", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:false}, "m_signatureChain", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false}, "m_timestamp", $asm03.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    $.Field({Static:false, Public:false}, "m_signingCertificate", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Description", $.String);

    $.Property({Static:false, Public:true }, "DescriptionUrl", $asm01.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm03.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"));

    $.Property({Static:false, Public:true }, "TrustStatus", $asm03.TypeRef("System.Security.Cryptography.X509Certificates.TrustStatus"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.TimestampInformation */ 

(function TimestampInformation$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Security.Cryptography.X509Certificates.TimestampInformation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashAlgorithm", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HResult", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SignatureChain", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SigningCertificate", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Timestamp", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_VerificationResult", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"))
    );

    $.Field({Static:false, Public:false}, "m_hashAlgorithmId", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:false}, "m_timestamp", $asm00.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_timestampChain", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Field({Static:false, Public:false}, "m_verificationResult", $asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));

    $.Field({Static:false, Public:false}, "m_timestamper", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "HashAlgorithm", $.String);

    $.Property({Static:false, Public:true }, "HResult", $.Int32);

    $.Property({Static:false, Public:true }, "IsValid", $.Boolean);

    $.Property({Static:false, Public:true }, "SignatureChain", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"));

    $.Property({Static:false, Public:true }, "SigningCertificate", $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2"));

    $.Property({Static:false, Public:true }, "Timestamp", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "VerificationResult", $asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.TrustStatus */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.TrustStatus", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Untrusted: 0, 
    UnknownIdentity: 1, 
    KnownIdentity: 2, 
    Trusted: 3, 
  }
);

/* class System.Security.Cryptography.X509Certificates.X509Native */ 

(function X509Native$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native", false, [], function ($ib) {
    $ = $ib;


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    NoRevocationCheck: 1, 
    RevocationCheckEndCertOnly: 2, 
    RevocationCheckEntireChain: 4, 
    UrlOnlyCacheRetrieval: 8, 
    LifetimeSigning: 16, 
    TrustMicrosoftRootOnly: 32, 
  }
);

/* struct System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO */ 

(function AXL_AUTHENTICODE_SIGNER_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbSize", $.Int32);

    $.Field({Static:false, Public:true }, "dwError", $.Int32);

    $.Field({Static:false, Public:true }, "algHash", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:true }, "pwszHash", $.IntPtr);

    $.Field({Static:false, Public:true }, "pwszDescription", $.IntPtr);

    $.Field({Static:false, Public:true }, "pwszDescriptionUrl", $.IntPtr);

    $.Field({Static:false, Public:true }, "pChainContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO */ 

(function AXL_AUTHENTICODE_TIMESTAMPER_INFO$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "cbsize", $.Int32);

    $.Field({Static:false, Public:true }, "dwError", $.Int32);

    $.Field({Static:false, Public:true }, "algHash", $asm03.TypeRef("System.Security.Cryptography.CapiNative+AlgorithmId"));

    $.Field({Static:false, Public:true }, "ftTimestamp", $asm00.TypeRef("System.Runtime.InteropServices.ComTypes.FILETIME"));

    $.Field({Static:false, Public:true }, "pChainContext", $.IntPtr);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Security.Cryptography.X509Certificates.X509Native+UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Security.Cryptography.X509Certificates.X509Native+UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:true }, "_AxlGetIssuerPublicKeyHash", 
      new JSIL.MethodSignature($.Int32, [$.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafeAxlBufferHandle")])]), 
      {
        Module: "mscorwks", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CertFreeAuthenticodeSignerInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO")])]), 
      {
        Module: "mscorwks", 
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:true }, "CertFreeAuthenticodeTimestamperInfo", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO")])]), 
      {
        Module: "mscorwks", 
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:true }, "CertVerifyAuthenticodeLicense", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.CapiNative+CRYPTOAPI_BLOB")]), $asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO")]), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO")])
        ]), 
      {
        Module: "mscorwks", 
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

JSIL.DeclareNamespace("System.Security.Cryptography.Xml");
/* class System.Security.Cryptography.Xml.ManifestSignedXml */ 

(function ManifestSignedXml$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm0B.TypeRef("System.Security.Cryptography.Xml.SignedXml"), 
      Name: "System.Security.Cryptography.Xml.ManifestSignedXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlDocument"), $asm03.TypeRef("System.Security.ManifestKinds")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BackwardHexToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSignatureChain", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Chain"), [
          $asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_SIGNER_INFO"), $asm07.TypeRef("System.Xml.XmlElement"), 
          $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CalculateManifestPublicKeyToken", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "CalculateSignerPublicKeyToken", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$asm00.TypeRef("System.Security.Cryptography.AsymmetricAlgorithm")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CompareBytes", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetIdElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$asm07.TypeRef("System.Xml.XmlDocument"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTimestampInformation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.X509Certificates.TimestampInformation"), [$asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AXL_AUTHENTICODE_TIMESTAMPER_INFO"), $asm07.TypeRef("System.Xml.XmlElement")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "HexStringToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HexToByte", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$.Byte]), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "MapRevocationFlags", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.X509Certificates.X509Native+AxlVerificationFlags"), [$asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeExpectedHash", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodePublisher", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509Certificate2")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.X509Certificates.AuthenticodeSignatureInformation"), [
          $asm07.TypeRef("System.Xml.XmlElement"), $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), 
          $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyAuthenticodeSignatureIdentity", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "VerifySignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.ManifestSignatureInformation"), [$asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationFlag"), $asm01.TypeRef("System.Security.Cryptography.X509Certificates.X509RevocationMode")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "VerifyStrongNameSignature", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.StrongNameSignatureInformation"), [$asm07.TypeRef("System.Xml.XmlElement")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureId", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyStrongNameSignatureTransforms", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Security.Cryptography.SignatureVerificationResult"), [$asm0B.TypeRef("System.Security.Cryptography.Xml.SignedInfo")])
    );

    $.Field({Static:false, Public:false}, "m_manifest", $asm03.TypeRef("System.Security.ManifestKinds"));

    $.Field({Static:false, Public:false}, "m_manifestXml", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "m_namespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Numeric");
/* struct System.Numeric.BigInteger */ 

(function BigInteger$Members () {
  var $, $thisType;














































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Numeric.BigInteger", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt32)
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.UInt64)
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.UInt32])])
    )
      .Parameter(1, "_data", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "Abs", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Add", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "add0", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AppendRadix", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $.Boolean, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $asm00.TypeRef("System.Text.StringBuilder"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "copy", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "div", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Divide", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "DivModUnsigned", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DivRem", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "Exponent", 
      new JSIL.MethodSignature($.UInt16, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_MinusOne", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_One", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Sign", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "get_Zero", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLength", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizeShift", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GreatestCommonDivisor", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "InternalAdd", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegative", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "LeftShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Mantissa", 
      new JSIL.MethodSignature($.UInt64, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ModPow", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplyKaratsuba", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "MultiplySchoolBook", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Negate", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "Normalize", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Addition", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Decrement", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Division", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Byte, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.SByte, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int16, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt16, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt32, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Int64, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.UInt64, [$.Type])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Single, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Double, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_GreaterThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.SByte])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt16])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt32])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($.Type, [$.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "op_Increment", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThan", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_LessThanOrEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Modulus", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Multiply", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    )
      .Attribute($asm03.TypeRef("Microsoft.Contracts.PureAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "op_Subtraction", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryNegation", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_UnaryPlus", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm00.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [$.String, $asm00.TypeRef("System.Globalization.NumberStyles")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.IFormatProvider")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseSingleDigit", 
      new JSIL.MethodSignature($.UInt32, [
          $.Char, $.UInt64, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Pow", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Remainder", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "resize", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [$jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RestrictTo", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "RightShift", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Square", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "sub", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.UInt32]), [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Subtract", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "TestDivisionStep", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "TestNormalize", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "TestResult", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32]), 
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("System.Array", [$.UInt32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm00.TypeRef("System.IFormatProvider")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [
          $.UInt32, $.Boolean, 
          $asm00.TypeRef("System.Globalization.NumberFormatInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:true }, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm00.TypeRef("System.Globalization.NumberStyles"), 
          $asm00.TypeRef("System.IFormatProvider"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Unnormalize", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.UInt32])]), 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "DecimalScaleFactorMask", $.Int32, 16711680);

    $.Constant({Static:true , Public:false}, "DecimalSignMask", $.Int32, -2147483648);

    $.Constant({Static:true , Public:false}, "BitsPerDigit", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "Base", $.UInt64, 4294967296);

    $.Constant({Static:true , Public:false}, "UpperBoundForSchoolBookMultiplicationDigits", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "ForceSchoolBookMultiplicationThresholdDigits", $.Int32, 8);

    $.Field({Static:true , Public:false, ReadOnly:true }, "maxCharsPerDigit", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "groupRadixValues", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "zeroArray", $jsilcore.TypeRef("System.Array", [$.UInt32]), function ($pi) {
        return JSIL.Array.New($asm00.System.UInt32, 0);
      });

    $.Field({Static:false, Public:false, ReadOnly:true }, "_sign", $.Int16);

    $.Field({Static:false, Public:false, ReadOnly:true }, "_data", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:false, Public:false}, "_length", $.Int32);

    $.Property({Static:true , Public:true }, "Zero", $.Type);

    $.Property({Static:true , Public:true }, "One", $.Type);

    $.Property({Static:true , Public:true }, "MinusOne", $.Type);

    $.Property({Static:false, Public:true }, "Sign", $.Int32);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IFormattable"), 
      /* 1 */ $asm00.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 2 */ $asm00.TypeRef("System.IComparable`1", [$.Type]), 
      /* 3 */ $asm00.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm03.TypeRef("Microsoft.Contracts.ImmutableAttribute"))
    .Attribute($asm00.TypeRef("System.Runtime.InteropServices.ComVisibleAttribute"), function () { return [false]; });

})();

/* class Microsoft.Win32.NativeMethods */ 

(function NativeMethods$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.NativeMethods", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_INVALID", $.Int32, -1);

    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_UNKNOWN", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_STANDARD", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "TIME_ZONE_ID_DAYLIGHT", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "MAX_PATH", $.Int32, 260);

    $.Constant({Static:true , Public:false}, "MUI_LANGUAGE_ID", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "MUI_LANGUAGE_NAME", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "MUI_PREFERRED_UI_LANGUAGES", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "MUI_INSTALLED_LANGUAGES", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "MUI_ALL_LANGUAGES", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "MUI_LANG_NEUTRAL_PE_FILE", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "MUI_NON_LANG_NEUTRAL_FILE", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "LOAD_LIBRARY_AS_DATAFILE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "LOAD_STRING_MAX_LENGTH", $.Int32, 500);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.NativeMethods+SystemTime */ 

(function SystemTime$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.NativeMethods+SystemTime", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Year", $.Int16);

    $.Field({Static:false, Public:true }, "Month", $.Int16);

    $.Field({Static:false, Public:true }, "DayOfWeek", $.Int16);

    $.Field({Static:false, Public:true }, "Day", $.Int16);

    $.Field({Static:false, Public:true }, "Hour", $.Int16);

    $.Field({Static:false, Public:true }, "Minute", $.Int16);

    $.Field({Static:false, Public:true }, "Second", $.Int16);

    $.Field({Static:false, Public:true }, "Milliseconds", $.Int16);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.NativeMethods+TimeZoneInformation */ 

(function TimeZoneInformation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.NativeMethods+TimeZoneInformation", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.Win32.NativeMethods+DynamicTimeZoneInformation"))
    );

    $.Field({Static:false, Public:true }, "Bias", $.Int32);

    $.Field({Static:false, Public:true }, "StandardName", $.String);

    $.Field({Static:false, Public:true }, "StandardDate", $asm03.TypeRef("Microsoft.Win32.NativeMethods+SystemTime"));

    $.Field({Static:false, Public:true }, "StandardBias", $.Int32);

    $.Field({Static:false, Public:true }, "DaylightName", $.String);

    $.Field({Static:false, Public:true }, "DaylightDate", $asm03.TypeRef("Microsoft.Win32.NativeMethods+SystemTime"));

    $.Field({Static:false, Public:true }, "DaylightBias", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.NativeMethods+DynamicTimeZoneInformation */ 

(function DynamicTimeZoneInformation$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.NativeMethods+DynamicTimeZoneInformation", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Bias", $.Int32);

    $.Field({Static:false, Public:true }, "StandardName", $.String);

    $.Field({Static:false, Public:true }, "StandardDate", $asm03.TypeRef("Microsoft.Win32.NativeMethods+SystemTime"));

    $.Field({Static:false, Public:true }, "StandardBias", $.Int32);

    $.Field({Static:false, Public:true }, "DaylightName", $.String);

    $.Field({Static:false, Public:true }, "DaylightDate", $asm03.TypeRef("Microsoft.Win32.NativeMethods+SystemTime"));

    $.Field({Static:false, Public:true }, "DaylightBias", $.Int32);

    $.Field({Static:false, Public:true }, "TimeZoneKeyName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.NativeMethods+RegistryTimeZoneInformation */ 

(function RegistryTimeZoneInformation$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.NativeMethods+RegistryTimeZoneInformation", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Field({Static:false, Public:true }, "Bias", $.Int32);

    $.Field({Static:false, Public:true }, "StandardBias", $.Int32);

    $.Field({Static:false, Public:true }, "DaylightBias", $.Int32);

    $.Field({Static:false, Public:true }, "StandardDate", $asm03.TypeRef("Microsoft.Win32.NativeMethods+SystemTime"));

    $.Field({Static:false, Public:true }, "DaylightDate", $asm03.TypeRef("Microsoft.Win32.NativeMethods+SystemTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.UnsafeNativeMethods */ 

(function UnsafeNativeMethods$Members () {
  var $, $thisType;






























































































  JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false, [], function ($ib) {
    $ = $ib;

    $.PInvokeMethod({Static:true , Public:false}, "CloseHandle", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ConnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")])]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ConnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateFile", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.String, $.Int32, 
          $asm00.TypeRef("System.IO.FileShare"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm00.TypeRef("System.IO.FileMode"), $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateNamedPipe", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [
          $.String, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES")
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreateNamedPipeClient", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), [
          $.String, $.Int32, 
          $asm00.TypeRef("System.IO.FileShare"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm00.TypeRef("System.IO.FileMode"), $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        EntryPoint: "CreateFile", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "CreatePipe", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DisconnectNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "DuplicateHandle", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
          $.UInt32, $.Boolean, 
          $.UInt32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Boolean"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventActivityIdControl", 
      new JSIL.MethodSignature($.UInt32, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventEnabled", 
      new JSIL.MethodSignature($.Int32, [$.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventProviderEnabled", 
      new JSIL.MethodSignature($.Int32, [
          $.Int64, $.Byte, 
          $.Int64
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventRegister", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback"), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventUnregister", 
      new JSIL.MethodSignature($.Int32, [$.Int64]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventWrite", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventWriteString", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $.Byte, 
          $.Int64, $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EventWriteTransfer", 
      new JSIL.MethodSignature($.UInt32, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("System.Diagnostics.Eventing.EventDescriptor")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtArchiveExportedLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtCancel", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")]), 
      {
        Module: "wevtapi.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtClearLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtClose", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "wevtapi.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "EvtCreateBookmark", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$.String]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtCreateRenderContext", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags")
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "Array"
          }, 
          {
            NativeType: "I4"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtExportLog", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.String, 
          $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtFormatMessage", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $.UInt32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant")]), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags"), 
          $.Int32, $asm00.TypeRef("System.Text.StringBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , 
          {
            NativeType: "LPWStr", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtFormatMessageBuffer", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $.UInt32, $.Int32, 
          $.IntPtr, $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        EntryPoint: "EvtFormatMessage", 
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetChannelConfigProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId"), 
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetEventInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetEventMetadataProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId"), 
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetLogInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetObjectArrayProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetObjectArraySize", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetPublisherMetadataProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId"), 
          $.Int32, $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtGetQueryInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId"), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtNext", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.IntPtr]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "Array"
          }, null
          , null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtNextChannelPath", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm00.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtNextEventMetadata", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtNextPublisherId", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm00.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr", 
            Out: true
          }, null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenChannelConfig", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenChannelEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenEventMetadataEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenLog", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.PathType")
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "I4"
          }
        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenPublisherEnum", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenPublisherMetadata", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtOpenSession", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass"), $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin")]), 
          $.Int32, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtQuery", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.String, 
          $.String, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtRender", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $.Int32, 
          $asm00.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "LPWStr", 
            Out: true
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtRender", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags"), $.Int32, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ]), 
      {
        Module: "wevtapi.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtSaveChannelConfig", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtSeek", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int64, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.Int32, 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags")
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }
        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtSetChannelConfigProperty", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId"), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+EvtVariant")])
        ]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "I4"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtSubscribe", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), [
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeWaitHandle"), 
          $.String, $.String, 
          $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $.IntPtr, 
          $.IntPtr, $.Int32
        ]), 
      {
        Module: "wevtapi.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null
          , null
          , null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "EvtUpdateBookmark", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle"), $asm03.TypeRef("System.Diagnostics.Eventing.Reader.EventLogHandle")]), 
      {
        Module: "wevtapi.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "FlushFileBuffers", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "kernel32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.IntPtr, 
          $.Int32, $.Int32, 
          $asm00.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "FreeLibrary", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.PInvokeMethod({Static:true , Public:false}, "GetCurrentProcess", 
      JSIL.MethodSignature.Return($.IntPtr), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetDynamicTimeZoneInformation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.NativeMethods+DynamicTimeZoneInformation")])]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileMUIPath", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $asm00.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm00.TypeRef("System.Text.StringBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ]), 
      {
        Module: "kernel32.dll", 
        Parameters: [
          {
            NativeType: "LPWStr"
          }, 
          {
            NativeType: "LPWStr"
          }, null
          , 
          {
            NativeType: "LPWStr"
          }, null
          , null

        ]
        , Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle")]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetFileType", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMessage", 
      new JSIL.MethodSignature($.String, [$.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $.IntPtr, $.IntPtr, 
          $.IntPtr, $asm00.TypeRef("System.Text.StringBuilder"), 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr, $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $.IntPtr, 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetNamedPipeInfo", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.IntPtr, 
          $.IntPtr, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "GetTimeZoneInformation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation")])]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ImpersonateNamedPipeClient", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")]), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.PInvokeMethod({Static:true , Public:false}, "LoadLibraryEx", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.SafeLibraryHandle"), [
          $.String, $.IntPtr, 
          $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "LoadString", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeLibraryHandle"), $.Int32, 
          $asm00.TypeRef("System.Text.StringBuilder"), $.Int32
        ]), 
      {
        Module: "user32.dll", 
        CharSet: 'unicode',
        EntryPoint: "LoadStringW", 
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "MakeHRFromErrorCode", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.PInvokeMethod({Static:true , Public:false}, "PerfCreateInstance", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")]), [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), 
          $.String, $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfDeleteInstance", 
      new JSIL.MethodSignature($.UInt32, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")])]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfSetCounterRefValue", 
      new JSIL.MethodSignature($.UInt32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfSetCounterSetInfo", 
      new JSIL.MethodSignature($.UInt32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct")]), 
          $.UInt32
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "PerfStartProvider", 
      new JSIL.MethodSignature($.UInt32, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle")])
        ]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "PerfStopProvider", 
      new JSIL.MethodSignature($.UInt32, [$.IntPtr]), 
      {
        Module: "advapi32.dll", 
        CharSet: 'unicode',
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")])
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "ReadFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "RevertToSelf", 
      JSIL.MethodSignature.Return($.Boolean), 
      {
        Module: "advapi32.dll", 
        Result: {
          NativeType: "Boolean"
        }
      }
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.MayFail]; });

    $.ExternalMethod({Static:true , Public:false}, "SafeCreateFile", 
      new JSIL.MethodSignature($asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), [
          $.String, $.Int32, 
          $asm00.TypeRef("System.IO.FileShare"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm00.TypeRef("System.IO.FileMode"), $.Int32, 
          $.IntPtr
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetEndOfFile", 
      new JSIL.MethodSignature($.Boolean, [$.IntPtr]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetErrorMode", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.ExternalMethod({Static:true , Public:false}, "SetFilePointer", 
      new JSIL.MethodSignature($.Int64, [
          $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64, 
          $asm00.TypeRef("System.IO.SeekOrigin"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.PInvokeMethod({Static:true , Public:false}, "SetFilePointerWin32", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32
        ]), 
      {
        Module: "kernel32.dll", 
        EntryPoint: "SetFilePointer", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "SetNamedPipeHandleState", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "WaitNamedPipe", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Int32]), 
      {
        Module: "kernel32.dll", 
        CharSet: 'auto',
        Result: {
          NativeType: "Boolean"
        }
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")])
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $.IntPtr, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")])
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:false}, "WriteFile", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.IntPtr
        ]), 
      {
        Module: "kernel32.dll", 
      }
    );

    $.Constant({Static:true , Public:false}, "KERNEL32", $.String, "kernel32.dll");

    $.Constant({Static:true , Public:false}, "ADVAPI32", $.String, "advapi32.dll");

    $.Constant({Static:true , Public:false}, "ERROR_HANDLE_EOF", $.Int32, 38);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_DRIVE", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "ERROR_NO_MORE_FILES", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_READY", $.Int32, 21);

    $.Constant({Static:true , Public:false}, "ERROR_BAD_LENGTH", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "ERROR_SHARING_VIOLATION", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_EXISTS", $.Int32, 80);

    $.Constant({Static:true , Public:false}, "ERROR_OPERATION_ABORTED", $.Int32, 995);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_HANDLE", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_NAME", $.Int32, 123);

    $.Constant({Static:true , Public:false}, "ERROR_BAD_PATHNAME", $.Int32, 161);

    $.Constant({Static:true , Public:false}, "ERROR_ALREADY_EXISTS", $.Int32, 183);

    $.Constant({Static:true , Public:false}, "ERROR_ENVVAR_NOT_FOUND", $.Int32, 203);

    $.Constant({Static:true , Public:false}, "ERROR_FILENAME_EXCED_RANGE", $.Int32, 206);

    $.Constant({Static:true , Public:false}, "ERROR_MORE_DATA", $.Int32, 234);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_FOUND", $.Int32, 1168);

    $.Constant({Static:true , Public:false}, "SECURITY_SQOS_PRESENT", $.Int32, 1048576);

    $.Constant({Static:true , Public:false}, "SECURITY_ANONYMOUS", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SECURITY_IDENTIFICATION", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "SECURITY_IMPERSONATION", $.Int32, 131072);

    $.Constant({Static:true , Public:false}, "SECURITY_DELEGATION", $.Int32, 196608);

    $.Constant({Static:true , Public:false}, "ERROR_BROKEN_PIPE", $.Int32, 109);

    $.Constant({Static:true , Public:false}, "ERROR_IO_PENDING", $.Int32, 997);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_BUSY", $.Int32, 231);

    $.Constant({Static:true , Public:false}, "ERROR_NO_DATA", $.Int32, 232);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_NOT_CONNECTED", $.Int32, 233);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_CONNECTED", $.Int32, 535);

    $.Constant({Static:true , Public:false}, "ERROR_PIPE_LISTENING", $.Int32, 536);

    $.Constant({Static:true , Public:false}, "ERROR_FILE_NOT_FOUND", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "ERROR_PATH_NOT_FOUND", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "ERROR_ACCESS_DENIED", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "ERROR_INVALID_PARAMETER", $.Int32, 87);

    $.Constant({Static:true , Public:false}, "GENERIC_READ", $.Int32, -2147483648);

    $.Constant({Static:true , Public:false}, "GENERIC_WRITE", $.Int32, 1073741824);

    $.Constant({Static:true , Public:false}, "STD_INPUT_HANDLE", $.Int32, -10);

    $.Constant({Static:true , Public:false}, "STD_OUTPUT_HANDLE", $.Int32, -11);

    $.Constant({Static:true , Public:false}, "STD_ERROR_HANDLE", $.Int32, -12);

    $.Constant({Static:true , Public:false}, "DUPLICATE_SAME_ACCESS", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_INBOUND", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_OUTBOUND", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PIPE_ACCESS_DUPLEX", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "PIPE_TYPE_BYTE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "PIPE_TYPE_MESSAGE", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "PIPE_READMODE_BYTE", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "PIPE_READMODE_MESSAGE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "PIPE_UNLIMITED_INSTANCES", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "FILE_FLAG_FIRST_PIPE_INSTANCE", $.Int32, 524288);

    $.Constant({Static:true , Public:false}, "FILE_SHARE_READ", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_SHARE_WRITE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FILE_ATTRIBUTE_NORMAL", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "FILE_FLAG_OVERLAPPED", $.Int32, 1073741824);

    $.Constant({Static:true , Public:false}, "OPEN_EXISTING", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "ERROR_SUCCESS", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_DISK", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_CHAR", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "FILE_TYPE_PIPE", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "ERROR_ARITHMETIC_OVERFLOW", $.Int32, 534);

    $.Constant({Static:true , Public:false}, "ERROR_NOT_ENOUGH_MEMORY", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "SEM_FAILCRITICALERRORS", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_IGNORE_INSERTS", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_FROM_SYSTEM", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "FORMAT_MESSAGE_ARGUMENT_ARRAY", $.Int32, 8192);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NULL", $.IntPtr);


    function UnsafeNativeMethods__cctor () {
      $thisType.NULL = new $asm00.System.IntPtr();
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      UnsafeNativeMethods__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SuppressUnmanagedCodeSecurityAttribute"));

})();

/* class Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES */ 

(function SECURITY_ATTRIBUTES$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nLength", $.Int32);

    $.Field({Static:false, Public:false}, "pSecurityDescriptor", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]));

    $.Field({Static:false, Public:false}, "bInheritHandle", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback */ 

JSIL.MakeDelegate("Microsoft.Win32.UnsafeNativeMethods+EtwEnableCallback", false, [], 
  new JSIL.MethodSignature(null, [
      $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")]), $asm00.TypeRef("System.Int32"), 
      $asm00.TypeRef("System.Byte"), $asm00.TypeRef("System.Int64"), 
      $asm00.TypeRef("System.Int64"), $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")]), 
      $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")])
    ]));

/* struct Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct */ 

(function PerfCounterSetInfoStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInfoStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 40, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "CounterSetGuid", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 16}, "ProviderGuid", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 32}, "NumCounters", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 36}, "InstanceType", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+PerfCounterInfoStruct */ 

(function PerfCounterInfoStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+PerfCounterInfoStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 32, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "CounterId", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 4}, "CounterType", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 8}, "Attrib", $.Int64);

    $.Field({Static:false, Public:false, Offset: 16}, "Size", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 20}, "DetailLevel", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 24}, "Scale", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 28}, "Offset", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct */ 

(function PerfCounterSetInstanceStruct$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 32, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false, Offset: 0}, "CounterSetGuid", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false, Offset: 16}, "dwSize", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 20}, "InstanceId", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 24}, "InstanceNameOffset", $.UInt32);

    $.Field({Static:false, Public:false, Offset: 28}, "InstanceNameSize", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST */ 

JSIL.MakeDelegate("Microsoft.Win32.UnsafeNativeMethods+PERFLIBREQUEST", false, [], 
  new JSIL.MethodSignature($asm00.TypeRef("System.UInt32"), [
      $asm00.TypeRef("System.UInt32"), $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Void")]), 
      $asm00.TypeRef("System.UInt32")
    ]));

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtQueryFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtQueryFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EvtQueryChannelPath: 1, 
    EvtQueryFilePath: 2, 
    EvtQueryForwardDirection: 256, 
    EvtQueryReverseDirection: 512, 
    EvtQueryTolerateQueryErrors: 4096, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtSubscribeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtSubscribeFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EvtSubscribeToFutureEvents: 1, 
    EvtSubscribeStartAtOldestRecord: 2, 
    EvtSubscribeStartAfterBookmark: 3, 
    EvtSubscribeTolerateQueryErrors: 4096, 
    EvtSubscribeStrict: 65536, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+NativeErrorCodes */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+NativeErrorCodes", 
    BaseType: $asm00.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ERROR_SUCCESS: 0, 
    ERROR_INVALID_PARAMETER: 87, 
    ERROR_INSUFFICIENT_BUFFER: 122, 
    ERROR_NO_MORE_ITEMS: 259, 
    ERROR_RESOURCE_LANG_NOT_FOUND: 1815, 
    ERROR_EVT_MESSAGE_NOT_FOUND: 15027, 
    ERROR_EVT_MESSAGE_ID_NOT_FOUND: 15028, 
    ERROR_EVT_UNRESOLVED_VALUE_INSERT: 15029, 
    ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND: 15033, 
    ERROR_MUI_FILE_NOT_FOUND: 15100, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtVariantType */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtVariantType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtVarTypeNull: 0, 
    EvtVarTypeString: 1, 
    EvtVarTypeAnsiString: 2, 
    EvtVarTypeSByte: 3, 
    EvtVarTypeByte: 4, 
    EvtVarTypeInt16: 5, 
    EvtVarTypeUInt16: 6, 
    EvtVarTypeInt32: 7, 
    EvtVarTypeUInt32: 8, 
    EvtVarTypeInt64: 9, 
    EvtVarTypeUInt64: 10, 
    EvtVarTypeSingle: 11, 
    EvtVarTypeDouble: 12, 
    EvtVarTypeBoolean: 13, 
    EvtVarTypeBinary: 14, 
    EvtVarTypeGuid: 15, 
    EvtVarTypeSizeT: 16, 
    EvtVarTypeFileTime: 17, 
    EvtVarTypeSysTime: 18, 
    EvtVarTypeSid: 19, 
    EvtVarTypeHexInt32: 20, 
    EvtVarTypeHexInt64: 21, 
    EvtVarTypeEvtHandle: 32, 
    EvtVarTypeEvtXml: 35, 
    EvtVarTypeStringArray: 129, 
    EvtVarTypeUInt32Array: 136, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtMasks */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtMasks", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EVT_VARIANT_TYPE_MASK: 127, 
    EVT_VARIANT_TYPE_ARRAY: 128, 
  }
);

/* struct Microsoft.Win32.UnsafeNativeMethods+EvtVariant */ 

(function EvtVariant$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+EvtVariant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "UInteger", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 0}, "Integer", $.Int32);

    $.Field({Static:false, Public:true , Offset: 0}, "UInt8", $.Byte);

    $.Field({Static:false, Public:true , Offset: 0}, "Short", $.Int16);

    $.Field({Static:false, Public:true , Offset: 0}, "UShort", $.UInt16);

    $.Field({Static:false, Public:true , Offset: 0}, "Bool", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 0}, "ByteVal", $.Byte);

    $.Field({Static:false, Public:true , Offset: 0}, "SByte", $.Byte);

    $.Field({Static:false, Public:true , Offset: 0}, "ULong", $.UInt64);

    $.Field({Static:false, Public:true , Offset: 0}, "Long", $.Int64);

    $.Field({Static:false, Public:true , Offset: 0}, "Double", $.Double);

    $.Field({Static:false, Public:true , Offset: 0}, "StringVal", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "AnsiString", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "SidVal", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "Binary", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "Reference", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "Handle", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "GuidReference", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 0}, "FileTime", $.UInt64);

    $.Field({Static:false, Public:true , Offset: 0}, "SystemTime", $.IntPtr);

    $.Field({Static:false, Public:true , Offset: 8}, "Count", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 12}, "Type", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtEventPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtEventQueryIDs: 0, 
    EvtEventPath: 1, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtQueryPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtQueryNames: 0, 
    EvtQueryStatuses: 1, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtPublisherMetadataPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtPublisherMetadataPublisherGuid: 0, 
    EvtPublisherMetadataResourceFilePath: 1, 
    EvtPublisherMetadataParameterFilePath: 2, 
    EvtPublisherMetadataMessageFilePath: 3, 
    EvtPublisherMetadataHelpLink: 4, 
    EvtPublisherMetadataPublisherMessageID: 5, 
    EvtPublisherMetadataChannelReferences: 6, 
    EvtPublisherMetadataChannelReferencePath: 7, 
    EvtPublisherMetadataChannelReferenceIndex: 8, 
    EvtPublisherMetadataChannelReferenceID: 9, 
    EvtPublisherMetadataChannelReferenceFlags: 10, 
    EvtPublisherMetadataChannelReferenceMessageID: 11, 
    EvtPublisherMetadataLevels: 12, 
    EvtPublisherMetadataLevelName: 13, 
    EvtPublisherMetadataLevelValue: 14, 
    EvtPublisherMetadataLevelMessageID: 15, 
    EvtPublisherMetadataTasks: 16, 
    EvtPublisherMetadataTaskName: 17, 
    EvtPublisherMetadataTaskEventGuid: 18, 
    EvtPublisherMetadataTaskValue: 19, 
    EvtPublisherMetadataTaskMessageID: 20, 
    EvtPublisherMetadataOpcodes: 21, 
    EvtPublisherMetadataOpcodeName: 22, 
    EvtPublisherMetadataOpcodeValue: 23, 
    EvtPublisherMetadataOpcodeMessageID: 24, 
    EvtPublisherMetadataKeywords: 25, 
    EvtPublisherMetadataKeywordName: 26, 
    EvtPublisherMetadataKeywordValue: 27, 
    EvtPublisherMetadataKeywordMessageID: 28, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtChannelReferenceFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtChannelReferenceFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtChannelReferenceImported: 1, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtEventMetadataPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EventMetadataEventID: 0, 
    EventMetadataEventVersion: 1, 
    EventMetadataEventChannel: 2, 
    EventMetadataEventLevel: 3, 
    EventMetadataEventOpcode: 4, 
    EventMetadataEventTask: 5, 
    EventMetadataEventKeyword: 6, 
    EventMetadataEventMessageID: 7, 
    EventMetadataEventTemplate: 8, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtChannelConfigPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtChannelConfigEnabled: 0, 
    EvtChannelConfigIsolation: 1, 
    EvtChannelConfigType: 2, 
    EvtChannelConfigOwningPublisher: 3, 
    EvtChannelConfigClassicEventlog: 4, 
    EvtChannelConfigAccess: 5, 
    EvtChannelLoggingConfigRetention: 6, 
    EvtChannelLoggingConfigAutoBackup: 7, 
    EvtChannelLoggingConfigMaxSize: 8, 
    EvtChannelLoggingConfigLogFilePath: 9, 
    EvtChannelPublishingConfigLevel: 10, 
    EvtChannelPublishingConfigKeywords: 11, 
    EvtChannelPublishingConfigControlGuid: 12, 
    EvtChannelPublishingConfigBufferSize: 13, 
    EvtChannelPublishingConfigMinBuffers: 14, 
    EvtChannelPublishingConfigMaxBuffers: 15, 
    EvtChannelPublishingConfigLatency: 16, 
    EvtChannelPublishingConfigClockType: 17, 
    EvtChannelPublishingConfigSidType: 18, 
    EvtChannelPublisherList: 19, 
    EvtChannelConfigPropertyIdEND: 20, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtLogPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtLogCreationTime: 0, 
    EvtLogLastAccessTime: 1, 
    EvtLogLastWriteTime: 2, 
    EvtLogFileSize: 3, 
    EvtLogAttributes: 4, 
    EvtLogNumberOfLogRecords: 5, 
    EvtLogOldestRecordNumber: 6, 
    EvtLogFull: 7, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtExportLogFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtExportLogFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtExportLogChannelPath: 1, 
    EvtExportLogFilePath: 2, 
    EvtExportLogTolerateQueryErrors: 4096, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtRenderContextFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtRenderContextValues: 0, 
    EvtRenderContextSystem: 1, 
    EvtRenderContextUser: 2, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtRenderFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtRenderEventValues: 0, 
    EvtRenderEventXml: 1, 
    EvtRenderBookmark: 2, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtFormatMessageFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtFormatMessageEvent: 1, 
    EvtFormatMessageLevel: 2, 
    EvtFormatMessageTask: 3, 
    EvtFormatMessageOpcode: 4, 
    EvtFormatMessageKeyword: 5, 
    EvtFormatMessageChannel: 6, 
    EvtFormatMessageProvider: 7, 
    EvtFormatMessageId: 8, 
    EvtFormatMessageXml: 9, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtSystemPropertyId */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtSystemPropertyId", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtSystemProviderName: 0, 
    EvtSystemProviderGuid: 1, 
    EvtSystemEventID: 2, 
    EvtSystemQualifiers: 3, 
    EvtSystemLevel: 4, 
    EvtSystemTask: 5, 
    EvtSystemOpcode: 6, 
    EvtSystemKeywords: 7, 
    EvtSystemTimeCreated: 8, 
    EvtSystemEventRecordId: 9, 
    EvtSystemActivityID: 10, 
    EvtSystemRelatedActivityID: 11, 
    EvtSystemProcessID: 12, 
    EvtSystemThreadID: 13, 
    EvtSystemChannel: 14, 
    EvtSystemComputer: 15, 
    EvtSystemUserID: 16, 
    EvtSystemVersion: 17, 
    EvtSystemPropertyIdEND: 18, 
  }
);

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtLoginClass", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    EvtRpcLogin: 1, 
  }
);

/* struct Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin */ 

(function EvtRpcLogin$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+EvtRpcLogin", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "Server", $.String);

    $.Field({Static:false, Public:true }, "User", $.String);

    $.Field({Static:false, Public:true }, "Domain", $.String);

    $.Field({Static:false, Public:true }, "Password", $asm03.TypeRef("System.Diagnostics.Eventing.Reader.CoTaskMemUnicodeSafeHandle"));

    $.Field({Static:false, Public:true }, "Flags", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags */ 

JSIL.MakeEnum(
  {
    FullName: "Microsoft.Win32.UnsafeNativeMethods+EvtSeekFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    EvtSeekRelativeToFirst: 1, 
    EvtSeekRelativeToLast: 2, 
    EvtSeekRelativeToCurrent: 3, 
    EvtSeekRelativeToBookmark: 4, 
    EvtSeekOriginMask: 7, 
    EvtSeekStrict: 65536, 
  }
);

/* struct Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant */ 

(function EvtStringVariant$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "Microsoft.Win32.UnsafeNativeMethods+EvtStringVariant", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "StringVal", $.String);

    $.Field({Static:false, Public:true , Offset: 8}, "Count", $.UInt32);

    $.Field({Static:false, Public:true , Offset: 12}, "Type", $.UInt32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class Microsoft.Win32.SafeLibraryHandle */ 

(function SafeLibraryHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeLibraryHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafePipeHandle */ 

(function SafePipeHandle$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafePipeHandle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.IntPtr, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* class Microsoft.Win32.SafeHandles.SafePerfProviderHandle */ 

(function SafePerfProviderHandle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid"), 
      Name: "Microsoft.Win32.SafeHandles.SafePerfProviderHandle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ReleaseHandle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"), function () { return [$asm00.System.Security.SecurityCriticalScope.Everything]; });

})();

/* enum System.TimeZoneInfoOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.TimeZoneInfoOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 1, 
    NoThrowOnInvalidTime: 2, 
  }
);

/* class System.TimeZoneInfo */ 

(function TimeZoneInfo$Members () {
  var $, $thisType;
















































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.TimeZoneInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.TimeSpan"), 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckDaylightSavingTimeDisabled", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "CheckDaylightSavingTimeNotSupported", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckIsDst", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.DateTime"), 
          $asm00.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ClearCachedData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTimeOffset"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [
          $asm00.TypeRef("System.DateTime"), $.Type, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [
          $asm00.TypeRef("System.DateTime"), $.Type, 
          $.Type, $asm03.TypeRef("System.TimeZoneInfoOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeBySystemTimeZoneId", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTimeOffset"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeBySystemTimeZoneId", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeBySystemTimeZoneId", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [
          $asm00.TypeRef("System.DateTime"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeFromUtc", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeToUtc", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ConvertTimeToUtc", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertUtcToTimeZone", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int64, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAdjustmentRuleFromTimeZoneInformation", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule"), [
          $asm03.TypeRef("Microsoft.Win32.NativeMethods+RegistryTimeZoneInformation"), $asm00.TypeRef("System.DateTime"), 
          $asm00.TypeRef("System.DateTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCustomTimeZone", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm00.TypeRef("System.TimeSpan"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCustomTimeZone", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm00.TypeRef("System.TimeSpan"), 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateCustomTimeZone", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm00.TypeRef("System.TimeSpan"), 
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindIdFromTimeZoneInformation", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:true }, "FindSystemTimeZoneById", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromSerializedString", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUtcOffset", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DisplayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Local", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "get_s_internalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_s_systemTimeZones", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StandardName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SupportsDaylightSavingTime", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Utc", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAdjustmentRuleForTime", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAdjustmentRules", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAmbiguousTimeOffsets", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.TimeSpan")]), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAmbiguousTimeOffsets", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.TimeSpan")]), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCorrespondingKind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTimeKind"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDaylightTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Globalization.DaylightTime"), [$.Int32, $asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsAmbiguousTime", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.DateTime"), $asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule"), 
          $asm00.TypeRef("System.Globalization.DaylightTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsDaylightSavings", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.DateTime"), $asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule"), 
          $asm00.TypeRef("System.Globalization.DaylightTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsDaylightSavingsFromUtc", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.DateTime"), $.Int32, 
          $asm00.TypeRef("System.TimeSpan"), $asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetIsInvalidTime", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.DateTime"), $asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule"), 
          $asm00.TypeRef("System.Globalization.DaylightTime")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLocalTimeZone", 
      JSIL.MethodSignature.Return($.Type)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetLocalTimeZoneFromWin32Data", 
      new JSIL.MethodSignature($.Type, [$asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSystemTimeZones", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetTimeZone", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUtcOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUtcOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtcOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$asm00.TypeRef("System.DateTime"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtcOffsetFromUtc", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$asm00.TypeRef("System.DateTime"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetUtcOffsetFromUtc", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [
          $asm00.TypeRef("System.DateTime"), $.Type, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasSameRules", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAmbiguousTime", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsAmbiguousTime", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDaylightSavingTime", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDaylightSavingTime", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInvalidTime", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "set_s_systemTimeZones", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:false, Public:true }, "ToSerializedString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "TransitionTimeFromTimeZoneInformation", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Nullable`1", [$asm03.TypeRef("System.TimeZoneInfo+TransitionTime")]), [$asm03.TypeRef("Microsoft.Win32.NativeMethods+RegistryTimeZoneInformation"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "TransitionTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int32, $asm03.TypeRef("System.TimeZoneInfo+TransitionTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCompareStandardDate", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation"), $asm03.TypeRef("Microsoft.Win32.NativeMethods+RegistryTimeZoneInformation")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryCompareTimeZoneInformationToRegistry", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("Microsoft.Win32.NativeMethods+TimeZoneInformation"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryCreateAdjustmentRules", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm03.TypeRef("Microsoft.Win32.NativeMethods+RegistryTimeZoneInformation"), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")])]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetLocalizedNameByMuiNativeResource", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryGetLocalizedNameByNativeResource", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "TryGetLocalizedNamesByRegistryKey", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("Microsoft.Win32.RegistryKey"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetTimeZone", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo+TimeZoneInfoResult"), [
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type]), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Exception")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryGetTimeZoneByRegistryKey", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo+TimeZoneInfoResult"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Exception")])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UtcOffsetOutOfRange", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateTimeZoneInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.TimeSpan"), 
          $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.Constant({Static:true , Public:false}, "c_timeZonesRegistryHive", $.String, "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones");

    $.Constant({Static:true , Public:false}, "c_timeZonesRegistryHivePermissionList", $.String, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones");

    $.Constant({Static:true , Public:false}, "c_displayValue", $.String, "Display");

    $.Constant({Static:true , Public:false}, "c_daylightValue", $.String, "Dlt");

    $.Constant({Static:true , Public:false}, "c_standardValue", $.String, "Std");

    $.Constant({Static:true , Public:false}, "c_muiDisplayValue", $.String, "MUI_Display");

    $.Constant({Static:true , Public:false}, "c_muiDaylightValue", $.String, "MUI_Dlt");

    $.Constant({Static:true , Public:false}, "c_muiStandardValue", $.String, "MUI_Std");

    $.Constant({Static:true , Public:false}, "c_timeZoneInfoValue", $.String, "TZI");

    $.Constant({Static:true , Public:false}, "c_firstEntryValue", $.String, "FirstEntry");

    $.Constant({Static:true , Public:false}, "c_lastEntryValue", $.String, "LastEntry");

    $.Constant({Static:true , Public:false}, "c_timeZoneInfoRegistryHive", $.String, "SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation");

    $.Constant({Static:true , Public:false}, "c_timeZoneInfoRegistryHivePermissionList", $.String, "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation");

    $.Constant({Static:true , Public:false}, "c_disableDST", $.String, "DisableAutoDaylightTimeSet");

    $.Constant({Static:true , Public:false}, "c_disableDynamicDST", $.String, "DynamicDaylightTimeDisabled");

    $.Constant({Static:true , Public:false}, "c_utcId", $.String, "UTC");

    $.Constant({Static:true , Public:false}, "c_localId", $.String, "Local");

    $.Constant({Static:true , Public:false}, "c_maxKeyLength", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "c_ticksPerMillisecond", $.Int64, 10000);

    $.Constant({Static:true , Public:false}, "c_ticksPerSecond", $.Int64, 10000000);

    $.Constant({Static:true , Public:false}, "c_ticksPerMinute", $.Int64, 600000000);

    $.Constant({Static:true , Public:false}, "c_ticksPerHour", $.Int64, 36000000000);

    $.Constant({Static:true , Public:false}, "c_ticksPerDay", $.Int64, 864000000000);

    $.Constant({Static:true , Public:false}, "c_ticksPerDayRange", $.Int64, 863999990000);

    $.Field({Static:false, Public:false}, "m_id", $.String);

    $.Field({Static:false, Public:false}, "m_displayName", $.String);

    $.Field({Static:false, Public:false}, "m_standardDisplayName", $.String);

    $.Field({Static:false, Public:false}, "m_daylightDisplayName", $.String);

    $.Field({Static:false, Public:false}, "m_baseUtcOffset", $asm00.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_supportsDaylightSavingTime", $.Boolean);

    $.Field({Static:false, Public:false}, "m_adjustmentRules", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")]));

    $.Field({Static:true , Public:false}, "s_localTimeZone", $.Type);

    $.Field({Static:true , Public:false}, "s_utcTimeZone", $.Type);

    $.Field({Static:true , Public:false}, "s_readOnlySystemTimeZones", $asm00.TypeRef("System.Collections.ObjectModel.ReadOnlyCollection`1", [$.Type]));

    $.Field({Static:true , Public:false}, "s_allSystemTimeZonesRead", $.Boolean, false);

    $.Field({Static:true , Public:false}, "s_hiddenSystemTimeZones", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]));

    $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "s_systemTimeZones", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Type]));

    $.Property({Static:true , Public:false}, "s_internalSyncObject", $.Object);

    $.Property({Static:false, Public:true }, "Id", $.String);

    $.Property({Static:false, Public:true }, "DisplayName", $.String);

    $.Property({Static:false, Public:true }, "StandardName", $.String);

    $.Property({Static:false, Public:true }, "DaylightName", $.String);

    $.Property({Static:false, Public:true }, "BaseUtcOffset", $asm00.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "SupportsDaylightSavingTime", $.Boolean);

    $.Property({Static:true , Public:true }, "Local", $.Type);

    $.Property({Static:true , Public:true }, "Utc", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm00.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.TimeZoneInfo+TimeZoneInfoResult */ 

JSIL.MakeEnum(
  {
    FullName: "System.TimeZoneInfo+TimeZoneInfoResult", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Success: 0, 
    TimeZoneNotFoundException: 1, 
    InvalidTimeZoneException: 2, 
    SecurityException: 3, 
  }
);

/* class System.TimeZoneInfo+AdjustmentRule */ 

(function AdjustmentRule$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.TimeZoneInfo+AdjustmentRule", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateAdjustmentRule", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.DateTime"), 
          $asm00.TypeRef("System.TimeSpan"), $asm03.TypeRef("System.TimeZoneInfo+TransitionTime"), 
          $asm03.TypeRef("System.TimeZoneInfo+TransitionTime")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateEnd", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateStart", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightDelta", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightTransitionEnd", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.TimeZoneInfo+TransitionTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DaylightTransitionStart", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.TimeZoneInfo+TransitionTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:true , Public:false}, "ValidateAdjustmentRule", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.DateTime"), 
          $asm00.TypeRef("System.TimeSpan"), $asm03.TypeRef("System.TimeZoneInfo+TransitionTime"), 
          $asm03.TypeRef("System.TimeZoneInfo+TransitionTime")
        ])
    );

    $.Field({Static:false, Public:false}, "m_dateStart", $asm00.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_dateEnd", $asm00.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_daylightDelta", $asm00.TypeRef("System.TimeSpan"));

    $.Field({Static:false, Public:false}, "m_daylightTransitionStart", $asm03.TypeRef("System.TimeZoneInfo+TransitionTime"));

    $.Field({Static:false, Public:false}, "m_daylightTransitionEnd", $asm03.TypeRef("System.TimeZoneInfo+TransitionTime"));

    $.Property({Static:false, Public:true }, "DateStart", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "DateEnd", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "DaylightDelta", $asm00.TypeRef("System.TimeSpan"));

    $.Property({Static:false, Public:true }, "DaylightTransitionStart", $asm03.TypeRef("System.TimeZoneInfo+TransitionTime"));

    $.Property({Static:false, Public:true }, "DaylightTransitionEnd", $asm03.TypeRef("System.TimeZoneInfo+TransitionTime"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm00.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.TimeZoneInfo+TransitionTime */ 

(function TransitionTime$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.TimeZoneInfo+TransitionTime", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFixedDateRule", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.DateTime"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateFloatingDateRule", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.DateTime"), $.Int32, 
          $.Int32, $asm00.TypeRef("System.DayOfWeek")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateTransitionTime", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.DateTime"), $.Int32, 
          $.Int32, $.Int32, 
          $asm00.TypeRef("System.DayOfWeek"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Day", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DayOfWeek", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DayOfWeek"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsFixedDateRule", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Month", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TimeOfDay", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Week", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), "OnDeserialization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Runtime.Serialization.ISerializable.GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    )
      .Overrides($asm00.TypeRef("System.Runtime.Serialization.ISerializable"), "GetObjectData");

    $.ExternalMethod({Static:true , Public:false}, "ValidateTransitionTime", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.DateTime"), $.Int32, 
          $.Int32, $.Int32, 
          $asm00.TypeRef("System.DayOfWeek")
        ])
    );

    $.Field({Static:false, Public:false}, "m_timeOfDay", $asm00.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "m_month", $.Byte);

    $.Field({Static:false, Public:false}, "m_week", $.Byte);

    $.Field({Static:false, Public:false}, "m_day", $.Byte);

    $.Field({Static:false, Public:false}, "m_dayOfWeek", $asm00.TypeRef("System.DayOfWeek"));

    $.Field({Static:false, Public:false}, "m_isFixedDateRule", $.Boolean);

    $.Property({Static:false, Public:true }, "TimeOfDay", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true }, "Month", $.Int32);

    $.Property({Static:false, Public:true }, "Week", $.Int32);

    $.Property({Static:false, Public:true }, "Day", $.Int32);

    $.Property({Static:false, Public:true }, "DayOfWeek", $asm00.TypeRef("System.DayOfWeek"));

    $.Property({Static:false, Public:true }, "IsFixedDateRule", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IEquatable`1", [$.Type]), 
      /* 1 */ $asm00.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 2 */ $asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.TimeZoneInfo+StringSerializer */ 

(function StringSerializer$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.TimeZoneInfo+StringSerializer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetDeserializedTimeZoneInfo", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextAdjustmentRuleArrayValue", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule")]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextAdjustmentRuleValue", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo+AdjustmentRule"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextDateTimeValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Boolean, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextInt32Value", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextStringValue", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextTimeSpanValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextTransitionTimeValue", 
      new JSIL.MethodSignature($asm03.TypeRef("System.TimeZoneInfo+TransitionTime"), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetSerializedString", 
      new JSIL.MethodSignature($.String, [$asm03.TypeRef("System.TimeZoneInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SerializeSubstitute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "SerializeTransitionTime", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.TimeZoneInfo+TransitionTime"), $asm00.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipVersionNextDataFields", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyIsEscapableCharacter", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.Constant({Static:true , Public:false}, "initialCapacityForString", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "esc", $.Char, "\\");

    $.Constant({Static:true , Public:false}, "sep", $.Char, ";");

    $.Constant({Static:true , Public:false}, "lhs", $.Char, "[");

    $.Constant({Static:true , Public:false}, "rhs", $.Char, "]");

    $.Constant({Static:true , Public:false}, "escString", $.String, "\\");

    $.Constant({Static:true , Public:false}, "sepString", $.String, ";");

    $.Constant({Static:true , Public:false}, "lhsString", $.String, "[");

    $.Constant({Static:true , Public:false}, "rhsString", $.String, "]");

    $.Constant({Static:true , Public:false}, "escapedEsc", $.String, "\\\\");

    $.Constant({Static:true , Public:false}, "escapedSep", $.String, "\\;");

    $.Constant({Static:true , Public:false}, "escapedLhs", $.String, "\\[");

    $.Constant({Static:true , Public:false}, "escapedRhs", $.String, "\\]");

    $.Constant({Static:true , Public:false}, "dateTimeFormat", $.String, "MM:dd:yyyy");

    $.Constant({Static:true , Public:false}, "timeOfDayFormat", $.String, "HH:mm:ss.FFF");

    $.Field({Static:false, Public:false}, "m_serializedText", $.String);

    $.Field({Static:false, Public:false}, "m_currentTokenStartIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_state", $asm03.TypeRef("System.TimeZoneInfo+StringSerializer+State"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.TimeZoneInfo+StringSerializer+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.TimeZoneInfo+StringSerializer+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Escaped: 0, 
    NotEscaped: 1, 
    StartOfToken: 2, 
    EndOfLine: 3, 
  }
);

/* class System.TimeZoneInfo+TimeZoneInfoComparer */ 

(function TimeZoneInfoComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.TimeZoneInfo+TimeZoneInfoComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lSystem.TimeZoneInfo$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.TimeZoneInfo"), $asm03.TypeRef("System.TimeZoneInfo")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("System.TimeZoneInfo")]), "Compare");

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IComparer`1", [$asm03.TypeRef("System.TimeZoneInfo")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.TimeZoneNotFoundException */ 

(function TimeZoneNotFoundException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.TimeZoneNotFoundException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.InvalidTimeZoneException */ 

(function InvalidTimeZoneException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.InvalidTimeZoneException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.IO");
/* class System.IO.__Error */ 

(function __Error$Members () {
  var $, $thisType;














  JSIL.MakeStaticClass("System.IO.__Error", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "EndOfFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndReadCalledTwice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWaitForConnectionCalledTwice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndWriteCalledTwice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "FileNotOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDisplayablePath", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "PipeNotOpen", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ReadNotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SeekNotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WinIOError", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "WriteNotSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "WrongAsyncResult", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.BufferedStream2 */ 

(function BufferedStream2$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.IO.Stream"), 
      Name: "System.IO.BufferedStream2", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddUnderlyingStreamPosition", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "DiscardBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushWrite", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingStreamPosition", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_UnderlyingStreamPosition", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", $.Int32, 32768);

    $.Field({Static:false, Public:false}, "bufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "_buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "_pendingBufferCopy", $.Int32);

    $.Field({Static:false, Public:false}, "_writePos", $.Int32);

    $.Field({Static:false, Public:false}, "_readPos", $.Int32);

    $.Field({Static:false, Public:false}, "_readLen", $.Int32);

    $.Field({Static:false, Public:false}, "pos", $.Int64);

    $.Property({Static:false, Public:false}, "UnderlyingStreamPosition", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.LogStream */ 

(function LogStream$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.IO.BufferedStream2"), 
      Name: "System.IO.LogStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm03.TypeRef("System.IO.LogRetentionOption"), $.Int64, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_DisableLogging", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "_Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm00.TypeRef("System.IO.FileShare"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $asm00.TypeRef("System.Security.Permissions.FileIOPermissionAccess"), $asm00.TypeRef("System.IO.FileMode"), 
          $.Int32, $.Boolean
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "EnforceRetentionPolicy", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"), $.Int64])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [$asm00.TypeRef("System.IO.FileShare")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm00.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SeekCore", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm00.TypeRef("System.IO.SeekOrigin")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int64])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:false}, "DefaultFileSize", $.Int64, 10240000);

    $.Constant({Static:true , Public:false}, "DefaultNumberOfFiles", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DefaultRetention", $asm03.TypeRef("System.IO.LogRetentionOption"), 2);

    $.Constant({Static:true , Public:false}, "_retentionRetryThreshold", $.Int32, 2);

    $.Field({Static:false, Public:false}, "_retention", $asm03.TypeRef("System.IO.LogRetentionOption"));

    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64);

    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32);

    $.Field({Static:false, Public:false}, "_currentFileNum", $.Int32);

    $.Field({Static:false, Public:false}, "_disableLogging", $.Boolean);

    $.Field({Static:false, Public:false}, "_retentionRetryCount", $.Int32);

    $.Field({Static:false, Public:false}, "_canRead", $.Boolean);

    $.Field({Static:false, Public:false}, "_canWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "_canSeek", $.Boolean);

    $.Field({Static:false, Public:false}, "_handle", $asm00.TypeRef("Microsoft.Win32.SafeHandles.SafeFileHandle"));

    $.Field({Static:false, Public:false}, "_fileName", $.String);

    $.Field({Static:false, Public:false}, "_fileNameWithoutExt", $.String);

    $.Field({Static:false, Public:false}, "_fileExt", $.String);

    $.Field({Static:false, Public:false}, "_pathSav", $.String);

    $.Field({Static:false, Public:false}, "_fAccessSav", $.Int32);

    $.Field({Static:false, Public:false}, "_shareSav", $asm00.TypeRef("System.IO.FileShare"));

    $.Field({Static:false, Public:false}, "_secAttrsSav", $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"));

    $.Field({Static:false, Public:false}, "_secAccessSav", $asm00.TypeRef("System.Security.Permissions.FileIOPermissionAccess"));

    $.Field({Static:false, Public:false}, "_modeSav", $asm00.TypeRef("System.IO.FileMode"));

    $.Field({Static:false, Public:false}, "_flagsAndAttributesSav", $.Int32);

    $.Field({Static:false, Public:false}, "_seekToEndSav", $.Boolean);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.LogRetentionOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.LogRetentionOption", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4, 
  }
);

/* class System.Diagnostics.EventSchemaTraceListener */ 

(function EventSchemaTraceListener$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Diagnostics.TextWriterTraceListener"), 
      Name: "System.Diagnostics.EventSchemaTraceListener", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption"), 
          $.Int64, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "_InternalBuildRaw", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "_InternalWriteRaw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxFileSize", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "_SetMaxNumberOfFiles", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildEscaped", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFooter", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Text.StringBuilder"), $asm01.TypeRef("System.Diagnostics.TraceEventType"), 
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.Boolean, 
          $asm01.TypeRef("System.Diagnostics.TraceOptions")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildHeader", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Text.StringBuilder"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Boolean, $asm01.TypeRef("System.Diagnostics.TraceOptions")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "BuildMessage", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildUserData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWriter", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fail", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_BufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsThreadSafe", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumFileSize", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaximumNumberOfFiles", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TraceLogRetentionOption", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Writer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.TextWriter"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetSupportedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Writer", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.Object
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceData", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(4, "data", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String, $jsilcore.TypeRef("System.Array", [$.Object])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Parameter(5, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceEvent", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $asm01.TypeRef("System.Diagnostics.TraceEventType"), $.Int32, 
          $.String
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "TraceTransfer", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Diagnostics.TraceEventCache"), $.String, 
          $.Int32, $.String, 
          $asm00.TypeRef("System.Guid")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "s_optionBufferSize", $.String, "bufferSize");

    $.Constant({Static:true , Public:false}, "s_optionLogRetention", $.String, "logRetentionOption");

    $.Constant({Static:true , Public:false}, "s_optionMaximumFileSize", $.String, "maximumFileSize");

    $.Constant({Static:true , Public:false}, "s_optionMaximumNumberOfFiles", $.String, "maximumNumberOfFiles");

    $.Constant({Static:true , Public:false}, "s_userDataHeader", $.String, "<System.Diagnostics.UserData xmlns=\"http://schemas.microsoft.com/win/2006/09/System.Diagnostics/UserData/\">");

    $.Constant({Static:true , Public:false}, "s_eventHeader", $.String, "<Event xmlns=\"http://schemas.microsoft.com/win/2004/08/events/event\"><System><Provider Guid=\"");

    $.Constant({Static:true , Public:false}, "s_defaultPayloadSize", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "_retryThreshold", $.Int32, 2);

    $.Field({Static:true , Public:false, ReadOnly:true }, "machineName", $.String);

    $.Field({Static:false, Public:false}, "traceWriter", $asm03.TypeRef("System.Diagnostics.EventSchemaTraceListener+TraceWriter"));

    $.Field({Static:false, Public:false}, "fileName", $.String);

    $.Field({Static:false, Public:false}, "_initialized", $.Boolean);

    $.Field({Static:false, Public:false}, "_bufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "_retention", $asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

    $.Field({Static:false, Public:false}, "_maxFileSize", $.Int64);

    $.Field({Static:false, Public:false}, "_maxNumberOfFiles", $.Int32);

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object);

    $.Property({Static:false, Public:true }, "Writer", $asm00.TypeRef("System.IO.TextWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsThreadSafe", $.Boolean);

    $.Property({Static:false, Public:true }, "BufferSize", $.Int32);

    $.Property({Static:false, Public:true }, "TraceLogRetentionOption", $asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption"));

    $.Property({Static:false, Public:true }, "MaximumFileSize", $.Int64);

    $.Property({Static:false, Public:true }, "MaximumNumberOfFiles", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.EventSchemaTraceListener+TraceWriter */ 

(function TraceWriter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.IO.TextWriter"), 
      Name: "System.Diagnostics.EventSchemaTraceListener+TraceWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm03.TypeRef("System.Diagnostics.TraceLogRetentionOption"), $.Int64, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncodingWithFallback", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Text.Encoding"), [$asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "encNoBOMwithFallback", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "stream", $asm00.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "m_lockObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.TraceLogRetentionOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.TraceLogRetentionOption", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    UnlimitedSequentialFiles: 0, 
    LimitedCircularFiles: 1, 
    SingleFileUnboundedSize: 2, 
    LimitedSequentialFiles: 3, 
    SingleFileBoundedSize: 4, 
  }
);

/* class System.Diagnostics.UnescapedXmlDiagnosticData */ 

(function UnescapedXmlDiagnosticData$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.UnescapedXmlDiagnosticData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnescapedXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnescapedXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "_xmlString", $.String);

    $.Property({Static:false, Public:true }, "UnescapedXml", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Diagnostics.PerformanceData");
/* class System.Diagnostics.PerformanceData.CounterData */ 

(function CounterData$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.Int64]))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Int64)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_offset", $jsilcore.TypeRef("JSIL.Pointer", [$.Int64]));

    $.Property({Static:false, Public:true }, "Value", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet */ 

(function CounterSetInstanceCounterDataSet$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.PerformanceData.CounterData"), [$.String])
    );

    $.Field({Static:false, Public:false}, "m_instance", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"));

    $.Field({Static:false, Public:false}, "m_counters", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterData")]));

    $.Field({Static:false, Public:false}, "m_disposed", $.Int32);

    $.Field({Static:false, Public:false}, "m_dataBlock", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.Property({Static:false, Public:true }, "Item", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterData"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Diagnostics.PerformanceData.CounterSet */ 

(function CounterSet$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Guid"), $asm00.TypeRef("System.Guid"), 
          $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [$.Int32, $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddCounter", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterType"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateCounterSetInstance", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstance"), [$.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityTreatAsSafeAttribute"))
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "s_platformNotSupported", $.Boolean);

    $.Field({Static:false, Public:false}, "m_provider", $asm03.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"));

    $.Field({Static:false, Public:false}, "m_providerGuid", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_counterSet", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_instType", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "m_lockObject", $.Object);

    $.Field({Static:false, Public:false}, "m_instanceCreated", $.Boolean);

    $.Field({Static:false, Public:false}, "m_stringToId", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "m_idToCounter", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.Int32, $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterType")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.CounterSetInstance */ 

(function CounterSetInstance$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.CounterSetInstance", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSet"), $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_Counters", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"))
    );

    $.Field({Static:false, Public:false}, "m_counterSet", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSet"));

    $.Field({Static:false, Public:false}, "m_instName", $.String);

    $.Field({Static:false, Public:false}, "m_active", $.Int32);

    $.Field({Static:false, Public:false}, "m_counters", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

    $.Field({Static:false, Public:false}, "m_nativeInst", $jsilcore.TypeRef("JSIL.Pointer", [$asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+PerfCounterSetInstanceStruct")]));

    $.Property({Static:false, Public:true }, "Counters", $asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Diagnostics.PerformanceData.CounterSetInstanceType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceData.CounterSetInstanceType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Single: 0, 
    Multiple: 2, 
    GlobalAggregate: 4, 
    MultipleAggregate: 6, 
    GlobalAggregateWithHistory: 11, 
    InstanceAggregate: 22, 
  }
);

/* enum System.Diagnostics.PerformanceData.CounterType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Diagnostics.PerformanceData.CounterType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    RawDataHex32: 0, 
    RawDataHex64: 256, 
    RawData32: 65536, 
    RawData64: 65792, 
    Delta32: 4195328, 
    Delta64: 4195584, 
    SampleCounter: 4260864, 
    QueueLength: 4523008, 
    LargeQueueLength: 4523264, 
    QueueLength100Ns: 5571840, 
    QueueLengthObjectTime: 6620416, 
    RateOfCountPerSecond32: 272696320, 
    RateOfCountPerSecond64: 272696576, 
    RawFraction32: 537003008, 
    RawFraction64: 537003264, 
    PercentageActive: 541132032, 
    PrecisionSystemTimer: 541525248, 
    PercentageActive100Ns: 542180608, 
    PrecisionTimer100Ns: 542573824, 
    ObjectSpecificTimer: 543229184, 
    PrecisionObjectSpecificTimer: 543622400, 
    SampleFraction: 549585920, 
    PercentageNotActive: 557909248, 
    PercentageNotActive100Ns: 558957824, 
    MultiTimerPercentageActive: 574686464, 
    MultiTimerPercentageActive100Ns: 575735040, 
    MultiTimerPercentageNotActive: 591463680, 
    MultiTimerPercentageNotActive100Ns: 592512256, 
    AverageTimer32: 805438464, 
    ElapsedTime: 807666944, 
    AverageCount64: 1073874176, 
    SampleBase: 1073939457, 
    AverageBase: 1073939458, 
    RawBase32: 1073939459, 
    RawBase64: 1073939712, 
    MultiTimerBase: 1107494144, 
  }
);

/* class System.Diagnostics.PerformanceData.PerfProvider */ 

(function PerfProvider$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Diagnostics.PerformanceData.PerfProvider", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Guid"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_providerGuid", $asm00.TypeRef("System.Guid"));

    $.Field({Static:false, Public:false}, "m_counterSet", $.Int32);

    $.Field({Static:false, Public:false}, "m_hProvider", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePerfProviderHandle"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Diagnostics.PerformanceData.PerfProviderCollection */ 

(function PerfProviderCollection$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Diagnostics.PerformanceData.PerfProviderCollection", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_s_lockObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "QueryProvider", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Diagnostics.PerformanceData.PerfProvider"), [$asm00.TypeRef("System.Guid")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RegisterCounterSet", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RemoveProvider", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Guid"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "UnregisterCounterSet", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Guid"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterSetInstanceType", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateCounterType", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Diagnostics.PerformanceData.CounterType")])
    );

    $.Field({Static:true , Public:false}, "s_hiddenInternalSyncObject", $.Object);

    $.Field({Static:true , Public:false}, "s_providerList", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm03.TypeRef("System.Diagnostics.PerformanceData.PerfProvider")]));

    $.Field({Static:true , Public:false}, "s_counterSetList", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.Object, $.Int32]));

    $.Field({Static:true , Public:false}, "s_counterTypes", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Diagnostics.PerformanceData.CounterType")]));

    $.Field({Static:true , Public:false}, "s_counterSetInstanceTypes", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Diagnostics.PerformanceData.CounterSetInstanceType")]));

    $.Property({Static:true , Public:false}, "s_lockObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
/* class System.Collections.Generic.BitHelper */ 

(function BitHelper$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.BitHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Int32]), $.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMarked", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "MarkBit", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ToIntArrayLength", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Constant({Static:true , Public:false}, "MarkedBitFlag", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "IntSize", $.Byte, 32);

    $.Field({Static:false, Public:false}, "m_length", $.Int32);

    $.Field({Static:false, Public:false}, "m_arrayPtr", $jsilcore.TypeRef("JSIL.Pointer", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_array", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "useStackAlloc", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashHelpers */ 

(function HashHelpers$Members () {
  var $, $thisType;




  JSIL.MakeStaticClass("System.Collections.Generic.HashHelpers", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "GetMinPrime", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrime", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.ExternalMethod({Static:true , Public:false}, "IsPrime", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    )
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.ReliabilityContractAttribute"), function () { return [$asm00.System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, $asm00.System.Runtime.ConstrainedExecution.Cer.Success]; });

    $.Field({Static:true , Public:false, ReadOnly:true }, "primes", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSet`1 */ 

(function HashSet$b1$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSet`1", 
      IsPublic: true, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIfNotPresent", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrGetLocation", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "AreEqualityComparersEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueAndUnfoundElements", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Collections.Generic.HashSet`1+ElementCount", [$.GenericParameter("T")]), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), $.Boolean])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsAllElements", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateSetComparer", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "ExceptWith", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Comparer", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Collections.Generic.HashSet`1+Enumerator", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HashSetEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), 
          $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncreaseCapacity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Initialize", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalGetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalIndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IntersectWith", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IntersectWithHashSetWithSameEC", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsProperSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "IsProperSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "IsSubsetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "IsSubsetOfHashSetWithSameEC", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsSupersetOf", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnDeserialization", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "Overlaps", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveWhere", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Predicate`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetEquals", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "SymmetricExceptWith", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithEnumerable", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "SymmetricExceptWithUniqueHashSet", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), "get_IsReadOnly");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "TrimExcess", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "UnionWith", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.Constant({Static:true , Public:false}, "Lower31BitMask", $.Int32, 2147483647);

    $.Constant({Static:true , Public:false}, "GrowthFactor", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "StackAllocThreshold", $.Int32, 100);

    $.Constant({Static:true , Public:false}, "ShrinkThreshold", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "CapacityName", $.String, "Capacity");

    $.Constant({Static:true , Public:false}, "ElementsName", $.String, "Elements");

    $.Constant({Static:true , Public:false}, "ComparerName", $.String, "Comparer");

    $.Constant({Static:true , Public:false}, "VersionName", $.String, "Version");

    $.Field({Static:false, Public:false}, "m_buckets", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "m_slots", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Collections.Generic.HashSet`1+Slot", [$.GenericParameter("T")])]));

    $.Field({Static:false, Public:false}, "m_count", $.Int32);

    $.Field({Static:false, Public:false}, "m_lastIndex", $.Int32);

    $.Field({Static:false, Public:false}, "m_freeList", $.Int32);

    $.Field({Static:false, Public:false}, "m_comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "m_version", $.Int32);

    $.Field({Static:false, Public:false}, "m_siInfo", $asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.ICollection$lT$g.IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 3 */ $asm00.TypeRef("System.Runtime.Serialization.ISerializable"), 
      /* 4 */ $asm00.TypeRef("System.Runtime.Serialization.IDeserializationCallback"), 
      /* 5 */ $asm09.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Count = {Count}"]; })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerTypeProxyAttribute"), function () { return [$asm03.System.Collections.Generic.HashSetDebugView$b1.__Type__]; });

})();

/* struct System.Collections.Generic.HashSet`1+ElementCount */ 

(function ElementCount$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+ElementCount", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "uniqueCount", $.Int32);

    $.Field({Static:false, Public:false}, "unfoundCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Slot */ 

(function Slot$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Slot", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "value", $.GenericParameter("T"));

    $.Field({Static:false, Public:false}, "next", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Collections.Generic.HashSet`1+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Collections.Generic.HashSet`1+Enumerator", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "set", $asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "version", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm00.TypeRef("System.IDisposable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSetDebugView`1 */ 

(function HashSetDebugView$b1$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSetDebugView`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), null)
    );

    $.Field({Static:false, Public:false}, "set", $asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]));

    $.Property({Static:false, Public:true }, "Items", $jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]))
      .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerBrowsableAttribute"), function () { return [$asm00.System.Diagnostics.DebuggerBrowsableState.RootHidden]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Collections.Generic.HashSetEqualityComparer`1 */ 

(function HashSetEqualityComparer$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Collections.Generic.HashSetEqualityComparer`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")]), $asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "m_comparer", $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.GenericParameter("T")]));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$asm03.TypeRef("System.Collections.Generic.HashSet`1", [$.GenericParameter("T")])])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.HandleInheritability */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.HandleInheritability", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Inheritable: 1, 
  }
);

JSIL.DeclareNamespace("System.IO.Pipes");
/* enum System.IO.Pipes.PipeDirection */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeDirection", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    In: 1, 
    Out: 2, 
    InOut: 3, 
  }
);

/* enum System.IO.Pipes.PipeTransmissionMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeTransmissionMode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Byte: 0, 
    Message: 1, 
  }
);

/* enum System.IO.Pipes.PipeOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    WriteThrough: -2147483648, 
    None: 0, 
    Asynchronous: 1073741824, 
  }
);

/* class System.IO.Pipes.PipeStream */ 

(function PipeStream$Members () {
  var $, $thisType;






















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.IO.Stream"), 
      Name: "System.IO.Pipes.PipeStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.IO.Pipes.PipeDirection"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AsyncPSCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginReadCore", 
      new JSIL.MethodSignature($asm03.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "BeginWriteCore", 
      new JSIL.MethodSignature($asm03.TypeRef("System.IO.Pipes.PipeStreamAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckWriteOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.IAsyncResult")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IAsyncResult"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InBufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_InternalHandle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_IsAsync", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsConnected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsHandleExposed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMessageComplete", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OutBufferSize", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "get_SafePipeHandle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "get_State", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetAccessControl", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeSecurity"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [
          $asm03.TypeRef("System.IO.HandleInheritability"), $asm03.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "GetSecAttrs", 
      new JSIL.MethodSignature($asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), [$asm03.TypeRef("System.IO.HandleInheritability")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeHandle", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $.Boolean, 
          $.Boolean
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadCore", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "ReadFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm00.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsConnected", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "set_State", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessControl", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeSecurity"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateReadMode", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForPipeDrain", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WinIOError", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteCore", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "WriteFileNative", 
      new JSIL.MethodSignature($.Int32, [
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "_canUseAsync", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "IOCallback", $asm00.TypeRef("System.Threading.IOCompletionCallback"));

    $.Field({Static:false, Public:false}, "m_handle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "m_canRead", $.Boolean);

    $.Field({Static:false, Public:false}, "m_canWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isAsync", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isMessageComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isFromExistingHandle", $.Boolean);

    $.Field({Static:false, Public:false}, "m_isHandleExposed", $.Boolean);

    $.Field({Static:false, Public:false}, "m_readMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Field({Static:false, Public:false}, "m_transmissionMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Field({Static:false, Public:false}, "m_pipeDirection", $asm03.TypeRef("System.IO.Pipes.PipeDirection"));

    $.Field({Static:false, Public:false}, "m_outBufferSize", $.Int32);

    $.Field({Static:false, Public:false}, "m_state", $asm03.TypeRef("System.IO.Pipes.PipeState"));

    $.Property({Static:false, Public:true }, "IsConnected", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAsync", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMessageComplete", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "InBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "OutBufferSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true }, "SafePipeHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "InternalHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:false}, "IsHandleExposed", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.Property({Static:false, Public:false}, "State", $asm03.TypeRef("System.IO.Pipes.PipeState"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.AnonymousPipeServerStream */ 

(function AnonymousPipeServerStream$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.AnonymousPipeServerStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeDirection"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.HandleInheritability")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.HandleInheritability"), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.HandleInheritability"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeSecurity")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), 
          $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES"), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "DisposeLocalCopyOfClientHandle", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ClientSafePipeHandle", 
      JSIL.MethodSignature.Return($asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "GetClientHandleAsString", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_clientHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "m_clientHandleExposed", $.Boolean);

    $.Property({Static:false, Public:true }, "ClientSafePipeHandle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.AnonymousPipeClientStream */ 

(function AnonymousPipeClientStream$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.AnonymousPipeClientStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.IO.Pipes.PipeDirection"), $.String])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TransmissionMode", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_ReadMode", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "TransmissionMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMode", $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.IO.Pipes.PipeStreamImpersonationWorker */ 

JSIL.MakeDelegate("System.IO.Pipes.PipeStreamImpersonationWorker", true, [], 
  JSIL.MethodSignature.Void);

/* class System.IO.Pipes.NamedPipeServerStream */ 

(function NamedPipeServerStream$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.NamedPipeServerStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm03.TypeRef("System.IO.Pipes.PipeOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm03.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm03.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeSecurity")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm03.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm03.TypeRef("System.IO.HandleInheritability")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm03.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeSecurity"), 
          $asm03.TypeRef("System.IO.HandleInheritability"), $asm03.TypeRef("System.IO.Pipes.PipeAccessRights")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "AsyncWaitForConnectionCallback", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")])
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "BeginWaitForConnection", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IAsyncResult"), [$asm00.TypeRef("System.AsyncCallback"), $.Object])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsServer", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckDisconnectOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Create", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeDirection"), 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeTransmissionMode"), 
          $asm03.TypeRef("System.IO.Pipes.PipeOptions"), $.Int32, 
          $.Int32, $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm03.TypeRef("Microsoft.Win32.UnsafeNativeMethods+SECURITY_ATTRIBUTES")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Disconnect", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "EndWaitForConnection", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IAsyncResult"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetImpersonationUserName", 
      JSIL.MethodSignature.Return($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "ImpersonateAndTryCode", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "RevertImpersonationOnBackout", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"))
      .Attribute($asm00.TypeRef("System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RunAsClient", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "WaitForConnection", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Constant({Static:true , Public:true }, "MaxAllowedServerInstances", $.Int32, -1);

    $.Field({Static:true , Public:false}, "s_maxUsernameLength", $.Int32, 20);

    $.Field({Static:true , Public:false, ReadOnly:true }, "WaitForConnectionCallback", $asm00.TypeRef("System.Threading.IOCompletionCallback"));

    $.Field({Static:true , Public:false}, "tryCode", $asm00.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers+TryCode"));

    $.Field({Static:true , Public:false}, "cleanupCode", $asm00.TypeRef("System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeServerStream+ExecuteHelper */ 

(function ExecuteHelper$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.NamedPipeServerStream+ExecuteHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"), $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_userCode", $asm03.TypeRef("System.IO.Pipes.PipeStreamImpersonationWorker"));

    $.Field({Static:false, Public:false}, "m_handle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "m_mustRevert", $.Boolean);

    $.Field({Static:false, Public:false}, "m_impersonateErrorCode", $.Int32);

    $.Field({Static:false, Public:false}, "m_revertImpersonateErrorCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.NamedPipeClientStream */ 

(function NamedPipeClientStream$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm03.TypeRef("System.IO.Pipes.PipeStream"), 
      Name: "System.IO.Pipes.NamedPipeClientStream", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.IO.Pipes.PipeDirection")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.Pipes.PipeOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm00.TypeRef("System.Security.Principal.TokenImpersonationLevel")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $asm03.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm00.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm03.TypeRef("System.IO.HandleInheritability")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm03.TypeRef("System.IO.Pipes.PipeOptions"), 
          $asm00.TypeRef("System.Security.Principal.TokenImpersonationLevel"), $asm03.TypeRef("System.IO.HandleInheritability")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm03.TypeRef("System.IO.Pipes.PipeDirection"), $.Boolean, 
          $.Boolean, $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle")
        ])
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "CheckConnectOperationsClient", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckPipePropertyOperations", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Connect", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:true , Public:false}, "DirectionFromRights", 
      new JSIL.MethodSignature($asm03.TypeRef("System.IO.Pipes.PipeDirection"), [$asm03.TypeRef("System.IO.Pipes.PipeAccessRights")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumberOfServerInstances", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.Field({Static:false, Public:false}, "m_normalizedPipePath", $.String);

    $.Field({Static:false, Public:false}, "m_impersonationLevel", $asm00.TypeRef("System.Security.Principal.TokenImpersonationLevel"));

    $.Field({Static:false, Public:false}, "m_pipeOptions", $asm03.TypeRef("System.IO.Pipes.PipeOptions"));

    $.Field({Static:false, Public:false}, "m_inheritability", $asm03.TypeRef("System.IO.HandleInheritability"));

    $.Field({Static:false, Public:false}, "m_access", $.Int32);

    $.Property({Static:false, Public:true }, "NumberOfServerInstances", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeAsyncResult */ 

(function PipeAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.PipeAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Threading.WaitHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm00.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "_userStateObject", $.Object);

    $.Field({Static:false, Public:false}, "_waitHandle", $asm00.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "_handle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")]));

    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32);

    $.Field({Static:false, Public:false}, "_errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm00.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Pipes.PipeState */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    WaitingToConnect: 0, 
    Connected: 1, 
    Broken: 2, 
    Disconnected: 3, 
    Closed: 4, 
  }
);

/* class System.IO.Pipes.PipeStreamAsyncResult */ 

(function PipeStreamAsyncResult$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.IO.Pipes.PipeStreamAsyncResult", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallback", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CallUserCallbackWorker", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncState", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AsyncWaitHandle", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Threading.WaitHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CompletedSynchronously", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsCompleted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "_userCallback", $asm00.TypeRef("System.AsyncCallback"));

    $.Field({Static:false, Public:false}, "_userStateObject", $.Object);

    $.Field({Static:false, Public:false}, "_waitHandle", $asm00.TypeRef("System.Threading.ManualResetEvent"));

    $.Field({Static:false, Public:false}, "_handle", $asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"));

    $.Field({Static:false, Public:false}, "_overlapped", $jsilcore.TypeRef("JSIL.Pointer", [$asm00.TypeRef("System.Threading.NativeOverlapped")]));

    $.Field({Static:false, Public:false}, "_EndXxxCalled", $.Int32);

    $.Field({Static:false, Public:false}, "_numBytes", $.Int32);

    $.Field({Static:false, Public:false}, "_errorCode", $.Int32);

    $.Field({Static:false, Public:false}, "_isMessageComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_isWrite", $.Boolean);

    $.Field({Static:false, Public:false}, "_isComplete", $.Boolean);

    $.Field({Static:false, Public:false}, "_completedSynchronously", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncState", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsCompleted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AsyncWaitHandle", $asm00.TypeRef("System.Threading.WaitHandle"));

    $.Property({Static:false, Public:true , Virtual:true }, "CompletedSynchronously", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IAsyncResult")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.IO.Pipes.PipeAccessRights */ 

JSIL.MakeEnum(
  {
    FullName: "System.IO.Pipes.PipeAccessRights", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    ReadData: 1, 
    WriteData: 2, 
    CreateNewInstance: 4, 
    ReadExtendedAttributes: 8, 
    WriteExtendedAttributes: 16, 
    ReadAttributes: 128, 
    WriteAttributes: 256, 
    Write: 274, 
    Delete: 65536, 
    ReadPermissions: 131072, 
    Read: 131209, 
    ReadWrite: 131483, 
    ChangePermissions: 262144, 
    TakeOwnership: 524288, 
    Synchronize: 1048576, 
    FullControl: 2032031, 
    AccessSystemSecurity: 16777216, 
  }
);

/* class System.IO.Pipes.PipeAccessRule */ 

(function PipeAccessRule$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.AccessControl.AccessRule"), 
      Name: "System.IO.Pipes.PipeAccessRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm00.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Security.Principal.IdentityReference"), $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm00.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm00.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), $asm00.TypeRef("System.Security.AccessControl.AccessControlType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeAccessRights"))
    );

    $.ExternalMethod({Static:true , Public:false}, "RightsFromAccessMask", 
      new JSIL.MethodSignature($asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), [$.Int32])
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeAuditRule */ 

(function PipeAuditRule$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.AccessControl.AuditRule"), 
      Name: "System.IO.Pipes.PipeAuditRule", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Security.Principal.IdentityReference"), $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm00.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"), 
          $asm00.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm00.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AccessMaskFromRights", 
      new JSIL.MethodSignature($.Int32, [$asm03.TypeRef("System.IO.Pipes.PipeAccessRights")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PipeAccessRights", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.IO.Pipes.PipeAccessRights"))
    );

    $.Property({Static:false, Public:true }, "PipeAccessRights", $asm03.TypeRef("System.IO.Pipes.PipeAccessRights"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.IO.Pipes.PipeSecurity */ 

(function PipeSecurity$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Security.AccessControl.NativeObjectSecurity"), 
      Name: "System.IO.Pipes.PipeSecurity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm03.TypeRef("Microsoft.Win32.SafeHandles.SafePipeHandle"), $asm00.TypeRef("System.Security.AccessControl.AccessControlSections")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AccessRuleFactory", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.AccessControl.AccessRule"), [
          $asm00.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm00.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm00.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm00.TypeRef("System.Security.AccessControl.AccessControlType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAccessRule", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAuditRule", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AuditRuleFactory", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.AccessControl.AuditRule"), [
          $asm00.TypeRef("System.Security.Principal.IdentityReference"), $.Int32, 
          $.Boolean, $asm00.TypeRef("System.Security.AccessControl.InheritanceFlags"), 
          $asm00.TypeRef("System.Security.AccessControl.PropagationFlags"), $asm00.TypeRef("System.Security.AccessControl.AuditFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRightType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AccessRuleType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AuditRuleType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAccessControlSectionsFromChanges", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.AccessControl.AccessControlSections"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Runtime.InteropServices.SafeHandle"))
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:false}, "Persist", 
      JSIL.MethodSignature.Action($.String)
    )
      .Attribute($asm00.TypeRef("System.Security.SecurityCriticalAttribute"));

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRule", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.IO.Pipes.PipeAccessRule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAccessRuleSpecific", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRule", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.IO.Pipes.PipeAuditRule")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleAll", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAuditRuleSpecific", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetAccessRule", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAccessRule", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAccessRule"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetAuditRule", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.IO.Pipes.PipeAuditRule"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRightType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AccessRuleType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AuditRuleType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Threading");
/* enum System.Threading.LockRecursionPolicy */ 

JSIL.MakeEnum(
  {
    FullName: "System.Threading.LockRecursionPolicy", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NoRecursion: 0, 
    SupportsRecursion: 1, 
  }
);

/* class System.Threading.RecursiveCounts */ 

(function RecursiveCounts$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Threading.RecursiveCounts", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "writercount", $.Int32);

    $.Field({Static:false, Public:true }, "upgradecount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.LockRecursionException */ 

(function LockRecursionException$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.Threading.LockRecursionException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ReaderWriterCount */ 

(function ReaderWriterCount$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterCount", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:true }, "threadid", $.Int32);

    $.Field({Static:false, Public:true }, "readercount", $.Int32);

    $.Field({Static:false, Public:true }, "next", $.Type);

    $.Field({Static:false, Public:true }, "rc", $asm03.TypeRef("System.Threading.RecursiveCounts"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Threading.ReaderWriterLockSlim */ 

(function ReaderWriterLockSlim$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Threading.ReaderWriterLockSlim", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm03.TypeRef("System.Threading.LockRecursionPolicy"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearUpgraderWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWriterAcquired", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearWritersWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnterMyLockSpin", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterReadLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterUpgradeableReadLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EnterWriteLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaiters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitAndWakeUpAppropriateWaitersPreferringWriters", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ExitMyLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitReadLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitUpgradeableReadLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ExitWriteLock", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReadLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpgradeableReadLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsWriteLockHeld", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursionPolicy", 
      JSIL.MethodSignature.Return($asm03.TypeRef("System.Threading.LockRecursionPolicy"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveUpgradeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RecursiveWriteCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingReadCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingUpgradeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WaitingWriteCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNumReaders", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetThreadRWCount", 
      new JSIL.MethodSignature($asm03.TypeRef("System.Threading.ReaderWriterCount"), [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeThreadCounts", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRWEntryEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Threading.ReaderWriterCount")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsRwHashEntryChanged", 
      new JSIL.MethodSignature($.Boolean, [$asm03.TypeRef("System.Threading.ReaderWriterCount"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsWriterAcquired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "LazyCreateEvent", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Threading.EventWaitHandle")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetUpgraderWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWriterAcquired", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetWritersWaiting", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "SpinWait", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterUpgradeableReadLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:false, Public:true }, "TryEnterWriteLock", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "WaitOnEvent", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Threading.EventWaitHandle"), $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "LockSpinCycles", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "LockSpinCount", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "LockSleep0Count", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "hashTableSize", $.Int32, 255);

    $.Constant({Static:true , Public:false}, "MaxSpinCount", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "WRITER_HELD", $.UInt32, 2147483648);

    $.Constant({Static:true , Public:false}, "WAITING_WRITERS", $.UInt32, 1073741824);

    $.Constant({Static:true , Public:false}, "WAITING_UPGRADER", $.UInt32, 536870912);

    $.Constant({Static:true , Public:false}, "MAX_READER", $.UInt32, 268435454);

    $.Constant({Static:true , Public:false}, "READER_MASK", $.UInt32, 268435455);

    $.Field({Static:false, Public:false}, "fIsReentrant", $.Boolean);

    $.Field({Static:false, Public:false}, "myLock", $.Int32);

    $.Field({Static:false, Public:false}, "numWriteWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "numReadWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "numWriteUpgradeWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "numUpgradeWaiters", $.UInt32);

    $.Field({Static:false, Public:false}, "fNoWaiters", $.Boolean);

    $.Field({Static:false, Public:false}, "upgradeLockOwnerId", $.Int32);

    $.Field({Static:false, Public:false}, "writeLockOwnerId", $.Int32);

    $.Field({Static:false, Public:false}, "writeEvent", $asm00.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "readEvent", $asm00.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "upgradeEvent", $asm00.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "waitUpgradeEvent", $asm00.TypeRef("System.Threading.EventWaitHandle"));

    $.Field({Static:false, Public:false}, "rwc", $jsilcore.TypeRef("System.Array", [$asm03.TypeRef("System.Threading.ReaderWriterCount")]));

    $.Field({Static:false, Public:false}, "fUpgradeThreadHoldingRead", $.Boolean);

    $.Field({Static:false, Public:false}, "owners", $.UInt32);

    $.Field({Static:false, Public:false}, "fDisposed", $.Boolean);

    $.Property({Static:false, Public:true }, "IsReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsUpgradeableReadLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "IsWriteLockHeld", $.Boolean);

    $.Property({Static:false, Public:true }, "RecursionPolicy", $asm03.TypeRef("System.Threading.LockRecursionPolicy"));

    $.Property({Static:false, Public:true }, "CurrentReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "RecursiveWriteCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingReadCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingUpgradeCount", $.Int32);

    $.Property({Static:false, Public:true }, "WaitingWriteCount", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FX20Assembly */ 

(function FX20Assembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FX20Assembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "2.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FX35Assembly */ 

(function FX35Assembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FX35Assembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "3.5.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "3.5.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Core.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Core.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Core.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "3.5.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "3.5.30729.6387");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 30729);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKey", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyToken", $.String, "31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SharedLibPublicKeyFull", $.String, "0024000004800000940000000602000000240000525341310004000001000100B5FC90E7027F67871E773A8FDE8938C81DD402BA65B9201D60593E96C492651E889CC13F1415EBB53FAC1131AE0BD333C5EE6021672D9718EA31A8AEBD0DA0072F25D87DBA6FC90FFD598ED4DA35E44C398C454307E8E33B8426143DAEC9F596836F97C8F74750E5975C64E2189F45DEF46B2A2B1247ADC3652BF5C308055DA9");

    $.Constant({Static:true , Public:false}, "SystemComponentModelDataAnnotations", $.String, "System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebAbstractions", $.String, "System.Web.Abstractions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicData", $.String, "System.Web.DynamicData, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebDynamicDataDesign", $.String, "System.Web.DynamicData.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebEntityDesign", $.String, "System.Web.Entity.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWebExtensions", $.String, "System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebExtensionsDesign", $.String, "System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRouting", $.String, "System.Web.Routing, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftWebDesign", $.String, "Microsoft.Web.Design.Client, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.SR */ 

(function SR$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedNonNegNum", $.String, "ArgumentOutOfRange_NeedNonNegNum");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesNoNulls", $.String, "Argument_AdjustmentRulesNoNulls");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesOutOfOrder", $.String, "Argument_AdjustmentRulesOutOfOrder");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesAmbiguousOverlap", $.String, "Argument_AdjustmentRulesAmbiguousOverlap");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", $.String, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", $.String, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange");

    $.Constant({Static:true , Public:false}, "Argument_AdjustmentRulesInvalidOverlap", $.String, "Argument_AdjustmentRulesInvalidOverlap");

    $.Constant({Static:true , Public:false}, "Argument_ConvertMismatch", $.String, "Argument_ConvertMismatch");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTimeOfDay", $.String, "Argument_DateTimeHasTimeOfDay");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsInvalid", $.String, "Argument_DateTimeIsInvalid");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeIsNotAmbiguous", $.String, "Argument_DateTimeIsNotAmbiguous");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeOffsetIsNotAmbiguous", $.String, "Argument_DateTimeOffsetIsNotAmbiguous");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeKindMustBeUnspecified", $.String, "Argument_DateTimeKindMustBeUnspecified");

    $.Constant({Static:true , Public:false}, "Argument_DateTimeHasTicks", $.String, "Argument_DateTimeHasTicks");

    $.Constant({Static:true , Public:false}, "Argument_InvalidId", $.String, "Argument_InvalidId");

    $.Constant({Static:true , Public:false}, "Argument_InvalidSerializedString", $.String, "Argument_InvalidSerializedString");

    $.Constant({Static:true , Public:false}, "Argument_InvalidREG_TZI_FORMAT", $.String, "Argument_InvalidREG_TZI_FORMAT");

    $.Constant({Static:true , Public:false}, "Argument_OutOfOrderDateTimes", $.String, "Argument_OutOfOrderDateTimes");

    $.Constant({Static:true , Public:false}, "Argument_TimeSpanHasSeconds", $.String, "Argument_TimeSpanHasSeconds");

    $.Constant({Static:true , Public:false}, "Argument_TransitionTimesAreIdentical", $.String, "Argument_TransitionTimesAreIdentical");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Day", $.String, "ArgumentOutOfRange_Day");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DayOfWeek", $.String, "ArgumentOutOfRange_DayOfWeek");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Month", $.String, "ArgumentOutOfRange_Month");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffset", $.String, "ArgumentOutOfRange_UtcOffset");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", $.String, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_Week", $.String, "ArgumentOutOfRange_Week");

    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidRegistryData", $.String, "InvalidTimeZone_InvalidRegistryData");

    $.Constant({Static:true , Public:false}, "InvalidTimeZone_InvalidWin32APIData", $.String, "InvalidTimeZone_InvalidWin32APIData");

    $.Constant({Static:true , Public:false}, "Security_CannotReadRegistryData", $.String, "Security_CannotReadRegistryData");

    $.Constant({Static:true , Public:false}, "Serialization_CorruptField", $.String, "Serialization_CorruptField");

    $.Constant({Static:true , Public:false}, "Serialization_InvalidData", $.String, "Serialization_InvalidData");

    $.Constant({Static:true , Public:false}, "Serialization_InvalidEscapeSequence", $.String, "Serialization_InvalidEscapeSequence");

    $.Constant({Static:true , Public:false}, "TimeZoneNotFound_MissingRegistryData", $.String, "TimeZoneNotFound_MissingRegistryData");

    $.Constant({Static:true , Public:false}, "Argument_WrongAsyncResult", $.String, "Argument_WrongAsyncResult");

    $.Constant({Static:true , Public:false}, "Argument_InvalidOffLen", $.String, "Argument_InvalidOffLen");

    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyPipeName", $.String, "Argument_NeedNonemptyPipeName");

    $.Constant({Static:true , Public:false}, "Argument_EmptyServerName", $.String, "Argument_EmptyServerName");

    $.Constant({Static:true , Public:false}, "Argument_NonContainerInvalidAnyFlag", $.String, "Argument_NonContainerInvalidAnyFlag");

    $.Constant({Static:true , Public:false}, "ArgumentNull_Buffer", $.String, "ArgumentNull_Buffer");

    $.Constant({Static:true , Public:false}, "ArgumentNull_ServerName", $.String, "ArgumentNull_ServerName");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AdditionalAccessLimited", $.String, "ArgumentOutOfRange_AdditionalAccessLimited");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_AnonymousReserved", $.String, "ArgumentOutOfRange_AnonymousReserved");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_TransmissionModeByteOrMsg", $.String, "ArgumentOutOfRange_TransmissionModeByteOrMsg");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOrOut", $.String, "ArgumentOutOfRange_DirectionModeInOrOut");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_DirectionModeInOutOrInOut", $.String, "ArgumentOutOfRange_DirectionModeInOutOrInOut");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationInvalid", $.String, "ArgumentOutOfRange_ImpersonationInvalid");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_ImpersonationOptionsInvalid", $.String, "ArgumentOutOfRange_ImpersonationOptionsInvalid");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_OptionsInvalid", $.String, "ArgumentOutOfRange_OptionsInvalid");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable", $.String, "ArgumentOutOfRange_HandleInheritabilityNoneOrInheritable");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidPipeAccessRights", $.String, "ArgumentOutOfRange_InvalidPipeAccessRights");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_InvalidTimeout", $.String, "ArgumentOutOfRange_InvalidTimeout");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxNumServerInstances", $.String, "ArgumentOutOfRange_MaxNumServerInstances");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidPipeAccessRights", $.String, "ArgumentOutOfRange_NeedValidPipeAccessRights");

    $.Constant({Static:true , Public:false}, "IndexOutOfRange_IORaceCondition", $.String, "IndexOutOfRange_IORaceCondition");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EndReadCalledMultiple", $.String, "InvalidOperation_EndReadCalledMultiple");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWriteCalledMultiple", $.String, "InvalidOperation_EndWriteCalledMultiple");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EndWaitForConnectionCalledMultiple", $.String, "InvalidOperation_EndWaitForConnectionCalledMultiple");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotYetConnected", $.String, "InvalidOperation_PipeNotYetConnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeDisconnected", $.String, "InvalidOperation_PipeDisconnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeHandleNotSet", $.String, "InvalidOperation_PipeHandleNotSet");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeNotAsync", $.String, "InvalidOperation_PipeNotAsync");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeReadModeNotMessage", $.String, "InvalidOperation_PipeReadModeNotMessage");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeMessageTypeNotSupported", $.String, "InvalidOperation_PipeMessageTypeNotSupported");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyConnected", $.String, "InvalidOperation_PipeAlreadyConnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeAlreadyDisconnected", $.String, "InvalidOperation_PipeAlreadyDisconnected");

    $.Constant({Static:true , Public:false}, "InvalidOperation_PipeClosed", $.String, "InvalidOperation_PipeClosed");

    $.Constant({Static:true , Public:false}, "IO_FileTooLongOrHandleNotSync", $.String, "IO_FileTooLongOrHandleNotSync");

    $.Constant({Static:true , Public:false}, "IO_EOF_ReadBeyondEOF", $.String, "IO_EOF_ReadBeyondEOF");

    $.Constant({Static:true , Public:false}, "IO_FileNotFound", $.String, "IO_FileNotFound");

    $.Constant({Static:true , Public:false}, "IO_FileNotFound_FileName", $.String, "IO_FileNotFound_FileName");

    $.Constant({Static:true , Public:false}, "IO_IO_AlreadyExists_Name", $.String, "IO_IO_AlreadyExists_Name");

    $.Constant({Static:true , Public:false}, "IO_IO_BindHandleFailed", $.String, "IO_IO_BindHandleFailed");

    $.Constant({Static:true , Public:false}, "IO_IO_FileExists_Name", $.String, "IO_IO_FileExists_Name");

    $.Constant({Static:true , Public:false}, "IO_IO_NoPermissionToDirectoryName", $.String, "IO_IO_NoPermissionToDirectoryName");

    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_File", $.String, "IO_IO_SharingViolation_File");

    $.Constant({Static:true , Public:false}, "IO_IO_SharingViolation_NoFileName", $.String, "IO_IO_SharingViolation_NoFileName");

    $.Constant({Static:true , Public:false}, "IO_IO_PipeBroken", $.String, "IO_IO_PipeBroken");

    $.Constant({Static:true , Public:false}, "IO_IO_InvalidPipeHandle", $.String, "IO_IO_InvalidPipeHandle");

    $.Constant({Static:true , Public:false}, "IO_DriveNotFound_Drive", $.String, "IO_DriveNotFound_Drive");

    $.Constant({Static:true , Public:false}, "IO_PathNotFound_Path", $.String, "IO_PathNotFound_Path");

    $.Constant({Static:true , Public:false}, "IO_PathNotFound_NoPathName", $.String, "IO_PathNotFound_NoPathName");

    $.Constant({Static:true , Public:false}, "IO_PathTooLong", $.String, "IO_PathTooLong");

    $.Constant({Static:true , Public:false}, "NotSupported_IONonFileDevices", $.String, "NotSupported_IONonFileDevices");

    $.Constant({Static:true , Public:false}, "NotSupported_MemStreamNotExpandable", $.String, "NotSupported_MemStreamNotExpandable");

    $.Constant({Static:true , Public:false}, "NotSupported_UnreadableStream", $.String, "NotSupported_UnreadableStream");

    $.Constant({Static:true , Public:false}, "NotSupported_UnseekableStream", $.String, "NotSupported_UnseekableStream");

    $.Constant({Static:true , Public:false}, "NotSupported_UnwritableStream", $.String, "NotSupported_UnwritableStream");

    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeUnidirectional", $.String, "NotSupported_AnonymousPipeUnidirectional");

    $.Constant({Static:true , Public:false}, "NotSupported_AnonymousPipeMessagesNotSupported", $.String, "NotSupported_AnonymousPipeMessagesNotSupported");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_FileClosed", $.String, "ObjectDisposed_FileClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_PipeClosed", $.String, "ObjectDisposed_PipeClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_ReaderClosed", $.String, "ObjectDisposed_ReaderClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_StreamClosed", $.String, "ObjectDisposed_StreamClosed");

    $.Constant({Static:true , Public:false}, "ObjectDisposed_WriterClosed", $.String, "ObjectDisposed_WriterClosed");

    $.Constant({Static:true , Public:false}, "PlatformNotSupported_NamedPipeServers", $.String, "PlatformNotSupported_NamedPipeServers");

    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_Path", $.String, "UnauthorizedAccess_IODenied_Path");

    $.Constant({Static:true , Public:false}, "UnauthorizedAccess_IODenied_NoPathName", $.String, "UnauthorizedAccess_IODenied_NoPathName");

    $.Constant({Static:true , Public:false}, "TraceAsTraceSource", $.String, "TraceAsTraceSource");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidLogRetention", $.String, "ArgumentOutOfRange_NeedValidLogRetention");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize", $.String, "ArgumentOutOfRange_NeedMaxFileSizeGEBufferSize");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidMaxNumFiles", $.String, "ArgumentOutOfRange_NeedValidMaxNumFiles");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_NeedValidId", $.String, "ArgumentOutOfRange_NeedValidId");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxArgExceeded", $.String, "ArgumentOutOfRange_MaxArgExceeded");

    $.Constant({Static:true , Public:false}, "ArgumentOutOfRange_MaxStringsExceeded", $.String, "ArgumentOutOfRange_MaxStringsExceeded");

    $.Constant({Static:true , Public:false}, "NotSupported_DownLevelVista", $.String, "NotSupported_DownLevelVista");

    $.Constant({Static:true , Public:false}, "Argument_NeedNonemptyDelimiter", $.String, "Argument_NeedNonemptyDelimiter");

    $.Constant({Static:true , Public:false}, "NotSupported_SetTextWriter", $.String, "NotSupported_SetTextWriter");

    $.Constant({Static:true , Public:false}, "Perflib_PlatformNotSupported", $.String, "Perflib_PlatformNotSupported");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterSetAlreadyRegister", $.String, "Perflib_Argument_CounterSetAlreadyRegister");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterType", $.String, "Perflib_Argument_InvalidCounterType");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidCounterSetInstanceType", $.String, "Perflib_Argument_InvalidCounterSetInstanceType");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InstanceAlreadyExists", $.String, "Perflib_Argument_InstanceAlreadyExists");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterAlreadyExists", $.String, "Perflib_Argument_CounterAlreadyExists");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_CounterNameAlreadyExists", $.String, "Perflib_Argument_CounterNameAlreadyExists");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_ProviderNotFound", $.String, "Perflib_Argument_ProviderNotFound");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_InvalidInstance", $.String, "Perflib_Argument_InvalidInstance");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyInstanceName", $.String, "Perflib_Argument_EmptyInstanceName");

    $.Constant({Static:true , Public:false}, "Perflib_Argument_EmptyCounterName", $.String, "Perflib_Argument_EmptyCounterName");

    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_InstanceCounterBlock", $.String, "Perflib_InsufficientMemory_InstanceCounterBlock");

    $.Constant({Static:true , Public:false}, "Perflib_InsufficientMemory_CounterSetTemplate", $.String, "Perflib_InsufficientMemory_CounterSetTemplate");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterRefValue", $.String, "Perflib_InvalidOperation_CounterRefValue");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetNotInstalled", $.String, "Perflib_InvalidOperation_CounterSetNotInstalled");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_InstanceNotFound", $.String, "Perflib_InvalidOperation_InstanceNotFound");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_AddCounterAfterInstance", $.String, "Perflib_InvalidOperation_AddCounterAfterInstance");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_NoActiveProvider", $.String, "Perflib_InvalidOperation_NoActiveProvider");

    $.Constant({Static:true , Public:false}, "Perflib_InvalidOperation_CounterSetContainsNoCounter", $.String, "Perflib_InvalidOperation_CounterSetContainsNoCounter");

    $.Constant({Static:true , Public:false}, "Arg_ArrayPlusOffTooSmall", $.String, "Arg_ArrayPlusOffTooSmall");

    $.Constant({Static:true , Public:false}, "Arg_HSCapacityOverflow", $.String, "Arg_HSCapacityOverflow");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumFailedVersion", $.String, "InvalidOperation_EnumFailedVersion");

    $.Constant({Static:true , Public:false}, "InvalidOperation_EnumOpCantHappen", $.String, "InvalidOperation_EnumOpCantHappen");

    $.Constant({Static:true , Public:false}, "Serialization_MissingKeys", $.String, "Serialization_MissingKeys");

    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveReadNotAllowed", $.String, "LockRecursionException_RecursiveReadNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveWriteNotAllowed", $.String, "LockRecursionException_RecursiveWriteNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_RecursiveUpgradeNotAllowed", $.String, "LockRecursionException_RecursiveUpgradeNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_ReadAfterWriteNotAllowed", $.String, "LockRecursionException_ReadAfterWriteNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_WriteAfterReadNotAllowed", $.String, "LockRecursionException_WriteAfterReadNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterReadNotAllowed", $.String, "LockRecursionException_UpgradeAfterReadNotAllowed");

    $.Constant({Static:true , Public:false}, "LockRecursionException_UpgradeAfterWriteNotAllowed", $.String, "LockRecursionException_UpgradeAfterWriteNotAllowed");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedRead", $.String, "SynchronizationLockException_MisMatchedRead");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedWrite", $.String, "SynchronizationLockException_MisMatchedWrite");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_MisMatchedUpgrade", $.String, "SynchronizationLockException_MisMatchedUpgrade");

    $.Constant({Static:true , Public:false}, "SynchronizationLockException_IncorrectDispose", $.String, "SynchronizationLockException_IncorrectDispose");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHKeySizeMismatch", $.String, "Cryptography_ArgECDHKeySizeMismatch");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDHRequiresECDHKey", $.String, "Cryptography_ArgECDHRequiresECDHKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgECDsaRequiresECDsaKey", $.String, "Cryptography_ArgECDsaRequiresECDsaKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey", $.String, "Cryptography_ArgExpectedECDiffieHellmanCngPublicKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithm", $.String, "Cryptography_ArgMustBeCngAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngAlgorithmGroup", $.String, "Cryptography_ArgMustBeCngAlgorithmGroup");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngKeyBlobFormat", $.String, "Cryptography_ArgMustBeCngKeyBlobFormat");

    $.Constant({Static:true , Public:false}, "Cryptography_ArgMustBeCngProvider", $.String, "Cryptography_ArgMustBeCngProvider");

    $.Constant({Static:true , Public:false}, "Cryptography_DecryptWithNoKey", $.String, "Cryptography_DecryptWithNoKey");

    $.Constant({Static:true , Public:false}, "Cryptography_ECXmlSerializationFormatRequired", $.String, "Cryptography_ECXmlSerializationFormatRequired");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmGroup", $.String, "Cryptography_InvalidAlgorithmGroup");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidAlgorithmName", $.String, "Cryptography_InvalidAlgorithmName");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidCipherMode", $.String, "Cryptography_InvalidCipherMode");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidIVSize", $.String, "Cryptography_InvalidIVSize");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeyBlobFormat", $.String, "Cryptography_InvalidKeyBlobFormat");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidKeySize", $.String, "Cryptography_InvalidKeySize");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidPadding", $.String, "Cryptography_InvalidPadding");

    $.Constant({Static:true , Public:false}, "Cryptography_InvalidProviderName", $.String, "Cryptography_InvalidProviderName");

    $.Constant({Static:true , Public:false}, "Cryptography_MissingDomainParameters", $.String, "Cryptography_MissingDomainParameters");

    $.Constant({Static:true , Public:false}, "Cryptography_MissingPublicKey", $.String, "Cryptography_MissingPublicKey");

    $.Constant({Static:true , Public:false}, "Cryptography_MissingIV", $.String, "Cryptography_MissingIV");

    $.Constant({Static:true , Public:false}, "Cryptography_MustTransformWholeBlock", $.String, "Cryptography_MustTransformWholeBlock");

    $.Constant({Static:true , Public:false}, "Cryptography_NonCompliantFIPSAlgorithm", $.String, "Cryptography_NonCompliantFIPSAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_OpenInvalidHandle", $.String, "Cryptography_OpenInvalidHandle");

    $.Constant({Static:true , Public:false}, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag", $.String, "Cryptography_OpenEphemeralKeyHandleWithoutEphemeralFlag");

    $.Constant({Static:true , Public:false}, "Cryptography_PartialBlock", $.String, "Cryptography_PartialBlock");

    $.Constant({Static:true , Public:false}, "Cryptography_PlatformNotSupported", $.String, "Cryptography_PlatformNotSupported");

    $.Constant({Static:true , Public:false}, "Cryptography_TlsRequiresLabelAndSeed", $.String, "Cryptography_TlsRequiresLabelAndSeed");

    $.Constant({Static:true , Public:false}, "Cryptography_TransformBeyondEndOfBuffer", $.String, "Cryptography_TransformBeyondEndOfBuffer");

    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurve", $.String, "Cryptography_UnknownEllipticCurve");

    $.Constant({Static:true , Public:false}, "Cryptography_UnknownEllipticCurveAlgorithm", $.String, "Cryptography_UnknownEllipticCurveAlgorithm");

    $.Constant({Static:true , Public:false}, "Cryptography_UnknownPaddingMode", $.String, "Cryptography_UnknownPaddingMode");

    $.Constant({Static:true , Public:false}, "Cryptography_UnexpectedXmlNamespace", $.String, "Cryptography_UnexpectedXmlNamespace");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm00.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Linq.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Linq.SR */ 

(function SR$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "OwningTeam", $.String, "OwningTeam");

    $.Constant({Static:true , Public:false}, "ArgumentArrayHasTooManyElements", $.String, "ArgumentArrayHasTooManyElements");

    $.Constant({Static:true , Public:false}, "ArgumentNotIEnumerableGeneric", $.String, "ArgumentNotIEnumerableGeneric");

    $.Constant({Static:true , Public:false}, "ArgumentNotSequence", $.String, "ArgumentNotSequence");

    $.Constant({Static:true , Public:false}, "ArgumentNotValid", $.String, "ArgumentNotValid");

    $.Constant({Static:true , Public:false}, "IncompatibleElementTypes", $.String, "IncompatibleElementTypes");

    $.Constant({Static:true , Public:false}, "ArgumentNotLambda", $.String, "ArgumentNotLambda");

    $.Constant({Static:true , Public:false}, "MoreThanOneElement", $.String, "MoreThanOneElement");

    $.Constant({Static:true , Public:false}, "MoreThanOneMatch", $.String, "MoreThanOneMatch");

    $.Constant({Static:true , Public:false}, "NoArgumentMatchingMethodsInQueryable", $.String, "NoArgumentMatchingMethodsInQueryable");

    $.Constant({Static:true , Public:false}, "NoElements", $.String, "NoElements");

    $.Constant({Static:true , Public:false}, "NoMatch", $.String, "NoMatch");

    $.Constant({Static:true , Public:false}, "NoMethodOnType", $.String, "NoMethodOnType");

    $.Constant({Static:true , Public:false}, "NoMethodOnTypeMatchingArguments", $.String, "NoMethodOnTypeMatchingArguments");

    $.Constant({Static:true , Public:false}, "NoNameMatchingMethodsInQueryable", $.String, "NoNameMatchingMethodsInQueryable");

    $.Constant({Static:true , Public:false}, "EmptyEnumerable", $.String, "EmptyEnumerable");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm00.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Linq.Expressions.SRDescriptionAttribute */ 

(function SRDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Linq.Expressions.SRDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Linq.Expressions.SRCategoryAttribute */ 

(function SRCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Linq.Expressions.SRCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Linq.Expressions.SR */ 

(function SR$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Linq.Expressions.SR", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "OwningTeam", $.String, "OwningTeam");

    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustBeStatic", $.String, "UserDefinedOperatorMustBeStatic");

    $.Constant({Static:true , Public:false}, "UserDefinedOperatorMustNotBeVoid", $.String, "UserDefinedOperatorMustNotBeVoid");

    $.Constant({Static:true , Public:false}, "CoercionOperatorNotDefined", $.String, "CoercionOperatorNotDefined");

    $.Constant({Static:true , Public:false}, "UnaryOperatorNotDefined", $.String, "UnaryOperatorNotDefined");

    $.Constant({Static:true , Public:false}, "BinaryOperatorNotDefined", $.String, "BinaryOperatorNotDefined");

    $.Constant({Static:true , Public:false}, "OperandTypesDoNotMatchParameters", $.String, "OperandTypesDoNotMatchParameters");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeArray", $.String, "ArgumentMustBeArray");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeBoolean", $.String, "ArgumentMustBeBoolean");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeComparable", $.String, "ArgumentMustBeComparable");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeConvertible", $.String, "ArgumentMustBeConvertible");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfo", $.String, "ArgumentMustBeFieldInfoOrPropertInfo");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", $.String, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeInstanceMember", $.String, "ArgumentMustBeInstanceMember");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeInteger", $.String, "ArgumentMustBeInteger");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeInt32", $.String, "ArgumentMustBeInt32");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeCheckable", $.String, "ArgumentMustBeCheckable");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeArrayIndexType", $.String, "ArgumentMustBeArrayIndexType");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeIntegerOrBoolean", $.String, "ArgumentMustBeIntegerOrBoolean");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeNumeric", $.String, "ArgumentMustBeNumeric");

    $.Constant({Static:true , Public:false}, "ArgumentMustBeSingleDimensionalArrayType", $.String, "ArgumentMustBeSingleDimensionalArrayType");

    $.Constant({Static:true , Public:false}, "ArgumentTypesMustMatch", $.String, "ArgumentTypesMustMatch");

    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeElementThroughProperty", $.String, "CannotAutoInitializeValueTypeElementThroughProperty");

    $.Constant({Static:true , Public:false}, "CannotAutoInitializeValueTypeMemberThroughProperty", $.String, "CannotAutoInitializeValueTypeMemberThroughProperty");

    $.Constant({Static:true , Public:false}, "CannotCastTypeToType", $.String, "CannotCastTypeToType");

    $.Constant({Static:true , Public:false}, "IncorrectTypeForTypeAs", $.String, "IncorrectTypeForTypeAs");

    $.Constant({Static:true , Public:false}, "CoalesceUsedOnNonNullType", $.String, "CoalesceUsedOnNonNullType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeCollectionType", $.String, "ExpressionTypeCannotInitializeCollectionType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeCannotInitializeArrayType", $.String, "ExpressionTypeCannotInitializeArrayType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchArrayType", $.String, "ExpressionTypeDoesNotMatchArrayType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchConstructorParameter", $.String, "ExpressionTypeDoesNotMatchConstructorParameter");

    $.Constant({Static:true , Public:false}, "ArgumentTypeDoesNotMatchMember", $.String, "ArgumentTypeDoesNotMatchMember");

    $.Constant({Static:true , Public:false}, "ArgumentMemberNotDeclOnType", $.String, "ArgumentMemberNotDeclOnType");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchMethodParameter", $.String, "ExpressionTypeDoesNotMatchMethodParameter");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchParameter", $.String, "ExpressionTypeDoesNotMatchParameter");

    $.Constant({Static:true , Public:false}, "ExpressionTypeDoesNotMatchReturn", $.String, "ExpressionTypeDoesNotMatchReturn");

    $.Constant({Static:true , Public:false}, "ExpressionTypeNotInvocable", $.String, "ExpressionTypeNotInvocable");

    $.Constant({Static:true , Public:false}, "FieldNotDefinedForType", $.String, "FieldNotDefinedForType");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfIndexes", $.String, "IncorrectNumberOfIndexes");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaArguments", $.String, "IncorrectNumberOfLambdaArguments");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfLambdaDeclarationParameters", $.String, "IncorrectNumberOfLambdaDeclarationParameters");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMethodCallArguments", $.String, "IncorrectNumberOfMethodCallArguments");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfConstructorArguments", $.String, "IncorrectNumberOfConstructorArguments");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfMembersForGivenConstructor", $.String, "IncorrectNumberOfMembersForGivenConstructor");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfArgumentsForMembers", $.String, "IncorrectNumberOfArgumentsForMembers");

    $.Constant({Static:true , Public:false}, "LambdaParameterNotInScope", $.String, "LambdaParameterNotInScope");

    $.Constant({Static:true , Public:false}, "LambdaTypeMustBeDerivedFromSystemDelegate", $.String, "LambdaTypeMustBeDerivedFromSystemDelegate");

    $.Constant({Static:true , Public:false}, "MemberNotFieldOrProperty", $.String, "MemberNotFieldOrProperty");

    $.Constant({Static:true , Public:false}, "MethodContainsGenericParameters", $.String, "MethodContainsGenericParameters");

    $.Constant({Static:true , Public:false}, "MethodIsGeneric", $.String, "MethodIsGeneric");

    $.Constant({Static:true , Public:false}, "MethodNotPropertyAccessor", $.String, "MethodNotPropertyAccessor");

    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveGetter", $.String, "PropertyDoesNotHaveGetter");

    $.Constant({Static:true , Public:false}, "PropertyDoesNotHaveSetter", $.String, "PropertyDoesNotHaveSetter");

    $.Constant({Static:true , Public:false}, "NotAMemberOfType", $.String, "NotAMemberOfType");

    $.Constant({Static:true , Public:false}, "OperatorNotImplementedForType", $.String, "OperatorNotImplementedForType");

    $.Constant({Static:true , Public:false}, "ParameterExpressionNotValidAsDelegate", $.String, "ParameterExpressionNotValidAsDelegate");

    $.Constant({Static:true , Public:false}, "ParameterNotCaptured", $.String, "ParameterNotCaptured");

    $.Constant({Static:true , Public:false}, "PropertyNotDefinedForType", $.String, "PropertyNotDefinedForType");

    $.Constant({Static:true , Public:false}, "MethodNotDefinedForType", $.String, "MethodNotDefinedForType");

    $.Constant({Static:true , Public:false}, "TypeContainsGenericParameters", $.String, "TypeContainsGenericParameters");

    $.Constant({Static:true , Public:false}, "TypeIsGeneric", $.String, "TypeIsGeneric");

    $.Constant({Static:true , Public:false}, "TypeMissingDefaultConstructor", $.String, "TypeMissingDefaultConstructor");

    $.Constant({Static:true , Public:false}, "ListInitializerWithZeroMembers", $.String, "ListInitializerWithZeroMembers");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNotAdd", $.String, "ElementInitializerMethodNotAdd");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodNoRefOutParam", $.String, "ElementInitializerMethodNoRefOutParam");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodWithZeroArgs", $.String, "ElementInitializerMethodWithZeroArgs");

    $.Constant({Static:true , Public:false}, "ElementInitializerMethodStatic", $.String, "ElementInitializerMethodStatic");

    $.Constant({Static:true , Public:false}, "TypeNotIEnumerable", $.String, "TypeNotIEnumerable");

    $.Constant({Static:true , Public:false}, "TypeParameterIsNotDelegate", $.String, "TypeParameterIsNotDelegate");

    $.Constant({Static:true , Public:false}, "UnexpectedCoalesceOperator", $.String, "UnexpectedCoalesceOperator");

    $.Constant({Static:true , Public:false}, "InvalidCast", $.String, "InvalidCast");

    $.Constant({Static:true , Public:false}, "UnhandledCall", $.String, "UnhandledCall");

    $.Constant({Static:true , Public:false}, "UnhandledBinary", $.String, "UnhandledBinary");

    $.Constant({Static:true , Public:false}, "UnhandledBinding", $.String, "UnhandledBinding");

    $.Constant({Static:true , Public:false}, "UnhandledBindingType", $.String, "UnhandledBindingType");

    $.Constant({Static:true , Public:false}, "UnhandledConvert", $.String, "UnhandledConvert");

    $.Constant({Static:true , Public:false}, "UnhandledConvertFromDecimal", $.String, "UnhandledConvertFromDecimal");

    $.Constant({Static:true , Public:false}, "UnhandledConvertToDecimal", $.String, "UnhandledConvertToDecimal");

    $.Constant({Static:true , Public:false}, "UnhandledExpressionType", $.String, "UnhandledExpressionType");

    $.Constant({Static:true , Public:false}, "UnhandledMemberAccess", $.String, "UnhandledMemberAccess");

    $.Constant({Static:true , Public:false}, "UnhandledUnary", $.String, "UnhandledUnary");

    $.Constant({Static:true , Public:false}, "UnknownBindingType", $.String, "UnknownBindingType");

    $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveConsistentTypes", $.String, "LogicalOperatorMustHaveConsistentTypes");

    $.Constant({Static:true , Public:false}, "LogicalOperatorMustHaveBooleanOperators", $.String, "LogicalOperatorMustHaveBooleanOperators");

    $.Constant({Static:true , Public:false}, "MethodDoesNotExistOnType", $.String, "MethodDoesNotExistOnType");

    $.Constant({Static:true , Public:false}, "MethodWithArgsDoesNotExistOnType", $.String, "MethodWithArgsDoesNotExistOnType");

    $.Constant({Static:true , Public:false}, "MethodWithMoreThanOneMatch", $.String, "MethodWithMoreThanOneMatch");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForFunc", $.String, "IncorrectNumberOfTypeArgsForFunc");

    $.Constant({Static:true , Public:false}, "IncorrectNumberOfTypeArgsForAction", $.String, "IncorrectNumberOfTypeArgsForAction");

    $.Constant({Static:true , Public:false}, "ExpressionMayNotContainByrefParameters", $.String, "ExpressionMayNotContainByrefParameters");

    $.Constant({Static:true , Public:false}, "ArgumentCannotBeOfTypeVoid", $.String, "ArgumentCannotBeOfTypeVoid");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm00.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Res */ 

(function Res$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_BigIntInfinity", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InvalidCharactersInString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBeBigInt", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_MustBePositive", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NonNegative", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_NotANumber", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Byte", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Decimal", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Double", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Int16", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Int32", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Int64", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_SByte", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_Single", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_UInt16", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_UInt32", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Overflow_UInt64", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ParsedStringWasInvalid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnsupportedNumberStyle", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm00.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "BigIntInfinity", $.String);

    $.Property({Static:true , Public:false}, "InvalidCharactersInString", $.String);

    $.Property({Static:true , Public:false}, "MustBeBigInt", $.String);

    $.Property({Static:true , Public:false}, "MustBePositive", $.String);

    $.Property({Static:true , Public:false}, "NonNegative", $.String);

    $.Property({Static:true , Public:false}, "NotANumber", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Byte", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Decimal", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Double", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Int16", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Int32", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Int64", $.String);

    $.Property({Static:true , Public:false}, "Overflow_SByte", $.String);

    $.Property({Static:true , Public:false}, "Overflow_Single", $.String);

    $.Property({Static:true , Public:false}, "Overflow_UInt16", $.String);

    $.Property({Static:true , Public:false}, "Overflow_UInt32", $.String);

    $.Property({Static:true , Public:false}, "Overflow_UInt64", $.String);

    $.Property({Static:true , Public:false}, "ParsedStringWasInvalid", $.String);

    $.Property({Static:true , Public:false}, "UnsupportedNumberStyle", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0"]; })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"));

})();


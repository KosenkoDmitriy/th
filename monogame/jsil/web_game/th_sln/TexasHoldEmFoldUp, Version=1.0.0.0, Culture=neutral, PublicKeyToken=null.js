/* Generated by JSIL v0.8.2 build 30252. See http://jsil.org/ for more information. */ 
'use strict';
var $asm08 = JSIL.DeclareAssembly("TexasHoldEmFoldUp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");

JSIL.SetEntryPoint($asm08, $asm08.TypeRef("TexasHoldEmFoldUp.Program"), "Main", JSIL.MethodSignature.Void);

JSIL.DeclareNamespace("TexasHoldEmFoldUp");
/* class TexasHoldEmFoldUp.AmountWindow */ 

(function AmountWindow$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Drawing.Font)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm05.System.Drawing.FontStyle)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm06.System.Windows.Forms.Panel)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Windows.Forms.Control)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm05.System.Drawing.Color)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.TexasHoldem)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm06.System.Windows.Forms.Label)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm05.System.Drawing.ContentAlignment)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Windows.Forms.Control_ControlCollection)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.System.Double)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Font"), [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.Single"), 
        $asm05.TypeRef("System.Drawing.FontStyle")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Windows.Forms.Control+ControlCollection")))) ();
  };


  function AmountWindow__ctor (title, left, top) {
    this.amountFont = $S00().Construct("Microsoft Sans Serif", 20, $T03().Bold);
    $T04().prototype._ctor.call(this);
    $T05().prototype.set_Width.call(this, 172);
    $T05().prototype.set_Height.call(this, 60);
    $T05().prototype.set_Visible.call(this, true);
    this.set_Left(left);
    this.set_Top(top);
    (this.BackColor = $T06().get_Transparent());
    this.set_BackgroundImage($T07().get_CreditWindow());
    this.titleLabel = new ($T08())();
    (this.titleLabel).set_Text(title);
    (this.titleLabel).set_Top(5);
    (this.titleLabel).set_Left(24);
    (this.titleLabel).set_AutoSize(false);
    (this.titleLabel).set_Height(15);
    (this.titleLabel).set_Width(130);
    (this.titleLabel.BackColor = $T06().get_Transparent());
    (this.titleLabel).set_TextAlign($T09().MiddleCenter);
    ($S01().Call($T05().prototype, "get_Controls", null, this)).Add(this.titleLabel);
    this.amountLabel = new ($T08())();
    (this.amountLabel).set_Left(0);
    (this.amountLabel).set_Top(20);
    (this.amountLabel).set_AutoSize(false);
    (this.amountLabel).set_Width(172);
    (this.amountLabel).set_Height(34);
    (this.amountLabel.ForeColor = $T06().get_Yellow());
    (this.amountLabel).set_Font(this.amountFont);
    (this.amountLabel).set_Text("$00.00");
    (this.amountLabel).set_TextAlign($T09().MiddleCenter);
    ($S01().Call($T05().prototype, "get_Controls", null, this)).Add(this.amountLabel);
  }; 

  function AmountWindow_get_DollarAmount () {
    return this.Amount;
  }; 

  function AmountWindow_set_DollarAmount (value) {
    this.Amount = +value;
    (this.amountLabel).set_Text($T00().Format("{0:C}", this.Amount));
    (this.amountLabel).Invalidate();
    (this.amountLabel).Update();
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Windows.Forms.Panel"), 
      Name: "TexasHoldEmFoldUp.AmountWindow", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ]), 
      AmountWindow__ctor
    );

    $.Method({Static:false, Public:true }, "get_DollarAmount", 
      JSIL.MethodSignature.Return($.Double), 
      AmountWindow_get_DollarAmount
    );

    $.Method({Static:false, Public:true }, "set_DollarAmount", 
      JSIL.MethodSignature.Action($.Double), 
      AmountWindow_set_DollarAmount
    );

    $.Field({Static:false, Public:false}, "amountPanel", $asm06.TypeRef("System.Windows.Forms.Panel"));

    $.Field({Static:false, Public:false}, "titleLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "amountLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "displayAmount", $.String);

    $.Field({Static:false, Public:true }, "amountFont", $asm05.TypeRef("System.Drawing.Font"));

    $.Field({Static:false, Public:false}, "Amount", $.Double);

    $.Property({Static:false, Public:true }, "DollarAmount", $.Double);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.BetForm */ 

(function BetForm$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Windows.Forms.Form)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Windows.Forms.Button)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Windows.Forms.DialogResult)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.System.Object)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.System.EventArgs)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.System.Boolean)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm06.System.Windows.Forms.Control)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.System.IDisposable)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Windows.Forms.Label)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm05.System.Drawing.Color)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.System.Drawing.Font)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm05.System.Drawing.FontStyle)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm05.System.Drawing.GraphicsUnit)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm05.System.Drawing.Point)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm05.System.Drawing.Size)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm05.System.Drawing.ContentAlignment)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Windows.Forms.BorderStyle)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Windows.Forms.ButtonBase)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm00.System.EventHandler)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.System.Windows.Forms.FlatButtonAppearance)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Windows.Forms.ContainerControl)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm05.System.Drawing.SizeF)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Windows.Forms.AutoScaleMode)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm06.System.Windows.Forms.ImageLayout)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm06.System.Windows.Forms.Control_ControlCollection)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm06.System.Windows.Forms.FormBorderStyle)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm06.System.Windows.Forms.FormStartPosition)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm00.System.Double)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1_GameStates)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm01.System.Media.SoundPlayer)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Font"), [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.Single"), 
        $asm05.TypeRef("System.Drawing.FontStyle"), $asm05.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm00.TypeRef("System.Byte")
      ]))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Point"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Size"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.SizeF"), [$asm00.TypeRef("System.Single"), $asm00.TypeRef("System.Single")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Windows.Forms.Control+ControlCollection")))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.System.IDisposable.Dispose)) ();
  };


  function BetForm__ctor (ParentForm) {
    this.components = null;
    $T01().prototype._ctor.call(this);
    this.parentForm = ParentForm;
    this.InitializeComponent();
    (this.OKbutton).set_DialogResult($T03().OK);
  }; 

  function BetForm_BetForm_VisibleChanged (sender, e) {
    var visible = $T07().prototype.get_Visible.call(this);
    if (visible) {
      this.getWindowTitle();
      this.betAmount = 0;
      this.set_BetAmount(0);
      (this.button8).set_Visible(false);
      (this.button6).set_Text($T08().Format("{0:C}", this.parentForm.gameDenomination));
      if ((this.parentForm).isAnteBet()) {
        if (+this.parentForm.lastBet > 0) {
          (this.button8).set_Visible(true);
        }
      }
    }
  }; 

  function BetForm_button1_Click (sender, e) {
    this.set_BetAmount(1);
  }; 

  function BetForm_button2_Click (sender, e) {
    this.set_BetAmount(5);
  }; 

  function BetForm_button3_Click (sender, e) {
    this.set_BetAmount(10);
  }; 

  function BetForm_button4_Click (sender, e) {
    this.set_BetAmount(20);
  }; 

  function BetForm_button5_Click (sender, e) {
    this.set_BetAmount(25);
  }; 

  function BetForm_button6_Click (sender, e) {
    this.set_BetAmount(this.parentForm.gameDenomination);
  }; 

  function BetForm_button8_Click (sender, e) {
    if (+this.parentForm.lastBet > 0) {
      this.set_BetAmount(this.parentForm.lastBet);
      this.OKbutton_Click(sender, e);
    }
  }; 

  function BetForm_ClearButton_Click (sender, e) {
    this.betAmount = 0;
    this.set_BetAmount(0);
  }; 

  function BetForm_Dispose$00 (disposing) {
    if (disposing && (this.components !== null)) {
      $IM00().Call(this.components, null);
    }
    $T01().prototype.Dispose.call(this, disposing);
  }; 

  function BetForm_get_BetAmount () {
    return this.betAmount;
  }; 

  function BetForm_getWindowTitle () {
    (this.titleLabel).set_Text(this.parentForm.betWindowTitles[this.parentForm.betStringPtr]);
  }; 

  function BetForm_InitializeComponent () {
    this.titleLabel = new ($T0A())();
    this.BetAmountLabel = new ($T0A())();
    this.ClearButton = new ($T02())();
    this.OKbutton = new ($T02())();
    this.button5 = new ($T02())();
    this.button4 = new ($T02())();
    this.button3 = new ($T02())();
    this.button2 = new ($T02())();
    this.button1 = new ($T02())();
    this.label1 = new ($T0A())();
    this.button6 = new ($T02())();
    this.button8 = new ($T02())();
    this.SuspendLayout();
    (this.titleLabel.BackColor = $T0B().get_Transparent());
    (this.titleLabel).set_Font($S00().Construct("Microsoft Sans Serif", 15.75, $T0D().Bold, $T0E().Point, 0));
    (this.titleLabel.ForeColor = $T0B().get_White());
    (this.titleLabel.Location = $S01().Construct(98, 9));
    (this.titleLabel).set_Name("titleLabel");
    (this.titleLabel.Size = $S02().Construct(229, 31));
    (this.titleLabel).set_TabIndex(20);
    (this.titleLabel).set_TextAlign($T11().MiddleCenter);
    (this.BetAmountLabel.BackColor = $T0B().get_DarkGreen());
    (this.BetAmountLabel).set_BorderStyle($T12().FixedSingle);
    (this.BetAmountLabel).set_Font($S00().Construct("Microsoft Sans Serif", 27.75, $T0D().Bold, $T0E().Point, 0));
    (this.BetAmountLabel.ForeColor = $T0B().get_Yellow());
    (this.BetAmountLabel.Location = $S01().Construct(129, 46));
    (this.BetAmountLabel).set_Name("BetAmountLabel");
    (this.BetAmountLabel.Size = $S02().Construct(154, 39));
    (this.BetAmountLabel).set_TabIndex(19);
    (this.BetAmountLabel).set_TextAlign($T11().MiddleCenter);
    (this.ClearButton.BackColor = $T0B().get_MediumSeaGreen());
    (this.ClearButton).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.ClearButton.ForeColor = $T0B().get_White());
    (this.ClearButton.Location = $S01().Construct(346, 179));
    (this.ClearButton).set_Name("ClearButton");
    (this.ClearButton.Size = $S02().Construct(72, 31));
    (this.ClearButton).set_TabIndex(18);
    (this.ClearButton).set_Text("CLEAR");
    (this.ClearButton).set_UseVisualStyleBackColor(false);
    $T07().prototype.add_Click.call(this.ClearButton, $T14().New(this, function () { return $thisType.prototype.ClearButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "ClearButton_Click", $S03(), false); }.bind(this)));
    (this.OKbutton.BackColor = $T0B().get_MediumSeaGreen());
    (this.OKbutton.FlatAppearance.BorderColor = $T0B().get_Red());
    (this.OKbutton).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.OKbutton.ForeColor = $T0B().get_White());
    (this.OKbutton.Location = $S01().Construct(129, 179));
    (this.OKbutton).set_Name("OKbutton");
    (this.OKbutton.Size = $S02().Construct(141, 31));
    (this.OKbutton).set_TabIndex(17);
    (this.OKbutton).set_Text("OK");
    (this.OKbutton).set_UseVisualStyleBackColor(false);
    $T07().prototype.add_Click.call(this.OKbutton, $T14().New(this, function () { return $thisType.prototype.OKbutton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "OKbutton_Click", $S04(), false); }.bind(this)));
    (this.button5.BackColor = $T0B().get_MediumSeaGreen());
    (this.button5).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button5.ForeColor = $T0B().get_White());
    (this.button5.Location = $S01().Construct(209, 142));
    (this.button5).set_Name("button5");
    (this.button5.Size = $S02().Construct(139, 31));
    (this.button5).set_TabIndex(16);
    (this.button5).set_Text("Max Bet");
    (this.button5).set_UseVisualStyleBackColor(false);
    $T07().prototype.add_Click.call(this.button5, $T14().New(this, function () { return $thisType.prototype.button5_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button5_Click", $S05(), false); }.bind(this)));
    (this.button4.BackColor = $T0B().get_MediumSeaGreen());
    (this.button4).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button4.ForeColor = $T0B().get_White());
    (this.button4.Location = $S01().Construct(371, 142));
    (this.button4).set_Name("button4");
    (this.button4.Size = $S02().Construct(47, 31));
    (this.button4).set_TabIndex(15);
    (this.button4).set_Text("$20");
    (this.button4).set_UseVisualStyleBackColor(false);
    (this.button4).set_Visible(false);
    $T07().prototype.add_Click.call(this.button4, $T14().New(this, function () { return $thisType.prototype.button4_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button4_Click", $S06(), false); }.bind(this)));
    (this.button3.BackColor = $T0B().get_MediumSeaGreen());
    (this.button3).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button3.ForeColor = $T0B().get_White());
    (this.button3.Location = $S01().Construct(371, 105));
    (this.button3).set_Name("button3");
    (this.button3.Size = $S02().Construct(44, 31));
    (this.button3).set_TabIndex(14);
    (this.button3).set_Text("$10");
    (this.button3).set_UseVisualStyleBackColor(false);
    (this.button3).set_Visible(false);
    $T07().prototype.add_Click.call(this.button3, $T14().New(this, function () { return $thisType.prototype.button3_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button3_Click", $S07(), false); }.bind(this)));
    (this.button2.BackColor = $T0B().get_MediumSeaGreen());
    (this.button2).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button2.ForeColor = $T0B().get_White());
    (this.button2.Location = $S01().Construct(369, 68));
    (this.button2).set_Name("button2");
    (this.button2.Size = $S02().Construct(44, 31));
    (this.button2).set_TabIndex(13);
    (this.button2).set_Text("$5");
    (this.button2).set_UseVisualStyleBackColor(false);
    (this.button2).set_Visible(false);
    $T07().prototype.add_Click.call(this.button2, $T14().New(this, function () { return $thisType.prototype.button2_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button2_Click", $S08(), false); }.bind(this)));
    (this.button1.BackColor = $T0B().get_MediumSeaGreen());
    (this.button1).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button1.ForeColor = $T0B().get_White());
    (this.button1.Location = $S01().Construct(369, 31));
    (this.button1).set_Name("button1");
    (this.button1.Size = $S02().Construct(46, 31));
    (this.button1).set_TabIndex(12);
    (this.button1).set_Text("$1");
    (this.button1).set_UseVisualStyleBackColor(false);
    (this.button1).set_Visible(false);
    $T07().prototype.add_Click.call(this.button1, $T14().New(this, function () { return $thisType.prototype.button1_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button1_Click", $S09(), false); }.bind(this)));
    (this.label1).set_AutoSize(true);
    (this.label1).set_Font($S00().Construct("Microsoft Sans Serif", 8.25, $T0D().Bold, $T0E().Point, 0));
    (this.label1.Location = $S01().Construct(60, 126));
    (this.label1).set_Name("label1");
    (this.label1.Size = $S02().Construct(277, 13));
    (this.label1).set_TabIndex(21);
    (this.label1).set_Text("Each press of a button adds to your bet amount");
    (this.button6.BackColor = $T0B().get_MediumSeaGreen());
    (this.button6).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button6.ForeColor = $T0B().get_White());
    (this.button6.Location = $S01().Construct(63, 142));
    (this.button6).set_Name("button6");
    (this.button6.Size = $S02().Construct(140, 31));
    (this.button6).set_TabIndex(22);
    (this.button6).set_Text("$.25");
    (this.button6).set_UseVisualStyleBackColor(false);
    $T07().prototype.add_Click.call(this.button6, $T14().New(this, function () { return $thisType.prototype.button6_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button6_Click", $S0A(), false); }.bind(this)));
    (this.button8.BackColor = $T0B().get_Red());
    (this.button8).set_DialogResult($T03().OK);
    (this.button8).set_Font($S00().Construct("Microsoft Sans Serif", 9.75, $T0D().Bold, $T0E().Point, 0));
    (this.button8.ForeColor = $T0B().get_White());
    (this.button8.Location = $S01().Construct(74, 88));
    (this.button8).set_Name("button8");
    (this.button8.Size = $S02().Construct(262, 31));
    (this.button8).set_TabIndex(24);
    (this.button8).set_Text("REPEAT BET");
    (this.button8).set_UseVisualStyleBackColor(false);
    $T07().prototype.add_Click.call(this.button8, $T14().New(this, function () { return $thisType.prototype.button8_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button8_Click", $S0B(), false); }.bind(this)));
    (this.ContainerControl$AutoScaleDimensions = $S0C().Construct(6, 13));
    this.set_AutoScaleMode($T18().Font);
    (this.BackColor = $T0B().get_Green());
    this.set_BackgroundImageLayout($T19().None);
    (this.Form$ClientSize = $S02().Construct(427, 220));
    $T01().prototype.set_ControlBox.call(this, false);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button8);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button6);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.label1);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.titleLabel);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.BetAmountLabel);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.ClearButton);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.OKbutton);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button5);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button4);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button3);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button2);
    ($S0D().Call($T07().prototype, "get_Controls", null, this)).Add(this.button1);
    $T01().prototype.set_FormBorderStyle.call(this, $T1B().None);
    (this.Form$Location = $S01().Construct(246, 540));
    $T01().prototype.set_MaximizeBox.call(this, false);
    $T01().prototype.set_MinimizeBox.call(this, false);
    $T07().prototype.set_Name.call(this, "BetForm");
    $T01().prototype.set_StartPosition.call(this, $T1C().Manual);
    this.set_Text("Player Bet");
    $T01().prototype.set_TopMost.call(this, true);
    $T07().prototype.add_VisibleChanged.call(this, $T14().New(this, function () { return $thisType.prototype.BetForm_VisibleChanged.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "BetForm_VisibleChanged", $S0E(), false); }.bind(this)));
    this.ResumeLayout(false);
    this.PerformLayout();
  }; 

  function BetForm_OKbutton_Click (sender, e) {
    this.Hide();
    if (+this.betAmount > 0) {
      this.parentForm.autoStart = true;
    }
  }; 

  function BetForm_set_BetAmount (value) {
    this.betAmount = +this.betAmount + +value;
    if (this.parentForm.GameState === $T1E().Ante) {
      if (+this.betAmount > +this.parentForm.betLimit) {
        this.betAmount = +this.parentForm.betLimit;
      }
    } else {
      if (+this.betAmount > +this.parentForm.raiseLimit) {
        this.betAmount = +this.parentForm.raiseLimit;
      }
    }
    var DollarAmount = $T08().Format("{0:C}", this.betAmount);
    (this.BetAmountLabel).set_Text(DollarAmount);
    (this.parentForm.buttonSound).Play();
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Windows.Forms.Form"), 
      Name: "TexasHoldEmFoldUp.BetForm", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("TexasHoldEmFoldUp.Form1")), 
      BetForm__ctor
    );

    $.Method({Static:false, Public:false}, "BetForm_VisibleChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_BetForm_VisibleChanged
    );

    $.Method({Static:false, Public:false}, "button1_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button1_Click
    );

    $.Method({Static:false, Public:false}, "button2_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button2_Click
    );

    $.Method({Static:false, Public:false}, "button3_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button3_Click
    );

    $.Method({Static:false, Public:false}, "button4_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button4_Click
    );

    $.Method({Static:false, Public:false}, "button5_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button5_Click
    );

    $.Method({Static:false, Public:false}, "button6_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button6_Click
    );

    $.Method({Static:false, Public:false}, "button8_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_button8_Click
    );

    $.Method({Static:false, Public:false}, "ClearButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_ClearButton_Click
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      BetForm_Dispose$00
    );

    $.Method({Static:false, Public:true }, "get_BetAmount", 
      JSIL.MethodSignature.Return($.Double), 
      BetForm_get_BetAmount
    );

    $.Method({Static:false, Public:false}, "getWindowTitle", 
      JSIL.MethodSignature.Void, 
      BetForm_getWindowTitle
    );

    $.Method({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void, 
      BetForm_InitializeComponent
    );

    $.Method({Static:false, Public:false}, "OKbutton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      BetForm_OKbutton_Click
    );

    $.Method({Static:false, Public:true }, "set_BetAmount", 
      JSIL.MethodSignature.Action($.Double), 
      BetForm_set_BetAmount
    );

    $.Field({Static:false, Public:false}, "parentForm", $asm08.TypeRef("TexasHoldEmFoldUp.Form1"));

    $.Field({Static:false, Public:true }, "betAmount", $.Double);

    $.Field({Static:false, Public:false}, "components", $asm01.TypeRef("System.ComponentModel.IContainer"));

    $.Field({Static:false, Public:true }, "titleLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:true }, "BetAmountLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:true }, "ClearButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "OKbutton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "button5", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "button4", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "button3", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "button2", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "button1", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "label1", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:true }, "button6", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "button8", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Property({Static:false, Public:true }, "BetAmount", $.Double);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.Commented */ 

(function Commented$Members () {
  var $, $thisType;

  function Commented__ctor () {
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.Commented", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Commented__ctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.Form1 */ 

(function Form1$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.Exception)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Int32)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Drawing.Point)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Windows.Forms.Label)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Settings)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm06.System.Windows.Forms.Timer)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm05.System.Drawing.Image)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.VirtualPlayer)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.System.String)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize(System.Array.Of($asm08.TexasHoldEmFoldUp.Form1_cardValues))) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1_cardValues)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm00.System.Boolean)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm00.System.Random)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm08.TexasHoldEmFoldUp.GamePlayer)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm01.System.Media.SoundPlayer)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm08.TexasHoldEmFoldUp.SoundResource)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm05.System.Drawing.Color)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Windows.Forms.Form)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Utils)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm00.System.DateTime)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm05.System.Drawing.Bitmap)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm06.System.Windows.Forms.Control)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewCellStyle)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridView)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm00.System.EventHandler)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm06.System.Windows.Forms.PictureBox)) ();
  };
  var $T1A = function () {
    return ($T1A = JSIL.Memoize($asm00.System.IO.Directory)) ();
  };
  var $T1B = function () {
    return ($T1B = JSIL.Memoize($asm00.System.IO.File)) ();
  };
  var $T1C = function () {
    return ($T1C = JSIL.Memoize($asm00.System.Double)) ();
  };
  var $T1D = function () {
    return ($T1D = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewRowCollection)) ();
  };
  var $T1E = function () {
    return ($T1E = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewCell)) ();
  };
  var $T1F = function () {
    return ($T1F = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewCellCollection)) ();
  };
  var $T20 = function () {
    return ($T20 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewRow)) ();
  };
  var $T21 = function () {
    return ($T21 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.BetForm)) ();
  };
  var $T22 = function () {
    return ($T22 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.AmountWindow)) ();
  };
  var $T23 = function () {
    return ($T23 = JSIL.Memoize($asm06.System.Windows.Forms.Control_ControlCollection)) ();
  };
  var $T24 = function () {
    return ($T24 = JSIL.Memoize($asm05.System.Drawing.Graphics)) ();
  };
  var $T25 = function () {
    return ($T25 = JSIL.Memoize($asm06.System.Windows.Forms.ImageList_ImageCollection)) ();
  };
  var $T26 = function () {
    return ($T26 = JSIL.Memoize($asm06.System.Windows.Forms.ImageList)) ();
  };
  var $T27 = function () {
    return ($T27 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1_GameStates)) ();
  };
  var $T28 = function () {
    return ($T28 = JSIL.Memoize($asm00.System.Object)) ();
  };
  var $T29 = function () {
    return ($T29 = JSIL.Memoize($asm00.System.EventArgs)) ();
  };
  var $T2A = function () {
    return ($T2A = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1_BetTypes)) ();
  };
  var $T2B = function () {
    return ($T2B = JSIL.Memoize($asm03.System.Linq.Enumerable)) ();
  };
  var $T2C = function () {
    return ($T2C = JSIL.Memoize($asm00.System.Collections.Generic.IEnumerable$b1.Of($asm00.System.Int32))) ();
  };
  var $T2D = function () {
    return ($T2D = JSIL.Memoize($asm00.System.Collections.Generic.IEnumerable$b1.Of($asm08.TexasHoldEmFoldUp.VirtualPlayer))) ();
  };
  var $T2E = function () {
    return ($T2E = JSIL.Memoize($asm06.System.Windows.Forms.MessageBox)) ();
  };
  var $T2F = function () {
    return ($T2F = JSIL.Memoize($asm06.System.Windows.Forms.TextBoxBase)) ();
  };
  var $T30 = function () {
    return ($T30 = JSIL.Memoize(System.Array.Of($asm00.System.Int32))) ();
  };
  var $T31 = function () {
    return ($T31 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1_PairTypes)) ();
  };
  var $T32 = function () {
    return ($T32 = JSIL.Memoize($asm00.System.Environment)) ();
  };
  var $T33 = function () {
    return ($T33 = JSIL.Memoize(System.Array.Of($asm00.System.String))) ();
  };
  var $T34 = function () {
    return ($T34 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewColumn)) ();
  };
  var $T35 = function () {
    return ($T35 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewColumnCollection)) ();
  };
  var $T36 = function () {
    return ($T36 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewBand)) ();
  };
  var $T37 = function () {
    return ($T37 = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewContentAlignment)) ();
  };
  var $T38 = function () {
    return ($T38 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.RaiseLevel)) ();
  };
  var $T39 = function () {
    return ($T39 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.FoldLevel)) ();
  };
  var $T3A = function () {
    return ($T3A = JSIL.Memoize($asm00.System.FormatException)) ();
  };
  var $T3B = function () {
    return ($T3B = JSIL.Memoize($asm06.System.Windows.Forms.MouseEventArgs)) ();
  };
  var $T3C = function () {
    return ($T3C = JSIL.Memoize($asm06.System.Windows.Forms.Button)) ();
  };
  var $T3D = function () {
    return ($T3D = JSIL.Memoize($asm06.System.Windows.Forms.ButtonBase)) ();
  };
  var $T3E = function () {
    return ($T3E = JSIL.Memoize($asm06.System.Windows.Forms.Clipboard)) ();
  };
  var $T3F = function () {
    return ($T3F = JSIL.Memoize($asm05.System.Drawing.Rectangle)) ();
  };
  var $T40 = function () {
    return ($T40 = JSIL.Memoize($asm05.System.Drawing.Size)) ();
  };
  var $T41 = function () {
    return ($T41 = JSIL.Memoize($asm06.System.Windows.Forms.ListControl)) ();
  };
  var $T42 = function () {
    return ($T42 = JSIL.Memoize($asm00.System.Reflection.Assembly)) ();
  };
  var $T43 = function () {
    return ($T43 = JSIL.Memoize($asm00.System.IO.StreamReader)) ();
  };
  var $T44 = function () {
    return ($T44 = JSIL.Memoize($asm00.System.IO.FileStream)) ();
  };
  var $T45 = function () {
    return ($T45 = JSIL.Memoize($asm00.System.IO.FileMode)) ();
  };
  var $T46 = function () {
    return ($T46 = JSIL.Memoize($asm00.System.IO.StreamWriter)) ();
  };
  var $T47 = function () {
    return ($T47 = JSIL.Memoize($asm00.System.IO.TextReader)) ();
  };
  var $T48 = function () {
    return ($T48 = JSIL.Memoize($asm00.System.IO.TextWriter)) ();
  };
  var $T49 = function () {
    return ($T49 = JSIL.Memoize($asm06.System.Windows.Forms.Panel)) ();
  };
  var $T4A = function () {
    return ($T4A = JSIL.Memoize($asm06.System.Windows.Forms.TextBox)) ();
  };
  var $T4B = function () {
    return ($T4B = JSIL.Memoize($asm06.System.Windows.Forms.BorderStyle)) ();
  };
  var $T4C = function () {
    return ($T4C = JSIL.Memoize($asm06.System.Windows.Forms.HorizontalAlignment)) ();
  };
  var $T4D = function () {
    return ($T4D = JSIL.Memoize($asm05.System.Drawing.Font)) ();
  };
  var $T4E = function () {
    return ($T4E = JSIL.Memoize($asm05.System.Drawing.FontStyle)) ();
  };
  var $T4F = function () {
    return ($T4F = JSIL.Memoize($asm05.System.Drawing.ContentAlignment)) ();
  };
  var $T50 = function () {
    return ($T50 = JSIL.Memoize(System.Array.Of($asm00.System.Int32))) ();
  };
  var $T51 = function () {
    return ($T51 = JSIL.Memoize(System.Array.Of($asm05.System.Drawing.Point))) ();
  };
  var $T52 = function () {
    return ($T52 = JSIL.Memoize($asm00.System.Threading.Thread)) ();
  };
  var $T53 = function () {
    return ($T53 = JSIL.Memoize($asm00.System.IDisposable)) ();
  };
  var $T54 = function () {
    return ($T54 = JSIL.Memoize($asm00.System.IO.FileInfo)) ();
  };
  var $T55 = function () {
    return ($T55 = JSIL.Memoize($asm00.System.IO.FileSystemInfo)) ();
  };
  var $T56 = function () {
    return ($T56 = JSIL.Memoize($asm00.System.Char)) ();
  };
  var $T57 = function () {
    return ($T57 = JSIL.Memoize(System.Array.Of($asm00.System.Char))) ();
  };
  var $T58 = function () {
    return ($T58 = JSIL.Memoize($asm01.System.ComponentModel.Container)) ();
  };
  var $T59 = function () {
    return ($T59 = JSIL.Memoize($asm01.System.ComponentModel.ComponentResourceManager)) ();
  };
  var $T5A = function () {
    return ($T5A = JSIL.Memoize($asm06.System.Windows.Forms.ComboBox)) ();
  };
  var $T5B = function () {
    return ($T5B = JSIL.Memoize($asm06.System.Windows.Forms.GroupBox)) ();
  };
  var $T5C = function () {
    return ($T5C = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewTextBoxColumn)) ();
  };
  var $T5D = function () {
    return ($T5D = JSIL.Memoize($asm01.System.ComponentModel.ISupportInitialize)) ();
  };
  var $T5E = function () {
    return ($T5E = JSIL.Memoize($asm06.System.Windows.Forms.ImageListStreamer)) ();
  };
  var $T5F = function () {
    return ($T5F = JSIL.Memoize($asm00.System.Resources.ResourceManager)) ();
  };
  var $T60 = function () {
    return ($T60 = JSIL.Memoize($asm06.System.Windows.Forms.ComboBox_ObjectCollection)) ();
  };
  var $T61 = function () {
    return ($T61 = JSIL.Memoize($asm05.System.Drawing.GraphicsUnit)) ();
  };
  var $T62 = function () {
    return ($T62 = JSIL.Memoize($asm06.System.Windows.Forms.FlatButtonAppearance)) ();
  };
  var $T63 = function () {
    return ($T63 = JSIL.Memoize($asm06.System.Windows.Forms.FlatStyle)) ();
  };
  var $T64 = function () {
    return ($T64 = JSIL.Memoize($asm06.System.Windows.Forms.MouseEventHandler)) ();
  };
  var $T65 = function () {
    return ($T65 = JSIL.Memoize($asm06.System.Windows.Forms.Cursors)) ();
  };
  var $T66 = function () {
    return ($T66 = JSIL.Memoize($asm06.System.Windows.Forms.DialogResult)) ();
  };
  var $T67 = function () {
    return ($T67 = JSIL.Memoize($asm06.System.Windows.Forms.ImageLayout)) ();
  };
  var $T68 = function () {
    return ($T68 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Properties.Resources)) ();
  };
  var $T69 = function () {
    return ($T69 = JSIL.Memoize($asm06.System.Windows.Forms.ScrollBars)) ();
  };
  var $T6A = function () {
    return ($T6A = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode)) ();
  };
  var $T6B = function () {
    return ($T6B = JSIL.Memoize($asm05.System.Drawing.SystemColors)) ();
  };
  var $T6C = function () {
    return ($T6C = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewTriState)) ();
  };
  var $T6D = function () {
    return ($T6D = JSIL.Memoize($asm06.System.Windows.Forms.Padding)) ();
  };
  var $T6E = function () {
    return ($T6E = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewSelectionMode)) ();
  };
  var $T6F = function () {
    return ($T6F = JSIL.Memoize($asm06.System.Windows.Forms.DataGridViewCellBorderStyle)) ();
  };
  var $T70 = function () {
    return ($T70 = JSIL.Memoize($asm06.System.Windows.Forms.ContainerControl)) ();
  };
  var $T71 = function () {
    return ($T71 = JSIL.Memoize($asm05.System.Drawing.SizeF)) ();
  };
  var $T72 = function () {
    return ($T72 = JSIL.Memoize($asm06.System.Windows.Forms.AutoScaleMode)) ();
  };
  var $T73 = function () {
    return ($T73 = JSIL.Memoize($asm06.System.Windows.Forms.ScrollableControl)) ();
  };
  var $T74 = function () {
    return ($T74 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.TexasHoldem)) ();
  };
  var $T75 = function () {
    return ($T75 = JSIL.Memoize($asm06.System.Windows.Forms.FormBorderStyle)) ();
  };
  var $T76 = function () {
    return ($T76 = JSIL.Memoize($asm00.System.IO.Stream)) ();
  };
  var $T77 = function () {
    return ($T77 = JSIL.Memoize($asm00.System.Int64)) ();
  };
  var $T78 = function () {
    return ($T78 = JSIL.Memoize($asm00.System.IO.SeekOrigin)) ();
  };
  var $T79 = function () {
    return ($T79 = JSIL.Memoize($asm06.System.Windows.Forms.MessageBoxButtons)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Windows.Forms.Timer"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.Random"), null))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.Media.SoundPlayer"), [$asm00.TypeRef("System.IO.Stream")]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Bitmap"), [$asm05.TypeRef("System.Drawing.Image")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Windows.Forms.DataGridViewCell"), [$asm00.TypeRef("System.Int32")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Windows.Forms.Control+ControlCollection")))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(new JSIL.MethodSignature($asm05.TypeRef("System.Drawing.Image"), [$asm00.TypeRef("System.Int32")]))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.Int32"), 
        $asm05.TypeRef("System.Drawing.Color")
      ]))) ();
  };
  var $S0A = function () {
    return ($S0A = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("System.Int32"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S0B = function () {
    return ($S0B = JSIL.Memoize(new JSIL.MethodSignature($asm00.TypeRef("System.Int32"), [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", ["!!0"])], ["TSource"]))) ();
  };
  var $S0C = function () {
    return ($S0C = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Windows.Forms.DataGridViewColumn"), [$asm00.TypeRef("System.Int32")]))) ();
  };
  var $S0D = function () {
    return ($S0D = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Windows.Forms.DataGridViewCell"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S0E = function () {
    return ($S0E = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Windows.Forms.DialogResult"), [$asm00.TypeRef("System.String"), $asm00.TypeRef("System.String")]))) ();
  };
  var $S0F = function () {
    return ($S0F = JSIL.Memoize(new JSIL.MethodSignature(null, [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.Int32"), 
        $asm00.TypeRef("System.Boolean")
      ]))) ();
  };
  var $S10 = function () {
    return ($S10 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Rectangle"), [$asm05.TypeRef("System.Drawing.Point"), $asm05.TypeRef("System.Drawing.Size")]))) ();
  };
  var $S11 = function () {
    return ($S11 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Size"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S12 = function () {
    return ($S12 = JSIL.Memoize(JSIL.MethodSignature.Action($asm05.TypeRef("System.Drawing.Rectangle")))) ();
  };
  var $S13 = function () {
    return ($S13 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.IO.StreamReader"), [$asm00.TypeRef("System.IO.Stream")]))) ();
  };
  var $S14 = function () {
    return ($S14 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.IO.FileStream"), [$asm00.TypeRef("System.String"), $asm00.TypeRef("System.IO.FileMode")]))) ();
  };
  var $S15 = function () {
    return ($S15 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.IO.StreamWriter"), [$asm00.TypeRef("System.IO.Stream")]))) ();
  };
  var $S16 = function () {
    return ($S16 = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("System.String")))) ();
  };
  var $S17 = function () {
    return ($S17 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S18 = function () {
    return ($S18 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Font"), [
        $asm05.TypeRef("System.Drawing.FontFamily"), $asm00.TypeRef("System.Single"), 
        $asm05.TypeRef("System.Drawing.FontStyle")
      ]))) ();
  };
  var $S19 = function () {
    return ($S19 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S1A = function () {
    return ($S1A = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Point"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S1B = function () {
    return ($S1B = JSIL.Memoize(JSIL.MethodSignature.Action($asm00.TypeRef("System.Int32")))) ();
  };
  var $S1C = function () {
    return ($S1C = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.IO.FileInfo"), [$asm00.TypeRef("System.String")]))) ();
  };
  var $S1D = function () {
    return ($S1D = JSIL.Memoize(new JSIL.ConstructorSignature($asm01.TypeRef("System.ComponentModel.ComponentResourceManager"), [$asm00.TypeRef("System.Type")]))) ();
  };
  var $S1E = function () {
    return ($S1E = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Windows.Forms.DataGridViewCellStyle"), null))) ();
  };
  var $S1F = function () {
    return ($S1F = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Windows.Forms.ImageList"), [$asm01.TypeRef("System.ComponentModel.IContainer")]))) ();
  };
  var $S20 = function () {
    return ($S20 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S21 = function () {
    return ($S21 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S22 = function () {
    return ($S22 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S23 = function () {
    return ($S23 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S24 = function () {
    return ($S24 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Font"), [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.Single"), 
        $asm05.TypeRef("System.Drawing.FontStyle"), $asm05.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm00.TypeRef("System.Byte")
      ]))) ();
  };
  var $S25 = function () {
    return ($S25 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S26 = function () {
    return ($S26 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm06.TypeRef("System.Windows.Forms.MouseEventArgs")]))) ();
  };
  var $S27 = function () {
    return ($S27 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm06.TypeRef("System.Windows.Forms.MouseEventArgs")]))) ();
  };
  var $S28 = function () {
    return ($S28 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S29 = function () {
    return ($S29 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S2A = function () {
    return ($S2A = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S2B = function () {
    return ($S2B = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S2C = function () {
    return ($S2C = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S2D = function () {
    return ($S2D = JSIL.Memoize(JSIL.MethodSignature.Action($asm06.TypeRef("System.Windows.Forms.MouseEventHandler")))) ();
  };
  var $S2E = function () {
    return ($S2E = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm06.TypeRef("System.Windows.Forms.MouseEventArgs")]))) ();
  };
  var $S2F = function () {
    return ($S2F = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S30 = function () {
    return ($S30 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S31 = function () {
    return ($S31 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S32 = function () {
    return ($S32 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S33 = function () {
    return ($S33 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Windows.Forms.Padding"), [$asm00.TypeRef("System.Int32")]))) ();
  };
  var $S34 = function () {
    return ($S34 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S35 = function () {
    return ($S35 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S36 = function () {
    return ($S36 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.SizeF"), [$asm00.TypeRef("System.Single"), $asm00.TypeRef("System.Single")]))) ();
  };
  var $S37 = function () {
    return ($S37 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S38 = function () {
    return ($S38 = JSIL.Memoize(new JSIL.MethodSignature($asm06.TypeRef("System.Windows.Forms.DialogResult"), [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.String"), 
        $asm06.TypeRef("System.Windows.Forms.MessageBoxButtons")
      ]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.System.IDisposable.Dispose)) ();
  };
  var $IM01 = function () {
    return ($IM01 = JSIL.Memoize($asm01.System.ComponentModel.ISupportInitialize.BeginInit)) ();
  };
  var $IM02 = function () {
    return ($IM02 = JSIL.Memoize($asm01.System.ComponentModel.ISupportInitialize.EndInit)) ();
  };


  function Form1__ctor ($exception) {
    var charsTransferred = new JSIL.BoxedVariable(0);
    this.currentIniVersion = 2.6;
    this.AutoPlay = false;
    this.offsetX = 25;
    this.offsetY = 20;
    this.dealDelay = 250;
    this.tempDelay = 250;
    this.nextPlayerDelay = 100;
    this.cardPoints = JSIL.Array.New($T02(), 12);
    this.betLabels = JSIL.Array.New($T03(), $T04().playerSize);
    this.creditLabels = JSIL.Array.New($T03(), $T04().playerSize);
    this.showdown = false;
    this.videoBonusWinOnly = false;
    this.videoMultiplier = 0;
    this.betLimit = 9999;
    this.raiseLimit = 9999;
    this.virtualPlayerCount = 0;
    this.gameDenomination = +$T04().betDx;
    this.gameDenomMultiplier = ($T04().gameDenomMultiplier | 0);
    this.raiseLimitMultiplier = ($T04().raiseLimitMultiplier | 0);
    this.gameOverTimer = $S00().Construct();
    this.nextPlayerTimer = $S00().Construct();
    this.loop = JSIL.Array.New($T01(), [0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5]);
    this._ante = 0;
    this._raise = 2;
    this.cards = JSIL.Array.New($T06(), 52);
    this.deck = JSIL.Array.New($T01(), 52);
    this.virtualPlayers = JSIL.Array.New($T07(), 20);
    this.virtualTempPlayers = JSIL.Array.New($T07(), 20);
    this.playerHands = JSIL.MultidimensionalArray.New($T01(), 6, 2, [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]);
    this.playerHoleCardsRankings = JSIL.Array.New($T01(), 6);
    this.playerFiveCardRankings = JSIL.Array.New($T01(), 6);
    this.PayTableStrings = JSIL.Array.New($T08(), ["ROYAL FLUSH", "STRAIGHT FLUSH", "FOUR OF A KIND", "FULL HOUSE", "FLUSH", "STRAIGHT", "THREE OF A KIND", "TWO PAIR", "PAIR", "HIGH CARD"]);
    this.PayTableAmounts = JSIL.Array.New($T01(), [250, 50, 25, 9, 6, 4, 3, 2, 1]);
    this.betWindowTitles = JSIL.Array.New($T08(), ["PLACE YOUR BET", "BET AMOUNT", "RAISE AMOUNT"]);
    this.betButtonTitles = JSIL.Array.New($T08(), ["BET THE HOLE CARDS", "BET THE FLOP", "BET THE TURN", "BET THE RIVER", "BET LAST ROUND", "PLAYER WIN !!!"]);
    this.gameOverStrings = JSIL.Array.New($T08(), ["GAME OVER", "PLAYER WIN                 ", "1/2 BET RETURNED           ", "POT WAS SPLIT              ", "TEXAS HOLD'EM FOLDUP BONUS ", ""]);
    this.instrucionStrings = JSIL.Array.New($T08(), 11);
    this.realPlayerName = "                                  ";
    this.gaffHand = JSIL.Array.New($T01(), [17, 35, 51, 12, 31, 2, 23, 0, 44, 24, 22, 46, 0, 39, 12, 35, 45]);
    this.gaffHands = JSIL.MultidimensionalArray.New($T01(), 5, 17, [17, 35, 40, 32, 31, 2, 23, 0, 44, 24, 22, 46, 0, 39, 12, 35, 45, 17, 35, 43, 32, 31, 2, 23, 0, 44, 24, 22, 46, 0, 39, 12, 35, 41, 29, 30, 16, 7, 36, 51, 3, 20, 48, 2, 11, 9, 37, 25, 13, 43, 27, 37, 24, 38, 25, 27, 46, 1, 20, 51, 50, 10, 9, 31, 13, 28, 45, 3, 47, 39, 30, 51, 1, 42, 7, 34, 3, 19, 31, 43, 9, 17, 29, 37, 5]);
    this.adjustedRanks = JSIL.Array.New($T01(), [21, 20, 17, 16, 15, 14, 11, 10, 7]);
    var expr_2E8 = JSIL.MultidimensionalArray.New($T0A(), 105, 3);
    expr_2E8.Set(0, 0, $T0A().A);
    expr_2E8.Set(0, 1, $T0A().A);
    expr_2E8.Set(1, 0, $T0A().K);
    expr_2E8.Set(1, 1, $T0A().K);
    expr_2E8.Set(2, 0, $T0A().Q);
    expr_2E8.Set(2, 1, $T0A().Q);
    expr_2E8.Set(3, 0, $T0A().A);
    expr_2E8.Set(3, 1, $T0A().K);
    expr_2E8.Set(3, 2, $T0A().G1);
    expr_2E8.Set(4, 0, $T0A().J);
    expr_2E8.Set(4, 1, $T0A().J);
    expr_2E8.Set(5, 0, $T0A().A);
    expr_2E8.Set(5, 1, $T0A().Q);
    expr_2E8.Set(5, 2, $T0A().G1);
    expr_2E8.Set(6, 0, $T0A().K);
    expr_2E8.Set(6, 1, $T0A().Q);
    expr_2E8.Set(6, 2, $T0A().G1);
    expr_2E8.Set(7, 0, $T0A().A);
    expr_2E8.Set(7, 1, $T0A().J);
    expr_2E8.Set(7, 2, $T0A().G1);
    expr_2E8.Set(8, 0, $T0A().K);
    expr_2E8.Set(8, 1, $T0A().J);
    expr_2E8.Set(8, 2, $T0A().G1);
    expr_2E8.Set(9, 0, $T0A().T);
    expr_2E8.Set(9, 1, $T0A().T);
    expr_2E8.Set(10, 0, $T0A().A);
    expr_2E8.Set(10, 1, $T0A().K);
    expr_2E8.Set(11, 0, $T0A().A);
    expr_2E8.Set(11, 1, $T0A().T);
    expr_2E8.Set(11, 2, $T0A().G1);
    expr_2E8.Set(12, 0, $T0A().Q);
    expr_2E8.Set(12, 1, $T0A().J);
    expr_2E8.Set(12, 2, $T0A().G1);
    expr_2E8.Set(13, 0, $T0A().K);
    expr_2E8.Set(13, 1, $T0A().T);
    expr_2E8.Set(13, 2, $T0A().G1);
    expr_2E8.Set(14, 0, $T0A().Q);
    expr_2E8.Set(14, 1, $T0A().T);
    expr_2E8.Set(14, 2, $T0A().G1);
    expr_2E8.Set(15, 0, $T0A().J);
    expr_2E8.Set(15, 1, $T0A().T);
    expr_2E8.Set(15, 2, $T0A().G1);
    expr_2E8.Set(16, 0, $T0A()._9);
    expr_2E8.Set(16, 1, $T0A()._9);
    expr_2E8.Set(17, 0, $T0A().A);
    expr_2E8.Set(17, 1, $T0A().Q);
    expr_2E8.Set(18, 0, $T0A().A);
    expr_2E8.Set(18, 1, $T0A()._9);
    expr_2E8.Set(18, 2, $T0A().G1);
    expr_2E8.Set(19, 0, $T0A().K);
    expr_2E8.Set(19, 1, $T0A().Q);
    expr_2E8.Set(20, 0, $T0A().G8);
    expr_2E8.Set(20, 1, $T0A().G8);
    expr_2E8.Set(21, 0, $T0A().K);
    expr_2E8.Set(21, 1, $T0A()._9);
    expr_2E8.Set(21, 2, $T0A().G1);
    expr_2E8.Set(22, 0, $T0A().T);
    expr_2E8.Set(22, 1, $T0A()._9);
    expr_2E8.Set(22, 2, $T0A().G1);
    expr_2E8.Set(23, 0, $T0A().A);
    expr_2E8.Set(23, 1, $T0A().G8);
    expr_2E8.Set(23, 2, $T0A().G1);
    expr_2E8.Set(24, 0, $T0A().Q);
    expr_2E8.Set(24, 1, $T0A()._9);
    expr_2E8.Set(24, 2, $T0A().G1);
    expr_2E8.Set(25, 0, $T0A().J);
    expr_2E8.Set(25, 1, $T0A()._9);
    expr_2E8.Set(25, 2, $T0A().G1);
    expr_2E8.Set(26, 0, $T0A().A);
    expr_2E8.Set(26, 1, $T0A().J);
    expr_2E8.Set(27, 0, $T0A().A);
    expr_2E8.Set(27, 1, $T0A().G5);
    expr_2E8.Set(27, 2, $T0A().G1);
    expr_2E8.Set(28, 0, $T0A().G7);
    expr_2E8.Set(28, 1, $T0A().G7);
    expr_2E8.Set(29, 0, $T0A().A);
    expr_2E8.Set(29, 1, $T0A().G7);
    expr_2E8.Set(29, 2, $T0A().G1);
    expr_2E8.Set(30, 0, $T0A().K);
    expr_2E8.Set(30, 1, $T0A().J);
    expr_2E8.Set(31, 0, $T0A().A);
    expr_2E8.Set(31, 1, $T0A().G4);
    expr_2E8.Set(31, 2, $T0A().G1);
    expr_2E8.Set(32, 0, $T0A().A);
    expr_2E8.Set(32, 1, $T0A().G3);
    expr_2E8.Set(32, 2, $T0A().G1);
    expr_2E8.Set(33, 0, $T0A().A);
    expr_2E8.Set(33, 1, $T0A().G6);
    expr_2E8.Set(33, 2, $T0A().G1);
    expr_2E8.Set(34, 0, $T0A().Q);
    expr_2E8.Set(34, 1, $T0A().J);
    expr_2E8.Set(35, 0, $T0A().G6);
    expr_2E8.Set(35, 1, $T0A().G6);
    expr_2E8.Set(36, 0, $T0A().K);
    expr_2E8.Set(36, 1, $T0A().G8);
    expr_2E8.Set(37, 0, $T0A().T);
    expr_2E8.Set(37, 1, $T0A().G8);
    expr_2E8.Set(37, 2, $T0A().G1);
    expr_2E8.Set(38, 0, $T0A().A);
    expr_2E8.Set(38, 1, $T0A().G2);
    expr_2E8.Set(38, 2, $T0A().G1);
    expr_2E8.Set(39, 0, $T0A()._9);
    expr_2E8.Set(39, 1, $T0A().G8);
    expr_2E8.Set(39, 2, $T0A().G1);
    expr_2E8.Set(40, 0, $T0A().J);
    expr_2E8.Set(40, 1, $T0A().G8);
    expr_2E8.Set(40, 2, $T0A().G1);
    expr_2E8.Set(41, 0, $T0A().A);
    expr_2E8.Set(41, 1, $T0A().T);
    expr_2E8.Set(42, 0, $T0A().Q);
    expr_2E8.Set(42, 1, $T0A().G8);
    expr_2E8.Set(42, 2, $T0A().G1);
    expr_2E8.Set(43, 0, $T0A().K);
    expr_2E8.Set(43, 1, $T0A().G7);
    expr_2E8.Set(43, 2, $T0A().G1);
    expr_2E8.Set(44, 0, $T0A().K);
    expr_2E8.Set(44, 1, $T0A().T);
    expr_2E8.Set(45, 0, $T0A().G5);
    expr_2E8.Set(45, 1, $T0A().G5);
    expr_2E8.Set(46, 0, $T0A().J);
    expr_2E8.Set(46, 1, $T0A().T);
    expr_2E8.Set(47, 0, $T0A().G8);
    expr_2E8.Set(47, 1, $T0A().G7);
    expr_2E8.Set(47, 2, $T0A().G1);
    expr_2E8.Set(48, 0, $T0A().Q);
    expr_2E8.Set(48, 1, $T0A().T);
    expr_2E8.Set(49, 0, $T0A().G4);
    expr_2E8.Set(49, 1, $T0A().G4);
    expr_2E8.Set(50, 0, $T0A().G3);
    expr_2E8.Set(50, 1, $T0A().G3);
    expr_2E8.Set(51, 0, $T0A().G2);
    expr_2E8.Set(51, 1, $T0A().G2);
    expr_2E8.Set(52, 0, $T0A().K);
    expr_2E8.Set(52, 1, $T0A().G6);
    expr_2E8.Set(52, 2, $T0A().G1);
    expr_2E8.Set(53, 0, $T0A()._9);
    expr_2E8.Set(53, 1, $T0A().G7);
    expr_2E8.Set(53, 2, $T0A().G1);
    expr_2E8.Set(54, 0, $T0A().K);
    expr_2E8.Set(54, 1, $T0A().G5);
    expr_2E8.Set(54, 2, $T0A().G1);
    expr_2E8.Set(55, 0, $T0A().G7);
    expr_2E8.Set(55, 1, $T0A().G6);
    expr_2E8.Set(55, 2, $T0A().G1);
    expr_2E8.Set(56, 0, $T0A().T);
    expr_2E8.Set(56, 1, $T0A().G7);
    expr_2E8.Set(56, 2, $T0A().G1);
    expr_2E8.Set(57, 0, $T0A().K);
    expr_2E8.Set(57, 1, $T0A().G4);
    expr_2E8.Set(57, 2, $T0A().G1);
    expr_2E8.Set(58, 0, $T0A().K);
    expr_2E8.Set(58, 1, $T0A().G2);
    expr_2E8.Set(58, 2, $T0A().G1);
    expr_2E8.Set(59, 0, $T0A().K);
    expr_2E8.Set(59, 1, $T0A().G3);
    expr_2E8.Set(59, 2, $T0A().G1);
    expr_2E8.Set(60, 0, $T0A().Q);
    expr_2E8.Set(60, 1, $T0A().G7);
    expr_2E8.Set(60, 2, $T0A().G1);
    expr_2E8.Set(61, 0, $T0A().G8);
    expr_2E8.Set(61, 1, $T0A().G6);
    expr_2E8.Set(61, 2, $T0A().G1);
    expr_2E8.Set(62, 0, $T0A().G6);
    expr_2E8.Set(62, 1, $T0A().G5);
    expr_2E8.Set(62, 2, $T0A().G1);
    expr_2E8.Set(63, 0, $T0A().J);
    expr_2E8.Set(63, 1, $T0A().G7);
    expr_2E8.Set(63, 2, $T0A().G1);
    expr_2E8.Set(64, 0, $T0A().G5);
    expr_2E8.Set(64, 1, $T0A().G4);
    expr_2E8.Set(64, 2, $T0A().G1);
    expr_2E8.Set(65, 0, $T0A().Q);
    expr_2E8.Set(65, 1, $T0A().G6);
    expr_2E8.Set(65, 2, $T0A().G1);
    expr_2E8.Set(66, 0, $T0A().G7);
    expr_2E8.Set(66, 1, $T0A().G5);
    expr_2E8.Set(66, 2, $T0A().G1);
    expr_2E8.Set(67, 0, $T0A()._9);
    expr_2E8.Set(67, 1, $T0A().G6);
    expr_2E8.Set(67, 2, $T0A().G1);
    expr_2E8.Set(68, 0, $T0A().Q);
    expr_2E8.Set(68, 1, $T0A().G5);
    expr_2E8.Set(68, 2, $T0A().G1);
    expr_2E8.Set(69, 0, $T0A().G6);
    expr_2E8.Set(69, 1, $T0A().G4);
    expr_2E8.Set(69, 2, $T0A().G1);
    expr_2E8.Set(70, 0, $T0A().Q);
    expr_2E8.Set(70, 1, $T0A().G4);
    expr_2E8.Set(70, 2, $T0A().G1);
    expr_2E8.Set(71, 0, $T0A().Q);
    expr_2E8.Set(71, 1, $T0A().G3);
    expr_2E8.Set(71, 2, $T0A().G1);
    expr_2E8.Set(72, 0, $T0A().T);
    expr_2E8.Set(72, 1, $T0A()._9);
    expr_2E8.Set(73, 0, $T0A().T);
    expr_2E8.Set(73, 1, $T0A().G6);
    expr_2E8.Set(73, 2, $T0A().G1);
    expr_2E8.Set(74, 0, $T0A().Q);
    expr_2E8.Set(74, 1, $T0A().G2);
    expr_2E8.Set(74, 2, $T0A().G1);
    expr_2E8.Set(75, 0, $T0A().A);
    expr_2E8.Set(75, 1, $T0A()._9);
    expr_2E8.Set(76, 0, $T0A().G5);
    expr_2E8.Set(76, 1, $T0A().G3);
    expr_2E8.Set(76, 2, $T0A().G1);
    expr_2E8.Set(77, 0, $T0A().G8);
    expr_2E8.Set(77, 1, $T0A().G5);
    expr_2E8.Set(77, 2, $T0A().G1);
    expr_2E8.Set(78, 0, $T0A().J);
    expr_2E8.Set(78, 1, $T0A().G6);
    expr_2E8.Set(78, 2, $T0A().G1);
    expr_2E8.Set(79, 0, $T0A().J);
    expr_2E8.Set(79, 1, $T0A()._9);
    expr_2E8.Set(80, 0, $T0A().K);
    expr_2E8.Set(80, 1, $T0A()._9);
    expr_2E8.Set(81, 0, $T0A().J);
    expr_2E8.Set(81, 1, $T0A().G5);
    expr_2E8.Set(81, 2, $T0A().G1);
    expr_2E8.Set(82, 0, $T0A().Q);
    expr_2E8.Set(82, 1, $T0A()._9);
    expr_2E8.Set(83, 0, $T0A().G4);
    expr_2E8.Set(83, 1, $T0A().G3);
    expr_2E8.Set(83, 2, $T0A().G1);
    expr_2E8.Set(84, 0, $T0A().G7);
    expr_2E8.Set(84, 1, $T0A().G4);
    expr_2E8.Set(84, 2, $T0A().G1);
    expr_2E8.Set(85, 0, $T0A().J);
    expr_2E8.Set(85, 1, $T0A().G4);
    expr_2E8.Set(85, 2, $T0A().G1);
    expr_2E8.Set(86, 0, $T0A().J);
    expr_2E8.Set(86, 1, $T0A().G3);
    expr_2E8.Set(86, 2, $T0A().G1);
    expr_2E8.Set(87, 0, $T0A()._9);
    expr_2E8.Set(87, 1, $T0A().G5);
    expr_2E8.Set(87, 2, $T0A().G1);
    expr_2E8.Set(88, 0, $T0A().J);
    expr_2E8.Set(88, 1, $T0A().G2);
    expr_2E8.Set(88, 2, $T0A().G1);
    expr_2E8.Set(89, 0, $T0A().G6);
    expr_2E8.Set(89, 1, $T0A().G3);
    expr_2E8.Set(89, 2, $T0A().G1);
    expr_2E8.Set(90, 0, $T0A().A);
    expr_2E8.Set(90, 1, $T0A().G8);
    expr_2E8.Set(91, 0, $T0A().G5);
    expr_2E8.Set(91, 1, $T0A().G2);
    expr_2E8.Set(91, 2, $T0A().G1);
    expr_2E8.Set(92, 0, $T0A().T);
    expr_2E8.Set(92, 1, $T0A().G5);
    expr_2E8.Set(92, 2, $T0A().G1);
    expr_2E8.Set(93, 0, $T0A().G8);
    expr_2E8.Set(93, 1, $T0A().G4);
    expr_2E8.Set(93, 2, $T0A().G1);
    expr_2E8.Set(94, 0, $T0A().T);
    expr_2E8.Set(94, 1, $T0A().G4);
    expr_2E8.Set(94, 2, $T0A().G1);
    expr_2E8.Set(95, 0, $T0A().T);
    expr_2E8.Set(95, 1, $T0A().G3);
    expr_2E8.Set(95, 2, $T0A().G1);
    expr_2E8.Set(96, 0, $T0A().G4);
    expr_2E8.Set(96, 1, $T0A().G2);
    expr_2E8.Set(96, 2, $T0A().G1);
    expr_2E8.Set(97, 0, $T0A().T);
    expr_2E8.Set(97, 1, $T0A().G2);
    expr_2E8.Set(97, 2, $T0A().G1);
    expr_2E8.Set(98, 0, $T0A()._9);
    expr_2E8.Set(98, 1, $T0A().G8);
    expr_2E8.Set(99, 0, $T0A().T);
    expr_2E8.Set(99, 1, $T0A().G8);
    expr_2E8.Set(100, 0, $T0A().A);
    expr_2E8.Set(100, 1, $T0A().G5);
    expr_2E8.Set(101, 0, $T0A().A);
    expr_2E8.Set(101, 1, $T0A().G7);
    expr_2E8.Set(102, 0, $T0A().G7);
    expr_2E8.Set(102, 1, $T0A().G3);
    expr_2E8.Set(102, 2, $T0A().G1);
    expr_2E8.Set(103, 0, $T0A().A);
    expr_2E8.Set(103, 1, $T0A().G4);
    expr_2E8.Set(104, 0, $T0A().G3);
    expr_2E8.Set(104, 1, $T0A().G2);
    expr_2E8.Set(104, 2, $T0A().G1);
    this.Group = expr_2E8;
    this.communityCards = JSIL.Array.New($T01(), 5);
    this.x = 0;
    this.buttonPosition = 0;
    this.iniVersion = 0;
    this.surrenderReturnRank = 0;
    this.surrenderMinimumPair = 0;
    this.highCardThreshhold = 0;
    this.paytableEntries = 9;
    this.playerCurrentBet = 0;
    this.playerCurrentRaise = 0;
    this.ties = JSIL.Array.New($T0B(), $T04().playerSize);
    this.anteBet = 0;
    this.potAmount = 0;
    this.playerBet = 0;
    this.playerRaise = 0;
    this.callAmount = 0;
    this.playerCredits = 0;
    this.win = 0;
    this.currentBetPosition = 0;
    this.rand = $S01().Construct();
    this.cardsDealt = 0;
    this.GamePlayers = JSIL.Array.New($T0D(), $T04().playerSize);
    this.GameWinners = JSIL.Array.New($T0B(), $T04().playerSize);
    this.PotSplit = 1;
    this.testGame = false;
    this.logging = false;
    this.PlayerSurrender = false;
    this.gameOverPtr = 0;
    this.winnerDeclared = false;
    this.videoPokerWin = 0;
    this.videoPokerLowRank = 15;
    this.nextPlayerWait = false;
    this.dealSound = $S02().Construct($T0F().get_highlight());
    this.buttonSound = $S02().Construct($T0F().get_push3());
    this.raiseSound = $S02().Construct($T0F().get_timerbeep());
    this.callSound = $S02().Construct($T0F().get_s_bang());
    this.videoWin = $S02().Construct($T0F().get_VideoWin());
    this.AntePotAmount = 0;
    this.FlopPotAmount = 0;
    this.TurnPotAmount = 0;
    this.RiverPotAmount = 0;
    this.PlayerRaiseFoldThreshold = 0;
    this.virtualPlayerRaised = 0;
    this.virtualPlayerRaiseLimit = 1;
    this.flopTurnRiverRaised = false;
    this.testDataRetrieved = false;
    this.ThisRoundRaisePercentage = 0;
    this.DealButtonPassed = false;
    this.creditsPlayed = 0;
    this.creditsWon = 0;
    this.gamePercentage = 0;
    this.gameNumber = 1;
    this.playerWithBestHand = 0;
    this.lastBet = 0;
    this.autoStart = false;
    this.winColor = $T10().get_Red();
    this.show = false;
    this.components = null;
    $T11().prototype._ctor.call(this);
    this.utils = new ($T12())();
    this.InitializeComponent();
    this.now = $T13().get_Now().MemberwiseClone();
    this.year = ((this.now).get_Year() | 0);
    var instructionBitmap = $S03().Construct((this.bonusPokerPanel).get_BackgroundImage());
    this.pixelColor = instructionBitmap.GetPixel(100, 100);
    (this.dataGridView1.DefaultCellStyle.BackColor = $T10().FromArgb(
        (this.pixelColor).get_R(), 
        (this.pixelColor).get_G(), 
        (this.pixelColor).get_B()
      ));
    (this.gameOverTimer).set_Interval($T04().intervalGameOver);
    (this.gameOverTimer).add_Tick($T18().New(this, function () { return $thisType.prototype.gameOverTimer_Tick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "gameOverTimer_Tick", $S04(), false); }.bind(this)));
    this.chipBoxes = JSIL.Array.New($T19(), [this.chipBox1, this.chipBox2, this.chipBox3, this.chipBox4, this.chipBox5]);
    (this.nextPlayerTimer).set_Interval(100);
    (this.nextPlayerTimer).add_Tick($T18().New(this, function () { return $thisType.prototype.nextPlayerTimer_Tick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "nextPlayerTimer_Tick", $S05(), false); }.bind(this)));
    var currentDirectory = $T1A().GetCurrentDirectory();
    var iniFile = (JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldem.ini"));
    var logFile = (JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldem.log"));
    var dataFile = (JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldem.dat"));
    this.GetLogFileVars();
    var flag = !$T1B().Exists(iniFile);
    if (flag) {
      this.CreateIniFile(iniFile);
    }
    try {
      this.iniVersion = +$T1C().Parse((this.utils).GetIniString(
          "Version", 
          "INI Version", 
          "0", 
          /* ref */ charsTransferred, 
          iniFile
        ));
      if (+this.iniVersion !== +this.currentIniVersion) {
        this.EraseIniFile(iniFile);
      }
    } catch ($exception) {
    }
    this.testGame = (this.utils).GetIniBool("Game Parameters", "Test Game", false, iniFile);
    this.logging = (this.utils).GetIniBool("Game Parameters", "Logging", false, iniFile);
    (this.TestingGroupBox).set_Visible(this.testGame);
    this.videoBonusWinOnly = (this.utils).GetIniBool("Game Parameters", "Pay Video Bonus on Win Only", false, iniFile);
    this.surrenderReturnRank = ((this.utils).GetIniInt("Game Parameters", "Surrender Return Rank", 100, iniFile) | 0);
    this.PlayerRaiseFoldThreshold = +$T1C().Parse((this.utils).GetIniString(
        "Game Parameters", 
        "Minimum Player Raise Threshold", 
        "3.6", 
        /* ref */ charsTransferred, 
        iniFile
      ));
    this.surrenderMinimumPair = ((this.utils).GetIniInt("Game Parameters", "Surrender Minimum Pair", 4, iniFile) | 0);
    this.highCardThreshhold = ((this.utils).GetIniInt("Game Parameters", "High Card Threshold", 4, iniFile) | 0);
    this.dealDelay = this.tempDelay = ((this.utils).GetIniInt("Game Parameters", "DealDelay", 250, iniFile) | 0);
    (this.nextPlayerTimer).set_Interval(this.nextPlayerDelay = ((this.utils).GetIniInt("Game Parameters", "Next Player Delay", 100, iniFile) | 0));
    this.virtualPlayerRaiseLimit = ((this.utils).GetIniInt("Game Parameters", "Virtual Player Raise Limit", 1, iniFile) | 0);
    this.gameEnable = (this.utils).GetIniBool("Game Parameters", "Auto Start Button", false, iniFile);
    this.gameDenomination = +((this.utils).GetIniInt("Game Parameters", "Game Denomination", 25, iniFile));
    this.gameDenomination = +((+this.gameDenomination / 100));
    this.gameDenomMultiplier = ((this.utils).GetIniInt("Game Parameters", "Bet Limit Multiplier", 5, iniFile) | 0);
    this.raiseLimitMultiplier = ((this.utils).GetIniInt("Game Parameters", "Raise Limit Multiplier", 5, iniFile) | 0);
    if ((this.gameDenomMultiplier | 0) < 9999) {
      (this.playerAllInButton).set_Visible(false);
      this.betLimit = +this.gameDenomination * +(this.gameDenomMultiplier);
    }
    this.paytableEntries = ((this.utils).GetIniInt("Video Poker Paytable", "Entries", 8, iniFile) | 0);

    for (var x = 0; x < 9; ) {
      this.PayTableAmounts[x] = ((this.utils).GetIniInt("Video Poker Paytable", this.PayTableStrings[x], this.PayTableAmounts[x], iniFile) | 0);
      var num = x;
      x = ((num + 1) | 0);
    }
    this.foldString = (this.utils).GetIniString(
      "Dynamic Help", 
      "FOLD", 
      "FOLD", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.checkString = (this.utils).GetIniString(
      "Dynamic Help", 
      "CHECK", 
      "CHECK", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.callString = (this.utils).GetIniString(
      "Dynamic Help", 
      "CALL", 
      "CALL", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.raiseString = (this.utils).GetIniString(
      "Dynamic Help", 
      "RAISE", 
      "RAISE", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.allInString = (this.utils).GetIniString(
      "Dynamic Help", 
      "ALL IN", 
      "ALL IN", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.surrenderString = (this.utils).GetIniString(
      "Dynamic Help", 
      "SURRENDER", 
      "SURRENDER", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.continueString = (this.utils).GetIniString(
      "Dynamic Help", 
      "CONTINUE", 
      "CONTINUE", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.surrenderBoxString = (this.utils).GetIniString(
      "Dynamic Help", 
      "SURRENDER BOX", 
      "SURRENDER BOX", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.realPlayerName = (this.utils).GetIniString(
      "Game Parameters", 
      "Player Name", 
      "PLAYER", 
      /* ref */ charsTransferred, 
      iniFile
    );
    this.jurisdictionalLimit = +((this.utils).GetIniInt("Game Parameters", "Jurisdictional Bet Limit", $T04().jurisdictionalBetLimit, iniFile));

  $loop1: 
    for (var x2 = 1; x2 < 11; ) {
      var instString = (JSIL.ConcatString("Instruction ", (x2).toString()));
      this.instrucionStrings[x2] = (this.utils).GetIniString(
        "Instructions", 
        instString, 
        "", 
        /* ref */ charsTransferred, 
        iniFile
      );
      var flag4 = (this.instrucionStrings[x2].length | 0) === 0;
      if (flag4) {
        break $loop1;
      }
      ((this.dataGridView1).get_Rows()).Add();
      ($S06().CallVirtual("get_Item", null, (((this.dataGridView1).get_Rows()).get_Item(((x2 - 1) | 0))).get_Cells(), 0)).set_Value((x2).toString());
      ($S06().CallVirtual("get_Item", null, (((this.dataGridView1).get_Rows()).get_Item(((x2 - 1) | 0))).get_Cells(), 1)).set_Value(this.instrucionStrings[x2]);
      (((this.dataGridView1).get_Rows()).get_Item(((x2 - 1) | 0))).set_Height(45);
      num = x2;
      x2 = ((num + 1) | 0);
    }
    this.BuildVideoBonusPaytable();
    this.bettingWindow = new ($T21())(this);
    this.creditLimitWindow = new ($T22())("PLAY CREDITS", 163, 420);
    if (+this.jurisdictionalLimit === 0) {
      (this.creditLimitWindow).set_Visible(false);
    }
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.creditLimitWindow);
    this.set_PlayerCredits(+($T04().playerCredits));
    this.startGameOverTimer(false);
    this.formHwnd = $T24().FromHwnd($T15().prototype.get_Handle.call(this).MemberwiseClone());
    this.cardBack = $S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), 52);
    this.BuildVirtualPlayerProfiles();
    this.IncrementButtonPosition(false);
    this.GameState = $T27().Ante;
    this.restoreCardDefaults(true);
    this.CreateSurrenderBox();
    this.DisableBettingButtons();
    this.SetPaytableSelectedColumn(9);
    this.videoPokerLowRank = (this.AdjustWinRank(((21 - (((this.paytableEntries | 0) - 1) | 0)) | 0)) | 0);
    this.videoPokerLowRank = (this.adjustedRanks[(((this.paytableEntries | 0) - 1) | 0)] | 0);
  }; 

  function Form1_addCredit_Click_1 (sender, e) {
    var flag = (+this.get_RealPlayerCredits() < +this.jurisdictionalLimit) || 
    (+this.jurisdictionalLimit === 0);
    if (flag) {
      this.set_RealPlayerCredits(+this.get_RealPlayerCredits() + +($T04().jurisdictionalBetLimit));
    }
    this.set_PlayerCredits(+this.get_PlayerCredits() + +this.jurisdictionalLimit);
    this.set_RealPlayerCredits(+this.get_RealPlayerCredits() - +this.jurisdictionalLimit);
    var flag2 = !((+this.lastBet <= 0) || 
      (+this.lastBet > +this.get_PlayerCredits())) && 
    ((((this.GameState).valueOf() | 0) === 0) || 
      (this.GameState === $T27().PlayerLose));
    if (flag2) {
      (this.repeatBetButton).set_Text(JSIL.ConcatString("REPEAT LAST BET OF ", $T08().Format("{0:C}", this.lastBet)));
      (this.repeatBetButton).set_Visible(true);
    }
    (this.addCreditButton).set_Visible(false);
  }; 

  function Form1_AdjustWinRank (rank) {
    switch (rank) {
      case 7: 
      case 8: 
      case 9: 
        var retRank = 13;
        break;

      case 10: 
        retRank = 14;
        break;

      case 11: 
      case 12: 
      case 13: 
        retRank = 15;
        break;

      case 14: 
        retRank = 16;
        break;

      case 15: 
        retRank = 17;
        break;

      case 16: 
        retRank = 18;
        break;

      case 17: 
      case 18: 
      case 19: 
        retRank = 19;
        break;

      case 20: 
        retRank = 20;
        break;

      case 21: 
        retRank = 21;
        break;

      default: 
        retRank = 12;
        break;

    }
    return retRank;
  }; 

  function Form1_AllInPlayer (player) {
    var DollarAmount = $T08().Format("{0:C}", this.virtualPlayers[player].Credits);
    var flag = +this.virtualPlayers[player].Credits > 0;
    if (flag) {
      $S09().CallVirtual("UpdateBetLabel", null, this, JSIL.ConcatString("ALL IN ", DollarAmount), player, $T10().get_Yellow());
    } else {
      $S09().CallVirtual("UpdateBetLabel", null, this, "ALL IN ", player, $T10().get_Yellow());
    }
    var virtualPlayer = this.virtualPlayers[player];
    virtualPlayer.RoundRaiseAmount = +virtualPlayer.RoundRaiseAmount + +this.virtualPlayers[player].Credits;
    this.virtualPlayers[player].AllIn = true;
    this.UpdateCreditLabel(player);
  }; 

  function Form1_autoPlayButton_Click (sender, e) {
    this.AutoPlay = !this.AutoPlay;
    var autoPlay = this.AutoPlay;
    if (autoPlay) {
      (this.autoPlayButton).set_Text("Man. Play");
      (this.nextPlayerTimer).set_Interval(10);
      this.tempDelay = (this.dealDelay | 0);
      this.dealDelay = 10;
      (this.gameOverTimer).set_Interval(10);
    } else {
      (this.autoPlayButton).set_Text("Auto Play");
      (this.nextPlayerTimer).set_Interval(this.nextPlayerDelay);
      this.dealDelay = (this.tempDelay | 0);
      (this.gameOverTimer).set_Interval($T04().intervalGameOver);
    }
  }; 

  function Form1_AwardPlayerWin ($exception) {
    this.winnerDeclared = true;
    var videoWin = 0;
    if ((this.cardsDealt | 0) >= 5) {
      videoWin = +this.AwardVideoBonus(0);
    }
    this.set_PlayerCredits(+this.get_PlayerCredits() + +this.get_PotAmount());
    this.creditsWon = +this.creditsWon + +this.get_PotAmount();
    this.set_PlayerCredits(+this.get_PlayerCredits() + videoWin);
    this.creditsWon = +this.creditsWon + videoWin;
    this.set_WinAmount(+this.get_PotAmount() + videoWin);
    this.clearCreditLabels();
    this.gameOverStrings[1] = (JSIL.ConcatString(this.realPlayerName, " WIN THE POT"));
    (this.bettingGroupBox).set_Visible(false);
    var flag2 = (+this.lastBet > 0) && 
    (+this.lastBet <= +this.get_PlayerCredits());
    if (flag2) {
      (this.repeatBetButton).set_Text(JSIL.ConcatString("REPEAT LAST BET OF ", $T08().Format("{0:C}", this.lastBet)));
      (this.repeatBetButton).set_Visible(true);
    }
    (this.newGameButton).set_Visible(true);
    try {
      this.LogResults();
    } catch ($exception) {
    }
    this.startGameOverTimer(true);
  }; 

  function Form1_AwardVideoBonus (split) {
    var flag = (split | 0) === 0;
    if (flag) {
      split = 1;
    }
    var videoBonus = 0;
    var playerWinRank = (this.GetFiveCardRanking(0) | 0);
    var flag2 = playerWinRank >= (this.videoPokerLowRank | 0);
    if (flag2) {
      videoBonus = +this.GetVideoPokerBonus(playerWinRank);
      videoBonus *= +(this.videoMultiplier);
      this.SetPaytableSelectedWin(playerWinRank);
      var flag3 = videoBonus > 0;
      if (flag3) {
        videoBonus = +((videoBonus / +split));
      }
      this.videoPokerWin = videoBonus;
    }
    var flag4 = videoBonus > 0;
    if (flag4) {
      (this.videoWin).Play();
    }
    return videoBonus;
  }; 

  function Form1_BetPlayer (player, $exception) {
    var flag = (this.get_CurrentBetPosition() | 0) === (this.buttonPosition | 0);
    if (flag) {
      this.DealButtonPassed = true;
    }
    var folded = this.virtualPlayers[player].Folded;
    if (folded) {
      (this.nextPlayerTimer).Start();
      var result = 0;
    } else {
      var ThisRoundBet = 0;
      var raise = 0;
      this.EvalPlayerHands(true, false, false, false);
      var rank = (this.playerHoleCardsRankings[player] | 0);
      var limp = this.virtualPlayers[player].LimpIn;
      var bluff = this.virtualPlayers[player].Bluffing;
      var folding = false;
      var ThisPlayersCall = +this.GetCurrentBet() - +this.virtualPlayers[player].CurrentBetAmount;
      this.BetType = $T2A().checking;
      var pocketPair = (this.GamePlayers[player].hand.cardHand[0] | 0) === (this.GamePlayers[player].hand.cardHand[1] | 0);
      var flag2 = ((player | 0) !== 0) || 
      this.AutoPlay;
      if (flag2) {
        this.clearBetLabel(player);
        if (this.GameState === $T27().HoldCardBet) {
          if (+this.virtualPlayers[0].RoundRaiseAmount !== 0) {
            var realPlayerPotRaisePercentage = +((100 / +((+this.get_PotAmount() / +this.virtualPlayers[0].RoundRaiseAmount))));
          }
          var potRaisePercentage = (this.GetPercentPotRaised(player) | 0);
          potRaisePercentage = (this.ThisRoundRaisePercentage | 0);
          var flag5 = rank <= (this.virtualPlayers[player].HoleMinThreshold | 0);
          if (flag5) {
            if (ThisPlayersCall > 0) {

            $loop0: 
              for (var x = 0; x < 8; ) {
                var flag7 = (+potRaisePercentage >= +this.virtualPlayers[player].FoldLevels[x].Range[0]) && 
                (+potRaisePercentage <= +this.virtualPlayers[player].FoldLevels[x].Range[1]);
                if (flag7) {

                $loop1: 
                  for (var i = 0; i < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].FoldLevels[x].FoldHands)) | 0); ) {
                    var flag8 = rank === (this.virtualPlayers[player].FoldLevels[x].FoldHands[i] | 0);
                    if (flag8) {
                      this.BetType = $T2A().folding;
                      break $loop1;
                    }
                    var num = i;
                    i = ((num + 1) | 0);
                  }
                  if (this.BetType === $T2A().folding) {
                    break $loop0;
                  }
                }
                num = x;
                x = ((num + 1) | 0);
              }
            }
            if (this.BetType === $T2A().checking) {

              for (var x2 = 0; x2 < ($T04().playerSize | 0); ) {
                var flag11 = (+potRaisePercentage >= +this.virtualPlayers[player].RaiseLevels[x2].Range[0]) && 
                (+potRaisePercentage <= +this.virtualPlayers[player].RaiseLevels[x2].Range[1]);
                if (flag11) {

                $loop3: 
                  for (var j = 0; j < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].RaiseLevels[x2].RaiseHands)) | 0); ) {
                    var flag12 = rank === (this.virtualPlayers[player].RaiseLevels[x2].RaiseHands[j] | 0);
                    if (flag12) {
                      this.BetType = $T2A().raising;
                      raise = +this.RoundUp(+this.get_PotAmount() * (+(this.virtualPlayers[player].RaiseLevels[x2].RaisePercentage) * 0.01));
                      break $loop3;
                    }
                    num = j;
                    j = ((num + 1) | 0);
                  }
                }
                var flag13 = +this.virtualPlayers[player].RoundRaiseAmount > 0;
                if (flag13) {
                  var flag14 = (+potRaisePercentage >= +this.virtualPlayers[player].RaiseLevels[x2].ReRaiseRange[0]) && 
                  (+potRaisePercentage <= +this.virtualPlayers[player].RaiseLevels[x2].ReRaiseRange[1]);
                  if (flag14) {

                  $loop5: 
                    for (var k = 0; k < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].RaiseLevels[x2].RaiseHands)) | 0); ) {
                      var flag15 = rank === (this.virtualPlayers[player].RaiseLevels[x2].RaiseHands[k] | 0);
                      if (flag15) {
                        this.BetType = $T2A().raising;
                        raise = +this.RoundUp(+this.get_PotAmount() * (+(this.virtualPlayers[player].RaiseLevels[x2].ReRaisePercentage) * 0.01));
                        break $loop5;
                      }
                      num = k;
                      k = ((num + 1) | 0);
                    }
                  } else {
                    var flag16 = +potRaisePercentage >= +this.virtualPlayers[player].RaiseLevels[x2].ReRaiseRange[1];
                    if (flag16) {

                    $loop4: 
                      for (var l = 0; l < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].RaiseLevels[x2].RaiseHands)) | 0); ) {
                        var flag17 = rank === (this.virtualPlayers[player].RaiseLevels[x2].RaiseHands[l] | 0);
                        if (flag17) {
                          this.BetType = $T2A().folding;
                          break $loop4;
                        }
                        num = l;
                        l = ((num + 1) | 0);
                      }
                    }
                  }
                }
                num = x2;
                x2 = ((num + 1) | 0);
              }
            }
            if (this.BetType === $T2A().checking) {
              var flag19 = ((player | 0) < ($S0B().CallStatic($T2B(), "Count$b1", [$asm08.TexasHoldEmFoldUp.VirtualPlayer], $T2D().$Cast(this.virtualPlayers)) | 0)) && 
              (this.virtualPlayers[player].AllInHands !== null);
              if (flag19) {

                for (var m = 0; m < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].AllInHands)) | 0); ) {
                  var flag20 = rank === (this.virtualPlayers[player].AllInHands[m] | 0);
                  if (flag20) {
                    if (ThisPlayersCall > 0) {
                      this.BetType = $T2A().allIn;
                    } else {
                      this.BetType = $T2A().raising;
                      raise = +this.get_PotAmount();
                    }
                  }
                  num = m;
                  m = ((num + 1) | 0);
                }
              } else {
                $T2E().Show("error in BetTypes.checking ( lets see if we are going all in )");
              }
            }
            if (this.BetType === $T2A().checking) {

              for (var n = 0; n < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].SlowPlayHands)) | 0); ) {
                var flag23 = rank === (this.virtualPlayers[player].SlowPlayHands[n] | 0);
                if (flag23) {
                  this.BetType = $T2A().raising;
                  raise = +this.get_PotAmount();
                  var weightedResult = this.getWeightedResult(50);
                  if (weightedResult) {
                    raise = +((raise / 2));
                  }
                }
                num = n;
                n = ((num + 1) | 0);
              }
            }
            var flag24 = bluff;
            if (flag24) {

              for (var i2 = 0; i2 < ($S0A().CallStatic($T2B(), "Count$b1", [$asm00.System.Int32], $T2C().$Cast(this.virtualPlayers[player].BluffHands)) | 0); ) {
                var flag25 = rank === (this.virtualPlayers[player].BluffHands[i2] | 0);
                if (flag25) {
                  var flag26 = raise > 0;
                  if (flag26) {
                    raise += raise * 0.3;
                  } else {
                    this.BetType = $T2A().raising;
                    raise = ThisPlayersCall * 0.3;
                  }
                  (this.textBox1).AppendText((this.virtualPlayers[player].Name + " is BLUFFING with " + $T08().Format("{0:C}", raise)));
                }
                num = i2;
                i2 = ((num + 1) | 0);
              }
            }
          } else {
            var flag27 = (ThisPlayersCall > 0) && 
            (+potRaisePercentage > +this.PlayerRaiseFoldThreshold);
            if (flag27) {
              this.BetType = $T2A().folding;
            }
          }
          var flag28 = !(!this.virtualPlayers[player].FoldOnAnyRaise || 
            (+this.GetTotalRaiseAmount() <= +this.PlayerRaiseFoldThreshold)) && 
          (raise === 0);
          if (flag28) {
            this.BetType = $T2A().folding;
          }
          if (this.BetType === $T2A().folding) {
            if (+this.virtualPlayers[0].RoundRaiseAmount >= (+this.virtualPlayers[0].Ante * 2)) {
              var flag31 = (this.virtualPlayers[player].HighCard | 0) >= (this.highCardThreshhold | 0);
              if (flag31) {
                this.BetType = $T2A().checking;
              }
            }
            var flag32 = pocketPair;
            if (flag32) {
              this.BetType = $T2A().checking;
            }
          }
        }
        if (this.GameState === $T27().FlopBet) {
          var fiveCardRank = (this.virtualPlayers[player].FiveCardHandRank | 0);
          var potRaisePercentage2 = (this.GetPercentPotRaised(player) | 0);
          potRaisePercentage2 = (this.ThisRoundRaisePercentage | 0);
          var hand = this.GamePlayers[player].hand.cardHand;
          var flag34 = potRaisePercentage2 === 0;
          if (flag34) {
            var tempRaise = 0;
            var tempRank = fiveCardRank;
            if ((fiveCardRank === 9) || 
              (fiveCardRank === 8) || (fiveCardRank === 7)) {
              switch ((this.GetPairType(hand)).valueOf()) {
                case 0: 
                  tempRank = 6;
                  break;

                case 1: 
                  tempRank = 7;
                  break;

                case 2: 
                  tempRank = 8;
                  break;

                case 3: 
                  tempRank = 9;
                  break;

              }
            }
            if ((fiveCardRank < 7) && (fiveCardRank > 0)) {
              num = tempRank;
              tempRank = ((num - 1) | 0);
            }
            try {
              tempRaise = +(this.virtualPlayers[player].FlopNoRaiseBetPercentages[((21 - tempRank) | 0)]) * 0.01;
            } catch ($exception) {
              var e = $exception;
              $T2E().Show(JSIL.ConcatString("tempRaise Error:", e.get_Message()));
            }
            var flag37 = tempRaise > 0;
            if (flag37) {
              this.BetType = $T2A().raising;
              raise = +this.RoundUp(+this.get_PotAmount() * tempRaise);
            }
            var flag38 = tempRaise < 0;
            if (flag38) {
              folding = true;
            }
            var flag39 = tempRaise === 999;
            if (flag39) {
              this.BetType = $T2A().allIn;
            }
          }
          var flag40 = potRaisePercentage2 > 0;
          if (flag40) {
            if (fiveCardRank > 0) {
              if ((fiveCardRank === 7) || 
                (fiveCardRank === 8) || (fiveCardRank === 9)) {
                var flag43 = potRaisePercentage2 > 50;
                if (flag43) {
                  var flag44 = (this.virtualPlayers[player].PocketPair | 0) < 10;
                  if (flag44) {
                    folding = true;
                  }
                }
                var flag45 = potRaisePercentage2 > 25;
                if (flag45) {
                  if ((((this.GetPairType(hand)).valueOf() | 0) === 0) || (this.GetPairType(hand) === $T31().Middle)) {
                    if (fiveCardRank < 9) {
                      folding = true;
                    }
                  }
                }
                var flag48 = potRaisePercentage2 > 38;
                if (flag48) {
                  if (this.GetPairType(hand) === $T31().Top) {
                    if (fiveCardRank < 9) {
                      folding = true;
                    }
                  }
                }
              }
              if (fiveCardRank === 10) {
                var cardTotal = (((this.GamePlayers[player].hand.XofaKindValue | 0) + (this.GamePlayers[player].hand.TwoPairSecondValue | 0)) | 0);
                var flag52 = cardTotal < 20;
                if (flag52) {
                  folding = true;
                }
              }
              if ((fiveCardRank === 5) || (fiveCardRank === 3)) {
                var flag54 = potRaisePercentage2 > 25;
                if (flag54) {
                  folding = true;
                }
              }
              if ((fiveCardRank === 1) || (fiveCardRank === 2)) {
                var flag56 = potRaisePercentage2 > 20;
                if (flag56) {
                  folding = true;
                }
              }
              if ((fiveCardRank === 4) || (fiveCardRank === 6)) {
                var flag58 = potRaisePercentage2 > 75;
                if (flag58) {
                  folding = true;
                }
              }
            } else {
              folding = true;
            }
          }
          if ((+this.virtualPlayers[0].RoundRaiseAmount > 0) && !this.flopTurnRiverRaised) {
            var flag60 = (fiveCardRank < 7) && 
            (rank > 12);
            if (flag60) {
              folding = true;
            }
            if (fiveCardRank === 7) {
              if (this.GetPairType(hand) !== $T31().Pocket) {
                var flag63 = (this.GamePlayers[player].hand.XofaKindValue | 0) <= 10;
                if (flag63) {
                  folding = true;
                }
              }
            }
            if (fiveCardRank === 10) {
              var cardTotal2 = (((this.GamePlayers[player].hand.XofaKindValue | 0) + (this.GamePlayers[player].hand.TwoPairSecondValue | 0)) | 0);
              var flag65 = cardTotal2 < 20;
              if (flag65) {
                folding = true;
              }
            }
            if ((fiveCardRank === 5) || (fiveCardRank === 3)) {
              var flag67 = +this.virtualPlayers[player].RoundRaiseAmount > 50;
              if (flag67) {
                folding = true;
              }
            }
            if ((fiveCardRank === 1) || (fiveCardRank === 2)) {
              var flag69 = +this.virtualPlayers[player].RoundRaiseAmount > 30;
              if (flag69) {
                folding = true;
              }
            }
            if ((fiveCardRank === 4) || (fiveCardRank === 6)) {
              var flag71 = +this.virtualPlayers[player].RoundRaiseAmount > 75;
              if (flag71) {
                folding = true;
              }
            }
          }
          if ((fiveCardRank >= 11) && (fiveCardRank <= 13)) {
            this.BetType = $T2A().raising;
            raise = +this.RoundUp(+((+this.get_PotAmount() / 2)));
          }
          (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " #", (player).toString(), " Flop Bet Rank = ", (fiveCardRank).toString(), $T32().get_NewLine()])));
        }
        if (this.GameState === $T27().TurnBet) {
          var fiveCardRank2 = (this.virtualPlayers[player].FiveCardHandRank | 0);
          var potRaisePercentage3 = (this.GetPercentPotRaised(player) | 0);
          potRaisePercentage3 = (this.ThisRoundRaisePercentage | 0);
          var hand2 = this.GamePlayers[player].hand.cardHand;
          var flag74 = potRaisePercentage3 === 0;
          if (flag74) {
            var tempRank2 = fiveCardRank2;
            if ((fiveCardRank2 === 9) || 
              (fiveCardRank2 === 8) || (fiveCardRank2 === 7)) {
              switch ((this.GetPairType(hand2)).valueOf()) {
                case 0: 
                  tempRank2 = 6;
                  break;

                case 1: 
                  tempRank2 = 7;
                  break;

                case 2: 
                  tempRank2 = 8;
                  break;

                case 3: 
                  tempRank2 = 9;
                  break;

              }
            }
            if ((fiveCardRank2 < 7) && (fiveCardRank2 > 0)) {
              num = tempRank2;
              tempRank2 = ((num - 1) | 0);
            }
            var flag77 = (this.virtualPlayers[player].TurnNoRaiseBetPercentages !== null) && 
            ((player | 0) < ($S0B().CallStatic($T2B(), "Count$b1", [$asm08.TexasHoldEmFoldUp.VirtualPlayer], $T2D().$Cast(this.virtualPlayers)) | 0));
            if (flag77) {
              var tempRaise2 = +(this.virtualPlayers[player].TurnNoRaiseBetPercentages[((21 - tempRank2) | 0)]) * 0.01;
            } else {
              tempRaise2 = 0;
            }
            var flag78 = tempRaise2 > 0;
            if (flag78) {
              this.BetType = $T2A().raising;
              raise = +this.RoundUp(+this.get_PotAmount() * tempRaise2);
            }
            var flag79 = tempRaise2 < 0;
            if (flag79) {
              folding = true;
            }
            var flag80 = tempRaise2 === 999;
            if (flag80) {
              this.BetType = $T2A().allIn;
            }
          }
          var flag81 = potRaisePercentage3 > 0;
          if (flag81) {
            if (fiveCardRank2 > 0) {
              if ((fiveCardRank2 === 7) || 
                (fiveCardRank2 === 8) || (fiveCardRank2 === 9)) {
                var flag84 = potRaisePercentage3 > 50;
                if (flag84) {
                  var flag85 = (this.virtualPlayers[player].PocketPair | 0) < 10;
                  if (flag85) {
                    folding = true;
                  }
                }
                var flag86 = potRaisePercentage3 > 25;
                if (flag86) {
                  if ((((this.GetPairType(hand2)).valueOf() | 0) === 0) || (this.GetPairType(hand2) === $T31().Middle)) {
                    if (fiveCardRank2 < 9) {
                      folding = true;
                    }
                  }
                }
                var flag89 = potRaisePercentage3 > 48;
                if (flag89) {
                  if (this.GetPairType(hand2) === $T31().Top) {
                    if (fiveCardRank2 < 9) {
                      folding = true;
                    }
                  }
                }
              }
              if (fiveCardRank2 === 10) {
                var flag93 = potRaisePercentage3 > 31;
                if (flag93) {
                  var cardTotal3 = (((this.GamePlayers[player].hand.XofaKindValue | 0) + (this.GamePlayers[player].hand.TwoPairSecondValue | 0)) | 0);
                  var flag94 = cardTotal3 < 20;
                  if (flag94) {
                    folding = true;
                  }
                }
              }
              if ((fiveCardRank2 === 5) || (fiveCardRank2 === 3)) {
                var flag96 = potRaisePercentage3 > 0;
                if (flag96) {
                  folding = true;
                }
              }
              if (fiveCardRank2 === 1) {
                var flag98 = potRaisePercentage3 > 0;
                if (flag98) {
                  folding = true;
                }
              }
              if (fiveCardRank2 === 2) {
                var flag100 = potRaisePercentage3 > 11;
                if (flag100) {
                  folding = true;
                }
              }
              if ((fiveCardRank2 === 4) || (fiveCardRank2 === 6)) {
                var flag102 = potRaisePercentage3 > 61;
                if (flag102) {
                  folding = true;
                }
              }
              if (fiveCardRank2 >= 16) {
                this.BetType = $T2A().raising;
                raise = +this.get_PotAmount();
              }
            } else {
              folding = true;
            }
          }
          if ((+this.virtualPlayers[0].RoundRaiseAmount > 0) && !this.flopTurnRiverRaised) {
            var flag105 = (fiveCardRank2 < 7) && 
            (rank > 12);
            if (flag105) {
              folding = true;
            }
            if (fiveCardRank2 === 7) {
              if (this.GetPairType(hand2) !== $T31().Pocket) {
                var flag108 = (this.GamePlayers[player].hand.XofaKindValue | 0) <= 10;
                if (flag108) {
                  folding = true;
                }
              }
            }
            if (fiveCardRank2 === 10) {
              var cardTotal4 = (((this.GamePlayers[player].hand.XofaKindValue | 0) + (this.GamePlayers[player].hand.TwoPairSecondValue | 0)) | 0);
              var flag110 = cardTotal4 < 20;
              if (flag110) {
                folding = true;
              }
            }
            if ((fiveCardRank2 === 5) || (fiveCardRank2 === 3)) {
              var flag112 = +this.virtualPlayers[player].RoundRaiseAmount > 0;
              if (flag112) {
                folding = true;
              }
            }
            if ((fiveCardRank2 === 1) || (fiveCardRank2 === 2)) {
              var flag114 = +this.virtualPlayers[player].RoundRaiseAmount > 0;
              if (flag114) {
                folding = true;
              }
            }
            if ((fiveCardRank2 === 4) || (fiveCardRank2 === 6)) {
              var flag116 = +this.virtualPlayers[player].RoundRaiseAmount > 51;
              if (flag116) {
                folding = true;
              }
            }
            if (fiveCardRank2 >= 16) {
              this.BetType = $T2A().raising;
              raise = +this.get_PotAmount();
            }
          }
          if ((fiveCardRank2 >= 11) && (fiveCardRank2 <= 13)) {
            this.BetType = $T2A().raising;
            raise = +this.RoundUp(+((+this.get_PotAmount() / 2)));
          }
          (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " #", (player).toString(), " Turn Bet Rank = ", (fiveCardRank2).toString(), $T32().get_NewLine()])));
        }
        if (this.GameState === $T27().RiverBet) {
          var fiveCardRank3 = (this.virtualPlayers[player].FiveCardHandRank | 0);
          var potRaisePercentage4 = (this.GetPercentPotRaised(player) | 0);
          potRaisePercentage4 = (this.ThisRoundRaisePercentage | 0);
          var hand3 = this.GamePlayers[player].hand.cardHand;
          var flag120 = potRaisePercentage4 === 0;
          if (flag120) {
            var tempRank3 = fiveCardRank3;
            if ((fiveCardRank3 === 9) || 
              (fiveCardRank3 === 8) || (fiveCardRank3 === 7)) {
              switch ((this.GetPairType(hand3)).valueOf()) {
                case 0: 
                  tempRank3 = 6;
                  break;

                case 1: 
                  tempRank3 = 7;
                  break;

                case 2: 
                  tempRank3 = 8;
                  break;

                case 3: 
                  tempRank3 = 9;
                  break;

              }
            }
            if ((fiveCardRank3 < 7) && (fiveCardRank3 > 0)) {
              num = tempRank3;
              tempRank3 = ((num - 1) | 0);
            }
            var tempRaise3 = +(this.virtualPlayers[player].RiverNoRaiseBetPercentages[((21 - tempRank3) | 0)]) * 0.01;
            if (tempRaise3 > 0) {
              this.BetType = $T2A().raising;
              raise = +this.RoundUp(+this.get_PotAmount() * tempRaise3);
            }
            if (tempRaise3 < 0) {
              folding = true;
            }
            if (tempRaise3 === 999) {
              this.BetType = $T2A().allIn;
            }
          }
          var flag126 = potRaisePercentage4 > 0;
          if (flag126) {
            if (fiveCardRank3 > 0) {
              if ((fiveCardRank3 === 7) || 
                (fiveCardRank3 === 8) || (fiveCardRank3 === 9)) {
                var flag129 = potRaisePercentage4 > 50;
                if (flag129) {
                  var flag130 = (this.virtualPlayers[player].PocketPair | 0) < 10;
                  if (flag130) {
                    folding = true;
                  }
                }
                var flag131 = potRaisePercentage4 > 25;
                if (flag131) {
                  if ((((this.GetPairType(hand3)).valueOf() | 0) === 0) || (this.GetPairType(hand3) === $T31().Middle)) {
                    if (fiveCardRank3 < 9) {
                      folding = true;
                    }
                  }
                }
                var flag134 = potRaisePercentage4 > 52;
                if (flag134) {
                  if (this.GetPairType(hand3) === $T31().Top) {
                    if (fiveCardRank3 < 9) {
                      folding = true;
                    }
                  }
                }
              }
              if (fiveCardRank3 === 10) {
                var flag138 = potRaisePercentage4 > 26;
                if (flag138) {
                  var cardTotal5 = (((this.GamePlayers[player].hand.XofaKindValue | 0) + (this.GamePlayers[player].hand.TwoPairSecondValue | 0)) | 0);
                  var flag139 = cardTotal5 < 20;
                  if (flag139) {
                    folding = true;
                  }
                }
              }
              if ((fiveCardRank3 === 5) || (fiveCardRank3 === 3)) {
                var flag141 = potRaisePercentage4 > 0;
                if (flag141) {
                  folding = true;
                }
              }
              if ((fiveCardRank3 === 1) || (fiveCardRank3 === 2)) {
                var flag143 = potRaisePercentage4 > 0;
                if (flag143) {
                  folding = true;
                }
              }
              if ((fiveCardRank3 === 4) || (fiveCardRank3 === 6)) {
                var flag145 = potRaisePercentage4 > 0;
                if (flag145) {
                  folding = true;
                }
              }
              if (fiveCardRank3 >= 16) {
                this.BetType = $T2A().raising;
                raise = +this.get_PotAmount();
              }
            } else {
              folding = true;
            }
          }
          if ((+this.virtualPlayers[0].RoundRaiseAmount > 0) && !this.flopTurnRiverRaised) {
            var flag148 = (fiveCardRank3 < 7) && 
            (rank > 6);
            if (flag148) {
              folding = true;
            }
            if (fiveCardRank3 === 7) {
              if (this.GetPairType(hand3) !== $T31().Pocket) {
                var flag151 = (this.GamePlayers[player].hand.XofaKindValue | 0) <= 10;
                if (flag151) {
                  folding = true;
                }
              }
            }
            if (fiveCardRank3 === 10) {
              var flag153 = potRaisePercentage4 > 25;
              if (flag153) {
                var cardTotal6 = (((this.GamePlayers[player].hand.XofaKindValue | 0) + (this.GamePlayers[player].hand.TwoPairSecondValue | 0)) | 0);
                var flag154 = cardTotal6 < 20;
                if (flag154) {
                  folding = true;
                }
              }
            }
            if ((fiveCardRank3 === 5) || (fiveCardRank3 === 3)) {
              var flag156 = +this.virtualPlayers[player].RoundRaiseAmount > 0;
              if (flag156) {
                folding = true;
              }
            }
            if ((fiveCardRank3 === 1) || (fiveCardRank3 === 2)) {
              var flag158 = +this.virtualPlayers[player].RoundRaiseAmount > 0;
              if (flag158) {
                folding = true;
              }
            }
            if ((fiveCardRank3 === 4) || (fiveCardRank3 === 6)) {
              var flag160 = +this.virtualPlayers[player].RoundRaiseAmount > 0;
              if (flag160) {
                folding = true;
              }
            }
            if (fiveCardRank3 >= 16) {
              this.BetType = $T2A().raising;
              raise = +this.get_PotAmount();
            }
          }
          if ((fiveCardRank3 >= 11) && (fiveCardRank3 <= 13)) {
            this.BetType = $T2A().raising;
            raise = +this.RoundUp(+((+this.get_PotAmount() / 2)));
          }
          (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " #", (player).toString(), " River Bet Rank = ", (fiveCardRank3).toString(), $T32().get_NewLine()])));
        }
        var flag163 = folding;
        if (flag163) {
          var flag164 = (this.GamePlayers[player].hand.HighCard | 0) >= (this.highCardThreshhold | 0);
          if (flag164) {
            folding = false;
          }
        }
        var flag165 = folding;
        if (flag165) {
          this.BetType = $T2A().folding;
        }
        if ((ThisPlayersCall === 0) && (this.BetType === $T2A().folding)) {
          this.BetType = $T2A().checking;
        }
        if ((this.BetType === $T2A().raising) && ((this.virtualPlayerRaised | 0) > (this.virtualPlayerRaiseLimit | 0))) {
          this.BetType = $T2A().checking;
        }
        if ((ThisPlayersCall === 0) && (this.BetType === $T2A().calling)) {
          this.BetType = $T2A().checking;
        }
        if ((ThisPlayersCall > 0) && (this.BetType === $T2A().checking)) {
          this.BetType = $T2A().calling;
        }
        var allIn = this.virtualPlayers[0].AllIn;
        if (allIn) {
          if (this.BetType === $T2A().folding) {
            var flag171 = (this.playerWithBestHand | 0) === (player | 0);
            if (flag171) {
              this.BetType = $T2A().calling;
            }
          }
        }
        var allIn2 = this.virtualPlayers[player].AllIn;
        if (allIn2) {
          this.AllInPlayer(player);
          (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " IS ALL IN", $T32().get_NewLine()])));
        } else {
          switch ((this.BetType).valueOf()) {
            case 0: 
              this.CheckPlayer(player);
              (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " CHECKED", $T32().get_NewLine()])));
              break;

            case 1: 
              var flag172 = ThisPlayersCall >= +this.virtualPlayers[player].Credits;
              if (flag172) {
                this.BetType = $T2A().allIn;
                raise = +this.virtualPlayers[player].Credits - ThisPlayersCall;
                this.ThisRoundRaisePercentage = (((this.ThisRoundRaisePercentage | 0) + (this.GetPotRaisePercentage(raise) | 0)) | 0);
                var virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.RoundCallAmount = +virtualPlayer.RoundCallAmount + ThisPlayersCall;
                ThisRoundBet = +this.virtualPlayers[player].Credits;
                this.AllInPlayer(player);
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.Credits = +virtualPlayer.Credits - ThisRoundBet;
                (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " ALL IN", $T32().get_NewLine()])));
              } else {
                ThisRoundBet = ThisPlayersCall;
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.Credits = +virtualPlayer.Credits - ThisRoundBet;
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.RoundCallAmount = +virtualPlayer.RoundCallAmount + ThisPlayersCall;
                this.CallPlayer(player);
                (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " CALLED", $T32().get_NewLine()])));
              }
              break;

            case 2: 
              num = (this.virtualPlayerRaised | 0);
              this.virtualPlayerRaised = ((num + 1) | 0);
              var flag173 = raise === 0;
              if (flag173) {
                raise = 1;
                raise = +this.RoundUp(+((+this.get_PlayerBet() / 2)));
                var flag174 = bluff;
                if (flag174) {
                  raise = +this.get_PlayerBet();
                }
                var flag175 = raise === 0;
                if (flag175) {
                  raise = +this.virtualPlayers[0].RoundRaiseAmount;
                }
              }
              var flag176 = raise > +this.raiseLimit;
              if (flag176) {
                raise = +this.raiseLimit;
              }
              var flag177 = (raise + ThisPlayersCall) >= +this.virtualPlayers[player].Credits;
              if (flag177) {
                this.BetType = $T2A().allIn;
                raise = +this.virtualPlayers[player].Credits - ThisPlayersCall;
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.RoundCallAmount = +virtualPlayer.RoundCallAmount + ThisPlayersCall;
                this.AllInPlayer(player);
                ThisRoundBet = raise + ThisPlayersCall;
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.Credits = +virtualPlayer.Credits - ThisRoundBet;
                (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " ALL IN", $T32().get_NewLine()])));
              } else {
                ThisRoundBet = raise + ThisPlayersCall;
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.Credits = +virtualPlayer.Credits - ThisRoundBet;
                this.RaisePlayer(player, raise);
                virtualPlayer = this.virtualPlayers[player];
                virtualPlayer.RoundCallAmount = +virtualPlayer.RoundCallAmount + ThisPlayersCall;
                (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " RAISED", $T32().get_NewLine()])));
                var gamePlayer = this.GamePlayers[player];
                num = (gamePlayer.RoundRaiseCount | 0);
                gamePlayer.RoundRaiseCount = ((num + 1) | 0);
                this.ThisRoundRaisePercentage = (((this.ThisRoundRaisePercentage | 0) + (this.GetPotRaisePercentage(raise) | 0)) | 0);
              }
              break;

            case 3: 
              raise = +this.virtualPlayers[player].Credits - ThisPlayersCall;
              this.ThisRoundRaisePercentage = (((this.ThisRoundRaisePercentage | 0) + (this.GetPotRaisePercentage(raise) | 0)) | 0);
              virtualPlayer = this.virtualPlayers[player];
              virtualPlayer.RoundCallAmount = +virtualPlayer.RoundCallAmount + ThisPlayersCall;
              this.AllInPlayer(player);
              ThisRoundBet = +this.virtualPlayers[player].Credits;
              virtualPlayer = this.virtualPlayers[player];
              virtualPlayer.Credits = +virtualPlayer.Credits - ThisRoundBet;
              (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " ALL IN", $T32().get_NewLine()])));
              break;

            case 4: 
              this.FoldPlayer(player);
              (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [this.virtualPlayers[player].Name, " ", (player).toString(), " FOLDED", $T32().get_NewLine()])));
              break;

          }
        }
        var autoPlay = this.AutoPlay;
        if (autoPlay) {
          this.set_PlayerCredits(this.virtualPlayers[0].Credits);
        }
      } else {
        ThisRoundBet = +this.playerCurrentBet;
        if ((this.BetType !== $T2A().raising) || 
          (this.BetType !== $T2A().calling) || (this.BetType !== $T2A().allIn)) {
        }
      }
      switch ((this.GameState).valueOf()) {
        case 1: 
          virtualPlayer = this.virtualPlayers[player];
          virtualPlayer.TwoCardBet = +virtualPlayer.TwoCardBet + ThisRoundBet;
          this.virtualPlayers[player].CurrentBetAmount = +this.virtualPlayers[player].TwoCardBet;
          break;

        case 2: 
          if (this.BetType === $T2A().raising) {
            this.flopTurnRiverRaised = true;
          }
          virtualPlayer = this.virtualPlayers[player];
          virtualPlayer.FlopBet = +virtualPlayer.FlopBet + ThisRoundBet;
          this.virtualPlayers[player].CurrentBetAmount = +this.virtualPlayers[player].FlopBet;
          break;

        case 3: 
          if (this.BetType === $T2A().raising) {
            this.flopTurnRiverRaised = true;
          }
          virtualPlayer = this.virtualPlayers[player];
          virtualPlayer.TurnBet = +virtualPlayer.TurnBet + ThisRoundBet;
          this.virtualPlayers[player].CurrentBetAmount = +this.virtualPlayers[player].TurnBet;
          break;

        case 4: 
          if (this.BetType === $T2A().raising) {
            this.flopTurnRiverRaised = true;
          }
          virtualPlayer = this.virtualPlayers[player];
          virtualPlayer.RiverBet = +virtualPlayer.RiverBet + ThisRoundBet;
          this.virtualPlayers[player].CurrentBetAmount = +this.virtualPlayers[player].RiverBet;
          break;

        case 6: 
          virtualPlayer = this.virtualPlayers[player];
          virtualPlayer.LastRoundBet = +virtualPlayer.LastRoundBet + ThisRoundBet;
          this.virtualPlayers[player].CurrentBetAmount = +this.virtualPlayers[player].LastRoundBet;
          break;

      }
      this.set_PotAmount(+this.get_PotAmount() + ThisRoundBet);
      var flag182 = ((player | 0) === 0) && 
      this.AutoPlay;
      if (flag182) {
        this.creditsPlayed = +this.creditsPlayed + ThisRoundBet;
      }
      (this.nextPlayerTimer).Start();
      result = ThisRoundBet;
    }
    return result;
  }; 

  function Form1_BuildVideoBonusPaytable () {
    (this.paytableGrid).set_Width(3);
    (this.paytableGrid).set_Height(3);

    for (var w = 0; w < ((this.paytableGrid).get_ColumnCount() | 0); ) {
      var dataGridView = this.paytableGrid;
      dataGridView.set_Width((((dataGridView.get_Width() | 0) + (($S0C().CallVirtual("get_Item", null, (this.paytableGrid).get_Columns(), w)).get_Width() | 0)) | 0));
      var flag = w === 0;
      if (flag) {
        (($S0C().CallVirtual("get_Item", null, (this.paytableGrid).get_Columns(), w)).get_DefaultCellStyle()).set_Alignment($T37().MiddleLeft);
      }
      var num = w;
      w = ((num + 1) | 0);
    }

    for (var x = 0; x < (this.paytableEntries | 0); ) {
      ((this.paytableGrid).get_Rows()).Add();
      ($S0D().CallVirtual("get_Item", null, this.paytableGrid, 0, x)).set_Value(this.PayTableStrings[x]);
      ($S0D().CallVirtual("get_Item", null, this.paytableGrid, 0, x)).set_Selected(false);
      dataGridView = this.paytableGrid;
      dataGridView.set_Height((((dataGridView.get_Height() | 0) + ((((this.paytableGrid).get_Rows()).get_Item(x)).get_Height() | 0)) | 0));

      for (var w2 = 1; w2 < ((this.paytableGrid).get_ColumnCount() | 0); ) {
        ($S0D().CallVirtual("get_Item", null, this.paytableGrid, w2, x)).set_Value((Math.imul(this.PayTableAmounts[x], w2)).toString());
        num = w2;
        w2 = ((num + 1) | 0);
      }
      num = x;
      x = ((num + 1) | 0);
    }
    this.UpdateVideoBonusMaxMultiplier(5);
    this.SetPaytableSelectedColumn(1);
  }; 

  function Form1_BuildVirtualPlayerProfiles ($exception) {
    var charsTransferred = new JSIL.BoxedVariable(0);
    var testchars = new JSIL.BoxedVariable(0);
    var i = 0;
    var done = false;
    var num = (this.virtualPlayerCount | 0);
    this.virtualPlayerCount = ((num - 1) | 0);
    var stringArray = JSIL.Array.New($T08(), 20);
    var currentDirectory = $T1A().GetCurrentDirectory();
    var fileName = (JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldem.ini"));

    do {
      var Player = (JSIL.ConcatString("Player", (i).toString()));
      var iniTest = (this.utils).GetIniString(
        Player, 
        "Hole Min Threshold", 
        null, 
        /* ref */ charsTransferred, 
        JSIL.ConcatString(currentDirectory, "\\TexasHoldem.ini")
      );
      var flag = (charsTransferred.get() | 0) === 0;
      if (flag) {
        done = true;
      } else {
        num = (this.virtualPlayerCount | 0);
        this.virtualPlayerCount = ((num + 1) | 0);
        try {
          this.virtualTempPlayers[i] = new ($T07())();
          this.virtualTempPlayers[i].playerNumber = i;

          for (var x = 0; x < ($T04().playerSize | 0); ) {
            this.virtualTempPlayers[i].RaiseLevels[x] = new ($T38())();
            num = x;
            x = ((num + 1) | 0);
          }

          for (var x2 = 0; x2 < 8; ) {
            this.virtualTempPlayers[i].FoldLevels[x2] = new ($T39())();
            num = x2;
            x2 = ((num + 1) | 0);
          }
          this.virtualTempPlayers[i].Name = (this.utils).GetIniString(
            Player, 
            "Player Name", 
            JSIL.ConcatString("Player ", (i).toString()), 
            /* ref */ testchars, 
            fileName
          );
          this.virtualTempPlayers[i].FoldOnAnyRaise = (this.utils).GetIniBool(Player, "Fold On Any Raise", false, JSIL.ConcatString(currentDirectory, "\\TexasHoldem.ini"));
          this.virtualTempPlayers[i].HoleMinThreshold = ((this.utils).GetIniInt(Player, "Hole Min Threshold", 72, fileName) | 0);

          for (var x3 = 0; x3 < ($T04().playerSize | 0); ) {
            var raiseHand = (("Hole Raise " + (((x3 + 1) | 0)).toString() + " Hand Array"));
            this.virtualTempPlayers[i].RaiseLevels[x3].RaiseHands = (this.utils).GetINIIntArray(Player, raiseHand, 1, fileName);
            var holeRaiseRange = (("Hole Raise " + (((x3 + 1) | 0)).toString() + " Range"));
            this.virtualTempPlayers[i].RaiseLevels[x3].Range = (this.utils).GetINIDoubleArray(Player, holeRaiseRange, 2, fileName);
            this.virtualTempPlayers[i].RaiseLevels[x3].RaisePercentage = ((this.utils).GetIniInt(Player, ("Hole Raise " + (((x3 + 1) | 0)).toString() + " Percentage"), 50, fileName) | 0);
            var holeReRaiseRange = (("Hole Raise " + (((x3 + 1) | 0)).toString() + " ReRaise Range"));
            this.virtualTempPlayers[i].RaiseLevels[x3].ReRaiseRange = (this.utils).GetINIDoubleArray(Player, holeReRaiseRange, 2, fileName);
            this.virtualTempPlayers[i].RaiseLevels[x3].ReRaisePercentage = ((this.utils).GetIniInt(Player, ("Hole Raise " + (((x3 + 1) | 0)).toString() + " ReRaise Percentage"), 50, fileName) | 0);
            num = x3;
            x3 = ((num + 1) | 0);
          }

          for (var x4 = 0; x4 < 8; ) {
            var holeFoldHands = (("Hole Fold " + (((x4 + 1) | 0)).toString() + " Hand Array"));
            this.virtualTempPlayers[i].FoldLevels[x4].FoldHands = (this.utils).GetINIIntArray(Player, holeFoldHands, 1, fileName);
            this.virtualTempPlayers[i].FoldLevels[x4].Range = (this.utils).GetINIDoubleArray(Player, ("Hole Fold " + (((x4 + 1) | 0)).toString() + " Range"), 2, fileName);
            num = x4;
            x4 = ((num + 1) | 0);
          }
          this.virtualTempPlayers[i].BluffHands = (this.utils).GetINIIntArray(Player, "Bluff Hands", 1, fileName);
          this.virtualTempPlayers[i].SlowPlayHands = (this.utils).GetINIIntArray(Player, "Slow Play Hands", 1, fileName);
          this.virtualTempPlayers[i].AllInHands = (this.utils).GetINIIntArray(Player, "Hole All In Hands", 1, fileName);
          this.virtualTempPlayers[i].BluffPercentage = ((this.utils).GetIniInt(Player, "Bluff Percentage", 0, fileName) | 0);
          this.virtualTempPlayers[i].BluffCallRaisePercentage = ((this.utils).GetIniInt(Player, "Bluff Call Raise Percentage", 50, fileName) | 0);
          this.virtualTempPlayers[i].Folded = false;
          this.virtualTempPlayers[i].FlopNoRaiseBetPercentages = (this.utils).GetINIIntArray(Player, "Flop No Raise Bet Percentages", 21, fileName);
          this.virtualTempPlayers[i].TurnNoRaiseBetPercentages = (this.utils).GetINIIntArray(Player, "Turn No Raise Bet Percentages", 21, fileName);
          this.virtualTempPlayers[i].RiverNoRaiseBetPercentages = (this.utils).GetINIIntArray(Player, "River No Raise Bet Percentages", 21, fileName);
        } catch ($exception) {
          if ($T3A().$Is($exception)) {
            $S0E().CallStatic($T2E(), "Show", null, ($exception).get_Message(), "INI FILE Error");
            var ex = ($exception).get_Message();
          } else {
            throw $exception;
          }
        }
        num = i;
        i = ((num + 1) | 0);
      }
    } while (!done);
    this.virtualPlayers[0] = new ($T07())();
    this.virtualPlayers[0] = this.virtualTempPlayers[0];
  }; 

  function Form1_button_mouse_down (sender, e) {
    var button = $T3C().$Cast(sender);
    button.set_ImageIndex(1);
  }; 

  function Form1_button_mouse_up (sender, e) {
    var button = $T3C().$Cast(sender);
    button.set_ImageIndex(0);
  }; 

  function Form1_button1_Click (sender, e) {
  }; 

  function Form1_button2_Click (sender, e) {
    var playerData = "";

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      playerData = ((playerData + "," + (this.virtualPlayers[x].playerNumber).toString()));
      var num = x;
      x = ((num + 1) | 0);
    }
    var data2 = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [(this.deck[0]).toString(), ",", (this.deck[6]).toString(), ",", (this.deck[1]).toString(), ",", (this.deck[7]).toString(), ",", (this.deck[2]).toString(), ",", (this.deck[8]).toString(), ",", (this.deck[3]).toString(), ",", (this.deck[9]).toString(), ",", (this.deck[4]).toString(), ",", (this.deck[10]).toString(), ",", (this.deck[5]).toString(), ",", (this.deck[11]).toString(), ",", (this.deck[12]).toString(), ",", (this.deck[13]).toString(), ",", (this.deck[15]).toString(), ",", (this.deck[15]).toString(), ",", (this.deck[16]).toString(), playerData])));
    var data3 = "";

    for (var x2 = 0; x2 < 17; ) {
      var flag = x2 > 0;
      if (flag) {
        data3 = (JSIL.ConcatString(data3, ","));
      }
      data3 = (JSIL.ConcatString(data3, this.deck[x2]));
      num = x2;
      x2 = ((num + 1) | 0);
    }
    data3 = (JSIL.ConcatString(data3, playerData));
    data3 = ((data3 + "," + (this.buttonPosition).toString()));
    $T3E().SetText(data3);
  }; 

  function Form1_button3_Click (sender, e) {
    this.IncrementButtonPosition(false);
  }; 

  function Form1_button4_Click (sender, e) {
  }; 

  function Form1_CallPlayer (player) {
    $S0F().CallVirtual("UpdateBetLabel", null, this, "CALL", player, false);
    this.UpdateCreditLabel(player);
  }; 

  function Form1_CheckForAllInShowdown () {

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      var flag = !this.virtualPlayers[x].Folded;
      if (flag) {
        var flag2 = !this.virtualPlayers[x].AllIn;
        if (flag2) {
          var result = false;
          return result;
        }
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    var allIn = this.virtualPlayers[0].AllIn;
    result = allIn;
    return result;
  }; 

  function Form1_CheckForBetFinish () {
    var highBet = +this.GetCurrentBet();

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      var flag = !this.virtualPlayers[x].Folded && 
      !this.virtualPlayers[x].AllIn;
      if (flag) {
        var flag2 = (+this.virtualPlayers[x].CurrentBetAmount !== highBet) || 
        ((highBet === 0) && 
          !this.virtualPlayers[x].RoundChecked);
        if (flag2) {
          var result = false;
          return result;
        }
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    result = true;
    return result;
  }; 

  function Form1_checkForPlayerWin () {

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      var flag = !this.virtualPlayers[x].Folded;
      if (flag) {
        var result = false;
        return result;
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    result = true;
    return result;
  }; 

  function Form1_CheckPlayer (player) {
    $S0F().CallVirtual("UpdateBetLabel", null, this, "CHECK", player, false);
    this.virtualPlayers[player].RoundChecked = true;
  }; 

  function Form1_clearBetLabel (player) {
    (this.betLabels[player]).set_Text("");
    (this.betLabels[player]).Invalidate();
    (this.betLabels[player]).Update();
  }; 

  function Form1_clearBetLabels () {

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      (this.betLabels[x]).set_Text("");
      (this.betLabels[x]).set_Visible(false);
      (this.betLabels[x]).Invalidate();
      (this.betLabels[x]).Update();
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_clearChips () {
    (this.chipBox1).set_Image(null);
    (this.chipBox2).set_Image(null);
    (this.chipBox3).set_Image(null);
    (this.chipBox4).set_Image(null);
    (this.chipBox5).set_Image(null);
  }; 

  function Form1_clearCreditLabels () {

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      (this.creditLabels[x]).set_Text("");
      (this.creditLabels[x]).set_Visible(false);
      (this.creditLabels[x]).Invalidate();
      (this.creditLabels[x]).Update();
      var num = x;
      x = ((num + 1) | 0);
    }
    this.clearChips();
  }; 

  function Form1_ClearPlayerCards (player) {
    var cardRec = $S10().Construct(this.cardPoints[Math.imul(player, 2)].MemberwiseClone(), $S11().Construct(150, 110));
    $S12().CallVirtual("Invalidate", null, this, cardRec.MemberwiseClone());
    this.Update();
  }; 

  function Form1_comboBox1_SelectedIndexChanged (sender, e) {
    this.FoldPlayer(((((this.comboBox1).get_SelectedIndex() | 0) + 1) | 0));
  }; 

  function Form1_CreateIniFile (iniFile) {
    var assy = $asm08.__Assembly__;
    var resourseStrings = assy.GetManifestResourceNames();
    var array = resourseStrings;

  $loop0: 
    for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
      var i = array[j];
      var flag = ((i.indexOf("TexasHoldEm.ini") != -1));
      if (flag) {
        var reader = $S13().Construct(assy.GetManifestResourceStream(i));
        var fs = $S14().Construct(JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.ini"), $T45().Create);
        var writer = $S15().Construct(fs);

        while (!reader.get_EndOfStream()) {
          var read = reader.ReadLine();
          var flag2 = ((read.indexOf("INI Version") != -1));
          if (flag2) {
            read = (JSIL.ConcatString("INI Version = ", (this.currentIniVersion).toString()));
          }
          $S16().CallVirtual("WriteLine", null, writer, read);
        }
        writer.Close();
        break $loop0;
      }
    }
  }; 

  function Form1_CreateSurrenderBox () {
    this.surrenderPanel = new ($T49())();
    (this.surrenderPanel).set_Top(580);
    (this.surrenderPanel).set_Left(25);
    (this.surrenderPanel.BackColor = $T10().get_Red());
    $T15().prototype.add_Click.call(this.surrenderPanel, $T18().New(this, function () { return $thisType.prototype.playerFoldButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerFoldButton_Click", $S17(), false); }.bind(this)));
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.surrenderPanel);
    var surrenderTextBox = new ($T4A())();
    surrenderTextBox.set_WordWrap(true);
    surrenderTextBox.set_Text(this.surrenderBoxString);
    surrenderTextBox.set_Multiline(true);
    surrenderTextBox.set_Parent(this.surrenderPanel);
    (surrenderTextBox.BackColor = $T10().get_Red());
    surrenderTextBox.set_Width(195);
    surrenderTextBox.set_Height(57);
    surrenderTextBox.set_Top(10);
    surrenderTextBox.set_Left(3);
    surrenderTextBox.set_BorderStyle($T4B().None);
    surrenderTextBox.set_TextAlign($T4C().Center);
    $T2F().prototype.add_Click.call(surrenderTextBox, $T18().New(this, function () { return $thisType.prototype.playerFoldButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerFoldButton_Click", $S17(), false); }.bind(this)));
    this.surrenderLabel = new ($T03())();
    (this.surrenderLabel).set_Parent(this.surrenderPanel);
    (this.surrenderLabel).set_Text("SURRENDER");
    (this.surrenderLabel).set_Top(67);
    (this.surrenderLabel).set_Left(5);
    (this.surrenderLabel).set_Width(192);
    (this.surrenderLabel).set_Font($S18().Construct(((this.surrenderLabel).get_Font()).get_FontFamily(), 15, $T4E().Bold));
    (this.surrenderLabel.ForeColor = $T10().get_Black());
    $T15().prototype.add_Click.call(this.surrenderLabel, $T18().New(this, function () { return $thisType.prototype.playerFoldButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerFoldButton_Click", $S17(), false); }.bind(this)));
    (this.surrenderLabel).set_TextAlign($T4F().MiddleCenter);
    var surrenderFlashTimer = $S00().Construct();
    surrenderFlashTimer.set_Interval(500);
    surrenderFlashTimer.add_Tick($T18().New(this, function () { return $thisType.prototype.surrenderFlashTimer_Tick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "surrenderFlashTimer_Tick", $S19(), false); }.bind(this)));
    surrenderFlashTimer.Start();
    (this.surrenderPanel).set_Visible(false);
  }; 

  function Form1_dealCard (target, firstCard, cardback) {
    switch (target) {
      case 0: 
        if (firstCard) {
          (this.playerHands).Set(target, 0, this.deck[this.deckPtr]);
          (this.cardImages).Draw(this.formHwnd, this.cardPoints[0].MemberwiseClone(), (this.playerHands).Get(target, 0));
          this.GamePlayers[target].hand.cardHand[0] = ((this.playerHands).Get(target, 0) | 0);
        } else {
          (this.playerHands).Set(target, 1, this.deck[this.deckPtr]);
          (this.cardImages).Draw(this.formHwnd, this.cardPoints[1].MemberwiseClone(), (this.playerHands).Get(target, 1));
          this.GamePlayers[target].hand.cardHand[1] = ((this.playerHands).Get(target, 1) | 0);
        }
        break;

      case 1: 
        if (firstCard) {
          (this.playerHands).Set(target, 0, this.deck[this.deckPtr]);
          if (cardback && !this.testGame) {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[2].MemberwiseClone(), 52);
          } else {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[2].MemberwiseClone(), (this.playerHands).Get(target, 0));
          }
          this.GamePlayers[target].hand.cardHand[0] = ((this.playerHands).Get(target, 0) | 0);
          (this.player1hold1).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 0)));
        } else {
          (this.playerHands).Set(target, 1, this.deck[this.deckPtr]);
          if (cardback) {
            var var_5_20E_cp_0 = this.cardPoints;
            (var_5_20E_cp_0[3]).set_X(((((var_5_20E_cp_0[3]).get_X() | 0) - (this.offsetX | 0)) | 0));
            var var_5_232_cp_0 = this.cardPoints;
            (var_5_232_cp_0[3]).set_Y(((((var_5_232_cp_0[3]).get_Y() | 0) + (this.offsetY | 0)) | 0));
            var flag2 = this.testGame;
            if (flag2) {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[3].MemberwiseClone(), (this.playerHands).Get(target, 1));
            } else {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[3].MemberwiseClone(), 52);
            }
          } else {
            var var_5_2B7_cp_0 = this.cardPoints;
            (var_5_2B7_cp_0[3]).set_X(((((var_5_2B7_cp_0[3]).get_X() | 0) + (this.offsetX | 0)) | 0));
            var var_5_2DB_cp_0 = this.cardPoints;
            (var_5_2DB_cp_0[3]).set_Y(((((var_5_2DB_cp_0[3]).get_Y() | 0) - (this.offsetY | 0)) | 0));
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[3].MemberwiseClone(), (this.playerHands).Get(target, 1));
          }
          this.GamePlayers[target].hand.cardHand[1] = ((this.playerHands).Get(target, 1) | 0);
          (this.player1hold2).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 1)));
        }
        break;

      case 2: 
        if (firstCard) {
          (this.playerHands).Set(target, 0, this.deck[this.deckPtr]);
          if (cardback && !this.testGame) {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[4].MemberwiseClone(), 52);
          } else {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[4].MemberwiseClone(), (this.playerHands).Get(target, 0));
          }
          this.GamePlayers[target].hand.cardHand[0] = ((this.playerHands).Get(target, 0) | 0);
          (this.player2hold1).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 0)));
        } else {
          (this.playerHands).Set(target, 1, this.deck[this.deckPtr]);
          if (cardback) {
            var var_5_47E_cp_0 = this.cardPoints;
            (var_5_47E_cp_0[5]).set_X(((((var_5_47E_cp_0[5]).get_X() | 0) - (this.offsetX | 0)) | 0));
            var var_5_4A2_cp_0 = this.cardPoints;
            (var_5_4A2_cp_0[5]).set_Y(((((var_5_4A2_cp_0[5]).get_Y() | 0) + (this.offsetY | 0)) | 0));
            var flag4 = this.testGame;
            if (flag4) {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[5].MemberwiseClone(), (this.playerHands).Get(target, 1));
            } else {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[5].MemberwiseClone(), 52);
            }
          } else {
            var var_5_527_cp_0 = this.cardPoints;
            (var_5_527_cp_0[5]).set_X(((((var_5_527_cp_0[5]).get_X() | 0) + (this.offsetX | 0)) | 0));
            var var_5_54B_cp_0 = this.cardPoints;
            (var_5_54B_cp_0[5]).set_Y(((((var_5_54B_cp_0[5]).get_Y() | 0) - (this.offsetY | 0)) | 0));
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[5].MemberwiseClone(), (this.playerHands).Get(target, 1));
          }
          this.GamePlayers[target].hand.cardHand[1] = ((this.playerHands).Get(target, 1) | 0);
          (this.player2hold2).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 1)));
        }
        break;

      case 3: 
        if (firstCard) {
          (this.playerHands).Set(target, 0, this.deck[this.deckPtr]);
          if (cardback && !this.testGame) {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[6].MemberwiseClone(), 52);
          } else {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[6].MemberwiseClone(), (this.playerHands).Get(target, 0));
          }
          this.GamePlayers[target].hand.cardHand[0] = ((this.playerHands).Get(target, 0) | 0);
          (this.player3hold1).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 0)));
        } else {
          (this.playerHands).Set(target, 1, this.deck[this.deckPtr]);
          if (cardback) {
            var var_5_6EE_cp_0 = this.cardPoints;
            (var_5_6EE_cp_0[7]).set_X(((((var_5_6EE_cp_0[7]).get_X() | 0) - (this.offsetX | 0)) | 0));
            var var_5_712_cp_0 = this.cardPoints;
            (var_5_712_cp_0[7]).set_Y(((((var_5_712_cp_0[7]).get_Y() | 0) + (this.offsetY | 0)) | 0));
            var flag6 = this.testGame;
            if (flag6) {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[7].MemberwiseClone(), (this.playerHands).Get(target, 1));
            } else {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[7].MemberwiseClone(), 52);
            }
          } else {
            var var_5_797_cp_0 = this.cardPoints;
            (var_5_797_cp_0[7]).set_X(((((var_5_797_cp_0[7]).get_X() | 0) + (this.offsetX | 0)) | 0));
            var var_5_7BB_cp_0 = this.cardPoints;
            (var_5_7BB_cp_0[7]).set_Y(((((var_5_7BB_cp_0[7]).get_Y() | 0) - (this.offsetY | 0)) | 0));
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[7].MemberwiseClone(), (this.playerHands).Get(target, 1));
          }
          this.GamePlayers[target].hand.cardHand[1] = ((this.playerHands).Get(target, 1) | 0);
          (this.player3hold2).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 1)));
        }
        break;

      case 4: 
        if (firstCard) {
          (this.playerHands).Set(target, 0, this.deck[this.deckPtr]);
          if (cardback && !this.testGame) {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[8].MemberwiseClone(), 52);
          } else {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[8].MemberwiseClone(), (this.playerHands).Get(target, 0));
          }
          this.GamePlayers[target].hand.cardHand[0] = ((this.playerHands).Get(target, 0) | 0);
          (this.player4hold1).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 0)));
        } else {
          (this.playerHands).Set(target, 1, this.deck[this.deckPtr]);
          if (cardback) {
            var var_5_95F_cp_0 = this.cardPoints;
            (var_5_95F_cp_0[9]).set_X(((((var_5_95F_cp_0[9]).get_X() | 0) - (this.offsetX | 0)) | 0));
            var var_5_984_cp_0 = this.cardPoints;
            (var_5_984_cp_0[9]).set_Y(((((var_5_984_cp_0[9]).get_Y() | 0) + (this.offsetY | 0)) | 0));
            var flag8 = this.testGame;
            if (flag8) {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[9].MemberwiseClone(), (this.playerHands).Get(target, 1));
            } else {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[9].MemberwiseClone(), 52);
            }
          } else {
            var var_5_A0C_cp_0 = this.cardPoints;
            (var_5_A0C_cp_0[9]).set_X(((((var_5_A0C_cp_0[9]).get_X() | 0) + (this.offsetX | 0)) | 0));
            var var_5_A31_cp_0 = this.cardPoints;
            (var_5_A31_cp_0[9]).set_Y(((((var_5_A31_cp_0[9]).get_Y() | 0) - (this.offsetY | 0)) | 0));
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[9].MemberwiseClone(), (this.playerHands).Get(target, 1));
          }
          this.GamePlayers[target].hand.cardHand[1] = ((this.playerHands).Get(target, 1) | 0);
          (this.player4hold2).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 1)));
        }
        break;

      case 5: 
        if (firstCard) {
          (this.playerHands).Set(target, 0, this.deck[this.deckPtr]);
          if (cardback && !this.testGame) {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[10].MemberwiseClone(), 52);
          } else {
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[10].MemberwiseClone(), (this.playerHands).Get(target, 0));
          }
          this.GamePlayers[target].hand.cardHand[0] = ((this.playerHands).Get(target, 0) | 0);
          (this.player5hold1).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 0)));
        } else {
          (this.playerHands).Set(target, 1, this.deck[this.deckPtr]);
          if (cardback) {
            var var_5_BD8_cp_0 = this.cardPoints;
            (var_5_BD8_cp_0[11]).set_X(((((var_5_BD8_cp_0[11]).get_X() | 0) - (this.offsetX | 0)) | 0));
            var var_5_BFD_cp_0 = this.cardPoints;
            (var_5_BFD_cp_0[11]).set_Y(((((var_5_BFD_cp_0[11]).get_Y() | 0) + (this.offsetY | 0)) | 0));
            var flag10 = this.testGame;
            if (flag10) {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[11].MemberwiseClone(), (this.playerHands).Get(target, 1));
            } else {
              (this.cardImages).Draw(this.formHwnd, this.cardPoints[11].MemberwiseClone(), 52);
            }
          } else {
            var var_5_C85_cp_0 = this.cardPoints;
            (var_5_C85_cp_0[11]).set_X(((((var_5_C85_cp_0[11]).get_X() | 0) + (this.offsetX | 0)) | 0));
            var var_5_CAA_cp_0 = this.cardPoints;
            (var_5_CAA_cp_0[11]).set_Y(((((var_5_CAA_cp_0[11]).get_Y() | 0) - (this.offsetY | 0)) | 0));
            (this.cardImages).Draw(this.formHwnd, this.cardPoints[11].MemberwiseClone(), (this.playerHands).Get(target, 1));
          }
          this.GamePlayers[target].hand.cardHand[1] = ((this.playerHands).Get(target, 1) | 0);
          (this.player5hold2).set_Image($S08().CallVirtual("get_Item", null, (this.cardImages).get_Images(), (this.playerHands).Get(target, 1)));
        }
        break;

    }
    var num = (this.deckPtr | 0);
    this.deckPtr = ((num + 1) | 0);
    (this.dealSound).Play();
  }; 

  function Form1_dealFlop () {
    var arg_20_0 = this.communityCards;
    var arg_1F_0 = this.deck;
    var num = (this.deckPtr | 0);
    this.deckPtr = ((num + 1) | 0);
    arg_20_0[0] = (arg_1F_0[num] | 0);
    (this.cardImages).Draw(this.formHwnd, $S1A().Construct((this.flop1).get_Left(), (this.flop1).get_Top()), this.communityCards[0]);
    $S1B().CallStatic($T52(), "Sleep", null, this.dealDelay);
    (this.dealSound).Play();
    var arg_8D_0 = this.communityCards;
    var arg_8C_0 = this.deck;
    num = (this.deckPtr | 0);
    this.deckPtr = ((num + 1) | 0);
    arg_8D_0[1] = (arg_8C_0[num] | 0);
    (this.cardImages).Draw(this.formHwnd, $S1A().Construct((this.flop2).get_Left(), (this.flop2).get_Top()), this.communityCards[1]);
    $S1B().CallStatic($T52(), "Sleep", null, this.dealDelay);
    (this.dealSound).Play();
    var arg_FA_0 = this.communityCards;
    var arg_F9_0 = this.deck;
    num = (this.deckPtr | 0);
    this.deckPtr = ((num + 1) | 0);
    arg_FA_0[2] = (arg_F9_0[num] | 0);
    (this.cardImages).Draw(this.formHwnd, $S1A().Construct((this.flop3).get_Left(), (this.flop3).get_Top()), this.communityCards[2]);
    (this.dealSound).Play();
    this.cardsDealt = 5;

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.GamePlayers[x].hand.cardHand[2] = (this.communityCards[0] | 0);
      this.GamePlayers[x].hand.cardHand[3] = (this.communityCards[1] | 0);
      this.GamePlayers[x].hand.cardHand[4] = (this.communityCards[2] | 0);
      var flag = x > 0;
      if (flag) {
        var flag2 = !this.virtualPlayers[x].Folded;
        if (flag2) {
          this.virtualPlayers[x].FiveCardHandRank = (this.GetFiveCardRanking(x) | 0);
        }
      }
      num = x;
      x = ((num + 1) | 0);
    }
    this.playerWithBestHand = (this.GetPlayerWithBestHand() | 0);
  }; 

  function Form1_DealNextRound () {
    if (this.GameState === $T27().HoldCardBet) {
      this.dealPlayerCards();

      for (var x = 1; x < ($T04().playerSize | 0); ) {
        this.UpdateCreditLabel(x);
        (this.chipImageList).Draw(
          this.formHwnd, 
          (this.chipBoxes[((x - 1) | 0)]).get_Location().MemberwiseClone(), 
          this.getWeightedIntResult(50)
        );
        var num = x;
        x = ((num + 1) | 0);
      }
    }
    if (this.GameState === $T27().FlopBet) {
      this.dealFlop();
    }
    if (this.GameState === $T27().TurnBet) {
      this.dealTurn();
    }
    if (this.GameState === $T27().RiverBet) {
      this.dealRiver();
    }
  }; 

  function Form1_dealPlayerCards () {
    this.InitializeNewGame();
    var firstcard = true;

    for (var card = 0; card < 2; ) {
      var flag = card > 0;
      if (flag) {
        firstcard = false;
      }

      for (var player = 0; player < ($T04().playerSize | 0); ) {
        this.dealCard(this.loop[(((((this.buttonPosition | 0) + player) | 0) + 1) | 0)], firstcard, true);
        var flag2 = player !== 5;
        if (flag2) {
          $S1B().CallStatic($T52(), "Sleep", null, this.dealDelay);
        }
        var num = player;
        player = ((num + 1) | 0);
      }
      num = card;
      card = ((num + 1) | 0);
    }
    num = (this.x | 0);
    this.x = ((num + 1) | 0);
    if ((this.x | 0) > 51) {
      this.x = 0;
    }
    this.GameState = $T27().HoldCardBet;
    this.playerWithBestHand = (this.GetPlayerWithBestHand() | 0);
  }; 

  function Form1_dealRiver () {
    var arg_20_0 = this.communityCards;
    var arg_1F_0 = this.deck;
    var num = (this.deckPtr | 0);
    this.deckPtr = ((num + 1) | 0);
    arg_20_0[4] = (arg_1F_0[num] | 0);
    (this.cardImages).Draw(this.formHwnd, $S1A().Construct((this.river).get_Left(), (this.river).get_Top()), this.communityCards[4]);
    (this.dealSound).Play();

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.GamePlayers[x].hand.cardHand[$T04().playerSize] = (this.communityCards[4] | 0);
      var flag = x > 0;
      if (flag) {
        var flag2 = !this.virtualPlayers[x].Folded;
        if (flag2) {
          this.virtualPlayers[x].FiveCardHandRank = (this.GetFiveCardRanking(x) | 0);
        }
      }
      num = x;
      x = ((num + 1) | 0);
    }
    this.cardsDealt = 7;
    this.playerWithBestHand = (this.GetPlayerWithBestHand() | 0);
  }; 

  function Form1_dealRiverButton_Click (sender, e) {
    this.dealRiver();
  }; 

  function Form1_dealTurn () {
    var arg_20_0 = this.communityCards;
    var arg_1F_0 = this.deck;
    var num = (this.deckPtr | 0);
    this.deckPtr = ((num + 1) | 0);
    arg_20_0[3] = (arg_1F_0[num] | 0);
    (this.cardImages).Draw(this.formHwnd, $S1A().Construct((this.turn).get_Left(), (this.turn).get_Top()), this.communityCards[3]);
    (this.dealSound).Play();

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.GamePlayers[x].hand.cardHand[5] = (this.communityCards[3] | 0);
      var flag = x > 0;
      if (flag) {
        var flag2 = !this.virtualPlayers[x].Folded;
        if (flag2) {
          this.virtualPlayers[x].FiveCardHandRank = (this.GetFiveCardRanking(x) | 0);
        }
      }
      num = x;
      x = ((num + 1) | 0);
    }
    this.cardsDealt = 6;
    this.playerWithBestHand = (this.GetPlayerWithBestHand() | 0);
  }; 

  function Form1_dealTurnButton_Click (sender, e) {
    this.testDataRetrieved = true;
  }; 

  function Form1_DisableBettingButtons () {
    (this.surrenderPanel).set_Visible(false);
    (this.bettingGroupBox).set_Visible(false);
    (this.playerRaiseButton).set_Enabled(false);
    (this.playerCallButton).set_Enabled(false);
    (this.playerCheckButton).set_Enabled(false);
    (this.playerFoldButton).set_Enabled(false);
    (this.playerAllInButton).set_Enabled(false);
    (this.playerSurrenderButton).set_Visible(false);
  }; 

  function Form1_Dispose$00 (disposing) {
    if (disposing && (this.components !== null)) {
      $IM00().Call(this.components, null);
    }
    $T11().prototype.Dispose.call(this, disposing);
  }; 

  function Form1_EnableBettingButtons () {
    var allIn = this.virtualPlayers[0].AllIn;
    if (allIn) {
      (this.playerRaiseButton).set_Enabled(false);
      (this.playerAllInButton).set_Enabled(true);
      (this.playerFoldButton).set_Enabled(false);
      (this.playerAllInButton).set_Text("CONTINUE");
      (this.playerCheckButton).set_Enabled(false);
      (this.playerCallButton).set_Enabled(false);
      (this.playerSurrenderButton).set_Visible(false);
      this.UpdateDynamicHelp();
      this.updateBettingButtonTitle();
      (this.bettingGroupBox).set_Visible(true);
    } else {
      (this.playerAllInButton).set_Text("ALL IN");
      this.set_CallAmount(+this.GetCurrentBet() - +this.virtualPlayers[0].CurrentBetAmount);
      this.updateBettingButtonTitle();
      (this.bettingGroupBox).set_Visible(true);
      (this.playerRaiseButton).set_Enabled(true);
      (this.playerAllInButton).set_Enabled(true);
      (this.playerFoldButton).set_Enabled(true);
      var flag = +this.get_CallAmount() === 0;
      if (flag) {
        (this.playerCheckButton).set_Enabled(true);
        (this.playerCallButton).set_Enabled(false);
      } else {
        (this.playerCheckButton).set_Enabled(false);
        var flag2 = +this.get_CallAmount() > +this.get_PlayerCredits();
        if (flag2) {
          (this.playerCallButton).set_Enabled(false);
          (this.playerRaiseButton).set_Enabled(false);
        } else {
          (this.playerCallButton).set_Enabled(true);
        }
      }
      var flag3 = +this.get_PlayerCredits() === 0;
      if (flag3) {
        (this.playerRaiseButton).set_Enabled(false);
        (this.playerCallButton).set_Enabled(false);
        (this.playerAllInButton).set_Enabled(false);
      }
      if (this.GameState === $T27().HoldCardBet) {
        var flag5 = !(((((this.playerHoleCardsRankings[0] | 0) + 1) | 0) <= (this.surrenderReturnRank | 0)) || 
          this.virtualPlayers[0].AllIn) && 
        ((this.GetPlayerPairValue(0) | 0) < (this.surrenderMinimumPair | 0));
        if (flag5) {
          (this.playerSurrenderButton).set_Visible(true);
          (this.surrenderPanel).set_Visible(true);
        }
      }
      this.UpdateDynamicHelp();
    }
  }; 

  function Form1_EndGame ($exception) {
    var playerWinRank = (this.GetFiveCardRanking(0) | 0);

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      var folded = this.virtualPlayers[x].Folded;
      if (folded) {
        this.ClearPlayerCards(x);
      } else {
        this.ShowPlayerCards(x, true);
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    this.clearCreditLabels();
    var winner = (this.GetWinner() | 0);
    this.winnerDeclared = true;
    var split = 0;
    if (winner > 5) {
      var playerWin = false;

      for (var x2 = 0; x2 < ($T04().playerSize | 0); ) {
        var flag2 = this.GameWinners[x2];
        if (flag2) {
          var flag3 = x2 === 0;
          if (flag3) {
            playerWin = true;
          }
          num = split;
          split = ((num + 1) | 0);
        }
        num = x2;
        x2 = ((num + 1) | 0);
      }
      var flag4 = playerWin;
      if (flag4) {
        var videoBonus = 0;
        var flag5 = playerWinRank >= (this.videoPokerLowRank | 0);
        if (flag5) {
          videoBonus = +this.GetVideoPokerBonus(playerWinRank);
          videoBonus *= +(this.videoMultiplier);
          this.SetPaytableSelectedWin(playerWinRank);
          var flag6 = videoBonus > 0;
          if (flag6) {
            videoBonus = +((videoBonus / +split));
          }
        }
        this.set_PlayerCredits(+this.get_PlayerCredits() + +((+this.get_PotAmount() / +split)));
        this.creditsWon = +this.creditsWon + +((+this.get_PotAmount() / +split));
        this.set_PlayerCredits(+this.get_PlayerCredits() + videoBonus);
        this.creditsWon = +this.creditsWon + videoBonus;
        this.set_WinAmount(+((+this.get_PotAmount() / +split)));
        this.set_WinAmount(+this.get_WinAmount() + videoBonus);
        this.videoPokerWin = videoBonus;
      }
    }
    if (winner === 0) {
      videoBonus = 0;
      var flag8 = playerWinRank >= (this.videoPokerLowRank | 0);
      if (flag8) {
        videoBonus = +this.GetVideoPokerBonus(playerWinRank);
        this.SetPaytableSelectedWin(playerWinRank);
        videoBonus *= +(this.videoMultiplier);
      }
      this.set_PlayerCredits(+this.get_PlayerCredits() + +this.get_PotAmount());
      this.creditsWon = +this.creditsWon + +this.get_PotAmount();
      this.set_PlayerCredits(+this.get_PlayerCredits() + videoBonus);
      this.creditsWon = +this.creditsWon + videoBonus;
      this.set_WinAmount(this.get_PotAmount());
      this.set_WinAmount(+this.get_WinAmount() + videoBonus);
      this.videoPokerWin = videoBonus;
    }
    var flag9 = split < 2;
    if (flag9) {
      (this.winLabel).set_Visible(true);
      var winRank = (this.GetFiveCardRanking(winner) | 0);
      winRank = (this.AdjustWinRank(winRank) | 0);
      var winString = this.PayTableStrings[((21 - winRank) | 0)];
      if (winner > 0) {
        this.gameOverStrings[1] = (("PLAYER " + (winner).toString() + " WIN    " + winString));
      } else {
        this.gameOverStrings[1] = ((this.realPlayerName + " WIN    " + winString));
      }
      $S09().CallVirtual("UpdateBetLabel", null, this, winString, winner, this.winColor);
    } else {
      (this.winLabel).set_Visible(true);
      (this.winLabel).set_Text(("The Pot is Split " + (split).toString() + " Ways"));

      for (var x3 = 0; x3 < ($T04().playerSize | 0); ) {
        var flag11 = this.GameWinners[x3];
        if (flag11) {
          var winRank2 = (this.GetFiveCardRanking(x3) | 0);
          winRank2 = (this.AdjustWinRank(winRank2) | 0);
          var winString2 = this.PayTableStrings[((21 - winRank2) | 0)];
          var flag12 = winRank2 === 8;
          if (flag12) {
            this.gameOverStrings[1] = (JSIL.ConcatString("PLAYERS SPLIT WITH ", winString2));
          } else {
            this.gameOverStrings[1] = (JSIL.ConcatString("PLAYERS SPLIT WITH A ", winString2));
          }
          $S09().CallVirtual("UpdateBetLabel", null, this, winString2, x3, this.winColor);
        }
        num = x3;
        x3 = ((num + 1) | 0);
      }
    }
    if ((winner !== 0) && !this.videoBonusWinOnly) {
      var flag14 = playerWinRank >= (this.videoPokerLowRank | 0);
      if (flag14) {
        videoBonus = +this.GetVideoPokerBonus(playerWinRank);
        videoBonus *= +(this.videoMultiplier);
        this.SetPaytableSelectedWin(playerWinRank);
        this.set_PlayerCredits(+this.get_PlayerCredits() + videoBonus);
        this.creditsWon = +this.creditsWon + videoBonus;
        this.set_WinAmount(+this.get_WinAmount() + videoBonus);
        this.videoPokerWin = videoBonus;
      }
    }
    try {
      this.LogResults();
    } catch ($exception) {
    }
    this.startGameOverTimer(true);
    (this.bettingGroupBox).set_Visible(false);
    (this.bonusPokerPanel).set_Visible(true);
    var flag15 = (+this.lastBet > 0) && 
    (+this.lastBet <= +this.get_PlayerCredits());
    if (flag15) {
      (this.repeatBetButton).set_Text(JSIL.ConcatString("REPEAT LAST BET OF ", $T08().Format("{0:C}", this.lastBet)));
      (this.repeatBetButton).set_Visible(true);
    }
    (this.newGameButton).set_Visible(true);
    if (+this.videoPokerWin > 0) {
      (this.videoWin).Play();
    }
  }; 

  function Form1_EraseFile (iniFile) {
    var fi = $S1C().Construct(iniFile);
    var flag = $T1B().Exists(iniFile);
    if (flag) {
      fi.Delete();
    }
  }; 

  function Form1_EraseIniFile (iniFile) {
    var fi = $S1C().Construct(iniFile);
    var flag = $T1B().Exists(iniFile);
    if (flag) {
      fi.Delete();
    }
    this.CreateIniFile(iniFile);
  }; 

  function Form1_EvalPlayerHands (hole, flop, turn, river) {

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      if (hole) {
        var suited = false;
        var flag = (this.GetCardSuit((this.playerHands).Get(x, 0)) | 0) === (this.GetCardSuit((this.playerHands).Get(x, 1)) | 0);
        if (flag) {
          suited = true;
        }
        this.playerHoleCardsRankings[x] = (this.GetDealRanking(
          this.getCard((this.playerHands).Get(x, 0)), 
          this.getCard((this.playerHands).Get(x, 1)), 
          suited
        ) | 0);
        var flag2 = (this.GetCardValue((this.playerHands).Get(x, 0)) | 0) === (this.GetCardValue((this.playerHands).Get(x, 1)) | 0);
        if (flag2) {
          this.virtualPlayers[x].PocketPair = (this.GetCardValue((this.playerHands).Get(x, 0)) | 0);
        }
      }
      if (flop) {
      }
      var flag3 = x < ($T04().playerSize | 0);
      if (flag3) {
        var firstCard = (this.GetCardValue((this.playerHands).Get(x, 0)) | 0);
        var secondCard = (this.GetCardValue((this.playerHands).Get(x, 1)) | 0);
        var flag4 = firstCard === 1;
        if (flag4) {
          firstCard = 14;
        }
        var flag5 = secondCard === 1;
        if (flag5) {
          secondCard = 14;
        }
        var flag6 = firstCard > secondCard;
        if (flag6) {
          this.virtualPlayers[x].HighCard = firstCard;
        } else {
          this.virtualPlayers[x].HighCard = secondCard;
        }
        this.GamePlayers[x].hand.HighCard = (this.virtualPlayers[x].HighCard | 0);
      }
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_EvaluateFlop (player, FlopHand) {
    var Hand = JSIL.Array.New($T01(), 5);
    var suitCounts = JSIL.Array.New($T01(), 4);
    var lastHighCard = 52;
    var flushCount = 0;
    var foldedCards = JSIL.Array.New($T01(), 12);
    var foldedPtr = 0;
    var FlopRank = (this.EvaluatePokerHand(player, FlopHand) | 0);

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      var folded = this.virtualPlayers[x].Folded;
      if (folded) {
        var arg_67_0 = foldedCards;
        var num = foldedPtr;
        foldedPtr = ((num + 1) | 0);
        arg_67_0[num] = ((this.playerHands).Get(x, 0) | 0);
        var arg_84_0 = foldedCards;
        num = foldedPtr;
        foldedPtr = ((num + 1) | 0);
        arg_84_0[num] = ((this.playerHands).Get(x, 1) | 0);
      }
      num = x;
      x = ((num + 1) | 0);
    }

    for (var x2 = 0; x2 < 5; ) {
      var highcard = 0;

      for (var c = 0; c < 5; ) {
        var flag = (FlopHand[c] | 0) > highcard;
        if (flag) {
          var flag2 = (FlopHand[c] | 0) < lastHighCard;
          if (flag2) {
            highcard = (FlopHand[c] | 0);
          }
        }
        num = c;
        c = ((num + 1) | 0);
      }
      lastHighCard = highcard;
      Hand[x2] = highcard;
      num = x2;
      x2 = ((num + 1) | 0);
    }

    for (var x3 = 0; x3 < 5; ) {
      var var_20_121_cp_0 = suitCounts;
      var var_20_121_cp_1 = (((this.GetCardSuit(Hand[x3]) | 0) - 1) | 0);
      num = (var_20_121_cp_0[var_20_121_cp_1] | 0);
      var_20_121_cp_0[var_20_121_cp_1] = ((num + 1) | 0);
      num = x3;
      x3 = ((num + 1) | 0);
    }

    for (var x4 = 0; x4 < 4; ) {
      var flag3 = (suitCounts[x4] | 0) >= flushCount;
      if (flag3) {
        flushCount = (suitCounts[x4] | 0);
        var flag4 = flushCount > 2;
        if (flag4) {
          var highFlush = ((x4 + 1) | 0);
        }
      }
      num = x4;
      x4 = ((num + 1) | 0);
    }
    return FlopRank;
  }; 

  function Form1_EvaluatePokerHand (player, FinalHand) {
    var SaveValue = 0;
    var PayType = 0;
    var HighCard = 0;
    var MembersOfStraight = 1;
    var highValue = 0;
    var oneOfaKind = false;
    var twoOfaKind = false;
    var threeOfaKind = false;
    var flush = false;
    var AceFound = false;
    var KingFound = false;
    var FinalSuit = JSIL.Array.New($T01(), 5);
    var FinalValue = JSIL.Array.New($T01(), 5);

    for (var x = 0; x < 5; ) {
      FinalSuit[x] = (this.GetCardSuit(FinalHand[x]) | 0);
      FinalValue[x] = (this.GetCardValue(FinalHand[x]) | 0);
      var flag = (FinalValue[x] | 0) === 13;
      if (flag) {
        KingFound = true;
      }
      var flag2 = (FinalValue[x] | 0) === 14;
      if (flag2) {
        AceFound = true;
        FinalValue[x] = 1;
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    var FlushCount = (this.GetFlushCount(FinalSuit) | 0);
    if (FlushCount === 5) {
      flush = true;
      PayType = 15;
    }

    for (var x2 = 0; x2 < 5; ) {
      var XofaKind = 1;
      var CardValue = (FinalValue[x2] | 0);

      for (var a = ((x2 + 1) | 0); a < 5; ) {
        var flag4 = (FinalValue[a] | 0) === CardValue;
        if (flag4) {
          num = XofaKind;
          XofaKind = ((num + 1) | 0);
        }
        num = a;
        a = ((num + 1) | 0);
      }
      var flag5 = XofaKind > highValue;
      if (flag5) {
        highValue = XofaKind;
        SaveValue = CardValue;
      }
      num = x2;
      x2 = ((num + 1) | 0);
    }
    switch (highValue) {
      case 1: 
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        oneOfaKind = true;
        break;

      case 2: 
        twoOfaKind = true;
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        break;

      case 3: 
        threeOfaKind = true;
        PayType = 11;
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        break;

      case 4: 
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        var flag6 = (SaveValue > 10) || 
        (SaveValue === 1);
        if (flag6) {
          var result = 19;
          return result;
        }
        var flag7 = SaveValue > 5;
        if (flag7) {
          result = 18;
          return result;
        }
        result = 17;
        return result;

    }
    var flag8 = threeOfaKind | twoOfaKind;
    if (flag8) {
      XofaKind = 1;

      for (var x3 = 0; x3 < 5; ) {
        CardValue = (FinalValue[x3] | 0);

        for (var a2 = ((x3 + 1) | 0); a2 < 5; ) {
          var flag9 = CardValue !== SaveValue;
          if (flag9) {
            var flag10 = (FinalValue[a2] | 0) === CardValue;
            if (flag10) {
              num = XofaKind;
              XofaKind = ((num + 1) | 0);
              var flag11 = XofaKind > 1;
              if (flag11) {
                var flag12 = CardValue === 1;
                if (flag12) {
                  CardValue = 14;
                }
                this.GamePlayers[player].hand.TwoPairSecondValue = CardValue;
              }
            }
          }
          num = a2;
          a2 = ((num + 1) | 0);
        }
        num = x3;
        x3 = ((num + 1) | 0);
      }
      var flag13 = XofaKind === 2;
      if (flag13) {
        var flag14 = twoOfaKind;
        if (flag14) {
          twoOfaKind = false;
          PayType = 10;
        } else {
          PayType = 16;
        }
      }
      var flag15 = twoOfaKind;
      if (flag15) {
        PayType = 7;
      }
    }
    var connectRank = (this.GetConnectedStraightRank(FinalValue, SaveValue) | 0);
    var flag16 = AceFound;
    if (flag16) {
      var FinalValueAces = JSIL.Array.New($T01(), 5);

      for (var x4 = 0; x4 < 5; ) {
        FinalValueAces[x4] = (FinalValue[x4] | 0);
        var flag17 = (FinalValue[x4] | 0) === 1;
        if (flag17) {
          FinalValueAces[x4] = 14;
        }
        num = x4;
        x4 = ((num + 1) | 0);
      }
      var connectRankAces = (this.GetConnectedStraightRank(FinalValueAces, SaveValue) | 0);
      var flag18 = connectRankAces > connectRank;
      if (flag18) {
        connectRank = connectRankAces;
      }
    }
    var straightRank = (this.GetInsideStraightRank(FinalValue) | 0);
    var flag19 = AceFound;
    if (flag19) {
      var FinalValueAces2 = JSIL.Array.New($T01(), 5);

      for (var x5 = 0; x5 < 5; ) {
        FinalValueAces2[x5] = (FinalValue[x5] | 0);
        var flag20 = (FinalValue[x5] | 0) === 1;
        if (flag20) {
          FinalValueAces2[x5] = 14;
        }
        num = x5;
        x5 = ((num + 1) | 0);
      }
      var flag21 = (this.GetInsideStraightRank(FinalValueAces2) | 0) > straightRank;
      if (flag21) {
        straightRank = (this.GetInsideStraightRank(FinalValueAces2) | 0);
      }
    }
    var flag22 = oneOfaKind;
    if (flag22) {

      for (var x6 = 0; x6 < 5; ) {
        var flag23 = (FinalValue[x6] | 0) > HighCard;
        if (flag23) {
          HighCard = (FinalValue[x6] | 0);
        }
        num = x6;
        x6 = ((num + 1) | 0);
      }
      var flag24 = KingFound & AceFound;
      if (flag24) {

      $loop8: 
        for (var x7 = 0; x7 < 5; ) {
          var flag25 = (FinalValue[x7] | 0) === 1;
          if (flag25) {
            FinalValue[x7] = 14;
            HighCard = 14;
            break $loop8;
          }
          num = x7;
          x7 = ((num + 1) | 0);
        }
      }

      for (var x8 = 1; x8 <= 5; ) {
        var flag26 = (FinalValue[((x8 - 1) | 0)] | 0) === ((HighCard - 1) | 0);
        if (flag26) {
          HighCard = (FinalValue[((x8 - 1) | 0)] | 0);
          num = MembersOfStraight;
          MembersOfStraight = ((num + 1) | 0);
          x8 = 0;
        }
        num = x8;
        x8 = ((num + 1) | 0);
      }
      var flag27 = MembersOfStraight === 5;
      if (flag27) {
        PayType = 14;
        var flag28 = flush;
        if (flag28) {
          PayType = 20;
        }
        var flag29 = flush & AceFound;
        if (flag29) {
          var flag30 = KingFound;
          if (flag30) {
            PayType = 21;
          }
        }
      }
    }
    var flag31 = straightRank > MembersOfStraight;
    if (flag31) {
      MembersOfStraight = straightRank;
    }
    var flag32 = PayType < 7;
    if (flag32) {
      if (FlushCount === 3) {
        var flag34 = PayType < 5;
        if (flag34) {
          PayType = 5;
        }
      }
      if (FlushCount === 4) {
        var flag36 = PayType < 6;
        if (flag36) {
          PayType = 6;
        }
      }
      var flag37 = MembersOfStraight === 3;
      if (flag37) {
        var flag38 = PayType < 3;
        if (flag38) {
          PayType = 3;
        }
      }
      var flag39 = MembersOfStraight === 4;
      if (flag39) {
        var flag40 = PayType < 4;
        if (flag40) {
          PayType = 4;
        }
      }
      var flag41 = connectRank === 4;
      if (flag41) {
        var flag42 = PayType < 2;
        if (flag42) {
          PayType = 2;
        }
      }
      var flag43 = connectRank === 3;
      if (flag43) {
        var flag44 = PayType < 1;
        if (flag44) {
          PayType = 1;
        }
      }
    }
    var flag45 = (PayType === 7) || 
    (PayType === 11);
    if (flag45) {
      var flag46 = (SaveValue > 10) || 
      (SaveValue === 1);
      if (flag46) {
        PayType = ((PayType + 2) | 0);
      } else {
        var flag47 = SaveValue > 5;
        if (flag47) {
          num = PayType;
          PayType = ((num + 1) | 0);
        }
      }
    }
    this.GetFiveCardTotal(FinalHand);
    result = PayType;
    return result;
  }; 

  function Form1_EvaluateTurn (TurnHand) {
    return 0;
  }; 

  function Form1_finishThisRoundBetting () {
    if (this.GameState === $T27().HoldCardBet) {
      this.GameState = $T27().FlopBet;
      this.FlopPotAmount = +this.get_PotAmount();
    } else {
      if (this.GameState === $T27().FlopBet) {
        this.GameState = $T27().TurnBet;
        this.TurnPotAmount = +this.get_PotAmount();
      } else {
        if (this.GameState === $T27().TurnBet) {
          this.GameState = $T27().RiverBet;
          this.RiverPotAmount = +this.get_PotAmount();
        } else {
          if (this.GameState === $T27().RiverBet) {
            this.GameState = $T27().EndGame;
          } else {
            if (this.GameState === $T27().EndGame) {
            }
          }
        }
      }
    }
    this.set_CallAmount(0);
    this.ThisRoundRaisePercentage = 0;
    this.DealButtonPassed = false;
    this.virtualPlayerRaised = 0;
    this.flopTurnRiverRaised = false;
    this.ResetVirtualPlayerVars();
    this.DisableBettingButtons();
    (this.startButton).set_Enabled(false);
  }; 

  function Form1_FoldPlayer (player) {
    if ((player | 0) === 0) {
      (this.betLabels[player]).set_Text("FOLD");
      (this.betLabels[player]).Update();
      (this.betLabels[player]).Invalidate();
      this.virtualPlayers[player].Folded = true;
      var flag2 = (this.GameState === $T27().HoldCardBet) && 
      !(((((this.playerHoleCardsRankings[0] | 0) + 1) | 0) <= (this.surrenderReturnRank | 0)) || 
        this.virtualPlayers[0].AllIn) && 
      ((this.GetPlayerPairValue(0) | 0) < (this.surrenderMinimumPair | 0));
      if (flag2) {
        this.playerFoldButton_Click(this.playerSurrenderButton, $T29().Empty);
      } else {
        this.playerFoldButton_Click(this.playerFoldButton, $T29().Empty);
      }
    } else {
      (this.cardImages).Draw(this.formHwnd, this.cardPoints[((Math.imul(player, 2) + 1) | 0)].MemberwiseClone(), 53);
      this.ClearPlayerCards(player);
      var var_3_FA_cp_0 = this.cardPoints;
      var var_3_FA_cp_1 = ((Math.imul(player, 2) + 1) | 0);
      (var_3_FA_cp_0[var_3_FA_cp_1]).set_X(((((var_3_FA_cp_0[var_3_FA_cp_1]).get_X() | 0) + (this.offsetX | 0)) | 0));
      var var_3_11F_cp_0 = this.cardPoints;
      var var_3_11F_cp_1 = ((Math.imul(player, 2) + 1) | 0);
      (var_3_11F_cp_0[var_3_11F_cp_1]).set_Y(((((var_3_11F_cp_0[var_3_11F_cp_1]).get_Y() | 0) - (this.offsetY | 0)) | 0));
      (this.cardImages).Draw(this.formHwnd, this.cardPoints[Math.imul(player, 2)].MemberwiseClone(), (this.playerHands).Get(player, 0));
      (this.cardImages).Draw(this.formHwnd, this.cardPoints[((Math.imul(player, 2) + 1) | 0)].MemberwiseClone(), (this.playerHands).Get(player, 1));
      this.virtualPlayers[player].Folded = true;
    }
  }; 

  function Form1_Form1_DoubleClick (sender, e) {
    this.Close();
  }; 

  function Form1_gameOverTimer_Tick (sender, e) {
    if ((this.year | 0) === ($T04().year | 0)) {
      if (!this.gameEnable) {
        (this.gameOverTimer).Stop();
        $S0E().CallStatic($T2E(), "Show", null, "Correct the INI file error", "INI File Error");
        this.Close();
      }
    }
    (this.bonusPokerPanel).set_Visible(true);
    if (((this.gameOverPtr | 0) === 1) && !this.winnerDeclared) {
      var num = (this.gameOverPtr | 0);
      this.gameOverPtr = ((num + 1) | 0);
    }
    if (((this.gameOverPtr | 0) === 2) && !this.PlayerSurrender) {
      num = (this.gameOverPtr | 0);
      this.gameOverPtr = ((num + 1) | 0);
    }
    if (((this.gameOverPtr | 0) === 3) && ((this.PotSplit | 0) < 2)) {
      num = (this.gameOverPtr | 0);
      this.gameOverPtr = ((num + 1) | 0);
    }
    if (((this.gameOverPtr | 0) === 4) && (+this.videoPokerWin === 0)) {
      num = (this.gameOverPtr | 0);
      this.gameOverPtr = ((num + 1) | 0);
    }
    var size = ((18 - +((this.winLabel).get_Font()).get_Size()) | 0);
    (this.winLabel).set_Visible(true);
    if ((this.gameOverPtr | 0) === 2) {
      var flag8 = +this.get_WinAmount() > 0;
      if (flag8) {
        var DollarAmount = $T08().Format("{0:C}", this.get_WinAmount());
        (this.winLabel).set_Text(JSIL.ConcatString(this.gameOverStrings[this.gameOverPtr], DollarAmount));
      } else {
        (this.winLabel).set_Text(this.gameOverStrings[this.gameOverPtr]);
      }
    }
    if ((this.gameOverPtr | 0) === 3) {
      this.gameOverStrings[3] = "THE POT WAS SPLIT ";
      var var_12_1D9_cp_0 = this.gameOverStrings;
      (new JSIL.ArrayElementReference(var_12_1D9_cp_0, 3)).set((var_12_1D9_cp_0[3] + (this.PotSplit).toString() + " WAYS"));
    }
    if ((this.gameOverPtr | 0) === 4) {
      this.gameOverStrings[4] = "TEXAS HOLD'EM FOLDUP BONUS ";
      var DollarAmount2 = $T08().Format("{0:C}", this.videoPokerWin);
      var var_12_237_cp_0 = this.gameOverStrings;
      (new JSIL.ArrayElementReference(var_12_237_cp_0, 4)).set(JSIL.ConcatString(var_12_237_cp_0[4], DollarAmount2));
    }
    (this.winLabel).set_Text(this.gameOverStrings[this.gameOverPtr]);
    num = (this.gameOverPtr | 0);
    this.gameOverPtr = ((num + 1) | 0);
    if ((this.gameOverPtr | 0) > 5) {
      this.gameOverPtr = 0;
    }
    if (+this.jurisdictionalLimit === 0) {
      var flag13 = +this.get_PlayerCredits() < +($T04().playerCreditsLimit);
      if (flag13) {
        (this.addCreditButton).set_Visible(true);
      } else {
        (this.addCreditButton).set_Visible(false);
      }
    }
    var autoPlay = this.AutoPlay;
    if (autoPlay) {
      var flag14 = +this.get_PlayerCredits() < +($T04().playerCreditsLimit);
      if (flag14) {
        this.set_PlayerCredits(+($T04().jurisdictionalBetLimit));
      }
      this.newGameButton_Click(sender, e);
    }
  }; 

  function Form1_get_CallAmount () {
    return this.callAmount;
  }; 

  function Form1_get_CurrentBetPosition () {
    return this.currentBetPosition;
  }; 

  function Form1_get_PlayerBet () {
    return this.playerBet;
  }; 

  function Form1_get_PlayerCredits () {
    if (+this.jurisdictionalLimit === 0) {
      var result = +this.get_RealPlayerCredits();
    } else {
      result = +(this.creditLimitWindow).get_DollarAmount();
    }
    return result;
  }; 

  function Form1_get_PlayerRaise () {
    return this.playerRaise;
  }; 

  function Form1_get_PotAmount () {
    return this.potAmount;
  }; 

  function Form1_get_RealPlayerCredits () {
    return this.playerCredits;
  }; 

  function Form1_get_VideoMultiplier () {
    return this.videoMultiplier;
  }; 

  function Form1_get_WinAmount () {
    return this.win;
  }; 

  function Form1_getCard (card) {
    switch (this.GetCardValue(card)) {
      case 2: 
        var result = $T0A().G2;
        break;

      case 3: 
        result = $T0A().G3;
        break;

      case 4: 
        result = $T0A().G4;
        break;

      case 5: 
        result = $T0A().G5;
        break;

      case 6: 
        result = $T0A().G6;
        break;

      case 7: 
        result = $T0A().G7;
        break;

      case 8: 
        result = $T0A().G8;
        break;

      case 9: 
        result = $T0A()._9;
        break;

      case 10: 
        result = $T0A().T;
        break;

      case 11: 
        result = $T0A().J;
        break;

      case 12: 
        result = $T0A().Q;
        break;

      case 13: 
        result = $T0A().K;
        break;

      case 14: 
        result = $T0A().A;
        break;

      default: 
        result = $T0A().US;
        break;

    }
    return result;
  }; 

  function Form1_GetCardSuit (card) {
    return (((((card | 0) / 13) | 0) + 1) | 0);
  }; 

  function Form1_GetCardValue (card) {
    return (((card | 0) - ((Math.imul((((this.GetCardSuit(card) | 0) - 1) | 0), 13) - 2) | 0)) | 0);
  }; 

  function Form1_GetConnectedStraightRank (FinalValue, SaveValue) {
    var rank = 0;
    var connectCards = JSIL.Array.New($T01(), 5);

    for (var i = 0; i < 5; ) {
      var subtractSaves = 0;

      for (var x = 0; x < 5; ) {
        var flag = x !== i;
        if (flag) {
          var flag2 = (FinalValue[i] | 0) >= (FinalValue[x] | 0);
          if (flag2) {
            var flag3 = (((FinalValue[i] | 0) - (FinalValue[x] | 0)) | 0) < 5;
            if (flag3) {
              var flag4 = (FinalValue[x] | 0) === (SaveValue | 0);
              if (flag4) {
                var num = subtractSaves;
                subtractSaves = ((num + 1) | 0);
              }
              var var_10_72_cp_0 = connectCards;
              var var_10_72_cp_1 = i;
              num = (var_10_72_cp_0[var_10_72_cp_1] | 0);
              var_10_72_cp_0[var_10_72_cp_1] = ((num + 1) | 0);
            }
          } else {
            var flag5 = (((FinalValue[x] | 0) - (FinalValue[i] | 0)) | 0) < 5;
            if (flag5) {
              var flag6 = (FinalValue[x] | 0) === (SaveValue | 0);
              if (flag6) {
                num = subtractSaves;
                subtractSaves = ((num + 1) | 0);
              }
              var var_10_B5_cp_0 = connectCards;
              var var_10_B5_cp_1 = i;
              num = (var_10_B5_cp_0[var_10_B5_cp_1] | 0);
              var_10_B5_cp_0[var_10_B5_cp_1] = ((num + 1) | 0);
            }
          }
        }
        num = x;
        x = ((num + 1) | 0);
      }
      var flag7 = subtractSaves > 1;
      if (flag7) {
        var var_10_F0_cp_0 = connectCards;
        var var_10_F0_cp_1 = i;
        num = (var_10_F0_cp_0[var_10_F0_cp_1] | 0);
        var_10_F0_cp_0[var_10_F0_cp_1] = ((num - 1) | 0);
      }
      num = i;
      i = ((num + 1) | 0);
    }

    for (var x2 = 0; x2 < 5; ) {
      var flag8 = (connectCards[x2] | 0) > rank;
      if (flag8) {
        rank = (connectCards[x2] | 0);
      }
      num = x2;
      x2 = ((num + 1) | 0);
    }
    return rank;
  }; 

  function Form1_GetCurrentBet () {
    var highbet = 0;
    this.x = 0;

    while ((this.x | 0) < ($T04().playerSize | 0)) {
      var flag = +this.virtualPlayers[this.x].CurrentBetAmount > highbet;
      if (flag) {
        highbet = +this.virtualPlayers[this.x].CurrentBetAmount;
      }
      var num = (this.x | 0);
      this.x = ((num + 1) | 0);
    }
    return highbet;
  }; 

  function Form1_GetDealRanking (C1, C2, suited) {
    var rValue = (this.Group.length0 | 0);
    if (C2 > C1) {
      var FirstCard = C2;
      var SecondCard = C1;
    } else {
      FirstCard = C1;
      SecondCard = C2;
    }

    for (var x = (((this.Group.length0 | 0) - 1) | 0); x >= 0; ) {
      var flag2 = (FirstCard === (this.Group).Get(x, 0)) && 
      ((SecondCard === (this.Group).Get(x, 1)) || 
        ((this.Group).Get(x, 1) === $T0A().ANY));
      if (flag2) {
        var flag3 = ((this.Group).Get(x, 2) === $T0A().G1) & suited;
        if (flag3) {
          rValue = x;
        }
        var flag4 = ((((this.Group).Get(x, 2)).valueOf() | 0) === 0) && 
        !suited;
        if (flag4) {
          rValue = x;
        }
      }
      var num = x;
      x = ((num - 1) | 0);
    }
    return ((rValue + 1) | 0);
  }; 

  function Form1_GetFiveCardRanking (player) {
    var playerHand = JSIL.Array.New($T01(), 5);
    var count = 21;
    var rank = 0;
    var highHand = 0;
    var highTotal = 0;
    var highKicker = 0;
    var tempTotal = 0;
    var tempKicker = 0;
    if ((this.cardsDealt | 0) < 5) {
      var result = 0;
    } else {
      if ((this.cardsDealt | 0) === 5) {
        count = 1;
      }
      if ((this.cardsDealt | 0) === 6) {
        count = 6;
      }

      for (var x = 0; x < count; ) {
        switch (x) {
          case 0: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[0] | 0);
            playerHand[3] = (this.communityCards[1] | 0);
            playerHand[4] = (this.communityCards[2] | 0);
            break;

          case 1: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[0] | 0);
            playerHand[3] = (this.communityCards[1] | 0);
            playerHand[4] = (this.communityCards[3] | 0);
            break;

          case 2: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[0] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[3] | 0);
            break;

          case 3: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[3] | 0);
            break;

          case 4: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[3] | 0);
            break;

          case 5: 
            playerHand[0] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[3] | 0);
            break;

          case 6: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[0] | 0);
            playerHand[3] = (this.communityCards[1] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 7: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[0] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 8: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 9: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 10: 
            playerHand[0] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[2] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 11: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[0] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 12: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 13: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 14: 
            playerHand[0] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[1] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 15: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[2] = (this.communityCards[2] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 16: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[2] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 17: 
            playerHand[0] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[1] = (this.communityCards[0] | 0);
            playerHand[2] = (this.communityCards[2] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 18: 
            playerHand[0] = ((this.playerHands).Get(player, 0) | 0);
            playerHand[1] = (this.communityCards[1] | 0);
            playerHand[2] = (this.communityCards[2] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 19: 
            playerHand[0] = ((this.playerHands).Get(player, 1) | 0);
            playerHand[1] = (this.communityCards[1] | 0);
            playerHand[2] = (this.communityCards[2] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

          case 20: 
            playerHand[0] = (this.communityCards[0] | 0);
            playerHand[1] = (this.communityCards[1] | 0);
            playerHand[2] = (this.communityCards[2] | 0);
            playerHand[3] = (this.communityCards[3] | 0);
            playerHand[4] = (this.communityCards[4] | 0);
            break;

        }
        if (this.GameState === $T27().RiverBet) {
          var temp = (this.EvaluatePokerHand(player, playerHand) | 0);
          var flag5 = (temp >= 14) && 
          ((temp !== 17) || 
            (temp !== 18) || 
            (temp !== 19));
          if (flag5) {
            tempTotal = (this.GetFiveCardTotal(playerHand) | 0);
            this.setPlayerWinCards(player, playerHand);
            tempKicker = (this.GetKicker(this.GamePlayers[player].hand.cardHand, this.GamePlayers[player].winCards) | 0);
          }
          var flag6 = (temp === 7) || 
          (temp === 8) || 
          (temp === 9) || 
          (temp === 11) || 
          (temp === 12) || 
          (temp === 13) || 
          (temp === 17) || 
          (temp === 18) || 
          (temp === 19);
          if (flag6) {
            tempTotal = (this.GetXofaKindTotal(this.GamePlayers[player].hand.XofaKindValue, playerHand) | 0);
            this.setPlayerWinCards(player, playerHand);
            tempKicker = (this.GetXofaKindKicker(this.GamePlayers[player].hand.XofaKindValue, this.GamePlayers[player].hand.cardHand) | 0);
          }
          var flag7 = (temp === 10) || 
          (temp === 16);
          if (flag7) {
            tempTotal = (this.GetTwoPairTotal(this.GamePlayers[player].hand.XofaKindValue, this.GamePlayers[player].hand.TwoPairSecondValue, playerHand) | 0);
            this.setPlayerWinCards(player, playerHand);
            tempKicker = (this.GetTwoPairKicker(this.GamePlayers[player].hand.XofaKindValue, this.GamePlayers[player].hand.TwoPairSecondValue, this.GamePlayers[player].hand.cardHand) | 0);
          }
          var flag8 = (temp > highHand) || 
          ((temp === highHand) && 
            (tempTotal > highTotal)) || 
          (!((temp !== highHand) || 
              (tempTotal !== highTotal)) && 
            (tempKicker > highKicker));
          if (flag8) {
            highTotal = tempTotal;
            highHand = temp;
            highKicker = tempKicker;
            this.GamePlayers[player].hand.CardValueTotal = highTotal;
            this.GamePlayers[player].hand.Kicker = highKicker;
            this.GamePlayers[player].hand.HandRank = temp;
          }
          rank = (this.GamePlayers[player].hand.HandRank | 0);
        } else {
          temp = (this.EvaluateFlop(player, playerHand) | 0);
          var flag9 = (temp > rank) || 
          ((temp === rank) && 
            (highTotal > tempTotal));
          if (flag9) {
            rank = temp;
          }
        }
        var num = x;
        x = ((num + 1) | 0);
      }
      result = rank;
    }
    return result;
  }; 

  function Form1_GetFiveCardTotal (Hand) {
    var temp = 0;

    for (var x = 0; x < 5; ) {
      temp = ((temp + (this.GetCardValue(Hand[x]) | 0)) | 0);
      var num = x;
      x = ((num + 1) | 0);
    }
    return temp;
  }; 

  function Form1_GetFlushCount (FinalSuit) {
    var FlushCount = 0;
    var suitCounts = JSIL.Array.New($T01(), 4);

    for (var x = 0; x < 5; ) {
      var var_3_1A_cp_0 = suitCounts;
      var var_3_1A_cp_1 = (((FinalSuit[x] | 0) - 1) | 0);
      var num = (var_3_1A_cp_0[var_3_1A_cp_1] | 0);
      var_3_1A_cp_0[var_3_1A_cp_1] = ((num + 1) | 0);
      num = x;
      x = ((num + 1) | 0);
    }

    for (var x2 = 0; x2 < 4; ) {
      var flag = (suitCounts[x2] | 0) > FlushCount;
      if (flag) {
        FlushCount = (suitCounts[x2] | 0);
      }
      num = x2;
      x2 = ((num + 1) | 0);
    }
    return FlushCount;
  }; 

  function Form1_GetInsideStraightRank (FinalValue) {
    var MembersOfStraight = 0;
    var ReturnValue = 0;

    for (var i = 15; i >= 1; ) {
      var HighCard = i;

      for (var x = 1; x <= 5; ) {
        var flag = (FinalValue[((x - 1) | 0)] | 0) === ((HighCard - 1) | 0);
        if (flag) {
          HighCard = (FinalValue[((x - 1) | 0)] | 0);
          var num = MembersOfStraight;
          MembersOfStraight = ((num + 1) | 0);
          x = 0;
        }
        num = x;
        x = ((num + 1) | 0);
      }
      var flag2 = MembersOfStraight > ReturnValue;
      if (flag2) {
        ReturnValue = MembersOfStraight;
      }
      MembersOfStraight = 0;
      num = i;
      i = ((num - 1) | 0);
    }
    return ReturnValue;
  }; 

  function Form1_GetKicker (sevenCardHand, cardsUsed) {
    var highCard = 0;
    var highHoldCard = 0;

    for (var x = 0; x < 7; ) {
      var found = false;

    $loop1: 
      for (var i = 0; i < 5; ) {
        var flag = (cardsUsed[i] | 0) === (sevenCardHand[x] | 0);
        if (flag) {
          found = true;
          break $loop1;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      var flag2 = !found;
      if (flag2) {
        var card = (this.GetCardValue(sevenCardHand[x]) | 0);
        var flag3 = card > highCard;
        if (flag3) {
          highCard = card;
          var flag4 = (card === (this.GetCardValue(sevenCardHand[0]) | 0)) || 
          (card === (this.GetCardValue(sevenCardHand[1]) | 0));
          if (flag4) {
            highHoldCard = card;
          }
        }
      }
      num = x;
      x = ((num + 1) | 0);
    }
    var flag5 = highHoldCard > 0;
    if (flag5) {
      highCard = highHoldCard;
    }
    return highCard;
  }; 

  function Form1_GetKickerOld (sevenCardHand, cardsUsed) {
    var highCard = 0;

    for (var x = 0; x < 7; ) {
      var found = false;

    $loop1: 
      for (var i = 0; i < 5; ) {
        var flag = (cardsUsed[i] | 0) === (sevenCardHand[x] | 0);
        if (flag) {
          found = true;
          break $loop1;
        }
        var num = i;
        i = ((num + 1) | 0);
      }
      var flag2 = !found;
      if (flag2) {
        var card = (this.GetCardValue(sevenCardHand[x]) | 0);
        var flag3 = card > highCard;
        if (flag3) {
          highCard = card;
        }
      }
      num = x;
      x = ((num + 1) | 0);
    }
    return highCard;
  }; 

  function Form1_GetLogFileVars ($exception) {
    if (this.logging) {
      var dataDirectory = (JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.dat"));
      var flag2 = $T1B().Exists(dataDirectory);
      if (flag2) {
        var fds = $S14().Construct(JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.dat"), $T45().Open);
        var dataReader = $S13().Construct(fds);
        var read = dataReader.ReadToEnd();
        var vars = (JSIL.SplitString(read, JSIL.Array.New($T56(), [" "])));
        try {
          this.gameNumber = ($T01().Parse(vars[0]) | 0);
          this.creditsPlayed = +$T1C().Parse(vars[1]);
          this.creditsWon = +$T1C().Parse(vars[2]);
        } catch ($exception) {
          this.EraseFile(JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.log"));
          this.gameNumber = 1;
          this.creditsPlayed = 0;
          this.creditsWon = 0;
        }
        dataReader.Close();
        dataReader.Dispose();
      } else {
        this.EraseFile(JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.log"));
      }
    }
  }; 

  function Form1_GetNotFoldedPlayerCount () {
    var retval = 0;

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      var flag = !this.virtualPlayers[x].Folded;
      if (flag) {
        var num = retval;
        retval = ((num + 1) | 0);
      }
      num = x;
      x = ((num + 1) | 0);
    }
    return retval;
  }; 

  function Form1_GetPairType (hand) {
    var highCard = 0;
    var lowCard = 15;
    var highHoldCard = (this.GetCardValue(hand[0]) | 0);
    var lowHoldCard = 0;
    var flag = (this.GetCardValue(hand[0]) | 0) === (this.GetCardValue(hand[1]) | 0);
    if (flag) {
      var result = $T31().Pocket;
    } else {
      var flag2 = (this.GetCardValue(hand[1]) | 0) > highHoldCard;
      if (flag2) {
        lowHoldCard = highHoldCard;
        highHoldCard = (this.GetCardValue(hand[1]) | 0);
      }

      for (var x = 2; x < 5; ) {
        var flag3 = (this.GetCardValue(hand[x]) | 0) > highCard;
        if (flag3) {
          highCard = (this.GetCardValue(hand[x]) | 0);
        }
        var flag4 = (this.GetCardValue(hand[x]) | 0) < lowCard;
        if (flag4) {
          lowCard = (this.GetCardValue(hand[x]) | 0);
        }
        var num = x;
        x = ((num + 1) | 0);
      }
      var flag5 = (highHoldCard === highCard) || 
      (lowHoldCard === highCard);
      if (flag5) {
        result = $T31().Top;
      } else {
        var flag6 = (highHoldCard === lowCard) || 
        (lowHoldCard === lowCard);
        if (flag6) {
          result = $T31().Bottom;
        } else {
          result = $T31().Middle;
        }
      }
    }
    return result;
  }; 

  function Form1_GetPercentPotRaised (player) {
    var StartAmount = 0;
    var ret = 0;
    switch ((this.GameState).valueOf()) {
      case 1: 
        StartAmount = +this.AntePotAmount;
        break;

      case 2: 
        StartAmount = +this.FlopPotAmount;
        break;

      case 3: 
        StartAmount = +this.TurnPotAmount;
        break;

      case 4: 
        StartAmount = +this.RiverPotAmount;
        break;

    }
    var playerContribution = +this.virtualPlayers[player].RoundRaiseAmount + +this.virtualPlayers[player].RoundCallAmount;
    var difference = (+this.get_PotAmount() - playerContribution) - StartAmount;
    if (difference !== 0) {
      ret = ((+(100 / +((StartAmount / difference)))) | 0);
    }
    var flag2 = ret < 0;
    if (flag2) {
      ret = 0;
    }
    return ret;
  }; 

  function Form1_GetPlayerPairValue (player) {
    var fc = (this.GetCardValue(this.GamePlayers[player].hand.cardHand[0]) | 0);
    var sc = (this.GetCardValue(this.GamePlayers[player].hand.cardHand[1]) | 0);
    if (fc === sc) {
      var result = fc;
    } else {
      result = 0;
    }
    return result;
  }; 

  function Form1_GetPlayerWithBestHand () {
    var highHoleHand = 200;
    var highHand = 0;
    var HighHolder = 0;
    if ((this.cardsDealt | 0) < 5) {
      this.EvalPlayerHands(true, false, false, false);
    }

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      var flag2 = !this.virtualPlayers[x].Folded;
      if (flag2) {
        if ((this.cardsDealt | 0) < 5) {
          var flag4 = (this.playerHoleCardsRankings[x] | 0) < highHoleHand;
          if (flag4) {
            highHoleHand = (this.playerHoleCardsRankings[x] | 0);
            HighHolder = x;
          }
        } else {
          var flag5 = (this.virtualPlayers[x].FiveCardHandRank | 0) > highHand;
          if (flag5) {
            var flag6 = (this.virtualPlayers[x].FiveCardHandRank | 0) > 8;
            if (flag6) {
              highHand = (this.virtualPlayers[x].FiveCardHandRank | 0);
              HighHolder = x;
            }
          }
        }
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    return HighHolder;
  }; 

  function Form1_GetPotRaisePercentage (raise) {
    if (+raise > 0) {
      var result = ((+((1 / +((+this.get_PotAmount() / +raise)))) * 100) | 0);
    } else {
      result = 0;
    }
    return result;
  }; 

  function Form1_GetTotalRaiseAmount () {
    var highbet = 0;
    this.x = 0;

    while ((this.x | 0) < ($T04().playerSize | 0)) {
      highbet += +this.virtualPlayers[this.x].RoundRaiseAmount;
      var num = (this.x | 0);
      this.x = ((num + 1) | 0);
    }
    return highbet;
  }; 

  function Form1_GetTwoPairKicker (firstValue, secondValue, hand) {
    var kicker = 0;
    var holdKicker = 0;

    for (var x = 0; x < 7; ) {
      var cv = (this.GetCardValue(hand[x]) | 0);
      if ((cv !== (firstValue | 0)) && (cv !== (secondValue | 0))) {
        var flag2 = cv > kicker;
        if (flag2) {
          kicker = cv;
          var flag3 = (cv === (this.GetCardValue(hand[0]) | 0)) || 
          (cv === (this.GetCardValue(hand[1]) | 0));
          if (flag3) {
            holdKicker = cv;
          }
        }
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    var flag4 = holdKicker > 0;
    if (flag4) {
      kicker = holdKicker;
    }
    return kicker;
  }; 

  function Form1_GetTwoPairTotal (firstValue, secondValue, hand) {
    var total = 0;
    var flag = (firstValue | 0) === 1;
    if (flag) {
      firstValue = 14;
    }
    var flag2 = (secondValue | 0) === 1;
    if (flag2) {
      secondValue = 14;
    }

    for (var x = 0; x < 5; ) {
      var flag3 = ((this.GetCardValue(hand[x]) | 0) === (firstValue | 0)) || 
      ((this.GetCardValue(hand[x]) | 0) === (secondValue | 0));
      if (flag3) {
        total = ((total + (this.GetCardValue(hand[x]) | 0)) | 0);
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    return total;
  }; 

  function Form1_GetVideoPokerBonus (rank) {
    rank = (this.AdjustWinRank(rank) | 0);
    var newRank = ((21 - (rank | 0)) | 0);
    var flag = newRank < (this.paytableEntries | 0);
    if (flag) {
      var result = +(this.PayTableAmounts[newRank]) * +this.gameDenomination;
    } else {
      result = 0;
    }
    return result;
  }; 

  function Form1_getWeightedIntResult (value) {
    var temp = ((this.rand).Next(100) | 0);
    if (temp <= (value | 0)) {
      var result = 1;
    } else {
      result = 0;
    }
    return result;
  }; 

  function Form1_getWeightedResult (value) {
    var temp = ((this.rand).Next(100) | 0);
    return (temp <= (value | 0));
  }; 

  function Form1_GetWinner () {
    var winner = 0;
    var WinnerCount = 0;
    var wins = JSIL.Array.New($T01(), $T04().playerSize);
    var highHand = 0;
    var highTotal = 0;
    var highKicker = 0;

    for (var player = 0; player < ($T04().playerSize | 0); ) {
      var flag = !this.virtualPlayers[player].Folded;
      if (flag) {
        var tempTotal = 0;
        var tempKicker = 0;
        var tempRank = (this.GetFiveCardRanking(player) | 0);
        if (tempRank >= 7) {
          tempTotal = (this.GamePlayers[player].hand.CardValueTotal | 0);
          tempKicker = (this.GamePlayers[player].hand.Kicker | 0);
        }
        var flag3 = (tempRank > highHand) || 
        ((tempRank === highHand) && 
          (tempTotal > highTotal)) || 
        (!((tempRank !== highHand) || 
            (tempTotal !== highTotal)) && 
          (tempKicker > highKicker));
        if (flag3) {
          highHand = tempRank;
          highTotal = tempTotal;
          highKicker = tempKicker;
          winner = player;
        }
        this.virtualPlayers[player].FinalHandRank = tempRank;
      }
      var num = player;
      player = ((num + 1) | 0);
    }
    var flag4 = highHand >= 7;
    if (flag4) {

      for (var player2 = 0; player2 < ($T04().playerSize | 0); ) {
        var flag5 = !this.virtualPlayers[player2].Folded;
        if (flag5) {
          var flag6 = (this.GamePlayers[player2].hand.HandRank | 0) === highHand;
          if (flag6) {
            var flag7 = (this.GamePlayers[player2].hand.CardValueTotal | 0) === highTotal;
            if (flag7) {
              var flag8 = (this.GamePlayers[player2].hand.Kicker | 0) === highKicker;
              if (flag8) {
                num = WinnerCount;
                WinnerCount = ((num + 1) | 0);
                this.GameWinners[player2] = true;
              }
            }
          }
        }
        num = player2;
        player2 = ((num + 1) | 0);
      }
    } else {
      var highCard = 0;
      WinnerCount = 0;

      for (var player3 = 0; player3 < ($T04().playerSize | 0); ) {
        var flag9 = !this.virtualPlayers[player3].Folded;
        if (flag9) {
          var flag10 = (this.virtualPlayers[player3].HighCard | 0) > highCard;
          if (flag10) {
            highCard = (this.virtualPlayers[player3].HighCard | 0);
          }
        }
        num = player3;
        player3 = ((num + 1) | 0);
      }

      for (var player4 = 0; player4 < ($T04().playerSize | 0); ) {
        var flag11 = !this.virtualPlayers[player4].Folded;
        if (flag11) {
          var flag12 = (this.virtualPlayers[player4].HighCard | 0) === highCard;
          if (flag12) {
            num = WinnerCount;
            WinnerCount = ((num + 1) | 0);
            this.GameWinners[player4] = true;
          }
        }
        num = player4;
        player4 = ((num + 1) | 0);
      }
      var flag13 = WinnerCount > 1;
      if (flag13) {
        var HighKicker = 0;
        var TempWinner = 10;
        var kickerCount = 0;
        var kickers = JSIL.Array.New($T01(), $T04().kickerSize);

        for (var x = 0; x < ($T04().kickerSize | 0); ) {
          var flag14 = !this.virtualPlayers[x].Folded;
          if (flag14) {
            var flag15 = this.GameWinners[x];
            if (flag15) {
              var temp = (this.GetXofaKindKicker(highCard, this.GamePlayers[x].hand.cardHand) | 0);
              var flag16 = temp === 1;
              if (flag16) {
                temp = 14;
              }
              kickers[x] = temp;
              var flag17 = temp > HighKicker;
              if (flag17) {
                HighKicker = temp;
              }
            }
          }
          num = x;
          x = ((num + 1) | 0);
        }

        for (var x2 = 0; x2 < ($T04().kickerSize | 0); ) {
          var flag18 = HighKicker === (kickers[x2] | 0);
          if (flag18) {
            num = kickerCount;
            kickerCount = ((num + 1) | 0);
            TempWinner = x2;
          } else {
            this.GameWinners[x2] = false;
          }
          num = x2;
          x2 = ((num + 1) | 0);
        }
        WinnerCount = kickerCount;
        var flag19 = WinnerCount === 1;
        if (flag19) {
          winner = TempWinner;
        }
      }
    }
    var flag20 = WinnerCount === 1;
    if (flag20) {

      for (var x3 = 0; x3 < ($T04().kickerSize | 0); ) {
        var flag21 = this.GameWinners[x3];
        if (flag21) {
          winner = x3;
        }
        num = x3;
        x3 = ((num + 1) | 0);
      }
    }
    var flag22 = WinnerCount > 1;
    if (flag22) {
      this.PotSplit = WinnerCount;
      var result = 10;
    } else {
      result = winner;
    }
    return result;
  }; 

  function Form1_GetXofaKindKicker (card, hand) {
    var kicker = 0;
    var holdKicker = 0;

    for (var x = 0; x < 7; ) {
      var cv = (this.GetCardValue(hand[x]) | 0);
      if (cv !== (card | 0)) {
        var flag2 = cv > kicker;
        if (flag2) {
          kicker = cv;
          var flag3 = (cv === (this.GetCardValue(hand[0]) | 0)) || 
          (cv === (this.GetCardValue(hand[1]) | 0));
          if (flag3) {
            holdKicker = cv;
          }
        }
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    var flag4 = holdKicker > 0;
    if (flag4) {
      kicker = holdKicker;
    }
    return kicker;
  }; 

  function Form1_GetXofaKindTotal (card, hand) {
    var total = 0;
    var flag = (card | 0) === 1;
    if (flag) {
      card = 14;
    }

    for (var x = 0; x < 5; ) {
      var flag2 = (this.GetCardValue(hand[x]) | 0) === (card | 0);
      if (flag2) {
        total = ((total + (card | 0)) | 0);
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    return total;
  }; 

  function Form1_IncrementButtonPosition (getposition) {
    if (!getposition) {
      (this.buttonImage0).set_Visible(false);
      (this.buttonImage1).set_Visible(false);
      (this.buttonImage2).set_Visible(false);
      (this.buttonImage3).set_Visible(false);
      (this.buttonImage4).set_Visible(false);
      (this.buttonImage5).set_Visible(false);
      var num = (this.buttonPosition | 0);
      this.buttonPosition = ((num - 1) | 0);
      if ((this.buttonPosition | 0) < 0) {
        this.buttonPosition = 5;
      }
      switch (this.buttonPosition) {
        case 0: 
          (this.buttonImage0).set_Visible(true);
          (this.buttonImage0).set_Image($S08().CallVirtual("get_Item", null, (this.dealerButtonImageList).get_Images(), 0));
          break;

        case 1: 
          (this.buttonImage1).set_Visible(true);
          (this.buttonImage1).set_Image($S08().CallVirtual("get_Item", null, (this.dealerButtonImageList).get_Images(), 0));
          break;

        case 2: 
          (this.buttonImage2).set_Visible(true);
          (this.buttonImage2).set_Image($S08().CallVirtual("get_Item", null, (this.dealerButtonImageList).get_Images(), 0));
          break;

        case 3: 
          (this.buttonImage3).set_Visible(true);
          (this.buttonImage3).set_Image($S08().CallVirtual("get_Item", null, (this.dealerButtonImageList).get_Images(), 0));
          break;

        case 4: 
          (this.buttonImage4).set_Visible(true);
          (this.buttonImage4).set_Image($S08().CallVirtual("get_Item", null, (this.dealerButtonImageList).get_Images(), 0));
          break;

        case 5: 
          (this.buttonImage5).set_Visible(true);
          (this.buttonImage5).set_Image($S08().CallVirtual("get_Item", null, (this.dealerButtonImageList).get_Images(), 0));
          break;

      }
    }
    return this.buttonPosition;
  }; 

  function Form1_InitializeComponent () {
    this.components = new ($T58())();
    var resources = $S1D().Construct($thisType.__Type__);
    var dataGridViewCellStyle7 = $S1E().Construct();
    var dataGridViewCellStyle8 = $S1E().Construct();
    var dataGridViewCellStyle9 = $S1E().Construct();
    var dataGridViewCellStyle10 = $S1E().Construct();
    var dataGridViewCellStyle11 = $S1E().Construct();
    var dataGridViewCellStyle12 = $S1E().Construct();
    var dataGridViewCellStyle13 = $S1E().Construct();
    var dataGridViewCellStyle14 = $S1E().Construct();
    var dataGridViewCellStyle15 = $S1E().Construct();
    this.river = new ($T19())();
    this.turn = new ($T19())();
    this.flop3 = new ($T19())();
    this.flop2 = new ($T19())();
    this.flop1 = new ($T19())();
    this.player0hold2 = new ($T19())();
    this.player0hold1 = new ($T19())();
    this.player3hold2 = new ($T19())();
    this.player3hold1 = new ($T19())();
    this.player2hold2 = new ($T19())();
    this.player2hold1 = new ($T19())();
    this.player1hold2 = new ($T19())();
    this.player1hold1 = new ($T19())();
    this.player4hold1 = new ($T19())();
    this.player4hold2 = new ($T19())();
    this.player5hold2 = new ($T19())();
    this.player5hold1 = new ($T19())();
    this.cardImages = $S1F().Construct(this.components);
    this.button2 = new ($T3C())();
    this.button3 = new ($T3C())();
    this.dealTurnButton = new ($T3C())();
    this.comboBox1 = new ($T5A())();
    this.bettingGroupLabel = new ($T03())();
    this.newGameButton = new ($T3C())();
    this.bigButtonImageList = $S1F().Construct(this.components);
    this.potLabel = new ($T03())();
    this.startButton = new ($T3C())();
    this.playerFoldButton = new ($T3C())();
    this.buttonImageList = $S1F().Construct(this.components);
    this.playerCheckButton = new ($T3C())();
    this.playerCallButton = new ($T3C())();
    this.playerRaiseButton = new ($T3C())();
    this.playerAllInButton = new ($T3C())();
    this.smallWideButtonImageList = $S1F().Construct(this.components);
    this.playerBetLabel = new ($T03())();
    this.playerRaiseLabel = new ($T03())();
    this.callLabel = new ($T03())();
    this.label2 = new ($T03())();
    this.buttonImage1 = new ($T19())();
    this.buttonImage2 = new ($T19())();
    this.buttonImage3 = new ($T19())();
    this.buttonImage4 = new ($T19())();
    this.buttonImage5 = new ($T19())();
    this.buttonImage0 = new ($T19())();
    this.playerCreditLabel = new ($T03())();
    this.bettingGroupBox = new ($T5B())();
    this.textBox2 = new ($T4A())();
    this.playerSurrenderButton = new ($T3C())();
    this.label1 = new ($T03())();
    this.textBox1 = new ($T4A())();
    this.button1 = new ($T3C())();
    this.winLabel = new ($T03())();
    this.playerWinLabel = new ($T03())();
    this.TestingGroupBox = new ($T5B())();
    this.autoPlayButton = new ($T3C())();
    this.waitButton = new ($T3C())();
    this.paytableGrid = new ($T17())();
    this.TitleColumn = new ($T5C())();
    this.PT1 = new ($T5C())();
    this.PT2 = new ($T5C())();
    this.PT3 = new ($T5C())();
    this.PT4 = new ($T5C())();
    this.PT5 = new ($T5C())();
    this.bonusPokerPanel = new ($T49())();
    this.label3 = new ($T03())();
    this.dataGridView1 = new ($T17())();
    this.numberColumn = new ($T5C())();
    this.instruction = new ($T5C())();
    this.smallSquareImageList = $S1F().Construct(this.components);
    this.dealerButtonImageList = $S1F().Construct(this.components);
    this.chipImageList = $S1F().Construct(this.components);
    this.chipBox1 = new ($T19())();
    this.chipBox2 = new ($T19())();
    this.chipBox3 = new ($T19())();
    this.chipBox4 = new ($T19())();
    this.chipBox5 = new ($T19())();
    this.repeatBetButton = new ($T3C())();
    this.addCreditButton = new ($T3C())();
    $IM01().Call(this.river, null);
    $IM01().Call(this.turn, null);
    $IM01().Call(this.flop3, null);
    $IM01().Call(this.flop2, null);
    $IM01().Call(this.flop1, null);
    $IM01().Call(this.player0hold2, null);
    $IM01().Call(this.player0hold1, null);
    $IM01().Call(this.player3hold2, null);
    $IM01().Call(this.player3hold1, null);
    $IM01().Call(this.player2hold2, null);
    $IM01().Call(this.player2hold1, null);
    $IM01().Call(this.player1hold2, null);
    $IM01().Call(this.player1hold1, null);
    $IM01().Call(this.player4hold1, null);
    $IM01().Call(this.player4hold2, null);
    $IM01().Call(this.player5hold2, null);
    $IM01().Call(this.player5hold1, null);
    $IM01().Call(this.buttonImage1, null);
    $IM01().Call(this.buttonImage2, null);
    $IM01().Call(this.buttonImage3, null);
    $IM01().Call(this.buttonImage4, null);
    $IM01().Call(this.buttonImage5, null);
    $IM01().Call(this.buttonImage0, null);
    (this.bettingGroupBox).SuspendLayout();
    (this.TestingGroupBox).SuspendLayout();
    $IM01().Call(this.paytableGrid, null);
    (this.bonusPokerPanel).SuspendLayout();
    $IM01().Call(this.dataGridView1, null);
    $IM01().Call(this.chipBox1, null);
    $IM01().Call(this.chipBox2, null);
    $IM01().Call(this.chipBox3, null);
    $IM01().Call(this.chipBox4, null);
    $IM01().Call(this.chipBox5, null);
    this.SuspendLayout();
    (this.river.BackColor = $T10().get_Transparent());
    (this.river.Location = $S1A().Construct(589, 278));
    (this.river).set_Name("river");
    (this.river.Size = $S11().Construct(61, 88));
    (this.river).set_TabIndex(30);
    (this.river).set_TabStop(false);
    (this.river).set_Visible(false);
    (this.turn.BackColor = $T10().get_Transparent());
    (this.turn.Location = $S1A().Construct(504, 278));
    (this.turn).set_Name("turn");
    (this.turn.Size = $S11().Construct(61, 88));
    (this.turn).set_TabIndex(29);
    (this.turn).set_TabStop(false);
    (this.turn).set_Visible(false);
    (this.flop3.BackColor = $T10().get_Transparent());
    (this.flop3.Location = $S1A().Construct(413, 278));
    (this.flop3).set_Name("flop3");
    (this.flop3.Size = $S11().Construct(61, 88));
    (this.flop3).set_TabIndex(28);
    (this.flop3).set_TabStop(false);
    (this.flop3).set_Visible(false);
    (this.flop2.BackColor = $T10().get_Transparent());
    (this.flop2.Location = $S1A().Construct(331, 278));
    (this.flop2).set_Name("flop2");
    (this.flop2.Size = $S11().Construct(61, 88));
    (this.flop2).set_TabIndex(27);
    (this.flop2).set_TabStop(false);
    (this.flop2).set_Visible(false);
    (this.flop1.BackColor = $T10().get_Transparent());
    (this.flop1.Location = $S1A().Construct(246, 278));
    (this.flop1).set_Name("flop1");
    (this.flop1.Size = $S11().Construct(61, 88));
    (this.flop1).set_TabIndex(26);
    (this.flop1).set_TabStop(false);
    (this.flop1).set_Visible(false);
    (this.player0hold2.BackColor = $T10().get_Transparent());
    (this.player0hold2.Location = $S1A().Construct(455, 424));
    (this.player0hold2).set_Name("player0hold2");
    (this.player0hold2.Size = $S11().Construct(61, 88));
    (this.player0hold2).set_TabIndex(25);
    (this.player0hold2).set_TabStop(false);
    (this.player0hold2).set_Visible(false);
    (this.player0hold1.BackColor = $T10().get_Transparent());
    (this.player0hold1.Location = $S1A().Construct(380, 424));
    (this.player0hold1).set_Name("player0hold1");
    (this.player0hold1.Size = $S11().Construct(61, 88));
    (this.player0hold1).set_TabIndex(24);
    (this.player0hold1).set_TabStop(false);
    (this.player0hold1).set_Visible(false);
    (this.player3hold2.BackColor = $T10().get_Transparent());
    (this.player3hold2.Location = $S1A().Construct(441, 78));
    (this.player3hold2).set_Name("player3hold2");
    (this.player3hold2.Size = $S11().Construct(61, 88));
    (this.player3hold2).set_TabIndex(23);
    (this.player3hold2).set_TabStop(false);
    (this.player3hold2).set_Visible(false);
    (this.player3hold1.BackColor = $T10().get_Transparent());
    (this.player3hold1.Location = $S1A().Construct(374, 78));
    (this.player3hold1).set_Name("player3hold1");
    (this.player3hold1.Size = $S11().Construct(61, 88));
    (this.player3hold1).set_TabIndex(20);
    (this.player3hold1).set_TabStop(false);
    (this.player3hold1).set_Visible(false);
    (this.player2hold2.BackColor = $T10().get_Transparent());
    (this.player2hold2.Location = $S1A().Construct(244, 79));
    (this.player2hold2).set_Name("player2hold2");
    (this.player2hold2.Size = $S11().Construct(61, 88));
    (this.player2hold2).set_TabIndex(17);
    (this.player2hold2).set_TabStop(false);
    (this.player2hold2).set_Visible(false);
    (this.player2hold1.BackColor = $T10().get_Transparent());
    (this.player2hold1.Location = $S1A().Construct(177, 79));
    (this.player2hold1).set_Name("player2hold1");
    (this.player2hold1.Size = $S11().Construct(61, 88));
    (this.player2hold1).set_TabIndex(16);
    (this.player2hold1).set_TabStop(false);
    (this.player2hold1).set_Visible(false);
    (this.player1hold2.BackColor = $T10().get_Transparent());
    (this.player1hold2.Location = $S1A().Construct(141, 214));
    (this.player1hold2).set_Name("player1hold2");
    (this.player1hold2.Size = $S11().Construct(61, 88));
    (this.player1hold2).set_TabIndex(15);
    (this.player1hold2).set_TabStop(false);
    (this.player1hold2).set_Visible(false);
    (this.player1hold1.BackColor = $T10().get_Transparent());
    (this.player1hold1.Location = $S1A().Construct(74, 214));
    (this.player1hold1).set_Name("player1hold1");
    (this.player1hold1.Size = $S11().Construct(61, 88));
    (this.player1hold1).set_TabIndex(14);
    (this.player1hold1).set_TabStop(false);
    (this.player1hold1).set_Visible(false);
    (this.player4hold1.BackColor = $T10().get_Transparent());
    (this.player4hold1.Location = $S1A().Construct(586, 78));
    (this.player4hold1).set_Name("player4hold1");
    (this.player4hold1.Size = $S11().Construct(61, 88));
    (this.player4hold1).set_TabIndex(19);
    (this.player4hold1).set_TabStop(false);
    (this.player4hold1).set_Visible(false);
    (this.player4hold2.BackColor = $T10().get_Transparent());
    (this.player4hold2.Location = $S1A().Construct(652, 78));
    (this.player4hold2).set_Name("player4hold2");
    (this.player4hold2.Size = $S11().Construct(61, 88));
    (this.player4hold2).set_TabIndex(22);
    (this.player4hold2).set_TabStop(false);
    (this.player4hold2).set_Visible(false);
    (this.player5hold2.BackColor = $T10().get_Transparent());
    (this.player5hold2.Location = $S1A().Construct(753, 214));
    (this.player5hold2).set_Name("player5hold2");
    (this.player5hold2.Size = $S11().Construct(61, 88));
    (this.player5hold2).set_TabIndex(21);
    (this.player5hold2).set_TabStop(false);
    (this.player5hold2).set_Visible(false);
    (this.player5hold1.BackColor = $T10().get_Transparent());
    (this.player5hold1.Location = $S1A().Construct(687, 215));
    (this.player5hold1).set_Name("player5hold1");
    (this.player5hold1.Size = $S11().Construct(61, 88));
    (this.player5hold1).set_TabIndex(18);
    (this.player5hold1).set_TabStop(false);
    (this.player5hold1).set_Visible(false);
    (this.cardImages).set_ImageStream($T5E().$Cast(resources.GetObject("cardImages.ImageStream")));
    (this.cardImages.TransparentColor = $T10().get_Lime());
    ((this.cardImages).get_Images()).SetKeyName(0, "2_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(1, "3_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(2, "4_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(3, "5_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(4, "6_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(5, "7_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(6, "8_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(7, "9_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(8, "10_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(9, "J_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(10, "Q_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(11, "K_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(12, "A_spades.bmp");
    ((this.cardImages).get_Images()).SetKeyName(13, "2_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(14, "3_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(15, "4_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(16, "5_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(17, "6_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(18, "7_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(19, "8_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(20, "9_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(21, "10_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(22, "J_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(23, "Q_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(24, "K_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(25, "A_dia.bmp");
    ((this.cardImages).get_Images()).SetKeyName(26, "2_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(27, "3_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(28, "4_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(29, "5_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(30, "6_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(31, "7_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(32, "8_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(33, "9_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(34, "10_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(35, "J_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(36, "Q_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(37, "K_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(38, "A_clubs.bmp");
    ((this.cardImages).get_Images()).SetKeyName(39, "2_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(40, "3_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(41, "4_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(42, "5_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(43, "6_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(44, "7_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(45, "8_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(46, "9_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(47, "10_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(48, "J_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(49, "Q_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(50, "K_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(51, "A_hearts.bmp");
    ((this.cardImages).get_Images()).SetKeyName(52, "logo_back_cards.bmp");
    ((this.cardImages).get_Images()).SetKeyName(53, "card_back.bmp");
    ((this.cardImages).get_Images()).SetKeyName(54, "greenCardBack.bmp");
    ((this.cardImages).get_Images()).SetKeyName(55, "greenCardBack.bmp");
    (this.button2.ForeColor = $T10().get_Black());
    (this.button2.Location = $S1A().Construct(6, 109));
    (this.button2).set_Name("button2");
    (this.button2.Size = $S11().Construct(166, 31));
    (this.button2).set_TabIndex(32);
    (this.button2).set_Text("Copy Hand to ClipBoard");
    (this.button2).set_UseVisualStyleBackColor(true);
    $T15().prototype.add_Click.call(this.button2, $T18().New(this, function () { return $thisType.prototype.button2_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button2_Click", $S20(), false); }.bind(this)));
    (this.button3.ForeColor = $T10().get_Black());
    (this.button3.Location = $S1A().Construct(289, 137));
    (this.button3).set_Name("button3");
    (this.button3.Size = $S11().Construct(56, 39));
    (this.button3).set_TabIndex(33);
    (this.button3).set_Text("Adv. Dlr");
    (this.button3).set_UseVisualStyleBackColor(true);
    $T15().prototype.add_Click.call(this.button3, $T18().New(this, function () { return $thisType.prototype.button3_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button3_Click", $S21(), false); }.bind(this)));
    (this.dealTurnButton.ForeColor = $T10().get_Black());
    (this.dealTurnButton.Location = $S1A().Construct(6, 143));
    (this.dealTurnButton).set_Name("dealTurnButton");
    (this.dealTurnButton.Size = $S11().Construct(81, 32));
    (this.dealTurnButton).set_TabIndex(34);
    (this.dealTurnButton).set_Text("Use Data");
    (this.dealTurnButton).set_UseVisualStyleBackColor(true);
    $T15().prototype.add_Click.call(this.dealTurnButton, $T18().New(this, function () { return $thisType.prototype.dealTurnButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "dealTurnButton_Click", $S22(), false); }.bind(this)));
    (this.comboBox1).set_FormattingEnabled(true);
    ((this.comboBox1).get_Items()).AddRange(JSIL.Array.New($T28(), ["Player 1", "Player 2", "Player 3", "Player 4", "Player 5"]));
    (this.comboBox1.Location = $S1A().Construct(178, 110));
    (this.comboBox1).set_Name("comboBox1");
    (this.comboBox1.Size = $S11().Construct(167, 21));
    (this.comboBox1).set_TabIndex(36);
    (this.comboBox1).add_SelectedIndexChanged($T18().New(this, function () { return $thisType.prototype.comboBox1_SelectedIndexChanged.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "comboBox1_SelectedIndexChanged", $S23(), false); }.bind(this)));
    (this.bettingGroupLabel.BackColor = $T10().get_Transparent());
    (this.bettingGroupLabel).set_Font($S24().Construct("Microsoft Sans Serif", 15, $T4E().Bold, $T61().Point, 0));
    (this.bettingGroupLabel.Location = $S1A().Construct(65, 10));
    (this.bettingGroupLabel).set_Name("bettingGroupLabel");
    (this.bettingGroupLabel.Size = $S11().Construct(276, 24));
    (this.bettingGroupLabel).set_TabIndex(37);
    (this.bettingGroupLabel).set_Text("BET");
    (this.bettingGroupLabel).set_TextAlign($T4F().MiddleCenter);
    (this.newGameButton.BackColor = $T10().get_Transparent());
    ((this.newGameButton).get_FlatAppearance()).set_BorderSize(0);
    (this.newGameButton.FlatAppearance.MouseDownBackColor = $T10().FromArgb(192, 0, 0));
    (this.newGameButton.FlatAppearance.MouseOverBackColor = $T10().FromArgb(192, 0, 0));
    (this.newGameButton).set_FlatStyle($T63().Flat);
    (this.newGameButton).set_Font($S24().Construct("Microsoft Sans Serif", 10.25, $T4E().Bold, $T61().Point, 0));
    (this.newGameButton).set_ImageIndex(0);
    (this.newGameButton).set_ImageList(this.bigButtonImageList);
    (this.newGameButton.Location = $S1A().Construct(64, 619));
    (this.newGameButton).set_Name("newGameButton");
    (this.newGameButton.Size = $S11().Construct(145, 46));
    (this.newGameButton).set_TabIndex(39);
    (this.newGameButton).set_Text("BET NOW ");
    (this.newGameButton).set_UseVisualStyleBackColor(false);
    $T15().prototype.add_Click.call(this.newGameButton, $T18().New(this, function () { return $thisType.prototype.newGameButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "newGameButton_Click", $S25(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.newGameButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.newGameButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.bigButtonImageList).set_ImageStream($T5E().$Cast(resources.GetObject("bigButtonImageList.ImageStream")));
    (this.bigButtonImageList.TransparentColor = $T10().get_Transparent());
    ((this.bigButtonImageList).get_Images()).SetKeyName(0, "BIGButtonUP.bmp");
    ((this.bigButtonImageList).get_Images()).SetKeyName(1, "BIGButtonDN.bmp");
    (this.potLabel.BackColor = $T10().get_Transparent());
    (this.potLabel).set_Font($S24().Construct("Microsoft Sans Serif", 30, $T4E().Regular, $T61().Point, 0));
    (this.potLabel.ForeColor = $T10().get_Yellow());
    (this.potLabel.Location = $S1A().Construct(331, 215));
    (this.potLabel).set_Name("potLabel");
    (this.potLabel.Size = $S11().Construct(234, 40));
    (this.potLabel).set_TabIndex(40);
    (this.potLabel).set_Text("0");
    (this.potLabel).set_TextAlign($T4F().MiddleCenter);
    (this.startButton).set_AutoEllipsis(true);
    (this.startButton.BackColor = $T10().get_Transparent());
    (this.startButton).set_Enabled(false);
    (this.startButton.FlatAppearance.BorderColor = $T10().FromArgb(192, 0, 0));
    ((this.startButton).get_FlatAppearance()).set_BorderSize(0);
    (this.startButton.FlatAppearance.MouseDownBackColor = $T10().FromArgb(192, 0, 0));
    (this.startButton.FlatAppearance.MouseOverBackColor = $T10().FromArgb(192, 0, 0));
    (this.startButton).set_FlatStyle($T63().Flat);
    (this.startButton).set_Font($S24().Construct("Microsoft Sans Serif", 10.75, $T4E().Bold, $T61().Point, 0));
    (this.startButton.ForeColor = $T10().get_White());
    (this.startButton).set_ImageIndex(0);
    (this.startButton).set_ImageList(this.bigButtonImageList);
    (this.startButton.Location = $S1A().Construct(22, 574));
    (this.startButton).set_Name("startButton");
    (this.startButton.Size = $S11().Construct(45, 23));
    (this.startButton).set_TabIndex(41);
    (this.startButton).set_Text("START HAND");
    (this.startButton).set_UseVisualStyleBackColor(false);
    (this.startButton).set_Visible(false);
    $T15().prototype.add_Click.call(this.startButton, $T18().New(this, function () { return $thisType.prototype.startButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "startButton_Click", $S28(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.startButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.startButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.playerFoldButton.BackColor = $T10().get_Transparent());
    (this.playerFoldButton).set_Cursor($T65().get_Hand());
    ((this.playerFoldButton).get_FlatAppearance()).set_BorderSize(0);
    (this.playerFoldButton).set_FlatStyle($T63().Flat);
    (this.playerFoldButton).set_ImageIndex(0);
    (this.playerFoldButton).set_ImageList(this.buttonImageList);
    (this.playerFoldButton.Location = $S1A().Construct(65, 38));
    (this.playerFoldButton).set_Name("playerFoldButton");
    (this.playerFoldButton.Size = $S11().Construct(64, 25));
    (this.playerFoldButton).set_TabIndex(42);
    (this.playerFoldButton).set_TabStop(false);
    (this.playerFoldButton).set_Text("FOLD");
    (this.playerFoldButton).set_UseVisualStyleBackColor(false);
    $T15().prototype.add_Click.call(this.playerFoldButton, $T18().New(this, function () { return $thisType.prototype.playerFoldButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerFoldButton_Click", $S17(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.playerFoldButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.playerFoldButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.buttonImageList).set_ImageStream($T5E().$Cast(resources.GetObject("buttonImageList.ImageStream")));
    (this.buttonImageList.TransparentColor = $T10().get_Transparent());
    ((this.buttonImageList).get_Images()).SetKeyName(0, "SmallButtonUP.bmp");
    ((this.buttonImageList).get_Images()).SetKeyName(1, "SmallButtonDN.bmp");
    (this.playerCheckButton.BackColor = $T10().get_Transparent());
    (this.playerCheckButton).set_Cursor($T65().get_Hand());
    (this.playerCheckButton).set_DialogResult($T66().OK);
    ((this.playerCheckButton).get_FlatAppearance()).set_BorderSize(0);
    (this.playerCheckButton).set_FlatStyle($T63().Flat);
    (this.playerCheckButton).set_ImageIndex(0);
    (this.playerCheckButton).set_ImageList(this.buttonImageList);
    (this.playerCheckButton.Location = $S1A().Construct(135, 38));
    (this.playerCheckButton).set_Name("playerCheckButton");
    (this.playerCheckButton.Size = $S11().Construct(64, 25));
    (this.playerCheckButton).set_TabIndex(43);
    (this.playerCheckButton).set_TabStop(false);
    (this.playerCheckButton).set_Text("CHECK");
    (this.playerCheckButton).set_UseVisualStyleBackColor(false);
    $T15().prototype.add_Click.call(this.playerCheckButton, $T18().New(this, function () { return $thisType.prototype.playerCheckButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerCheckButton_Click", $S29(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.playerCheckButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.playerCheckButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.playerCallButton.BackColor = $T10().get_Transparent());
    (this.playerCallButton).set_Cursor($T65().get_Hand());
    (this.playerCallButton).set_DialogResult($T66().OK);
    ((this.playerCallButton).get_FlatAppearance()).set_BorderSize(0);
    (this.playerCallButton).set_FlatStyle($T63().Flat);
    (this.playerCallButton).set_ImageIndex(0);
    (this.playerCallButton).set_ImageList(this.buttonImageList);
    (this.playerCallButton.Location = $S1A().Construct(207, 38));
    (this.playerCallButton).set_Name("playerCallButton");
    (this.playerCallButton.Size = $S11().Construct(64, 25));
    (this.playerCallButton).set_TabIndex(44);
    (this.playerCallButton).set_TabStop(false);
    (this.playerCallButton).set_Text("CALL");
    (this.playerCallButton).set_UseVisualStyleBackColor(false);
    $T15().prototype.add_Click.call(this.playerCallButton, $T18().New(this, function () { return $thisType.prototype.playerCallButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerCallButton_Click", $S2A(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.playerCallButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.playerCallButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.playerRaiseButton.BackColor = $T10().get_Transparent());
    (this.playerRaiseButton).set_Cursor($T65().get_Hand());
    (this.playerRaiseButton).set_DialogResult($T66().OK);
    ((this.playerRaiseButton).get_FlatAppearance()).set_BorderSize(0);
    (this.playerRaiseButton).set_FlatStyle($T63().Flat);
    (this.playerRaiseButton).set_ImageIndex(0);
    (this.playerRaiseButton).set_ImageList(this.buttonImageList);
    (this.playerRaiseButton.Location = $S1A().Construct(277, 38));
    (this.playerRaiseButton).set_Name("playerRaiseButton");
    (this.playerRaiseButton.Size = $S11().Construct(64, 25));
    (this.playerRaiseButton).set_TabIndex(45);
    (this.playerRaiseButton).set_TabStop(false);
    (this.playerRaiseButton).set_Text("RAISE");
    (this.playerRaiseButton).set_UseVisualStyleBackColor(false);
    $T15().prototype.add_Click.call(this.playerRaiseButton, $T18().New(this, function () { return $thisType.prototype.playerRaiseButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerRaiseButton_Click", $S2B(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.playerRaiseButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.playerRaiseButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.playerAllInButton.BackColor = $T10().get_Transparent());
    (this.playerAllInButton).set_Cursor($T65().get_Hand());
    (this.playerAllInButton).set_DialogResult($T66().OK);
    ((this.playerAllInButton).get_FlatAppearance()).set_BorderSize(0);
    (this.playerAllInButton).set_FlatStyle($T63().Flat);
    (this.playerAllInButton).set_ImageIndex(0);
    (this.playerAllInButton).set_ImageList(this.smallWideButtonImageList);
    (this.playerAllInButton.Location = $S1A().Construct(242, 68));
    (this.playerAllInButton).set_Name("playerAllInButton");
    (this.playerAllInButton.Size = $S11().Construct(99, 25));
    (this.playerAllInButton).set_TabIndex(46);
    (this.playerAllInButton).set_TabStop(false);
    (this.playerAllInButton).set_Text("ALL IN");
    (this.playerAllInButton).set_UseVisualStyleBackColor(false);
    $T15().prototype.add_Click.call(this.playerAllInButton, $T18().New(this, function () { return $thisType.prototype.playerAllInButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerAllInButton_Click", $S2C(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.playerAllInButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.playerAllInButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.smallWideButtonImageList).set_ImageStream($T5E().$Cast(resources.GetObject("smallWideButtonImageList.ImageStream")));
    (this.smallWideButtonImageList.TransparentColor = $T10().get_Transparent());
    ((this.smallWideButtonImageList).get_Images()).SetKeyName(0, "SmallWideButtonUP.bmp");
    ((this.smallWideButtonImageList).get_Images()).SetKeyName(1, "SmallWideButtonDN.bmp");
    (this.playerBetLabel.BackColor = $T10().get_Transparent());
    (this.playerBetLabel).set_Font($S24().Construct("Microsoft Sans Serif", 20, $T4E().Bold, $T61().Point, 0));
    (this.playerBetLabel.ForeColor = $T10().get_Yellow());
    (this.playerBetLabel.Location = $S1A().Construct(692, 590));
    (this.playerBetLabel).set_Name("playerBetLabel");
    (this.playerBetLabel.Size = $S11().Construct(129, 31));
    (this.playerBetLabel).set_TabIndex(47);
    (this.playerBetLabel).set_Text("0");
    (this.playerBetLabel).set_TextAlign($T4F().MiddleCenter);
    (this.playerRaiseLabel.BackColor = $T10().get_Transparent());
    (this.playerRaiseLabel).set_Font($S24().Construct("Microsoft Sans Serif", 20, $T4E().Bold, $T61().Point, 0));
    (this.playerRaiseLabel.ForeColor = $T10().get_Yellow());
    (this.playerRaiseLabel.Location = $S1A().Construct(693, 652));
    (this.playerRaiseLabel).set_Name("playerRaiseLabel");
    (this.playerRaiseLabel.Size = $S11().Construct(128, 31));
    (this.playerRaiseLabel).set_TabIndex(48);
    (this.playerRaiseLabel).set_Text("0");
    (this.playerRaiseLabel).set_TextAlign($T4F().MiddleCenter);
    (this.callLabel.BackColor = $T10().get_Transparent());
    (this.callLabel).set_BorderStyle($T4B().Fixed3D);
    (this.callLabel).set_Font($S24().Construct("Microsoft Sans Serif", 24, $T4E().Bold, $T61().Point, 0));
    (this.callLabel.ForeColor = $T10().get_Yellow());
    (this.callLabel.Location = $S1A().Construct(563, 434));
    (this.callLabel).set_Name("callLabel");
    (this.callLabel.Size = $S11().Construct(144, 44));
    (this.callLabel).set_TabIndex(49);
    (this.callLabel).set_Text("0");
    (this.callLabel).set_TextAlign($T4F().MiddleCenter);
    (this.label2).set_AutoSize(true);
    (this.label2.BackColor = $T10().get_Transparent());
    (this.label2.Location = $S1A().Construct(593, 421));
    (this.label2).set_Name("label2");
    (this.label2.Size = $S11().Construct(94, 13));
    (this.label2).set_TabIndex(50);
    (this.label2).set_Text("CALL AMOUNT");
    (this.buttonImage1).set_BackgroundImage($T06().$Cast(resources.GetObject("buttonImage1.BackgroundImage")));
    (this.buttonImage1.Location = $S1A().Construct(158, 324));
    (this.buttonImage1).set_Name("buttonImage1");
    (this.buttonImage1.Size = $S11().Construct(28, 25));
    (this.buttonImage1).set_TabIndex(51);
    (this.buttonImage1).set_TabStop(false);
    (this.buttonImage1).set_Visible(false);
    (this.buttonImage2.BackColor = $T10().get_Transparent());
    (this.buttonImage2).set_BackgroundImageLayout($T67().Center);
    (this.buttonImage2).set_Image($T68().get_button());
    (this.buttonImage2.Location = $S1A().Construct(242, 187));
    (this.buttonImage2).set_Name("buttonImage2");
    (this.buttonImage2.Size = $S11().Construct(28, 25));
    (this.buttonImage2).set_TabIndex(52);
    (this.buttonImage2).set_TabStop(false);
    (this.buttonImage2).set_Visible(false);
    (this.buttonImage3).set_BackgroundImage($T06().$Cast(resources.GetObject("buttonImage3.BackgroundImage")));
    (this.buttonImage3.Location = $S1A().Construct(504, 163));
    (this.buttonImage3).set_Name("buttonImage3");
    (this.buttonImage3.Size = $S11().Construct(28, 25));
    (this.buttonImage3).set_TabIndex(53);
    (this.buttonImage3).set_TabStop(false);
    (this.buttonImage3).set_Visible(false);
    (this.buttonImage4).set_BackgroundImage($T06().$Cast(resources.GetObject("buttonImage4.BackgroundImage")));
    (this.buttonImage4.Location = $S1A().Construct(652, 187));
    (this.buttonImage4).set_Name("buttonImage4");
    (this.buttonImage4.Size = $S11().Construct(28, 25));
    (this.buttonImage4).set_TabIndex(54);
    (this.buttonImage4).set_TabStop(false);
    (this.buttonImage4).set_Visible(false);
    (this.buttonImage5).set_BackgroundImage($T06().$Cast(resources.GetObject("buttonImage5.BackgroundImage")));
    (this.buttonImage5.Location = $S1A().Construct(753, 323));
    (this.buttonImage5).set_Name("buttonImage5");
    (this.buttonImage5.Size = $S11().Construct(28, 25));
    (this.buttonImage5).set_TabIndex(55);
    (this.buttonImage5).set_TabStop(false);
    (this.buttonImage5).set_Visible(false);
    (this.buttonImage0).set_BackgroundImage($T06().$Cast(resources.GetObject("buttonImage0.BackgroundImage")));
    (this.buttonImage0.Location = $S1A().Construct(434, 375));
    (this.buttonImage0).set_Name("buttonImage0");
    (this.buttonImage0.Size = $S11().Construct(28, 25));
    (this.buttonImage0).set_TabIndex(56);
    (this.buttonImage0).set_TabStop(false);
    (this.buttonImage0).set_Visible(false);
    (this.playerCreditLabel.BackColor = $T10().get_Transparent());
    (this.playerCreditLabel).set_Font($S24().Construct("Microsoft Sans Serif", 20, $T4E().Bold, $T61().Point, 0));
    (this.playerCreditLabel.ForeColor = $T10().get_Yellow());
    (this.playerCreditLabel.Location = $S1A().Construct(50, 723));
    (this.playerCreditLabel).set_Name("playerCreditLabel");
    (this.playerCreditLabel.Size = $S11().Construct(167, 38));
    (this.playerCreditLabel).set_TabIndex(57);
    (this.playerCreditLabel).set_Text("0");
    (this.playerCreditLabel).set_TextAlign($T4F().MiddleCenter);
    $S2D().Call($T15().prototype, "add_MouseDoubleClick", null, this.playerCreditLabel, $T64().New(this, function () { return $thisType.prototype.playerCreditLabel_MouseDoubleClick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerCreditLabel_MouseDoubleClick", $S2E(), false); }.bind(this)));
    (this.bettingGroupBox.BackColor = $T10().get_Transparent());
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.textBox2);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.playerSurrenderButton);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.playerFoldButton);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.playerCheckButton);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.playerCallButton);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.playerRaiseButton);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.playerAllInButton);
    ($S07().CallVirtual("get_Controls", null, this.bettingGroupBox)).Add(this.bettingGroupLabel);
    (this.bettingGroupBox.Location = $S1A().Construct(232, 563));
    (this.bettingGroupBox).set_Name("bettingGroupBox");
    (this.bettingGroupBox.Size = $S11().Construct(427, 173));
    (this.bettingGroupBox).set_TabIndex(58);
    (this.bettingGroupBox).set_TabStop(false);
    (this.textBox2.BackColor = $T10().get_DarkGreen());
    (this.textBox2).set_BorderStyle($T4B().None);
    (this.textBox2).set_Font($S24().Construct("Microsoft Sans Serif", 7, $T4E().Regular, $T61().Point, 0));
    (this.textBox2.ForeColor = $T10().get_White());
    (this.textBox2.Location = $S1A().Construct(6, 101));
    (this.textBox2).set_Multiline(true);
    (this.textBox2).set_Name("textBox2");
    (this.textBox2.Size = $S11().Construct(415, 66));
    (this.textBox2).set_TabIndex(67);
    (this.textBox2).set_TabStop(false);
    (this.playerSurrenderButton.BackColor = $T10().get_Transparent());
    (this.playerSurrenderButton).set_BackgroundImageLayout($T67().Stretch);
    (this.playerSurrenderButton).set_Cursor($T65().get_Hand());
    (this.playerSurrenderButton).set_DialogResult($T66().OK);
    ((this.playerSurrenderButton).get_FlatAppearance()).set_BorderSize(0);
    (this.playerSurrenderButton).set_FlatStyle($T63().Flat);
    (this.playerSurrenderButton).set_ImageIndex(0);
    (this.playerSurrenderButton).set_ImageList(this.smallWideButtonImageList);
    (this.playerSurrenderButton.Location = $S1A().Construct(65, 70));
    (this.playerSurrenderButton).set_Name("playerSurrenderButton");
    (this.playerSurrenderButton.Size = $S11().Construct(101, 25));
    (this.playerSurrenderButton).set_TabIndex(64);
    (this.playerSurrenderButton).set_TabStop(false);
    (this.playerSurrenderButton).set_Text("SURRENDER");
    (this.playerSurrenderButton).set_UseVisualStyleBackColor(false);
    (this.playerSurrenderButton).set_Visible(false);
    $T15().prototype.add_Click.call(this.playerSurrenderButton, $T18().New(this, function () { return $thisType.prototype.playerFoldButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerFoldButton_Click", $S17(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.playerSurrenderButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.playerSurrenderButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.label1).set_AutoSize(true);
    (this.label1.BackColor = $T10().get_Transparent());
    (this.label1).set_Font($S24().Construct("Microsoft Sans Serif", 8.25, $T4E().Bold, $T61().Point, 0));
    (this.label1.Location = $S1A().Construct(750, 768));
    (this.label1).set_Name("label1");
    (this.label1.Size = $S11().Construct(75, 13));
    (this.label1).set_TabIndex(59);
    (this.label1).set_Text("masterLabel");
    (this.label1).set_Visible(false);
    (this.textBox1.Location = $S1A().Construct(6, 9));
    (this.textBox1).set_Multiline(true);
    (this.textBox1).set_Name("textBox1");
    (this.textBox1).set_ScrollBars($T69().Vertical);
    (this.textBox1.Size = $S11().Construct(339, 94));
    (this.textBox1).set_TabIndex(60);
    (this.button1.ForeColor = $T10().get_Black());
    (this.button1.Location = $S1A().Construct(93, 144));
    (this.button1).set_Name("button1");
    (this.button1.Size = $S11().Construct(81, 31));
    (this.button1).set_TabIndex(61);
    (this.button1).set_Text("button1");
    (this.button1).set_UseVisualStyleBackColor(true);
    $T15().prototype.add_Click.call(this.button1, $T18().New(this, function () { return $thisType.prototype.button1_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button1_Click", $S2F(), false); }.bind(this)));
    (this.winLabel).set_AutoSize(true);
    (this.winLabel.BackColor = $T10().get_Transparent());
    (this.winLabel).set_Font($S24().Construct("Microsoft Sans Serif", 15, $T4E().Bold, $T61().Point, 0));
    (this.winLabel.Location = $S1A().Construct(223, 736));
    (this.winLabel).set_Name("winLabel");
    (this.winLabel.Size = $S11().Construct(109, 25));
    (this.winLabel).set_TabIndex(62);
    (this.winLabel).set_Text("Win Label");
    (this.winLabel).set_Visible(false);
    (this.playerWinLabel.BackColor = $T10().get_Transparent());
    (this.playerWinLabel).set_Font($S24().Construct("Microsoft Sans Serif", 20, $T4E().Bold, $T61().Point, 0));
    (this.playerWinLabel.ForeColor = $T10().get_Yellow());
    (this.playerWinLabel.Location = $S1A().Construct(694, 721));
    (this.playerWinLabel).set_Name("playerWinLabel");
    (this.playerWinLabel.Size = $S11().Construct(140, 38));
    (this.playerWinLabel).set_TabIndex(63);
    (this.playerWinLabel).set_Text("0");
    (this.playerWinLabel).set_TextAlign($T4F().MiddleCenter);
    $T15().prototype.add_DoubleClick.call(this.playerWinLabel, $T18().New(this, function () { return $thisType.prototype.playerWinLabel_DoubleClick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "playerWinLabel_DoubleClick", $S30(), false); }.bind(this)));
    (this.TestingGroupBox.BackColor = $T10().get_Transparent());
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.autoPlayButton);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.waitButton);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.textBox1);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.button2);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.button1);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.button3);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.dealTurnButton);
    ($S07().CallVirtual("get_Controls", null, this.TestingGroupBox)).Add(this.comboBox1);
    (this.TestingGroupBox).set_Cursor($T65().get_Arrow());
    (this.TestingGroupBox.Location = $S1A().Construct(-3, 375));
    (this.TestingGroupBox).set_Name("TestingGroupBox");
    (this.TestingGroupBox.Size = $S11().Construct(351, 179));
    (this.TestingGroupBox).set_TabIndex(64);
    (this.TestingGroupBox).set_TabStop(false);
    (this.TestingGroupBox).set_Text("Testing Components");
    (this.TestingGroupBox).set_Visible(false);
    (this.autoPlayButton.ForeColor = $T10().get_Black());
    (this.autoPlayButton.Location = $S1A().Construct(226, 137));
    (this.autoPlayButton).set_Name("autoPlayButton");
    (this.autoPlayButton.Size = $S11().Construct(57, 38));
    (this.autoPlayButton).set_TabIndex(63);
    (this.autoPlayButton).set_Text("Auto Play");
    (this.autoPlayButton).set_UseVisualStyleBackColor(true);
    $T15().prototype.add_Click.call(this.autoPlayButton, $T18().New(this, function () { return $thisType.prototype.autoPlayButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "autoPlayButton_Click", $S31(), false); }.bind(this)));
    (this.waitButton.ForeColor = $T10().get_Black());
    (this.waitButton.Location = $S1A().Construct(178, 137));
    (this.waitButton).set_Name("waitButton");
    (this.waitButton.Size = $S11().Construct(42, 38));
    (this.waitButton).set_TabIndex(62);
    (this.waitButton).set_Text("Wait");
    (this.waitButton).set_UseVisualStyleBackColor(true);
    $T15().prototype.add_Click.call(this.waitButton, $T18().New(this, function () { return $thisType.prototype.waitButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "waitButton_Click", $S32(), false); }.bind(this)));
    (this.paytableGrid).set_AllowUserToAddRows(false);
    (this.paytableGrid).set_AllowUserToDeleteRows(false);
    (this.paytableGrid).set_AllowUserToResizeColumns(false);
    (this.paytableGrid).set_AllowUserToResizeRows(false);
    (this.paytableGrid.BackgroundColor = $T10().get_Navy());
    (this.paytableGrid).set_ColumnHeadersHeightSizeMode($T6A().AutoSize);
    (this.paytableGrid).set_ColumnHeadersVisible(false);
    ((this.paytableGrid).get_Columns()).AddRange(JSIL.Array.New($T34(), [this.TitleColumn, this.PT1, this.PT2, this.PT3, this.PT4, this.PT5]));
    dataGridViewCellStyle7.set_Alignment($T37().MiddleCenter);
    (dataGridViewCellStyle7.BackColor = $T6B().get_Window());
    dataGridViewCellStyle7.set_Font($S24().Construct("Microsoft Sans Serif", 8.25, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle7.ForeColor = $T10().get_White());
    (dataGridViewCellStyle7.SelectionBackColor = $T6B().get_Highlight());
    (dataGridViewCellStyle7.SelectionForeColor = $T6B().get_HighlightText());
    dataGridViewCellStyle7.set_WrapMode($T6C().False);
    (this.paytableGrid).set_DefaultCellStyle(dataGridViewCellStyle7);
    (this.paytableGrid.GridColor = $T10().get_Yellow());
    (this.paytableGrid.Location = $S1A().Construct(9, 58));
    (this.paytableGrid.Margin = $S33().Construct(0));
    (this.paytableGrid).set_Name("paytableGrid");
    (this.paytableGrid).set_RowHeadersVisible(false);
    (this.paytableGrid).set_ScrollBars($T69().None);
    (this.paytableGrid).set_SelectionMode($T6E().CellSelect);
    (this.paytableGrid.Size = $S11().Construct(279, 29));
    (this.paytableGrid).set_TabIndex(0);
    (dataGridViewCellStyle8.BackColor = $T10().get_Navy());
    dataGridViewCellStyle8.set_Font($S24().Construct("Microsoft Sans Serif", 9, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle8.ForeColor = $T10().get_Yellow());
    (dataGridViewCellStyle8.SelectionBackColor = $T10().get_Red());
    (dataGridViewCellStyle8.SelectionForeColor = $T10().get_Yellow());
    (this.TitleColumn).set_DefaultCellStyle(dataGridViewCellStyle8);
    (this.TitleColumn).set_HeaderText("Title Column");
    (this.TitleColumn).set_Name("TitleColumn");
    (this.TitleColumn).set_ReadOnly(true);
    (this.TitleColumn).set_Width(125);
    (dataGridViewCellStyle9.BackColor = $T10().get_Navy());
    dataGridViewCellStyle9.set_Font($S24().Construct("Microsoft Sans Serif", 9, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle9.ForeColor = $T10().get_Yellow());
    (dataGridViewCellStyle9.SelectionBackColor = $T10().get_Red());
    (dataGridViewCellStyle9.SelectionForeColor = $T10().get_Yellow());
    (this.PT1).set_DefaultCellStyle(dataGridViewCellStyle9);
    (this.PT1).set_HeaderText("Paytable 1");
    (this.PT1).set_Name("PT1");
    (this.PT1).set_Width(40);
    (dataGridViewCellStyle10.BackColor = $T10().get_Navy());
    dataGridViewCellStyle10.set_Font($S24().Construct("Microsoft Sans Serif", 9, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle10.ForeColor = $T10().get_Yellow());
    (dataGridViewCellStyle10.SelectionBackColor = $T10().get_Red());
    (dataGridViewCellStyle10.SelectionForeColor = $T10().get_Yellow());
    (this.PT2).set_DefaultCellStyle(dataGridViewCellStyle10);
    (this.PT2).set_HeaderText("Paytable 2");
    (this.PT2).set_Name("PT2");
    (this.PT2).set_Width(40);
    (dataGridViewCellStyle11.BackColor = $T10().get_Navy());
    dataGridViewCellStyle11.set_Font($S24().Construct("Microsoft Sans Serif", 9, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle11.ForeColor = $T10().get_Yellow());
    (dataGridViewCellStyle11.SelectionBackColor = $T10().get_Red());
    (dataGridViewCellStyle11.SelectionForeColor = $T10().get_Yellow());
    (this.PT3).set_DefaultCellStyle(dataGridViewCellStyle11);
    (this.PT3).set_HeaderText("Paytable 3");
    (this.PT3).set_Name("PT3");
    (this.PT3).set_Width(40);
    (dataGridViewCellStyle12.BackColor = $T10().get_Navy());
    dataGridViewCellStyle12.set_Font($S24().Construct("Microsoft Sans Serif", 9, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle12.ForeColor = $T10().get_Yellow());
    (dataGridViewCellStyle12.SelectionBackColor = $T10().get_Red());
    (dataGridViewCellStyle12.SelectionForeColor = $T10().get_Yellow());
    (this.PT4).set_DefaultCellStyle(dataGridViewCellStyle12);
    (this.PT4).set_HeaderText("Paytable 4");
    (this.PT4).set_Name("PT4");
    (this.PT4).set_Width(40);
    (dataGridViewCellStyle13.BackColor = $T10().get_Navy());
    dataGridViewCellStyle13.set_Font($S24().Construct("Microsoft Sans Serif", 9, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle13.ForeColor = $T10().get_Yellow());
    (dataGridViewCellStyle13.SelectionBackColor = $T10().get_Red());
    (dataGridViewCellStyle13.SelectionForeColor = $T10().get_Yellow());
    (this.PT5).set_DefaultCellStyle(dataGridViewCellStyle13);
    (this.PT5).set_HeaderText("Paytable 5");
    (this.PT5).set_Name("PT5");
    (this.PT5).set_Width(40);
    (this.bonusPokerPanel.BackColor = $T10().get_Transparent());
    (this.bonusPokerPanel).set_BackgroundImage($T68().get_BonusBackgroundNew());
    (this.bonusPokerPanel).set_BackgroundImageLayout($T67().None);
    ($S07().CallVirtual("get_Controls", null, this.bonusPokerPanel)).Add(this.label3);
    ($S07().CallVirtual("get_Controls", null, this.bonusPokerPanel)).Add(this.dataGridView1);
    ($S07().CallVirtual("get_Controls", null, this.bonusPokerPanel)).Add(this.paytableGrid);
    (this.bonusPokerPanel.Location = $S1A().Construct(899, 12));
    (this.bonusPokerPanel).set_Name("bonusPokerPanel");
    (this.bonusPokerPanel.Size = $S11().Construct(351, 757));
    (this.bonusPokerPanel).set_TabIndex(66);
    (this.label3).set_AutoSize(true);
    (this.label3).set_Font($S24().Construct("Cambria", 12, $T4E().Bold, $T61().Point, 0));
    (this.label3.ForeColor = $T10().get_Black());
    (this.label3.Location = $S1A().Construct(49, 9));
    (this.label3).set_Name("label3");
    (this.label3.Size = $S11().Construct(250, 19));
    (this.label3).set_TabIndex(3);
    (this.label3).set_Text("TEXAS HOLD'EM FOLDUP BONUS");
    (this.label3).set_TextAlign($T4F().MiddleCenter);
    (this.dataGridView1.BackgroundColor = $T10().FromArgb(133, 115, 101));
    (this.dataGridView1).set_BorderStyle($T4B().None);
    (this.dataGridView1).set_CellBorderStyle($T6F().None);
    (this.dataGridView1).set_ColumnHeadersHeightSizeMode($T6A().AutoSize);
    (this.dataGridView1).set_ColumnHeadersVisible(false);
    ((this.dataGridView1).get_Columns()).AddRange(JSIL.Array.New($T34(), [this.numberColumn, this.instruction]));
    dataGridViewCellStyle14.set_Alignment($T37().TopLeft);
    (dataGridViewCellStyle14.BackColor = $T10().FromArgb(133, 115, 101));
    dataGridViewCellStyle14.set_Font($S24().Construct("Microsoft Sans Serif", 8.25, $T4E().Bold, $T61().Point, 0));
    (dataGridViewCellStyle14.ForeColor = $T10().get_White());
    (dataGridViewCellStyle14.SelectionBackColor = $T10().FromArgb(133, 115, 101));
    (dataGridViewCellStyle14.SelectionForeColor = $T10().get_White());
    dataGridViewCellStyle14.set_WrapMode($T6C().True);
    (this.dataGridView1).set_DefaultCellStyle(dataGridViewCellStyle14);
    (this.dataGridView1.Location = $S1A().Construct(11, 296));
    (this.dataGridView1).set_Name("dataGridView1");
    (this.dataGridView1).set_RowHeadersVisible(false);
    dataGridViewCellStyle15.set_Font($S24().Construct("Microsoft Sans Serif", 8.25, $T4E().Regular, $T61().Point, 0));
    (this.dataGridView1).set_RowsDefaultCellStyle(dataGridViewCellStyle15);
    (this.dataGridView1).set_ScrollBars($T69().None);
    (this.dataGridView1.Size = $S11().Construct(333, 461));
    (this.dataGridView1).set_TabIndex(2);
    (this.numberColumn).set_HeaderText("Inst #");
    (this.numberColumn).set_Name("numberColumn");
    (this.numberColumn).set_Width(20);
    (this.instruction).set_HeaderText("Instruction");
    (this.instruction).set_Name("instruction");
    (this.instruction).set_ReadOnly(true);
    (this.instruction).set_Resizable($T6C().False);
    (this.instruction).set_Width(300);
    (this.smallSquareImageList).set_ImageStream($T5E().$Cast(resources.GetObject("smallSquareImageList.ImageStream")));
    (this.smallSquareImageList.TransparentColor = $T10().get_Transparent());
    ((this.smallSquareImageList).get_Images()).SetKeyName(0, "SmallSquareButtonUP.bmp");
    ((this.smallSquareImageList).get_Images()).SetKeyName(1, "SmallSquareButtonDN.bmp");
    (this.dealerButtonImageList).set_ImageStream($T5E().$Cast(resources.GetObject("dealerButtonImageList.ImageStream")));
    (this.dealerButtonImageList.TransparentColor = $T10().get_Lime());
    ((this.dealerButtonImageList).get_Images()).SetKeyName(0, "button16.bmp");
    (this.chipImageList).set_ImageStream($T5E().$Cast(resources.GetObject("chipImageList.ImageStream")));
    (this.chipImageList.TransparentColor = $T10().get_Lime());
    ((this.chipImageList).get_Images()).SetKeyName(0, "blue_chips_small.bmp");
    ((this.chipImageList).get_Images()).SetKeyName(1, "red_chips_small.bmp");
    (this.chipBox1.BackColor = $T10().get_Transparent());
    (this.chipBox1.Location = $S1A().Construct(60, 326));
    (this.chipBox1).set_Name("chipBox1");
    (this.chipBox1.Size = $S11().Construct(39, 24));
    (this.chipBox1).set_TabIndex(67);
    (this.chipBox1).set_TabStop(false);
    (this.chipBox1).set_Visible(false);
    (this.chipBox2.BackColor = $T10().get_Transparent());
    (this.chipBox2.Location = $S1A().Construct(112, 161));
    (this.chipBox2).set_Name("chipBox2");
    (this.chipBox2.Size = $S11().Construct(39, 24));
    (this.chipBox2).set_TabIndex(68);
    (this.chipBox2).set_TabStop(false);
    (this.chipBox2).set_Visible(false);
    (this.chipBox3.BackColor = $T10().get_Transparent());
    (this.chipBox3.Location = $S1A().Construct(321, 187));
    (this.chipBox3).set_Name("chipBox3");
    (this.chipBox3.Size = $S11().Construct(39, 24));
    (this.chipBox3).set_TabIndex(69);
    (this.chipBox3).set_TabStop(false);
    (this.chipBox3).set_Visible(false);
    (this.chipBox4.BackColor = $T10().get_Transparent());
    (this.chipBox4.Location = $S1A().Construct(568, 190));
    (this.chipBox4).set_Name("chipBox4");
    (this.chipBox4.Size = $S11().Construct(39, 24));
    (this.chipBox4).set_TabIndex(70);
    (this.chipBox4).set_TabStop(false);
    (this.chipBox4).set_Visible(false);
    (this.chipBox5.BackColor = $T10().get_Transparent());
    (this.chipBox5.Location = $S1A().Construct(668, 325));
    (this.chipBox5).set_Name("chipBox5");
    (this.chipBox5.Size = $S11().Construct(39, 24));
    (this.chipBox5).set_TabIndex(71);
    (this.chipBox5).set_TabStop(false);
    (this.chipBox5).set_Visible(false);
    (this.repeatBetButton).set_AutoEllipsis(true);
    (this.repeatBetButton.BackColor = $T10().get_Transparent());
    (this.repeatBetButton.FlatAppearance.BorderColor = $T10().FromArgb(192, 0, 0));
    ((this.repeatBetButton).get_FlatAppearance()).set_BorderSize(0);
    (this.repeatBetButton.FlatAppearance.MouseDownBackColor = $T10().FromArgb(192, 0, 0));
    (this.repeatBetButton.FlatAppearance.MouseOverBackColor = $T10().FromArgb(192, 0, 0));
    (this.repeatBetButton).set_FlatStyle($T63().Flat);
    (this.repeatBetButton).set_Font($S24().Construct("Microsoft Sans Serif", 10.75, $T4E().Bold, $T61().Point, 0));
    (this.repeatBetButton.ForeColor = $T10().get_White());
    (this.repeatBetButton).set_ImageIndex(0);
    (this.repeatBetButton).set_ImageList(this.bigButtonImageList);
    (this.repeatBetButton.Location = $S1A().Construct(64, 567));
    (this.repeatBetButton).set_Name("repeatBetButton");
    (this.repeatBetButton.Size = $S11().Construct(145, 46));
    (this.repeatBetButton).set_TabIndex(72);
    (this.repeatBetButton).set_Text("REPEAT LAST BET");
    (this.repeatBetButton).set_UseVisualStyleBackColor(false);
    (this.repeatBetButton).set_Visible(false);
    $T15().prototype.add_Click.call(this.repeatBetButton, $T18().New(this, function () { return $thisType.prototype.repeatBetButton_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "repeatBetButton_Click", $S34(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.repeatBetButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.repeatBetButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.addCreditButton.BackColor = $T10().get_Transparent());
    (this.addCreditButton).set_BackgroundImageLayout($T67().Stretch);
    (this.addCreditButton).set_Cursor($T65().get_Hand());
    (this.addCreditButton).set_DialogResult($T66().OK);
    ((this.addCreditButton).get_FlatAppearance()).set_BorderSize(0);
    (this.addCreditButton).set_FlatStyle($T63().Flat);
    (this.addCreditButton).set_ImageIndex(0);
    (this.addCreditButton).set_ImageList(this.smallWideButtonImageList);
    (this.addCreditButton.Location = $S1A().Construct(84, 675));
    (this.addCreditButton).set_Name("addCreditButton");
    (this.addCreditButton.Size = $S11().Construct(101, 25));
    (this.addCreditButton).set_TabIndex(73);
    (this.addCreditButton).set_TabStop(false);
    (this.addCreditButton).set_Text("ADD CREDITS");
    (this.addCreditButton).set_UseVisualStyleBackColor(false);
    (this.addCreditButton).set_Visible(false);
    $T15().prototype.add_Click.call(this.addCreditButton, $T18().New(this, function () { return $thisType.prototype.addCredit_Click_1.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "addCredit_Click_1", $S35(), false); }.bind(this)));
    $T15().prototype.add_MouseDown.call(this.addCreditButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_down.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_down", $S26(), false); }.bind(this)));
    $T15().prototype.add_MouseUp.call(this.addCreditButton, $T64().New(this, function () { return $thisType.prototype.button_mouse_up.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "button_mouse_up", $S27(), false); }.bind(this)));
    (this.ContainerControl$AutoScaleDimensions = $S36().Construct(7, 13));
    this.set_AutoScaleMode($T72().Font);
    this.set_AutoScroll(true);
    this.set_BackgroundImage($T74().get_backgroundLeft_1());
    (this.Form$ClientSize = $S11().Construct(1262, 741));
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.addCreditButton);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.repeatBetButton);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.chipBox5);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.chipBox4);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.chipBox3);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.chipBox2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.chipBox1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.bonusPokerPanel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.TestingGroupBox);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.playerWinLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.winLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.label1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.bettingGroupBox);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.playerCreditLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.buttonImage0);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.buttonImage5);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.buttonImage4);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.buttonImage3);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.buttonImage2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.buttonImage1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.label2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.callLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.playerRaiseLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.playerBetLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.startButton);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.potLabel);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.newGameButton);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.river);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.turn);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.flop3);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.flop2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.flop1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player0hold2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player0hold1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player3hold2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player3hold1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player2hold2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player2hold1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player1hold2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player1hold1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player4hold1);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player4hold2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player5hold2);
    ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.player5hold1);
    this.set_Font($S24().Construct("Microsoft Sans Serif", 8.25, $T4E().Bold, $T61().Point, 0));
    (this.ForeColor = $T10().get_White());
    $T11().prototype.set_FormBorderStyle.call(this, $T75().SizableToolWindow);
    $T15().prototype.set_Name.call(this, "Form1");
    this.set_Text("Texas Hold Em Fold Up");
    (this.Form$TransparencyKey = $T10().get_Fuchsia());
    $T15().prototype.add_DoubleClick.call(this, $T18().New(this, function () { return $thisType.prototype.Form1_DoubleClick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "Form1_DoubleClick", $S37(), false); }.bind(this)));
    $IM02().Call(this.river, null);
    $IM02().Call(this.turn, null);
    $IM02().Call(this.flop3, null);
    $IM02().Call(this.flop2, null);
    $IM02().Call(this.flop1, null);
    $IM02().Call(this.player0hold2, null);
    $IM02().Call(this.player0hold1, null);
    $IM02().Call(this.player3hold2, null);
    $IM02().Call(this.player3hold1, null);
    $IM02().Call(this.player2hold2, null);
    $IM02().Call(this.player2hold1, null);
    $IM02().Call(this.player1hold2, null);
    $IM02().Call(this.player1hold1, null);
    $IM02().Call(this.player4hold1, null);
    $IM02().Call(this.player4hold2, null);
    $IM02().Call(this.player5hold2, null);
    $IM02().Call(this.player5hold1, null);
    $IM02().Call(this.buttonImage1, null);
    $IM02().Call(this.buttonImage2, null);
    $IM02().Call(this.buttonImage3, null);
    $IM02().Call(this.buttonImage4, null);
    $IM02().Call(this.buttonImage5, null);
    $IM02().Call(this.buttonImage0, null);
    (this.bettingGroupBox).ResumeLayout(false);
    (this.bettingGroupBox).PerformLayout();
    (this.TestingGroupBox).ResumeLayout(false);
    (this.TestingGroupBox).PerformLayout();
    $IM02().Call(this.paytableGrid, null);
    (this.bonusPokerPanel).ResumeLayout(false);
    (this.bonusPokerPanel).PerformLayout();
    $IM02().Call(this.dataGridView1, null);
    $IM02().Call(this.chipBox1, null);
    $IM02().Call(this.chipBox2, null);
    $IM02().Call(this.chipBox3, null);
    $IM02().Call(this.chipBox4, null);
    $IM02().Call(this.chipBox5, null);
    this.ResumeLayout(false);
    this.PerformLayout();
  }; 

  function Form1_InitializeNewGame () {
    this.shuffleDeck();
    var flag = this.testDataRetrieved;
    if (flag) {
      this.UseTestData();
    }
    this.testDataRetrieved = false;

    for (var player = 0; player < ($T04().playerSize | 0); ) {
      this.GamePlayers[player] = null;
      this.GamePlayers[player] = new ($T0D())();
      var num = player;
      player = ((num + 1) | 0);
    }
    this.restoreCardDefaults(false);
    this.DisableBettingButtons();
  }; 

  function Form1_isAnteBet () {
    return (this.GameState === $T27().Ante);
  }; 

  function Form1_IsPokerHandPossible (hand, player, FinalHand) {
    var SaveValue = 0;
    var PayType = 0;
    var HighCard = 0;
    var MembersOfStraight = 1;
    var highValue = 0;
    var oneOfaKind = false;
    var twoOfaKind = false;
    var threeOfaKind = false;
    var flush = false;
    var AceFound = false;
    var KingFound = false;
    var FinalSuit = JSIL.Array.New($T01(), 5);
    var FinalValue = JSIL.Array.New($T01(), 5);
    var possible = false;

    for (var x = 0; x < 5; ) {
      FinalSuit[x] = (this.GetCardSuit(FinalHand[x]) | 0);
      FinalValue[x] = (this.GetCardValue(FinalHand[x]) | 0);
      var flag = (FinalValue[x] | 0) === 13;
      if (flag) {
        KingFound = true;
      }
      var flag2 = (FinalValue[x] | 0) === 14;
      if (flag2) {
        AceFound = true;
        FinalValue[x] = 1;
      }
      var num = x;
      x = ((num + 1) | 0);
    }
    var FlushCount = (this.GetFlushCount(FinalSuit) | 0);
    var flag3 = FlushCount === 5;
    if (flag3) {
      flush = true;
      PayType = 15;
    }

    for (var x2 = 0; x2 < 5; ) {
      var XofaKind = 1;
      var CardValue = (FinalValue[x2] | 0);

      for (var a = ((x2 + 1) | 0); a < 5; ) {
        var flag4 = (FinalValue[a] | 0) === CardValue;
        if (flag4) {
          num = XofaKind;
          XofaKind = ((num + 1) | 0);
        }
        num = a;
        a = ((num + 1) | 0);
      }
      var flag5 = XofaKind > highValue;
      if (flag5) {
        highValue = XofaKind;
        SaveValue = CardValue;
      }
      num = x2;
      x2 = ((num + 1) | 0);
    }
    switch (highValue) {
      case 1: 
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        oneOfaKind = true;
        break;

      case 2: 
        twoOfaKind = true;
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        break;

      case 3: 
        threeOfaKind = true;
        var flag6 = (hand | 0) === 11;
        if (flag6) {
          possible = true;
        }
        PayType = 11;
        break;

      case 4: 
        this.GamePlayers[player].hand.XofaKindValue = SaveValue;
        var flag7 = (SaveValue > 10) || 
        (SaveValue === 1);
        if (flag7) {
          var flag8 = ((hand | 0) === 19) || 
          ((hand | 0) === 13);
          if (flag8) {
            possible = true;
          }
        } else {
          var flag9 = SaveValue > 5;
          if (flag9) {
            var flag10 = ((hand | 0) === 18) || 
            ((hand | 0) === 12);
            if (flag10) {
              possible = true;
            }
          } else {
            var flag11 = ((hand | 0) === 17) || 
            ((hand | 0) === 11);
            if (flag11) {
              possible = true;
            }
          }
        }
        break;

    }
    var flag12 = threeOfaKind | twoOfaKind;
    if (flag12) {
      XofaKind = 1;

      for (var x3 = 0; x3 < 5; ) {
        CardValue = (FinalValue[x3] | 0);

        for (var a2 = ((x3 + 1) | 0); a2 < 5; ) {
          var flag13 = CardValue !== SaveValue;
          if (flag13) {
            var flag14 = (FinalValue[a2] | 0) === CardValue;
            if (flag14) {
              num = XofaKind;
              XofaKind = ((num + 1) | 0);
              var flag15 = XofaKind > 1;
              if (flag15) {
                var flag16 = CardValue === 1;
                if (flag16) {
                  CardValue = 14;
                }
                this.GamePlayers[player].hand.TwoPairSecondValue = CardValue;
              }
            }
          }
          num = a2;
          a2 = ((num + 1) | 0);
        }
        num = x3;
        x3 = ((num + 1) | 0);
      }
      var flag17 = XofaKind === 2;
      if (flag17) {
        var flag18 = twoOfaKind;
        if (flag18) {
          twoOfaKind = false;
          PayType = 10;
        } else {
          PayType = 16;
        }
      }
      var flag19 = twoOfaKind;
      if (flag19) {
        PayType = 7;
      }
    }
    var connectRank = (this.GetConnectedStraightRank(FinalValue, SaveValue) | 0);
    var flag20 = AceFound;
    if (flag20) {
      var FinalValueAces = JSIL.Array.New($T01(), 5);

      for (var x4 = 0; x4 < 5; ) {
        FinalValueAces[x4] = (FinalValue[x4] | 0);
        var flag21 = (FinalValue[x4] | 0) === 1;
        if (flag21) {
          FinalValueAces[x4] = 14;
        }
        num = x4;
        x4 = ((num + 1) | 0);
      }
      var connectRankAces = (this.GetConnectedStraightRank(FinalValueAces, SaveValue) | 0);
      var flag22 = connectRankAces > connectRank;
      if (flag22) {
        connectRank = connectRankAces;
      }
    }
    var straightRank = (this.GetInsideStraightRank(FinalValue) | 0);
    var flag23 = AceFound;
    if (flag23) {
      var FinalValueAces2 = JSIL.Array.New($T01(), 5);

      for (var x5 = 0; x5 < 5; ) {
        FinalValueAces2[x5] = (FinalValue[x5] | 0);
        var flag24 = (FinalValue[x5] | 0) === 1;
        if (flag24) {
          FinalValueAces2[x5] = 14;
        }
        num = x5;
        x5 = ((num + 1) | 0);
      }
      var flag25 = (this.GetInsideStraightRank(FinalValueAces2) | 0) > straightRank;
      if (flag25) {
        straightRank = (this.GetInsideStraightRank(FinalValueAces2) | 0);
      }
    }
    var flag26 = oneOfaKind;
    if (flag26) {

      for (var x6 = 0; x6 < 5; ) {
        var flag27 = (FinalValue[x6] | 0) > HighCard;
        if (flag27) {
          HighCard = (FinalValue[x6] | 0);
        }
        num = x6;
        x6 = ((num + 1) | 0);
      }
      var flag28 = KingFound & AceFound;
      if (flag28) {

      $loop8: 
        for (var x7 = 0; x7 < 5; ) {
          var flag29 = (FinalValue[x7] | 0) === 1;
          if (flag29) {
            FinalValue[x7] = 14;
            HighCard = 14;
            break $loop8;
          }
          num = x7;
          x7 = ((num + 1) | 0);
        }
      }

      for (var x8 = 1; x8 <= 5; ) {
        var flag30 = (FinalValue[((x8 - 1) | 0)] | 0) === ((HighCard - 1) | 0);
        if (flag30) {
          HighCard = (FinalValue[((x8 - 1) | 0)] | 0);
          num = MembersOfStraight;
          MembersOfStraight = ((num + 1) | 0);
          x8 = 0;
        }
        num = x8;
        x8 = ((num + 1) | 0);
      }
      var flag31 = MembersOfStraight === 5;
      if (flag31) {
        PayType = 14;
        var flag32 = flush;
        if (flag32) {
          PayType = 20;
        }
        var flag33 = flush & AceFound;
        if (flag33) {
          var flag34 = KingFound;
          if (flag34) {
            PayType = 21;
          }
        }
      }
    }
    var flag35 = straightRank > MembersOfStraight;
    if (flag35) {
      MembersOfStraight = straightRank;
    }
    var flag36 = PayType < 7;
    if (flag36) {
      var flag37 = FlushCount === 3;
      if (flag37) {
        var flag38 = PayType < 5;
        if (flag38) {
          PayType = 5;
        }
      }
      var flag39 = FlushCount === 4;
      if (flag39) {
        var flag40 = PayType < 6;
        if (flag40) {
          PayType = 6;
        }
      }
      var flag41 = MembersOfStraight === 3;
      if (flag41) {
        var flag42 = PayType < 3;
        if (flag42) {
          PayType = 3;
        }
      }
      var flag43 = MembersOfStraight === 4;
      if (flag43) {
        var flag44 = PayType < 4;
        if (flag44) {
          PayType = 4;
        }
      }
      var flag45 = connectRank === 4;
      if (flag45) {
        var flag46 = PayType < 2;
        if (flag46) {
          PayType = 2;
        }
      }
      var flag47 = connectRank === 3;
      if (flag47) {
        var flag48 = PayType < 1;
        if (flag48) {
          PayType = 1;
        }
      }
    }
    var flag49 = (PayType === 7) || 
    (PayType === 11);
    if (flag49) {
      var flag50 = (SaveValue > 10) || 
      (SaveValue === 1);
      if (flag50) {
        PayType = ((PayType + 2) | 0);
      } else {
        var flag51 = SaveValue > 5;
        if (flag51) {
          num = PayType;
          PayType = ((num + 1) | 0);
        }
      }
    }
    this.GetFiveCardTotal(FinalHand);
    return possible;
  }; 

  function Form1_LogResults ($exception) {
    if (this.logging) {
      var tp = 999;
      var fs = $S14().Construct(JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.log"), $T45().OpenOrCreate);
      this.logWriter = $S15().Construct(fs);
      fs.Seek($T77().Create(0, 0, 0), $T78().End);
      if (+this.creditsWon > 0) {
        tp = +((1 / +((+this.creditsPlayed / +this.creditsWon))));
      }
      var CreditsPlayed = $T08().Format("{0:0.0}", this.creditsPlayed);
      var CreditsWon = $T08().Format("{0:0.0}", this.creditsWon);
      var GamePercentage = $T08().Format("{0:0%}", tp);
      var writestring = (JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), ["#", (this.gameNumber).toString(), " CP= ", CreditsPlayed, " CW= ", CreditsWon, " GP = ", GamePercentage])));
      try {
        (this.textBox1).AppendText(JSIL.ConcatString(writestring, $T32().get_NewLine()));
        $S16().CallVirtual("WriteLine", null, this.logWriter, writestring);
      } catch ($exception) {
      }
      var num = (this.gameNumber | 0);
      this.gameNumber = ((num + 1) | 0);
      (this.logWriter).Close();
      fs.Dispose();
      (this.logWriter).Dispose();
      try {
        var fds = $S14().Construct(JSIL.ConcatString($T1A().GetCurrentDirectory(), "\\TexasHoldEm.dat"), $T45().OpenOrCreate);
        this.dataWriter = $S15().Construct(fds);
        fds.Seek($T77().Create(0, 0, 0), $T78().Begin);
        $S16().CallVirtual("WriteLine", null, this.dataWriter, JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [(this.gameNumber).toString(), " ", (this.creditsPlayed).toString(), " ", (this.creditsWon).toString()])));
        (this.dataWriter).Close();
        (this.dataWriter).Dispose();
        fds.Dispose();
      } catch ($exception) {
      }
    }
  }; 

  function Form1_newGameButton_Click (sender, e) {
    this.StartNewGame();
  }; 

  function Form1_NextPlayer () {
    (this.nextPlayerTimer).Stop();
    var bp = (this.buttonPosition | 0);
    var num = (this.get_CurrentBetPosition() | 0);
    this.set_CurrentBetPosition(((num + 1) | 0));
    var flag = this.CheckForAllInShowdown();
    if (flag) {

      for (var x = 1; x < ($T04().playerSize | 0); ) {
        var allIn = this.virtualPlayers[x].AllIn;
        if (allIn) {
          this.ShowPlayerCards(x, false);
        }
        num = x;
        x = ((num + 1) | 0);
      }
    }
    var flag2 = this.CheckForBetFinish();
    if (flag2) {
      var flag3 = this.checkForPlayerWin();
      if (flag3) {
        this.AwardPlayerWin();
        return;
      }
      if (this.GameState === $T27().RiverBet) {
        this.EndGame();
        return;
      }
      this.finishThisRoundBetting();
      this.DealNextRound();
    }
    var flag5 = (this.get_CurrentBetPosition() | 0) > 0;
    if (flag5) {
      this.DisableBettingButtons();
      this.BetPlayer(this.get_CurrentBetPosition());
    } else {
      var flag6 = this.checkForPlayerWin();
      if (flag6) {
        this.AwardPlayerWin();
      } else {
        var autoPlay = this.AutoPlay;
        if (autoPlay) {
          var flag7 = +this.get_PlayerCredits() < 100;
          if (flag7) {
            this.set_PlayerCredits(+($T04().jurisdictionalBetLimit));
          }
          this.BetPlayer(this.get_CurrentBetPosition());
        } else {
          this.EnableBettingButtons();
        }
      }
    }
  }; 

  function Form1_nextPlayerTimer_Tick (sender, e) {
    if (!this.nextPlayerWait) {
      this.NextPlayer();
    } else {
      (this.nextPlayerTimer).Stop();
      var flag2 = $S38().CallStatic($T2E(), "Show", null, "Next Player Wait", "Waiting", $T79().OK) === $T66().OK;
      if (flag2) {
        this.NextPlayer();
      }
    }
  }; 

  function Form1_playerAllInButton_Click (sender, e) {
    if (!this.virtualPlayers[0].AllIn) {
      var playerCallAmount = +this.GetCurrentBet() - +this.virtualPlayers[0].CurrentBetAmount;
      var flag2 = +this.get_PlayerCredits() < playerCallAmount;
      if (flag2) {
        playerCallAmount = +this.get_PlayerCredits();
      }
      var raiseValue = +this.get_PlayerCredits() - playerCallAmount;
      this.virtualPlayers[0].AllIn = true;
      var virtualPlayer = this.virtualPlayers[0];
      virtualPlayer.RoundRaiseAmount = +virtualPlayer.RoundRaiseAmount + raiseValue;
      this.set_PlayerBet(+this.get_PlayerBet() + playerCallAmount);
      this.set_PlayerRaise(+this.get_PlayerRaise() + raiseValue);
      this.playerCurrentBet = +this.playerCurrentBet + (playerCallAmount + raiseValue);
      this.creditsPlayed = +this.creditsPlayed + +this.get_PlayerCredits();
      this.set_PlayerCredits(0);
      this.ThisRoundRaisePercentage = (((this.ThisRoundRaisePercentage | 0) + (this.GetPotRaisePercentage(raiseValue) | 0)) | 0);
    } else {
      this.playerCurrentBet = 0;
    }
    this.BetPlayer(this.get_CurrentBetPosition());
  }; 

  function Form1_playerCallButton_Click (sender, e) {
    var pBet = +this.GetCurrentBet() - +this.virtualPlayers[0].CurrentBetAmount;
    this.set_PotAmount(+this.get_PotAmount() + pBet);
    this.set_PlayerCredits(+this.get_PlayerCredits() - pBet);
    this.creditsPlayed = +this.creditsPlayed + pBet;
    this.playerCurrentBet = pBet;
    this.set_PlayerBet(+this.get_PlayerBet() + pBet);
    this.BetPlayer(this.get_CurrentBetPosition());
  }; 

  function Form1_playerCheckButton_Click (sender, e) {
    this.playerCurrentBet = 0;
    this.virtualPlayers[0].RoundChecked = true;
    this.BetPlayer(this.get_CurrentBetPosition());
  }; 

  function Form1_playerCreditLabel_MouseDoubleClick (sender, e) {
    this.set_PlayerCredits(+this.get_PlayerCredits() + +($T04().jurisdictionalBetLimit));
  }; 

  function Form1_playerFoldButton_Click (sender, e, $exception) {
    (this.buttonSound).Play();
    var flag = (sender !== this.playerFoldButton) && 
    (sender !== this.playerSurrenderButton);
    if (flag) {
      var test = this.playerSurrenderButton;
      sender = test;
    }
    var button = $T3C().$Cast(sender);
    var flag2 = button === this.playerSurrenderButton;
    if (flag2) {
      this.set_PlayerCredits(+this.get_PlayerCredits() + +((+this.get_PlayerBet() / 2)));
      this.creditsWon = +this.creditsWon + +((+this.get_PlayerBet() / 2));
      this.set_WinAmount(+((+this.get_PlayerBet() / 2)));
      this.PlayerSurrender = true;
      this.buttonPosition = 0;
      this.IncrementButtonPosition(false);
    }
    if ((this.GameState === $T27().FlopBet) || 
      (this.GameState === $T27().TurnBet) || (this.GameState === $T27().RiverBet)) {
      var playerWinRank = (this.GetFiveCardRanking(0) | 0);
      var flag4 = (this.AdjustWinRank(playerWinRank) | 0) >= (this.videoPokerLowRank | 0);
      if (flag4) {
        var videoBonus = +this.GetVideoPokerBonus(playerWinRank);
        this.SetPaytableSelectedWin(playerWinRank);
        videoBonus *= +(this.videoMultiplier);
        this.set_PlayerCredits(+this.get_PlayerCredits() + videoBonus);
        this.creditsWon = +this.creditsWon + videoBonus;
        this.set_WinAmount(+this.get_WinAmount() + videoBonus);
        this.videoPokerWin = videoBonus;
      }
    }
    if (+this.videoPokerWin > 0) {
      (this.videoWin).Play();
    }
    this.GameState = $T27().PlayerLose;
    this.set_PotAmount(0);
    this.clearCreditLabels();
    try {
      this.LogResults();
    } catch ($exception) {
    }
    this.DisableBettingButtons();
    (this.bettingGroupBox).set_Visible(false);
    var flag6 = (+this.lastBet > 0) && 
    (+this.lastBet <= +this.get_PlayerCredits());
    if (flag6) {
      (this.repeatBetButton).set_Text(JSIL.ConcatString("REPEAT LAST BET OF ", $T08().Format("{0:C}", this.lastBet)));
      (this.repeatBetButton).set_Visible(true);
    }
    (this.newGameButton).set_Visible(true);
    this.startGameOverTimer(false);
  }; 

  function Form1_playerRaiseButton_Click (sender, e) {
    this.betStringPtr = (this._raise | 0);
    var flag = $T66().OK === (this.bettingWindow).ShowDialog();
    if (flag) {
      var playerCallAmount = +this.GetCurrentBet() - +this.virtualPlayers[0].CurrentBetAmount;
      var flag2 = (+this.bettingWindow.betAmount === 0) || 
      ((playerCallAmount + +this.bettingWindow.betAmount) > +this.get_PlayerCredits());
      if (flag2) {
        return;
      }
      var raiseValue = +this.bettingWindow.betAmount;
      this.playerCurrentBet = +this.playerCurrentBet + (playerCallAmount + raiseValue);
      this.set_PlayerCredits(+this.get_PlayerCredits() - (raiseValue + playerCallAmount));
      this.creditsPlayed = +this.creditsPlayed + (raiseValue + playerCallAmount);
      var virtualPlayer = this.virtualPlayers[0];
      virtualPlayer.RoundRaiseAmount = +virtualPlayer.RoundRaiseAmount + raiseValue;
      this.set_PlayerBet(+this.get_PlayerBet() + playerCallAmount);
      this.set_PlayerRaise(+this.get_PlayerRaise() + raiseValue);
      this.virtualPlayerRaised = 0;
      this.ThisRoundRaisePercentage = (((this.ThisRoundRaisePercentage | 0) + (this.GetPotRaisePercentage(raiseValue) | 0)) | 0);
    }
    this.BetPlayer(this.get_CurrentBetPosition());
  }; 

  function Form1_playerWinLabel_DoubleClick (sender, e) {
    this.testGame = !this.testGame;
    (this.TestingGroupBox).set_Visible(this.testGame);
  }; 

  function Form1_RaisePlayer (player, amount) {
    var DollarAmount = $T08().Format("{0:C}", amount);
    $S09().CallVirtual("UpdateBetLabel", null, this, JSIL.ConcatString("RAISE ", DollarAmount), player, $T10().get_Yellow());
    this.UpdateCreditLabel(player);
    var virtualPlayer = this.virtualPlayers[player];
    virtualPlayer.RoundRaiseAmount = +virtualPlayer.RoundRaiseAmount + +amount;
    (this.raiseSound).Play();
  }; 

  function Form1_RenewVirtualPlayerProfiles () {

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.virtualPlayers[x].TwoCardBet = 0;
      this.virtualPlayers[x].FlopBet = 0;
      this.virtualPlayers[x].TurnBet = 0;
      this.virtualPlayers[x].RiverBet = 0;
      this.virtualPlayers[x].CurrentBetAmount = 0;
      this.virtualPlayers[x].Folded = false;
      this.virtualPlayers[x].AllIn = false;
      this.virtualPlayers[x].HighCard = 0;
      this.virtualPlayers[x].RoundRaiseAmount = 0;
      this.virtualPlayers[x].RoundChecked = false;
      this.virtualPlayers[x].FinalHandRank = 0;
      this.virtualPlayers[x].Bluffing = this.getWeightedResult(this.virtualPlayers[x].BluffPercentage);
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_repeatBetButton_Click (sender, e) {
    this.autoStart = true;
    this.StartNewGame();
  }; 

  function Form1_ResetVirtualPlayerVars () {
    this.playerCurrentBet = 0;

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.virtualPlayers[x].CurrentBetAmount = 0;
      this.virtualPlayers[x].RoundRaiseAmount = 0;
      this.virtualPlayers[x].RoundChecked = false;
      this.virtualPlayers[x].FinalHandRank = 0;
      this.GamePlayers[x].RoundRaiseCount = 0;
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_restoreCardDefaults (firstPass) {
    (this.cardPoints[0]).set_X((this.player0hold1).get_Left());
    (this.cardPoints[0]).set_Y((this.player0hold1).get_Top());
    (this.cardPoints[1]).set_X((this.player0hold2).get_Left());
    (this.cardPoints[1]).set_Y((this.player0hold2).get_Top());
    (this.cardPoints[2]).set_X((this.player1hold1).get_Left());
    (this.cardPoints[2]).set_Y((this.player1hold1).get_Top());
    (this.cardPoints[3]).set_X((this.player1hold2).get_Left());
    (this.cardPoints[3]).set_Y((this.player1hold2).get_Top());
    (this.cardPoints[4]).set_X((this.player2hold1).get_Left());
    (this.cardPoints[4]).set_Y((this.player2hold1).get_Top());
    (this.cardPoints[5]).set_X((this.player2hold2).get_Left());
    (this.cardPoints[5]).set_Y((this.player2hold2).get_Top());
    (this.cardPoints[6]).set_X((this.player3hold1).get_Left());
    (this.cardPoints[6]).set_Y((this.player3hold1).get_Top());
    (this.cardPoints[7]).set_X((this.player3hold2).get_Left());
    (this.cardPoints[7]).set_Y((this.player3hold2).get_Top());
    (this.cardPoints[8]).set_X((this.player4hold1).get_Left());
    (this.cardPoints[8]).set_Y((this.player4hold1).get_Top());
    (this.cardPoints[9]).set_X((this.player4hold2).get_Left());
    (this.cardPoints[9]).set_Y((this.player4hold2).get_Top());
    (this.cardPoints[10]).set_X((this.player5hold1).get_Left());
    (this.cardPoints[10]).set_Y((this.player5hold1).get_Top());
    (this.cardPoints[11]).set_X((this.player5hold2).get_Left());
    (this.cardPoints[11]).set_Y((this.player5hold2).get_Top());

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      ($S07().Call($T15().prototype, "get_Controls", null, this)).Remove(this.betLabels[x]);
      this.betLabels[x] = null;
      this.betLabels[x] = new ($T03())();
      var flag = x === 0;
      if (flag) {
        (this.betLabels[x].Location = $S1A().Construct(((((this.cardPoints[Math.imul(x, 2)]).get_X() | 0) + 40) | 0), ((((this.cardPoints[Math.imul(x, 2)]).get_Y() | 0) - 20) | 0)));
      } else {
        (this.betLabels[x].Location = $S1A().Construct(((((this.cardPoints[Math.imul(x, 2)]).get_X() | 0) + 70) | 0), (this.cardPoints[Math.imul(x, 2)]).get_Y()));
      }
      (this.betLabels[x]).set_Name(JSIL.ConcatString("betLabel", x));
      (this.betLabels[x]).set_Text("");
      (this.betLabels[x]).set_Visible(false);
      (this.betLabels[x]).set_Font((this.label1).get_Font());
      (this.betLabels[x].BackColor = (this.label1).get_BackColor());
      (this.betLabels[x]).set_AutoSize(true);
      ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.betLabels[x]);
      var num = x;
      x = ((num + 1) | 0);
    }

    for (var x2 = 1; x2 < ($T04().playerSize | 0); ) {
      ($S07().Call($T15().prototype, "get_Controls", null, this)).Remove(this.creditLabels[x2]);
      this.creditLabels[x2] = null;
      this.creditLabels[x2] = new ($T03())();
      (this.creditLabels[x2].Location = $S1A().Construct(((((this.cardPoints[Math.imul(x2, 2)]).get_X() | 0) - 25) | 0), ((((this.cardPoints[Math.imul(x2, 2)]).get_Y() | 0) + 90) | 0)));
      (this.creditLabels[x2]).set_Name(JSIL.ConcatString("creditLabel", x2));
      (this.creditLabels[x2]).set_Text("");
      (this.creditLabels[x2]).set_Visible(true);
      (this.creditLabels[x2]).set_Font((this.label1).get_Font());
      (this.creditLabels[x2].BackColor = (this.label1).get_BackColor());
      (this.creditLabels[x2]).set_AutoSize(true);
      ($S07().Call($T15().prototype, "get_Controls", null, this)).Add(this.creditLabels[x2]);
      num = x2;
      x2 = ((num + 1) | 0);
    }
  }; 

  function Form1_RoundDown (Amount) {
    var evenAmount = +Amount % 1;
    Amount -= evenAmount;
    return Amount;
  }; 

  function Form1_RoundUp (Amount) {
    var flag = (+Amount % 1) !== 0;
    if (flag) {
      var result = +this.RoundDown(+Amount + 1);
    } else {
      result = +Amount;
    }
    return result;
  }; 

  function Form1_set_CallAmount (value) {
    this.callAmount = +value;
    var DollarAmount = $T08().Format("{0:C}", this.callAmount);
    (this.callLabel).set_Text(DollarAmount);
  }; 

  function Form1_set_CurrentBetPosition (value) {
    this.currentBetPosition = (value | 0);
    if ((this.currentBetPosition | 0) > 5) {
      this.currentBetPosition = 0;
    }
  }; 

  function Form1_set_PlayerBet (value) {
    this.playerBet = +value;
    var DollarAmount = $T08().Format("{0:C}", this.playerBet);
    (this.playerBetLabel).set_Text(DollarAmount);
  }; 

  function Form1_set_PlayerCredits (value) {
    if (+this.jurisdictionalLimit === 0) {
      this.set_RealPlayerCredits(value);
    } else {
      var flag2 = +value >= +this.jurisdictionalLimit;
      if (flag2) {
        (this.creditLimitWindow).set_DollarAmount(this.jurisdictionalLimit);
        this.set_RealPlayerCredits(+this.get_RealPlayerCredits() + (+value - +this.jurisdictionalLimit));
      } else {
        var difference = +this.jurisdictionalLimit - +value;
        (this.creditLimitWindow).set_DollarAmount(value);
      }
    }
  }; 

  function Form1_set_PlayerRaise (value) {
    this.playerRaise = +value;
    var DollarAmount = $T08().Format("{0:C}", this.playerRaise);
    (this.playerRaiseLabel).set_Text(DollarAmount);
    (this.playerRaiseLabel).Invalidate();
    (this.playerRaiseLabel).Update();
  }; 

  function Form1_set_PotAmount (value) {
    this.potAmount = +value;
    var DollarAmount = $T08().Format("{0:C}", this.potAmount);
    (this.potLabel).set_Text(DollarAmount);
    (this.potLabel).Invalidate();
    (this.potLabel).Update();
  }; 

  function Form1_set_RealPlayerCredits (value) {
    this.playerCredits = +value;
    var DollarAmount = $T08().Format("{0:C}", this.playerCredits);
    (this.playerCreditLabel).set_Text(DollarAmount);
    (this.playerCreditLabel).Invalidate();
    (this.playerCreditLabel).Update();
  }; 

  function Form1_set_VideoMultiplier (value) {
    var flag = (value | 0) > ((((this.paytableGrid).get_ColumnCount() | 0) - 1) | 0);
    if (flag) {
      this.videoMultiplier = ((((this.paytableGrid).get_ColumnCount() | 0) - 1) | 0);
    } else {
      this.videoMultiplier = (value | 0);
    }
  }; 

  function Form1_set_WinAmount (value) {
    this.win = +value;
    var DollarAmount = $T08().Format("{0:C}", this.win);
    (this.playerWinLabel).set_Text(DollarAmount);
    if (+this.win > 0) {
      (this.videoWin).Play();
    }
  }; 

  function Form1_SetPaytableSelectedColumn (column) {

    for (var row = 0; row < ((this.paytableGrid).get_RowCount() | 0); ) {

      for (var col = 0; col < ((this.paytableGrid).get_ColumnCount() | 0); ) {
        var flag = col === (column | 0);
        if (flag) {
          ($S0D().CallVirtual("get_Item", null, this.paytableGrid, col, row)).set_Selected(true);
        } else {
          ($S0D().CallVirtual("get_Item", null, this.paytableGrid, col, row)).set_Selected(false);
        }
        var num = col;
        col = ((num + 1) | 0);
      }
      num = row;
      row = ((num + 1) | 0);
    }
    var flag2 = (column | 0) > ((this.paytableGrid).get_ColumnCount() | 0);
    if (flag2) {
    }
  }; 

  function Form1_SetPaytableSelectedWin (rank) {
    this.SetPaytableSelectedColumn(9);
    var tempRank = (this.AdjustWinRank(rank) | 0);
    tempRank = ((21 - tempRank) | 0);
    var flag = (this.selectedColumn | 0) > ((((this.paytableGrid).get_ColumnCount() | 0) - 1) | 0);
    if (flag) {
      this.selectedColumn = ((((this.paytableGrid).get_ColumnCount() | 0) - 1) | 0);
    }
    var flag2 = (rank | 0) >= (this.videoPokerLowRank | 0);
    if (flag2) {
      ($S0D().CallVirtual("get_Item", null, this.paytableGrid, this.selectedColumn, tempRank)).set_Selected(true);
      ($S0D().CallVirtual("get_Item", null, this.paytableGrid, 0, tempRank)).set_Selected(true);
    }
  }; 

  function Form1_setPlayerWinCards (player, Hand) {

    for (var x = 0; x < 5; ) {
      this.GamePlayers[player].winCards[x] = (Hand[x] | 0);
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_ShowPlayerCards (player, fold) {
    this.ClearPlayerCards(player);
    if (fold) {
      var var_1_1F_cp_0 = this.cardPoints;
      var var_1_1F_cp_1 = ((Math.imul(player, 2) + 1) | 0);
      (var_1_1F_cp_0[var_1_1F_cp_1]).set_X(((((var_1_1F_cp_0[var_1_1F_cp_1]).get_X() | 0) + (this.offsetX | 0)) | 0));
    }
    (this.cardImages).Draw(this.formHwnd, this.cardPoints[Math.imul(player, 2)].MemberwiseClone(), (this.playerHands).Get(player, 0));
    (this.cardImages).Draw(this.formHwnd, this.cardPoints[((Math.imul(player, 2) + 1) | 0)].MemberwiseClone(), (this.playerHands).Get(player, 1));
  }; 

  function Form1_shuffleDeck () {
    this.deckPtr = 0;

    while ((this.deckPtr | 0) < 52) {
      this.deck[this.deckPtr] = 255;
      var num = (this.deckPtr | 0);
      this.deckPtr = ((num + 1) | 0);
    }
    this.deckPtr = 0;

    for (var i = 0; i < 52; ) {
      var temp = ((this.rand).Next(52) | 0);

    $loop2: 
      for (var a = 0; a <= i; ) {
        var flag = temp === (this.deck[a] | 0);
        if (flag) {
          num = i;
          i = ((num - 1) | 0);
          break $loop2;
        }
        var flag2 = a === i;
        if (flag2) {
          this.deck[i] = temp;
        }
        num = a;
        a = ((num + 1) | 0);
      }
      num = i;
      i = ((num + 1) | 0);
    }
  }; 

  function Form1_ShuffleVirtualPlayers () {
    var players = JSIL.Array.New($T01(), 5);

    for (var i = 0; i < 5; ) {
      var temp = ((this.rand).Next(1, (((this.virtualPlayerCount | 0) + 1) | 0)) | 0);

    $loop1: 
      for (var a = 0; a <= i; ) {
        var flag = temp === (players[a] | 0);
        if (flag) {
          var num = i;
          i = ((num - 1) | 0);
          break $loop1;
        }
        var flag2 = a === i;
        if (flag2) {
          players[i] = temp;
        }
        num = a;
        a = ((num + 1) | 0);
      }
      num = i;
      i = ((num + 1) | 0);
    }

    for (var x = 1; x < (this.virtualPlayerCount | 0); ) {
      this.virtualPlayers[x] = null;
      num = x;
      x = ((num + 1) | 0);
    }

    for (var x2 = 1; x2 < ($T04().playerSize | 0); ) {
      var flag3 = this.virtualPlayers[x2] === null;
      if (flag3) {
        this.virtualPlayers[x2] = new ($T07())();
        this.virtualPlayers[x2] = this.virtualTempPlayers[players[((x2 - 1) | 0)]];
      }
      num = x2;
      x2 = ((num + 1) | 0);
    }
  }; 

  function Form1_StartBetting () {
    this.set_CurrentBetPosition((((this.buttonPosition | 0) + 1) | 0));

    do {
      var flag = (this.get_CurrentBetPosition() | 0) > 0;
      if (flag) {
        this.BetPlayer(this.get_CurrentBetPosition());
        var num = (this.get_CurrentBetPosition() | 0);
        this.set_CurrentBetPosition(((num + 1) | 0));
      }
    } while ((this.get_CurrentBetPosition() | 0) > 0);
  }; 

  function Form1_startButton_Click (sender, e) {
    (this.addCreditButton).set_Visible(false);
    this.autoStart = false;
    this.lastBet = +this.anteBet;
    (this.buttonSound).Play();
    this.clearBetLabels();
    this.AntePotAmount = +this.get_PotAmount();
    this.FlopPotAmount = 0;
    this.TurnPotAmount = 0;
    this.RiverPotAmount = 0;
    this.playerCurrentBet = 0;

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.virtualPlayers[x].CurrentBetAmount = 0;
      this.virtualPlayers[x].Credits = +this.get_PlayerCredits();
      this.virtualPlayers[x].Ante = +this.anteBet;
      var num = x;
      x = ((num + 1) | 0);
    }
    (this.paytableGrid).set_Enabled(false);
    this.set_PlayerRaise(0);
    this.anteBet = 0;
    this.PlayerSurrender = false;
    this.stopGameOverTimer();
    (this.startButton).set_Visible(false);
    (this.newGameButton).set_Visible(false);
    (this.repeatBetButton).set_Visible(false);
    this.GameState = $T27().HoldCardBet;
    this.RenewVirtualPlayerProfiles();
    this.ThisRoundRaisePercentage = 0;
    this.set_CurrentBetPosition(this.buttonPosition);
    this.DealNextRound();
    this.EvalPlayerHands(true, false, false, false);
    this.NextPlayer();
  }; 

  function Form1_startGame () {
    (this.addCreditButton).set_Visible(false);
    this.autoStart = false;
    this.lastBet = +this.anteBet;
    (this.buttonSound).Play();
    this.clearBetLabels();
    this.AntePotAmount = +this.get_PotAmount();
    this.FlopPotAmount = 0;
    this.TurnPotAmount = 0;
    this.RiverPotAmount = 0;
    this.playerCurrentBet = 0;

    for (var x = 0; x < ($T04().playerSize | 0); ) {
      this.virtualPlayers[x].CurrentBetAmount = 0;
      this.virtualPlayers[x].Credits = +this.get_PlayerCredits();
      this.virtualPlayers[x].Ante = +this.anteBet;
      var num = x;
      x = ((num + 1) | 0);
    }
    (this.paytableGrid).set_Enabled(false);
    this.set_PlayerRaise(0);
    this.anteBet = 0;
    this.PlayerSurrender = false;
    this.stopGameOverTimer();
    (this.startButton).set_Visible(false);
    (this.newGameButton).set_Visible(false);
    (this.repeatBetButton).set_Visible(false);
    this.GameState = $T27().HoldCardBet;
    this.RenewVirtualPlayerProfiles();
    this.ThisRoundRaisePercentage = 0;
    this.set_CurrentBetPosition(this.buttonPosition);
    this.DealNextRound();
    this.EvalPlayerHands(true, false, false, false);
    this.NextPlayer();
  }; 

  function Form1_startGameOverTimer (win) {
    if (+this.jurisdictionalLimit !== 0) {
      var flag2 = +this.get_RealPlayerCredits() < +this.jurisdictionalLimit;
      if (flag2) {
        (this.addCreditButton).set_Visible(true);
      }
      var flag3 = +this.get_RealPlayerCredits() < (+this.jurisdictionalLimit - +this.get_PlayerCredits());
      if (flag3) {
        (this.addCreditButton).set_Visible(true);
        this.set_PlayerCredits(+this.get_PlayerCredits() + +this.get_RealPlayerCredits());
        this.set_RealPlayerCredits(0);
      } else {
        this.set_RealPlayerCredits(+this.get_RealPlayerCredits() - (+this.jurisdictionalLimit - +this.get_PlayerCredits()));
        this.set_PlayerCredits(this.jurisdictionalLimit);
      }
      var flag4 = (+this.lastBet > 0) && 
      (+this.lastBet <= +this.get_PlayerCredits());
      if (flag4) {
        (this.repeatBetButton).set_Text(JSIL.ConcatString("REPEAT LAST BET OF ", $T08().Format("{0:C}", this.lastBet)));
        (this.repeatBetButton).set_Visible(true);
      }
    }
    (this.gameOverTimer).Start();
    if (win) {
      this.gameOverPtr = 1;
    } else {
      this.gameOverPtr = 0;
    }
  }; 

  function Form1_StartNewGame () {
    (this.bettingWindow.OKbutton).set_Text("Start Game");
    this.virtualPlayerRaised = 0;
    this.flopTurnRiverRaised = false;
    if (this.GameState > $T27().Ante) {
      if (!this.PlayerSurrender) {
        this.IncrementButtonPosition(false);
      }
    }
    if (+this.anteBet > 0) {
      this.set_PlayerCredits(+this.get_PlayerCredits() + +this.anteBet);
      this.set_PlayerBet(0);
    }
    var flag4 = this.testDataRetrieved;
    if (flag4) {
      this.UseTestData();
    }
    if (!this.testDataRetrieved) {
      this.ShuffleVirtualPlayers();
    }

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      (this.textBox1).AppendText(JSIL.ConcatString.apply(null, JSIL.Array.New($T08(), [" Player ", (x).toString(), " =", this.virtualPlayers[x].Name, $T32().get_NewLine()])));
      var num = x;
      x = ((num + 1) | 0);
    }
    this.GameState = $T27().Ante;
    this.betStringPtr = (this._ante | 0);
    if (this.AutoPlay || this.autoStart) {
      this.bettingWindow.betAmount = 5;
      var flag7 = (+this.bettingWindow.betAmount === 0) || 
      (+this.bettingWindow.betAmount > +this.get_PlayerCredits());
      if (flag7) {
        return;
      }
      this.Invalidate();
      this.Update();
      var flag8 = this.autoStart;
      if (flag8) {
        this.anteBet = +this.lastBet;
      } else {
        this.anteBet = +this.bettingWindow.betAmount;
      }
      this.set_PotAmount(0);

      for (var x2 = 0; x2 < ($T04().playerSize | 0); ) {
        this.set_PotAmount(+this.get_PotAmount() + +this.anteBet);
        num = x2;
        x2 = ((num + 1) | 0);
      }
      this.set_PlayerBet(this.anteBet);
      this.set_PlayerRaise(0);
      var value = ((+(+this.get_PlayerBet() / +this.gameDenomination)) | 0);
      this.denomUnits = ((+(+this.get_PlayerBet() / +this.gameDenomination)) | 0);
      this.set_VideoMultiplier(value);
      var flag9 = value > 5;
      if (flag9) {
        value = 5;
      }
      var flag10 = value < 5;
      if (flag10) {
        this.UpdateVideoBonusMaxMultiplier(5);
      } else {
        this.UpdateVideoBonusMaxMultiplier(((this.playerBet) | 0));
      }
      this.selectedColumn = value;
      this.selectedColumn = (this.denomUnits | 0);
      this.SetPaytableSelectedColumn(this.selectedColumn);
      (this.gameOverTimer).Stop();
    } else {
      var flag11 = $T66().OK === (this.bettingWindow).ShowDialog();
      if (flag11) {
        var autoPlay = this.AutoPlay;
        if (autoPlay) {
          this.bettingWindow.betAmount = 5;
        }
        var flag12 = (+this.bettingWindow.betAmount === 0) || 
        (+this.bettingWindow.betAmount > +this.get_PlayerCredits());
        if (flag12) {
          return;
        }
        this.Invalidate();
        this.Update();
        this.anteBet = +this.bettingWindow.betAmount;
        this.set_PotAmount(0);

        for (var x3 = 0; x3 < ($T04().playerSize | 0); ) {
          this.set_PotAmount(+this.get_PotAmount() + +this.anteBet);
          num = x3;
          x3 = ((num + 1) | 0);
        }
        this.set_PlayerBet(this.anteBet);
        this.set_PlayerRaise(0);
        var value2 = ((+(+this.get_PlayerBet() / +this.gameDenomination)) | 0);
        this.denomUnits = ((+(+this.get_PlayerBet() / +this.gameDenomination)) | 0);
        this.set_VideoMultiplier(value2);
        var flag13 = value2 > 5;
        if (flag13) {
          value2 = 5;
        }
        var flag14 = value2 < 5;
        if (flag14) {
          this.UpdateVideoBonusMaxMultiplier(5);
        } else {
          this.UpdateVideoBonusMaxMultiplier(((this.playerBet) | 0));
        }
        this.selectedColumn = value2;
        this.selectedColumn = (this.denomUnits | 0);
        this.SetPaytableSelectedColumn(this.selectedColumn);
        (this.gameOverTimer).Stop();
      }
    }
    this.raiseLimit = +this.anteBet * +(this.raiseLimitMultiplier);
    this.winnerDeclared = false;
    this.PotSplit = 1;
    this.set_CallAmount(0);
    this.clearBetLabels();

    for (var x4 = 1; x4 < ($T04().playerSize | 0); ) {
      this.ClearPlayerCards(x4);
      num = x4;
      x4 = ((num + 1) | 0);
    }
    this.clearCreditLabels();
    this.updateFoldedPlayersImages(false);
    this.set_WinAmount(0);
    (this.winLabel).set_Text("");
    this.videoPokerWin = 0;
    this.restoreCardDefaults(false);
    this.DisableBettingButtons();
    this.cardsDealt = 0;
    this.deckPtr = 0;

    for (var x5 = 0; x5 < ($T04().playerSize | 0); ) {
      this.virtualPlayers[x5].Credits = +this.get_PlayerCredits();
      this.virtualPlayers[x5].AllIn = false;
      this.GameWinners[x5] = false;
      num = x5;
      x5 = ((num + 1) | 0);
    }
    this.set_PlayerCredits(+this.get_PlayerCredits() - +this.playerBet);
    (this.bettingWindow.OKbutton).set_Text("Bet");
    this.creditsPlayed = +this.creditsPlayed + +this.playerBet;
    if (this.AutoPlay || this.autoStart) {
      this.startGame();
    }
  }; 

  function Form1_stopGameOverTimer () {
    (this.gameOverTimer).Stop();
    (this.winLabel).set_Text("");
  }; 

  function Form1_surrenderFlashTimer_Tick (sender, e) {
    this.show = !this.show;
    var flag = this.show;
    if (flag) {
      (this.surrenderLabel).set_Text(" SURRENDER?");
    } else {
      (this.surrenderLabel).set_Text("");
    }
  }; 

  function Form1_TestShuffleDeck (gaffHand, element) {
    this.deck[0] = (gaffHand.Get(element, 0) | 0);
    this.deck[6] = (gaffHand.Get(element, 1) | 0);
    this.deck[1] = (gaffHand.Get(element, 2) | 0);
    this.deck[7] = (gaffHand.Get(element, 3) | 0);
    this.deck[2] = (gaffHand.Get(element, 4) | 0);
    this.deck[8] = (gaffHand.Get(element, 5) | 0);
    this.deck[3] = (gaffHand.Get(element, 6) | 0);
    this.deck[9] = (gaffHand.Get(element, 7) | 0);
    this.deck[4] = (gaffHand.Get(element, 8) | 0);
    this.deck[10] = (gaffHand.Get(element, 9) | 0);
    this.deck[5] = (gaffHand.Get(element, 10) | 0);
    this.deck[11] = (gaffHand.Get(element, 11) | 0);
    this.deck[12] = (gaffHand.Get(element, 12) | 0);
    this.deck[13] = (gaffHand.Get(element, 13) | 0);
    this.deck[14] = (gaffHand.Get(element, 14) | 0);
    this.deck[15] = (gaffHand.Get(element, 15) | 0);
    this.deck[16] = (gaffHand.Get(element, 16) | 0);
  }; 

  function Form1_UpdateBetLabel$01 (text, player, yellow) {
    if (yellow) {
      (this.betLabels[player].ForeColor = $T10().get_Yellow());
    } else {
      (this.betLabels[player].ForeColor = $T10().get_White());
    }
    (this.betLabels[player]).set_Text(text);
    (this.betLabels[player]).set_Visible(true);
    (this.betLabels[player]).Invalidate();
    (this.betLabels[player]).Update();
  }; 

  function Form1_UpdateBetLabel$02 (text, player, color) {
    (this.betLabels[player].ForeColor = color);
    (this.betLabels[player]).set_Text(text);
    (this.betLabels[player]).set_Visible(true);
    (this.betLabels[player]).Invalidate();
    (this.betLabels[player]).Update();
  }; 

  function Form1_updateBettingButtonTitle () {
    switch ((this.GameState).valueOf()) {
      case 1: 
        (this.bettingGroupLabel).set_Text(this.betButtonTitles[0]);
        break;

      case 2: 
        (this.bettingGroupLabel).set_Text(this.betButtonTitles[1]);
        break;

      case 3: 
        (this.bettingGroupLabel).set_Text(this.betButtonTitles[2]);
        break;

      case 4: 
        (this.bettingGroupLabel).set_Text(this.betButtonTitles[3]);
        break;

      case 6: 
        (this.bettingGroupLabel).set_Text(this.betButtonTitles[4]);
        break;

      case 7: 
        (this.bettingGroupLabel).set_Text(this.betButtonTitles[5]);
        break;

    }
  }; 

  function Form1_UpdateCreditLabel (player) {
    if ((player | 0) !== 0) {
      (this.creditLabels[player]).set_Text("");
      var amount = +this.virtualPlayers[player].Credits;
      var DollarAmount = $T08().Format("{0:C}", amount);
      (this.creditLabels[player]).set_Text(DollarAmount);
      (this.creditLabels[player]).set_Visible(true);
      (this.creditLabels[player]).Invalidate();
      (this.creditLabels[player]).Update();
    }
  }; 

  function Form1_UpdateDynamicHelp () {
    var allIn = this.virtualPlayers[0].AllIn;
    if (allIn) {
      var contstring = (JSIL.ConcatString(this.continueString, $T32().get_NewLine()));
      (this.textBox2).set_Text(contstring);
    } else {
      var teststring = (JSIL.ConcatString(this.foldString, $T32().get_NewLine()));
      var enabled = (this.playerCheckButton).get_Enabled();
      if (enabled) {
        teststring = ((teststring + this.checkString + $T32().get_NewLine()));
      }
      var enabled2 = (this.playerCallButton).get_Enabled();
      if (enabled2) {
        teststring = ((teststring + this.callString + $T32().get_NewLine()));
      }
      var enabled3 = (this.playerRaiseButton).get_Enabled();
      if (enabled3) {
        teststring = ((teststring + this.raiseString + $T32().get_NewLine()));
      }
      var enabled4 = (this.playerAllInButton).get_Enabled();
      if (enabled4) {
        teststring = ((teststring + this.allInString + $T32().get_NewLine()));
      }
      var visible = (this.playerSurrenderButton).get_Visible();
      if (visible) {
        teststring = (JSIL.ConcatString(teststring, this.surrenderString));
      }
      (this.textBox2).set_Text(teststring);
    }
  }; 

  function Form1_updateFoldedPlayersImages (visible) {

    for (var x = 1; x < ($T04().playerSize | 0); ) {
      var flag = !this.virtualPlayers[x].Folded;
      if (!flag) {
        switch (x) {
          case 1: 
            (this.player1hold1).set_Visible(visible);
            (this.player1hold1).Invalidate();
            (this.player1hold1).Update();
            (this.player1hold2).set_Visible(visible);
            (this.player1hold2).Invalidate();
            (this.player1hold2).Update();
            break;

          case 2: 
            (this.player2hold1).set_Visible(visible);
            (this.player2hold1).Invalidate();
            (this.player2hold1).Update();
            (this.player2hold2).set_Visible(visible);
            (this.player2hold2).Invalidate();
            (this.player2hold2).Update();
            break;

          case 3: 
            (this.player3hold1).set_Visible(visible);
            (this.player3hold1).Invalidate();
            (this.player3hold1).Update();
            (this.player3hold2).set_Visible(visible);
            (this.player3hold2).Invalidate();
            (this.player3hold2).Update();
            break;

          case 4: 
            (this.player4hold1).set_Visible(visible);
            (this.player4hold1).Invalidate();
            (this.player4hold1).Update();
            (this.player4hold2).set_Visible(visible);
            (this.player4hold2).Invalidate();
            (this.player4hold2).Update();
            break;

          case 5: 
            (this.player5hold1).set_Visible(visible);
            (this.player5hold1).Invalidate();
            (this.player5hold1).Update();
            (this.player5hold2).set_Visible(visible);
            (this.player5hold2).Invalidate();
            (this.player5hold2).Update();
            break;

        }
      }
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_UpdateVideoBonusMaxMultiplier (multiplier) {
    multiplier = 5;

    for (var x = 0; x < (this.paytableEntries | 0); ) {
      var flag = x === 0;
      if (flag) {
        this.PayTableAmounts[x] = 800;
      }
      ($S0D().CallVirtual("get_Item", null, this.paytableGrid, ((((this.paytableGrid).get_ColumnCount() | 0) - 1) | 0), x)).set_Value((Math.imul(this.PayTableAmounts[x], multiplier)).toString());
      var num = x;
      x = ((num + 1) | 0);
    }
  }; 

  function Form1_UseTestData () {
    var data = $T3E().GetText();
    var dataArray = (JSIL.SplitString(data, JSIL.Array.New($T56(), [","])));
    var flag = (dataArray.length0 | 0) !== 23;
    if (!flag) {

      for (var x = 0; x < 17; ) {
        this.deck[x] = ($T01().Parse(dataArray[x]) | 0);
        var num = x;
        x = ((num + 1) | 0);
      }

      for (var x2 = 1; x2 < (this.virtualPlayerCount | 0); ) {
        this.virtualPlayers[x2] = null;
        num = x2;
        x2 = ((num + 1) | 0);
      }

      for (var x3 = 1; x3 < ($T04().playerSize | 0); ) {
        var flag2 = this.virtualPlayers[x3] === null;
        if (flag2) {
          this.virtualPlayers[x3] = new ($T07())();
          this.virtualPlayers[x3] = this.virtualTempPlayers[$T01().Parse(dataArray[((x3 + 16) | 0)])];
        }
        num = x3;
        x3 = ((num + 1) | 0);
      }
      this.buttonPosition = 0;

      do {
        this.IncrementButtonPosition(false);
      } while ((this.buttonPosition | 0) !== ($T01().Parse(dataArray[22]) | 0));
    }
  }; 

  function Form1_waitButton_Click (sender, e) {
    this.nextPlayerWait = !this.nextPlayerWait;
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Windows.Forms.Form"), 
      Name: "TexasHoldEmFoldUp.Form1", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Form1__ctor
    );

    $.Method({Static:false, Public:false}, "addCredit_Click_1", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_addCredit_Click_1
    );

    $.Method({Static:false, Public:false}, "AdjustWinRank", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_AdjustWinRank
    );

    $.Method({Static:false, Public:false}, "AllInPlayer", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_AllInPlayer
    );

    $.Method({Static:false, Public:false}, "autoPlayButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_autoPlayButton_Click
    );

    $.Method({Static:false, Public:true }, "AwardPlayerWin", 
      JSIL.MethodSignature.Void, 
      Form1_AwardPlayerWin
    );

    $.Method({Static:false, Public:true }, "AwardVideoBonus", 
      new JSIL.MethodSignature($.Double, [$.Int32]), 
      Form1_AwardVideoBonus
    );

    $.Method({Static:false, Public:true }, "BetPlayer", 
      new JSIL.MethodSignature($.Double, [$.Int32]), 
      Form1_BetPlayer
    );

    $.Method({Static:false, Public:false}, "BuildVideoBonusPaytable", 
      JSIL.MethodSignature.Void, 
      Form1_BuildVideoBonusPaytable
    );

    $.Method({Static:false, Public:true }, "BuildVirtualPlayerProfiles", 
      JSIL.MethodSignature.Void, 
      Form1_BuildVirtualPlayerProfiles
    );

    $.Method({Static:false, Public:false}, "button_mouse_down", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.Windows.Forms.MouseEventArgs")]), 
      Form1_button_mouse_down
    );

    $.Method({Static:false, Public:false}, "button_mouse_up", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.Windows.Forms.MouseEventArgs")]), 
      Form1_button_mouse_up
    );

    $.Method({Static:false, Public:false}, "button1_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_button1_Click
    );

    $.Method({Static:false, Public:false}, "button2_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_button2_Click
    );

    $.Method({Static:false, Public:false}, "button3_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_button3_Click
    );

    $.Method({Static:false, Public:false}, "button4_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_button4_Click
    );

    $.Method({Static:false, Public:false}, "CallPlayer", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_CallPlayer
    );

    $.Method({Static:false, Public:false}, "CheckForAllInShowdown", 
      JSIL.MethodSignature.Return($.Boolean), 
      Form1_CheckForAllInShowdown
    );

    $.Method({Static:false, Public:false}, "CheckForBetFinish", 
      JSIL.MethodSignature.Return($.Boolean), 
      Form1_CheckForBetFinish
    );

    $.Method({Static:false, Public:false}, "checkForPlayerWin", 
      JSIL.MethodSignature.Return($.Boolean), 
      Form1_checkForPlayerWin
    );

    $.Method({Static:false, Public:false}, "CheckPlayer", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_CheckPlayer
    );

    $.Method({Static:false, Public:true }, "clearBetLabel", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_clearBetLabel
    );

    $.Method({Static:false, Public:true }, "clearBetLabels", 
      JSIL.MethodSignature.Void, 
      Form1_clearBetLabels
    );

    $.Method({Static:false, Public:true }, "clearChips", 
      JSIL.MethodSignature.Void, 
      Form1_clearChips
    );

    $.Method({Static:false, Public:true }, "clearCreditLabels", 
      JSIL.MethodSignature.Void, 
      Form1_clearCreditLabels
    );

    $.Method({Static:false, Public:false}, "ClearPlayerCards", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_ClearPlayerCards
    );

    $.Method({Static:false, Public:false}, "comboBox1_SelectedIndexChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_comboBox1_SelectedIndexChanged
    );

    $.Method({Static:false, Public:false}, "CreateIniFile", 
      JSIL.MethodSignature.Action($.String), 
      Form1_CreateIniFile
    );

    $.Method({Static:false, Public:true }, "CreateSurrenderBox", 
      JSIL.MethodSignature.Void, 
      Form1_CreateSurrenderBox
    );

    $.Method({Static:false, Public:false}, "dealCard", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $.Boolean
        ]), 
      Form1_dealCard
    );

    $.Method({Static:false, Public:false}, "dealFlop", 
      JSIL.MethodSignature.Void, 
      Form1_dealFlop
    );

    $.Method({Static:false, Public:true }, "DealNextRound", 
      JSIL.MethodSignature.Void, 
      Form1_DealNextRound
    );

    $.Method({Static:false, Public:true }, "dealPlayerCards", 
      JSIL.MethodSignature.Void, 
      Form1_dealPlayerCards
    );

    $.Method({Static:false, Public:false}, "dealRiver", 
      JSIL.MethodSignature.Void, 
      Form1_dealRiver
    );

    $.Method({Static:false, Public:false}, "dealRiverButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_dealRiverButton_Click
    );

    $.Method({Static:false, Public:false}, "dealTurn", 
      JSIL.MethodSignature.Void, 
      Form1_dealTurn
    );

    $.Method({Static:false, Public:false}, "dealTurnButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_dealTurnButton_Click
    );

    $.Method({Static:false, Public:true }, "DisableBettingButtons", 
      JSIL.MethodSignature.Void, 
      Form1_DisableBettingButtons
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      Form1_Dispose$00
    );

    $.Method({Static:false, Public:true }, "EnableBettingButtons", 
      JSIL.MethodSignature.Void, 
      Form1_EnableBettingButtons
    );

    $.Method({Static:false, Public:true }, "EndGame", 
      JSIL.MethodSignature.Void, 
      Form1_EndGame
    );

    $.Method({Static:false, Public:false}, "EraseFile", 
      JSIL.MethodSignature.Action($.String), 
      Form1_EraseFile
    );

    $.Method({Static:false, Public:false}, "EraseIniFile", 
      JSIL.MethodSignature.Action($.String), 
      Form1_EraseIniFile
    );

    $.Method({Static:false, Public:true }, "EvalPlayerHands", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ]), 
      Form1_EvalPlayerHands
    );

    $.Method({Static:false, Public:true }, "EvaluateFlop", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_EvaluateFlop
    );

    $.Method({Static:false, Public:true }, "EvaluatePokerHand", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_EvaluatePokerHand
    );

    $.Method({Static:false, Public:true }, "EvaluateTurn", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_EvaluateTurn
    );

    $.Method({Static:false, Public:false}, "finishThisRoundBetting", 
      JSIL.MethodSignature.Void, 
      Form1_finishThisRoundBetting
    );

    $.Method({Static:false, Public:false}, "FoldPlayer", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_FoldPlayer
    );

    $.Method({Static:false, Public:false}, "Form1_DoubleClick", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_Form1_DoubleClick
    );

    $.Method({Static:false, Public:false}, "gameOverTimer_Tick", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_gameOverTimer_Tick
    );

    $.Method({Static:false, Public:true }, "get_CallAmount", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_CallAmount
    );

    $.Method({Static:false, Public:true }, "get_CurrentBetPosition", 
      JSIL.MethodSignature.Return($.Int32), 
      Form1_get_CurrentBetPosition
    );

    $.Method({Static:false, Public:true }, "get_PlayerBet", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_PlayerBet
    );

    $.Method({Static:false, Public:true }, "get_PlayerCredits", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_PlayerCredits
    );

    $.Method({Static:false, Public:true }, "get_PlayerRaise", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_PlayerRaise
    );

    $.Method({Static:false, Public:true }, "get_PotAmount", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_PotAmount
    );

    $.Method({Static:false, Public:true }, "get_RealPlayerCredits", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_RealPlayerCredits
    );

    $.Method({Static:false, Public:true }, "get_VideoMultiplier", 
      JSIL.MethodSignature.Return($.Int32), 
      Form1_get_VideoMultiplier
    );

    $.Method({Static:false, Public:true }, "get_WinAmount", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_get_WinAmount
    );

    $.Method({Static:false, Public:false}, "getCard", 
      new JSIL.MethodSignature($asm08.TypeRef("TexasHoldEmFoldUp.Form1+cardValues"), [$.Int32]), 
      Form1_getCard
    );

    $.Method({Static:false, Public:true }, "GetCardSuit", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_GetCardSuit
    );

    $.Method({Static:false, Public:true }, "GetCardValue", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_GetCardValue
    );

    $.Method({Static:false, Public:true }, "GetConnectedStraightRank", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32]), 
      Form1_GetConnectedStraightRank
    );

    $.Method({Static:false, Public:false}, "GetCurrentBet", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_GetCurrentBet
    );

    $.Method({Static:false, Public:true }, "GetDealRanking", 
      new JSIL.MethodSignature($.Int32, [
          $asm08.TypeRef("TexasHoldEmFoldUp.Form1+cardValues"), $asm08.TypeRef("TexasHoldEmFoldUp.Form1+cardValues"), 
          $.Boolean
        ]), 
      Form1_GetDealRanking
    );

    $.Method({Static:false, Public:true }, "GetFiveCardRanking", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_GetFiveCardRanking
    );

    $.Method({Static:false, Public:true }, "GetFiveCardTotal", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetFiveCardTotal
    );

    $.Method({Static:false, Public:true }, "GetFlushCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetFlushCount
    );

    $.Method({Static:false, Public:true }, "GetInsideStraightRank", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetInsideStraightRank
    );

    $.Method({Static:false, Public:true }, "GetKicker", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetKicker
    );

    $.Method({Static:false, Public:true }, "GetKickerOld", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Int32]), $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetKickerOld
    );

    $.Method({Static:false, Public:false}, "GetLogFileVars", 
      JSIL.MethodSignature.Void, 
      Form1_GetLogFileVars
    );

    $.Method({Static:false, Public:true }, "GetNotFoldedPlayerCount", 
      JSIL.MethodSignature.Return($.Int32), 
      Form1_GetNotFoldedPlayerCount
    );

    $.Method({Static:false, Public:true }, "GetPairType", 
      new JSIL.MethodSignature($asm08.TypeRef("TexasHoldEmFoldUp.Form1+PairTypes"), [$jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetPairType
    );

    $.Method({Static:false, Public:false}, "GetPercentPotRaised", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_GetPercentPotRaised
    );

    $.Method({Static:false, Public:true }, "GetPlayerPairValue", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_GetPlayerPairValue
    );

    $.Method({Static:false, Public:false}, "GetPlayerWithBestHand", 
      JSIL.MethodSignature.Return($.Int32), 
      Form1_GetPlayerWithBestHand
    );

    $.Method({Static:false, Public:false}, "GetPotRaisePercentage", 
      new JSIL.MethodSignature($.Int32, [$.Double]), 
      Form1_GetPotRaisePercentage
    );

    $.Method({Static:false, Public:false}, "GetTotalRaiseAmount", 
      JSIL.MethodSignature.Return($.Double), 
      Form1_GetTotalRaiseAmount
    );

    $.Method({Static:false, Public:true }, "GetTwoPairKicker", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      Form1_GetTwoPairKicker
    );

    $.Method({Static:false, Public:true }, "GetTwoPairTotal", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      Form1_GetTwoPairTotal
    );

    $.Method({Static:false, Public:false}, "GetVideoPokerBonus", 
      new JSIL.MethodSignature($.Double, [$.Int32]), 
      Form1_GetVideoPokerBonus
    );

    $.Method({Static:false, Public:true }, "getWeightedIntResult", 
      new JSIL.MethodSignature($.Int32, [$.Int32]), 
      Form1_getWeightedIntResult
    );

    $.Method({Static:false, Public:true }, "getWeightedResult", 
      new JSIL.MethodSignature($.Boolean, [$.Int32]), 
      Form1_getWeightedResult
    );

    $.Method({Static:false, Public:true }, "GetWinner", 
      JSIL.MethodSignature.Return($.Int32), 
      Form1_GetWinner
    );

    $.Method({Static:false, Public:true }, "GetXofaKindKicker", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetXofaKindKicker
    );

    $.Method({Static:false, Public:true }, "GetXofaKindTotal", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_GetXofaKindTotal
    );

    $.Method({Static:false, Public:true }, "IncrementButtonPosition", 
      new JSIL.MethodSignature($.Int32, [$.Boolean]), 
      Form1_IncrementButtonPosition
    );

    $.Method({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void, 
      Form1_InitializeComponent
    );

    $.Method({Static:false, Public:true }, "InitializeNewGame", 
      JSIL.MethodSignature.Void, 
      Form1_InitializeNewGame
    );

    $.Method({Static:false, Public:true }, "isAnteBet", 
      JSIL.MethodSignature.Return($.Boolean), 
      Form1_isAnteBet
    );

    $.Method({Static:false, Public:true }, "IsPokerHandPossible", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $jsilcore.TypeRef("System.Array", [$.Int32])
        ]), 
      Form1_IsPokerHandPossible
    );

    $.Method({Static:false, Public:false}, "LogResults", 
      JSIL.MethodSignature.Void, 
      Form1_LogResults
    );

    $.Method({Static:false, Public:false}, "newGameButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_newGameButton_Click
    );

    $.Method({Static:false, Public:true }, "NextPlayer", 
      JSIL.MethodSignature.Void, 
      Form1_NextPlayer
    );

    $.Method({Static:false, Public:false}, "nextPlayerTimer_Tick", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_nextPlayerTimer_Tick
    );

    $.Method({Static:false, Public:false}, "playerAllInButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_playerAllInButton_Click
    );

    $.Method({Static:false, Public:false}, "playerCallButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_playerCallButton_Click
    );

    $.Method({Static:false, Public:false}, "playerCheckButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_playerCheckButton_Click
    );

    $.Method({Static:false, Public:false}, "playerCreditLabel_MouseDoubleClick", 
      new JSIL.MethodSignature(null, [$.Object, $asm06.TypeRef("System.Windows.Forms.MouseEventArgs")]), 
      Form1_playerCreditLabel_MouseDoubleClick
    );

    $.Method({Static:false, Public:true }, "playerFoldButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_playerFoldButton_Click
    );

    $.Method({Static:false, Public:false}, "playerRaiseButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_playerRaiseButton_Click
    );

    $.Method({Static:false, Public:false}, "playerWinLabel_DoubleClick", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_playerWinLabel_DoubleClick
    );

    $.Method({Static:false, Public:false}, "RaisePlayer", 
      new JSIL.MethodSignature(null, [$.Int32, $.Double]), 
      Form1_RaisePlayer
    );

    $.Method({Static:false, Public:false}, "RenewVirtualPlayerProfiles", 
      JSIL.MethodSignature.Void, 
      Form1_RenewVirtualPlayerProfiles
    );

    $.Method({Static:false, Public:false}, "repeatBetButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_repeatBetButton_Click
    );

    $.Method({Static:false, Public:false}, "ResetVirtualPlayerVars", 
      JSIL.MethodSignature.Void, 
      Form1_ResetVirtualPlayerVars
    );

    $.Method({Static:false, Public:true }, "restoreCardDefaults", 
      JSIL.MethodSignature.Action($.Boolean), 
      Form1_restoreCardDefaults
    );

    $.Method({Static:false, Public:false}, "RoundDown", 
      new JSIL.MethodSignature($.Double, [$.Double]), 
      Form1_RoundDown
    );

    $.Method({Static:false, Public:false}, "RoundUp", 
      new JSIL.MethodSignature($.Double, [$.Double]), 
      Form1_RoundUp
    );

    $.Method({Static:false, Public:true }, "set_CallAmount", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_CallAmount
    );

    $.Method({Static:false, Public:true }, "set_CurrentBetPosition", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_set_CurrentBetPosition
    );

    $.Method({Static:false, Public:true }, "set_PlayerBet", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_PlayerBet
    );

    $.Method({Static:false, Public:true }, "set_PlayerCredits", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_PlayerCredits
    );

    $.Method({Static:false, Public:true }, "set_PlayerRaise", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_PlayerRaise
    );

    $.Method({Static:false, Public:true }, "set_PotAmount", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_PotAmount
    );

    $.Method({Static:false, Public:true }, "set_RealPlayerCredits", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_RealPlayerCredits
    );

    $.Method({Static:false, Public:true }, "set_VideoMultiplier", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_set_VideoMultiplier
    );

    $.Method({Static:false, Public:true }, "set_WinAmount", 
      JSIL.MethodSignature.Action($.Double), 
      Form1_set_WinAmount
    );

    $.Method({Static:false, Public:false}, "SetPaytableSelectedColumn", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_SetPaytableSelectedColumn
    );

    $.Method({Static:false, Public:false}, "SetPaytableSelectedWin", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_SetPaytableSelectedWin
    );

    $.Method({Static:false, Public:true }, "setPlayerWinCards", 
      new JSIL.MethodSignature(null, [$.Int32, $jsilcore.TypeRef("System.Array", [$.Int32])]), 
      Form1_setPlayerWinCards
    );

    $.Method({Static:false, Public:false}, "ShowPlayerCards", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean]), 
      Form1_ShowPlayerCards
    );

    $.Method({Static:false, Public:false}, "shuffleDeck", 
      JSIL.MethodSignature.Void, 
      Form1_shuffleDeck
    );

    $.Method({Static:false, Public:true }, "ShuffleVirtualPlayers", 
      JSIL.MethodSignature.Void, 
      Form1_ShuffleVirtualPlayers
    );

    $.Method({Static:false, Public:false}, "StartBetting", 
      JSIL.MethodSignature.Void, 
      Form1_StartBetting
    );

    $.Method({Static:false, Public:true }, "startButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_startButton_Click
    );

    $.Method({Static:false, Public:true }, "startGame", 
      JSIL.MethodSignature.Void, 
      Form1_startGame
    );

    $.Method({Static:false, Public:false}, "startGameOverTimer", 
      JSIL.MethodSignature.Action($.Boolean), 
      Form1_startGameOverTimer
    );

    $.Method({Static:false, Public:false}, "StartNewGame", 
      JSIL.MethodSignature.Void, 
      Form1_StartNewGame
    );

    $.Method({Static:false, Public:false}, "stopGameOverTimer", 
      JSIL.MethodSignature.Void, 
      Form1_stopGameOverTimer
    );

    $.Method({Static:false, Public:false}, "surrenderFlashTimer_Tick", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_surrenderFlashTimer_Tick
    );

    $.Method({Static:false, Public:false}, "TestShuffleDeck", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32]), 
      Form1_TestShuffleDeck
    );

    $.Method({Static:false, Public:true }, "UpdateBetLabel", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Boolean
        ]), 
      Form1_UpdateBetLabel$01
    );

    $.Method({Static:false, Public:true }, "UpdateBetLabel", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $asm05.TypeRef("System.Drawing.Color")
        ]), 
      Form1_UpdateBetLabel$02
    );

    $.Method({Static:false, Public:true }, "updateBettingButtonTitle", 
      JSIL.MethodSignature.Void, 
      Form1_updateBettingButtonTitle
    );

    $.Method({Static:false, Public:true }, "UpdateCreditLabel", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_UpdateCreditLabel
    );

    $.Method({Static:false, Public:true }, "UpdateDynamicHelp", 
      JSIL.MethodSignature.Void, 
      Form1_UpdateDynamicHelp
    );

    $.Method({Static:false, Public:true }, "updateFoldedPlayersImages", 
      JSIL.MethodSignature.Action($.Boolean), 
      Form1_updateFoldedPlayersImages
    );

    $.Method({Static:false, Public:false}, "UpdateVideoBonusMaxMultiplier", 
      JSIL.MethodSignature.Action($.Int32), 
      Form1_UpdateVideoBonusMaxMultiplier
    );

    $.Method({Static:false, Public:true }, "UseTestData", 
      JSIL.MethodSignature.Void, 
      Form1_UseTestData
    );

    $.Method({Static:false, Public:false}, "waitButton_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      Form1_waitButton_Click
    );

    $.Field({Static:false, Public:false}, "currentIniVersion", $.Double);

    $.Field({Static:false, Public:false}, "AutoPlay", $.Boolean);

    $.Field({Static:false, Public:false}, "offsetX", $.Int32);

    $.Field({Static:false, Public:false}, "offsetY", $.Int32);

    $.Field({Static:false, Public:false}, "dealDelay", $.Int32);

    $.Field({Static:false, Public:false}, "tempDelay", $.Int32);

    $.Field({Static:false, Public:false}, "nextPlayerDelay", $.Int32);

    $.Field({Static:false, Public:false}, "cardPoints", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Drawing.Point")]));

    $.Field({Static:false, Public:false}, "betLabels", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Windows.Forms.Label")]));

    $.Field({Static:false, Public:false}, "creditLabels", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Windows.Forms.Label")]));

    $.Field({Static:false, Public:false}, "showdown", $.Boolean);

    $.Field({Static:false, Public:false}, "videoBonusWinOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "videoMultiplier", $.Int32);

    $.Field({Static:false, Public:true }, "betLimit", $.Double);

    $.Field({Static:false, Public:true }, "raiseLimit", $.Double);

    $.Field({Static:false, Public:false}, "virtualPlayerCount", $.Int32);

    $.Field({Static:false, Public:true }, "gameDenomination", $.Double);

    $.Field({Static:false, Public:true }, "gameDenomMultiplier", $.Int32);

    $.Field({Static:false, Public:true }, "raiseLimitMultiplier", $.Int32);

    $.Field({Static:false, Public:false}, "denomUnits", $.Int32);

    $.Field({Static:false, Public:true }, "bettingWindow", $asm08.TypeRef("TexasHoldEmFoldUp.BetForm"));

    $.Field({Static:false, Public:false}, "gameOverTimer", $asm06.TypeRef("System.Windows.Forms.Timer"));

    $.Field({Static:false, Public:false}, "nextPlayerTimer", $asm06.TypeRef("System.Windows.Forms.Timer"));

    $.Field({Static:false, Public:false}, "loop", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Constant({Static:true , Public:false}, "S2", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "S3", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "S4", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "S5", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "S6", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "S7", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "S8", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "S9", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "ST", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "SJ", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "SQ", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "SK", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "SA", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "D2", $.Int32, 13);

    $.Constant({Static:true , Public:false}, "D3", $.Int32, 14);

    $.Constant({Static:true , Public:false}, "D4", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "D5", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "D6", $.Int32, 17);

    $.Constant({Static:true , Public:false}, "D7", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "D8", $.Int32, 19);

    $.Constant({Static:true , Public:false}, "D9", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "DT", $.Int32, 21);

    $.Constant({Static:true , Public:false}, "DJ", $.Int32, 22);

    $.Constant({Static:true , Public:false}, "DQ", $.Int32, 23);

    $.Constant({Static:true , Public:false}, "DK", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "DA", $.Int32, 25);

    $.Constant({Static:true , Public:false}, "C2", $.Int32, 26);

    $.Constant({Static:true , Public:false}, "C3", $.Int32, 27);

    $.Constant({Static:true , Public:false}, "C4", $.Int32, 28);

    $.Constant({Static:true , Public:false}, "C5", $.Int32, 29);

    $.Constant({Static:true , Public:false}, "C6", $.Int32, 30);

    $.Constant({Static:true , Public:false}, "C7", $.Int32, 31);

    $.Constant({Static:true , Public:false}, "C8", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "C9", $.Int32, 33);

    $.Constant({Static:true , Public:false}, "CT", $.Int32, 34);

    $.Constant({Static:true , Public:false}, "CJ", $.Int32, 35);

    $.Constant({Static:true , Public:false}, "CQ", $.Int32, 36);

    $.Constant({Static:true , Public:false}, "CK", $.Int32, 37);

    $.Constant({Static:true , Public:false}, "CA", $.Int32, 38);

    $.Constant({Static:true , Public:false}, "H2", $.Int32, 39);

    $.Constant({Static:true , Public:false}, "H3", $.Int32, 40);

    $.Constant({Static:true , Public:false}, "H4", $.Int32, 41);

    $.Constant({Static:true , Public:false}, "H5", $.Int32, 42);

    $.Constant({Static:true , Public:false}, "H6", $.Int32, 43);

    $.Constant({Static:true , Public:false}, "H7", $.Int32, 44);

    $.Constant({Static:true , Public:false}, "H8", $.Int32, 45);

    $.Constant({Static:true , Public:false}, "H9", $.Int32, 46);

    $.Constant({Static:true , Public:false}, "HT", $.Int32, 47);

    $.Constant({Static:true , Public:false}, "HJ", $.Int32, 48);

    $.Constant({Static:true , Public:false}, "HQ", $.Int32, 49);

    $.Constant({Static:true , Public:false}, "HK", $.Int32, 50);

    $.Constant({Static:true , Public:false}, "HA", $.Int32, 51);

    $.Field({Static:false, Public:false}, "_ante", $.Int32);

    $.Field({Static:false, Public:false}, "_raise", $.Int32);

    $.Field({Static:false, Public:false}, "cards", $jsilcore.TypeRef("System.Array", [$asm05.TypeRef("System.Drawing.Image")]));

    $.Field({Static:false, Public:false}, "cardBack", $asm05.TypeRef("System.Drawing.Image"));

    $.Field({Static:false, Public:false}, "deck", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "virtualPlayers", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.VirtualPlayer")]));

    $.Field({Static:false, Public:false}, "virtualTempPlayers", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.VirtualPlayer")]));

    $.Field({Static:false, Public:false}, "playerHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "playerHoleCardsRankings", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "playerFiveCardRankings", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "PayTableStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "PayTableAmounts", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "betStringPtr", $.Int32);

    $.Field({Static:false, Public:true }, "betWindowTitles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "betButtonTitles", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "gameOverStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "instrucionStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "realPlayerName", $.String);

    $.Field({Static:false, Public:true }, "gaffHand", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "gaffHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "adjustedRanks", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Constant({Static:true , Public:false}, "ROYAL_FLUSH", $.Int32, 21);

    $.Constant({Static:true , Public:false}, "STRAIGHT_FLUSH", $.Int32, 20);

    $.Constant({Static:true , Public:false}, "HIGH_FOUR_OF_A_KIND", $.Int32, 19);

    $.Constant({Static:true , Public:false}, "MID_FOUR_OF_A_KIND", $.Int32, 18);

    $.Constant({Static:true , Public:false}, "FOUR_OF_A_KIND", $.Int32, 17);

    $.Constant({Static:true , Public:false}, "FULL_HOUSE", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "FLUSH", $.Int32, 15);

    $.Constant({Static:true , Public:false}, "STRAIGHT", $.Int32, 14);

    $.Constant({Static:true , Public:false}, "HIGH_THREE_OF_A_KIND", $.Int32, 13);

    $.Constant({Static:true , Public:false}, "MID_THREE_OF_A_KIND", $.Int32, 12);

    $.Constant({Static:true , Public:false}, "THREE_OF_A_KIND", $.Int32, 11);

    $.Constant({Static:true , Public:false}, "TWO_PAIR", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "HIGH_PAIR", $.Int32, 9);

    $.Constant({Static:true , Public:false}, "MID_PAIR", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "PAIR", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "FOUR_TO_A_FLUSH", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "THREE_TO_A_FLUSH", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "FOUR_TO_A_STRAIGHT_INSIDE", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "THREE_TO_A_STRAIGHT_INSIDE", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "FOUR_TO_A_STRAIGHT_OUTSIDE", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "THREE_TO_A_STRAIGHT_OUTSIDE", $.Int32, 1);

    $.Field({Static:false, Public:false}, "Group", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.Form1+cardValues")]));

    $.Field({Static:false, Public:false}, "communityCards", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "x", $.Int32);

    $.Field({Static:false, Public:false}, "deckPtr", $.Int32);

    $.Field({Static:false, Public:false}, "buttonPosition", $.Int32);

    $.Field({Static:false, Public:false}, "iniVersion", $.Double);

    $.Field({Static:false, Public:false}, "surrenderReturnRank", $.Int32);

    $.Field({Static:false, Public:false}, "surrenderMinimumPair", $.Int32);

    $.Field({Static:false, Public:false}, "highCardThreshhold", $.Int32);

    $.Field({Static:false, Public:false}, "paytableEntries", $.Int32);

    $.Field({Static:false, Public:false}, "selectedColumn", $.Int32);

    $.Field({Static:false, Public:false}, "playerCurrentBet", $.Double);

    $.Field({Static:false, Public:false}, "playerCurrentRaise", $.Double);

    $.Field({Static:false, Public:false}, "ties", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "anteBet", $.Double);

    $.Field({Static:false, Public:true }, "potAmount", $.Double);

    $.Field({Static:false, Public:true }, "playerBet", $.Double);

    $.Field({Static:false, Public:true }, "playerRaise", $.Double);

    $.Field({Static:false, Public:true }, "callAmount", $.Double);

    $.Field({Static:false, Public:false}, "playerCredits", $.Double);

    $.Field({Static:false, Public:false}, "win", $.Double);

    $.Field({Static:false, Public:false}, "currentBetPosition", $.Int32);

    $.Field({Static:false, Public:false}, "rand", $asm00.TypeRef("System.Random"));

    $.Field({Static:false, Public:false}, "cardsDealt", $.Int32);

    $.Field({Static:false, Public:true }, "GameState", $asm08.TypeRef("TexasHoldEmFoldUp.Form1+GameStates"));

    $.Field({Static:false, Public:true }, "BetType", $asm08.TypeRef("TexasHoldEmFoldUp.Form1+BetTypes"));

    $.Field({Static:false, Public:false}, "GamePlayers", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.GamePlayer")]));

    $.Field({Static:false, Public:true }, "GameWinners", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:false, Public:true }, "PotSplit", $.Int32);

    $.Field({Static:false, Public:false}, "formHwnd", $asm05.TypeRef("System.Drawing.Graphics"));

    $.Field({Static:false, Public:false}, "testGame", $.Boolean);

    $.Field({Static:false, Public:false}, "logging", $.Boolean);

    $.Field({Static:false, Public:false}, "PlayerSurrender", $.Boolean);

    $.Field({Static:false, Public:false}, "gameOverPtr", $.Int32);

    $.Field({Static:false, Public:false}, "foldString", $.String);

    $.Field({Static:false, Public:false}, "checkString", $.String);

    $.Field({Static:false, Public:false}, "callString", $.String);

    $.Field({Static:false, Public:false}, "raiseString", $.String);

    $.Field({Static:false, Public:false}, "allInString", $.String);

    $.Field({Static:false, Public:true }, "surrenderString", $.String);

    $.Field({Static:false, Public:false}, "continueString", $.String);

    $.Field({Static:false, Public:true }, "surrenderBoxString", $.String);

    $.Field({Static:false, Public:false}, "winnerDeclared", $.Boolean);

    $.Field({Static:false, Public:false}, "videoPokerWin", $.Double);

    $.Field({Static:false, Public:false}, "videoPokerLowRank", $.Int32);

    $.Field({Static:false, Public:false}, "nextPlayerWait", $.Boolean);

    $.Field({Static:false, Public:false}, "pixelColor", $asm05.TypeRef("System.Drawing.Color"));

    $.Field({Static:false, Public:false}, "surrenderLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "surrenderPanel", $asm06.TypeRef("System.Windows.Forms.Panel"));

    $.Field({Static:false, Public:false}, "logWriter", $asm00.TypeRef("System.IO.StreamWriter"));

    $.Field({Static:false, Public:false}, "logReader", $asm00.TypeRef("System.IO.StreamReader"));

    $.Field({Static:false, Public:false}, "dataWriter", $asm00.TypeRef("System.IO.StreamWriter"));

    $.Field({Static:false, Public:false}, "dealSound", $asm01.TypeRef("System.Media.SoundPlayer"));

    $.Field({Static:false, Public:true }, "buttonSound", $asm01.TypeRef("System.Media.SoundPlayer"));

    $.Field({Static:false, Public:false}, "raiseSound", $asm01.TypeRef("System.Media.SoundPlayer"));

    $.Field({Static:false, Public:false}, "callSound", $asm01.TypeRef("System.Media.SoundPlayer"));

    $.Field({Static:false, Public:false}, "videoWin", $asm01.TypeRef("System.Media.SoundPlayer"));

    $.Field({Static:false, Public:false}, "AntePotAmount", $.Double);

    $.Field({Static:false, Public:false}, "FlopPotAmount", $.Double);

    $.Field({Static:false, Public:false}, "TurnPotAmount", $.Double);

    $.Field({Static:false, Public:false}, "RiverPotAmount", $.Double);

    $.Field({Static:false, Public:false}, "PlayerRaiseFoldThreshold", $.Double);

    $.Field({Static:false, Public:false}, "virtualPlayerRaised", $.Int32);

    $.Field({Static:false, Public:false}, "virtualPlayerRaiseLimit", $.Int32);

    $.Field({Static:false, Public:false}, "flopTurnRiverRaised", $.Boolean);

    $.Field({Static:false, Public:false}, "testDataRetrieved", $.Boolean);

    $.Field({Static:false, Public:false}, "ThisRoundRaisePercentage", $.Int32);

    $.Field({Static:false, Public:false}, "DealButtonPassed", $.Boolean);

    $.Field({Static:false, Public:false}, "creditsPlayed", $.Double);

    $.Field({Static:false, Public:false}, "creditsWon", $.Double);

    $.Field({Static:false, Public:false}, "gamePercentage", $.Double);

    $.Field({Static:false, Public:false}, "gameNumber", $.Int32);

    $.Field({Static:false, Public:false}, "playerWithBestHand", $.Int32);

    $.Field({Static:false, Public:true }, "lastBet", $.Double);

    $.Field({Static:false, Public:true }, "autoStart", $.Boolean);

    $.Field({Static:false, Public:false}, "winColor", $asm05.TypeRef("System.Drawing.Color"));

    $.Field({Static:false, Public:false}, "creditLimitWindow", $asm08.TypeRef("TexasHoldEmFoldUp.AmountWindow"));

    $.Field({Static:false, Public:true }, "jurisdictionalLimit", $.Double);

    $.Field({Static:false, Public:false}, "chipBoxes", $jsilcore.TypeRef("System.Array", [$asm06.TypeRef("System.Windows.Forms.PictureBox")]));

    $.Field({Static:false, Public:false}, "now", $asm00.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "year", $.Int32);

    $.Field({Static:false, Public:false}, "gameEnable", $.Boolean);

    $.Field({Static:false, Public:false}, "utils", $asm08.TypeRef("TexasHoldEmFoldUp.Utils"));

    $.Field({Static:false, Public:false}, "show", $.Boolean);

    $.Field({Static:false, Public:false}, "components", $asm01.TypeRef("System.ComponentModel.IContainer"));

    $.Field({Static:false, Public:false}, "river", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "turn", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "flop3", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "flop2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "flop1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player0hold2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player0hold1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player3hold2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player3hold1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player2hold2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player2hold1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player1hold2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player1hold1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player4hold1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player4hold2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player5hold2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "player5hold1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "cardImages", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "button2", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "button3", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "dealTurnButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "comboBox1", $asm06.TypeRef("System.Windows.Forms.ComboBox"));

    $.Field({Static:false, Public:false}, "bettingGroupLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "newGameButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "potLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "startButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "playerFoldButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "playerCheckButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "playerCallButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "playerRaiseButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "playerAllInButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "playerBetLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "playerRaiseLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "callLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "label2", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "buttonImage1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "buttonImage2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "buttonImage3", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "buttonImage4", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "buttonImage5", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "buttonImage0", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:false}, "playerCreditLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "bettingGroupBox", $asm06.TypeRef("System.Windows.Forms.GroupBox"));

    $.Field({Static:false, Public:false}, "label1", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "textBox1", $asm06.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:false}, "button1", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "winLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "playerWinLabel", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "buttonImageList", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "bigButtonImageList", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "smallWideButtonImageList", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "TestingGroupBox", $asm06.TypeRef("System.Windows.Forms.GroupBox"));

    $.Field({Static:false, Public:false}, "paytableGrid", $asm06.TypeRef("System.Windows.Forms.DataGridView"));

    $.Field({Static:false, Public:false}, "TitleColumn", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "PT1", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "PT2", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "PT3", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "PT4", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "PT5", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "bonusPokerPanel", $asm06.TypeRef("System.Windows.Forms.Panel"));

    $.Field({Static:false, Public:false}, "textBox2", $asm06.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:false}, "smallSquareImageList", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "dealerButtonImageList", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "waitButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "playerSurrenderButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "dataGridView1", $asm06.TypeRef("System.Windows.Forms.DataGridView"));

    $.Field({Static:false, Public:false}, "numberColumn", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "instruction", $asm06.TypeRef("System.Windows.Forms.DataGridViewTextBoxColumn"));

    $.Field({Static:false, Public:false}, "label3", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "autoPlayButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:false}, "chipImageList", $asm06.TypeRef("System.Windows.Forms.ImageList"));

    $.Field({Static:false, Public:false}, "repeatBetButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "addCreditButton", $asm06.TypeRef("System.Windows.Forms.Button"));

    $.Field({Static:false, Public:true }, "chipBox1", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:true }, "chipBox2", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:true }, "chipBox3", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:true }, "chipBox4", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Field({Static:false, Public:true }, "chipBox5", $asm06.TypeRef("System.Windows.Forms.PictureBox"));

    $.Property({Static:false, Public:true }, "PotAmount", $.Double);

    $.Property({Static:false, Public:true }, "PlayerBet", $.Double);

    $.Property({Static:false, Public:true }, "PlayerRaise", $.Double);

    $.Property({Static:false, Public:true }, "CallAmount", $.Double);

    $.Property({Static:false, Public:true }, "RealPlayerCredits", $.Double);

    $.Property({Static:false, Public:true }, "PlayerCredits", $.Double);

    $.Property({Static:false, Public:true }, "WinAmount", $.Double);

    $.Property({Static:false, Public:true }, "CurrentBetPosition", $.Int32);

    $.Property({Static:false, Public:true }, "VideoMultiplier", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum TexasHoldEmFoldUp.Form1+cardValues */ 

JSIL.MakeEnum(
  {
    FullName: "TexasHoldEmFoldUp.Form1+cardValues", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    US: 0, 
    G1: 1, 
    S: 1, 
    _2: 2, 
    G2: 2, 
    _3: 3, 
    G3: 3, 
    _4: 4, 
    G4: 4, 
    _5: 5, 
    G5: 5, 
    _6: 6, 
    G6: 6, 
    _7: 7, 
    G7: 7, 
    _8: 8, 
    G8: 8, 
    _9: 9, 
    T: 10, 
    J: 11, 
    Q: 12, 
    K: 13, 
    A: 14, 
    ANY: 255, 
  }
);

/* enum TexasHoldEmFoldUp.Form1+BetTypes */ 

JSIL.MakeEnum(
  {
    FullName: "TexasHoldEmFoldUp.Form1+BetTypes", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    checking: 0, 
    calling: 1, 
    raising: 2, 
    allIn: 3, 
    folding: 4, 
  }
);

/* enum TexasHoldEmFoldUp.Form1+GameStates */ 

JSIL.MakeEnum(
  {
    FullName: "TexasHoldEmFoldUp.Form1+GameStates", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Ante: 0, 
    HoldCardBet: 1, 
    FlopBet: 2, 
    TurnBet: 3, 
    RiverBet: 4, 
    Idle: 5, 
    EndGame: 6, 
    PlayerWin: 7, 
    PlayerLose: 8, 
    GameOver: 9, 
  }
);

/* enum TexasHoldEmFoldUp.Form1+PairTypes */ 

JSIL.MakeEnum(
  {
    FullName: "TexasHoldEmFoldUp.Form1+PairTypes", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Bottom: 0, 
    Middle: 1, 
    Top: 2, 
    Pocket: 3, 
  }
);

/* class TexasHoldEmFoldUp.Program */ 

(function Program$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm06.System.Windows.Forms.Application)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(JSIL.MethodSignature.Action($asm06.TypeRef("System.Windows.Forms.Form")))) ();
  };


  function Program_Main () {
    $T00().EnableVisualStyles();
    $T00().SetCompatibleTextRenderingDefault(false);
    $S00().CallStatic($T00(), "Run", null, new ($T01())());
  }; 

  JSIL.MakeStaticClass("TexasHoldEmFoldUp.Program", false, [], function ($ib) {
    $ = $ib;

    $.Method({Static:true , Public:false}, "Main", 
      JSIL.MethodSignature.Void, 
      Program_Main
    )
      .Attribute($asm00.TypeRef("System.STAThreadAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.Settings */ 

(function Settings$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("TexasHoldEmFoldUp.Settings", false, [], function ($ib) {
    $ = $ib;

    $.Field({Static:true , Public:true , ReadOnly:true }, "playerSize", $.Int32, 6);

    $.Field({Static:true , Public:true , ReadOnly:true }, "kickerSize", $.Int32, 6);

    $.Field({Static:true , Public:true }, "playerCredits", $.Int32, 1000);

    $.Field({Static:true , Public:true }, "year", $.Int32, 2010);

    $.Field({Static:true , Public:true }, "playerNameSize", $.Int32, 20);

    $.Field({Static:true , Public:true }, "playerCreditsLimit", $.Int32, 100);

    $.Field({Static:true , Public:true }, "jurisdictionalBetLimit", $.Int32, 1000);

    $.Field({Static:true , Public:true , ReadOnly:true }, "betDx", $.Double, 2.5);

    $.Field({Static:true , Public:true , ReadOnly:true }, "gameDenomMultiplier", $.Int32, 5);

    $.Field({Static:true , Public:true , ReadOnly:true }, "raiseLimitMultiplier", $.Int32, 5);

    $.Field({Static:true , Public:true }, "intervalGameOver", $.Int32, 1000);


    function Settings__cctor () {
      $thisType.playerSize = 6;
      $thisType.kickerSize = 6;
      $thisType.playerCredits = 1000;
      $thisType.year = 2010;
      $thisType.playerNameSize = 20;
      $thisType.playerCreditsLimit = 100;
      $thisType.jurisdictionalBetLimit = 1000;
      $thisType.betDx = 2.5;
      $thisType.gameDenomMultiplier = 5;
      $thisType.raiseLimitMultiplier = 5;
      $thisType.intervalGameOver = 1000;
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Settings__cctor
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.Utils */ 

(function Utils$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Boolean)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.System.IO.StreamReader)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.System.IO.File)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.System.IO.TextReader)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.System.Char)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize(System.Array.Of($asm00.System.Char))) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.System.Int32)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize(System.Array.Of($asm00.System.Double))) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm00.System.Double)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize(System.Array.Of($asm00.System.String))) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize(System.Array.Of($asm00.System.Int32))) ();
  };


  function Utils__ctor () {
  }; 

  function Utils_GetIniBool (Section, KeyName, Default, FileName) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var reader = $T03().OpenText(FileName);

          while (true) {
            var read = reader.ReadLine();
            var flag = (System.String.StartsWith(read, ("[" + Section + "]")));
            if (flag) {

              do {
                read = reader.ReadLine();
                var compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[0];
                compString = compString.TrimEnd(JSIL.Array.New($T05(), [" "]));
                var flag2 = (compString == KeyName);
                if (flag2) {
                  compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[1];
                  compString = JSIL.SplitString(compString, JSIL.Array.New($T05(), [";"]))[0];
                  compString = (compString.trim());
                  var flag3 = (compString.toUpperCase() == "TRUE") || 
                  (compString == "1");
                  if (flag3) {
                    $label0 = 1 /* goto Block_3 */ ;
                    continue $labelgroup0;
                  }
                }
              } while (!(System.String.StartsWith(read, "[")) && !reader.get_EndOfStream());
            }
            if (reader.get_EndOfStream()) {
              $label0 = 2 /* goto Block_5 */ ;
              continue $labelgroup0;
            }
          }

          $label0 = 1 /* goto Block_3 */ ;
          continue $labelgroup0;
        case 1: /* Block_3 */ 
          reader.Close();
          var result = true;
          return result;

          $label0 = 2 /* goto Block_5 */ ;
          continue $labelgroup0;
        case 2: /* Block_5 */ 
          reader.Close();
          result = Default;
          return result;

          break $labelgroup0;
      }
    }
  }; 

  function Utils_GetINIDoubleArray (Section, KeyName, minSize, FileName) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var tempArray = JSIL.Array.New($T09(), 200);
          var ptr = 0;
          var reader = $T03().OpenText(FileName);

          while (true) {
            var read = reader.ReadLine();
            var flag = (System.String.StartsWith(read, ("[" + Section + "]")));
            if (flag) {

              do {
                read = reader.ReadLine();
                var compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[0];
                compString = compString.TrimEnd(JSIL.Array.New($T05(), [" "]));
                var flag2 = (compString == KeyName);
                if (flag2) {
                  $label0 = 1 /* goto Block_1 */ ;
                  continue $labelgroup0;
                }
              } while (!(System.String.StartsWith(read, "[")) && !reader.get_EndOfStream());
            }
            if (reader.get_EndOfStream()) {
              $label0 = 2 /* goto Block_8 */ ;
              continue $labelgroup0;
            }
          }

          $label0 = 1 /* goto Block_1 */ ;
          continue $labelgroup0;
        case 1: /* Block_1 */ 
          compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[1];
          compString = JSIL.SplitString(compString, JSIL.Array.New($T05(), [";"]))[0];
          compString = (compString.trim());
          var strArray = (JSIL.SplitString(compString, JSIL.Array.New($T05(), [","])));
          var array = strArray;

          for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
            var i = array[j];
            var flag3 = ((i.indexOf("~") != -1));
            if (flag3) {
              var start = ($T07().Parse(i.substr(0, i.indexOf("~"))) | 0);
              var len = (((i.indexOf("~")) + 1) | 0);
              var end = ($T07().Parse(System.String.Remove(i, 0, len)) | 0);

              for (var x = start; x <= end; ) {
                var num = ptr;
                ptr = ((num + 1) | 0);
                tempArray[num] = +x;
                num = x;
                x = ((num + 1) | 0);
              }
            } else {
              num = ptr;
              ptr = ((num + 1) | 0);
              tempArray[num] = +$T09().Parse(i);
            }
          }
          reader.Close();
          var flag4 = ptr < (minSize | 0);
          if (flag4) {
            ptr = (minSize | 0);
          }
          var retArray = JSIL.Array.New($T09(), ptr);

          for (var x2 = 0; x2 < ptr; ) {
            retArray[x2] = +tempArray[x2];
            num = x2;
            x2 = ((num + 1) | 0);
          }
          var result = retArray;
          return result;

          $label0 = 2 /* goto Block_8 */ ;
          continue $labelgroup0;
        case 2: /* Block_8 */ 
          reader.Close();
          retArray = JSIL.Array.New($T09(), minSize);
          result = retArray;
          return result;

          break $labelgroup0;
      }
    }
  }; 

  function Utils_GetIniInt (Section, KeyName, Default, FileName) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var reader = $T03().OpenText(FileName);

          while (true) {
            var read = reader.ReadLine();
            var flag = (System.String.StartsWith(read, ("[" + Section + "]")));
            if (flag) {

              do {
                read = reader.ReadLine();
                var compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[0];
                compString = compString.TrimEnd(JSIL.Array.New($T05(), [" "]));
                var flag2 = (compString == KeyName);
                if (flag2) {
                  $label0 = 1 /* goto Block_1 */ ;
                  continue $labelgroup0;
                }
              } while (!(System.String.StartsWith(read, "[")) && !reader.get_EndOfStream());
            }
            if (reader.get_EndOfStream()) {
              $label0 = 2 /* goto Block_3 */ ;
              continue $labelgroup0;
            }
          }

          $label0 = 1 /* goto Block_1 */ ;
          continue $labelgroup0;
        case 1: /* Block_1 */ 
          compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[1];
          compString = JSIL.SplitString(compString, JSIL.Array.New($T05(), [";"]))[0];
          compString = (compString.trim());
          reader.Close();
          var result = ($T07().Parse(compString) | 0);
          return result;

          $label0 = 2 /* goto Block_3 */ ;
          continue $labelgroup0;
        case 2: /* Block_3 */ 
          read = ((Default).toString());
          reader.Close();
          result = ($T07().Parse(read) | 0);
          return result;

          break $labelgroup0;
      }
    }
  }; 

  function Utils_GetINIIntArray (Section, KeyName, minSize, FileName) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var tempArray = JSIL.Array.New($T07(), 200);
          var ptr = 0;
          var reader = $T03().OpenText(FileName);

          while (true) {
            var read = reader.ReadLine();
            var flag = (System.String.StartsWith(read, ("[" + Section + "]")));
            if (flag) {

              do {
                read = reader.ReadLine();
                var compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[0];
                compString = compString.TrimEnd(JSIL.Array.New($T05(), [" "]));
                var flag2 = (compString == KeyName);
                if (flag2) {
                  $label0 = 1 /* goto Block_1 */ ;
                  continue $labelgroup0;
                }
              } while (!(System.String.StartsWith(read, "[")) && !reader.get_EndOfStream());
            }
            if (reader.get_EndOfStream()) {
              $label0 = 2 /* goto Block_8 */ ;
              continue $labelgroup0;
            }
          }

          $label0 = 1 /* goto Block_1 */ ;
          continue $labelgroup0;
        case 1: /* Block_1 */ 
          compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[1];
          compString = JSIL.SplitString(compString, JSIL.Array.New($T05(), [";"]))[0];
          compString = (compString.trim());
          var strArray = (JSIL.SplitString(compString, JSIL.Array.New($T05(), [","])));
          var array = strArray;

          for (var j = 0; j < (array.length | 0); j = ((j + 1) | 0)) {
            var i = array[j];
            var flag3 = ((i.indexOf("~") != -1));
            if (flag3) {
              var start = ($T07().Parse(i.substr(0, i.indexOf("~"))) | 0);
              var len = (((i.indexOf("~")) + 1) | 0);
              var end = ($T07().Parse(System.String.Remove(i, 0, len)) | 0);

              for (var x = start; x <= end; ) {
                var num = ptr;
                ptr = ((num + 1) | 0);
                tempArray[num] = x;
                num = x;
                x = ((num + 1) | 0);
              }
            } else {
              num = ptr;
              ptr = ((num + 1) | 0);
              tempArray[num] = ($T07().Parse(i) | 0);
            }
          }
          reader.Close();
          var flag4 = ptr < (minSize | 0);
          if (flag4) {
            ptr = (minSize | 0);
          }
          var retArray = JSIL.Array.New($T07(), ptr);

          for (var x2 = 0; x2 < ptr; ) {
            retArray[x2] = (tempArray[x2] | 0);
            num = x2;
            x2 = ((num + 1) | 0);
          }
          var result = retArray;
          return result;

          $label0 = 2 /* goto Block_8 */ ;
          continue $labelgroup0;
        case 2: /* Block_8 */ 
          reader.Close();
          result = JSIL.Array.New($T07(), minSize);
          return result;

          break $labelgroup0;
      }
    }
  }; 

  function Utils_GetIniString (Section, KeyName, Default, /* ref */ noChars, FileName) {

    var $label0 = 0;
  $labelgroup0: 
    while (true) {
      switch ($label0) {
        case 0: /* $entry0 */ 
          var reader = $T03().OpenText(FileName);

          while (true) {
            var read = reader.ReadLine();
            var flag = (System.String.StartsWith(read, ("[" + Section + "]")));
            if (flag) {

              do {
                read = reader.ReadLine();
                var compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[0];
                compString = compString.TrimEnd(JSIL.Array.New($T05(), [" "]));
                var flag2 = (compString == KeyName);
                if (flag2) {
                  $label0 = 1 /* goto Block_1 */ ;
                  continue $labelgroup0;
                }
              } while (!(System.String.StartsWith(read, "[")) && !reader.get_EndOfStream());
            }
            if (reader.get_EndOfStream()) {
              $label0 = 2 /* goto Block_3 */ ;
              continue $labelgroup0;
            }
          }

          $label0 = 1 /* goto Block_1 */ ;
          continue $labelgroup0;
        case 1: /* Block_1 */ 
          compString = JSIL.SplitString(read, JSIL.Array.New($T05(), ["="]))[1];
          compString = JSIL.SplitString(compString, JSIL.Array.New($T05(), [";"]))[0];
          compString = (compString.trim());
          reader.Close();
          noChars.set(compString.length);
          var result = compString;
          return result;

          $label0 = 2 /* goto Block_3 */ ;
          continue $labelgroup0;
        case 2: /* Block_3 */ 
          var flag3 = Default === null;
          if (flag3) {
            Default = "";
          }
          read = Default;
          noChars.set(read.length);
          reader.Close();
          result = read;
          return result;

          break $labelgroup0;
      }
    }
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.Utils", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Utils__ctor
    );

    $.Method({Static:false, Public:true }, "GetIniBool", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Boolean, $.String
        ]), 
      Utils_GetIniBool
    );

    $.Method({Static:false, Public:true }, "GetINIDoubleArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Double]), [
          $.String, $.String, 
          $.Int32, $.String
        ]), 
      Utils_GetINIDoubleArray
    );

    $.Method({Static:false, Public:true }, "GetIniInt", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.Int32, $.String
        ]), 
      Utils_GetIniInt
    );

    $.Method({Static:false, Public:true }, "GetINIIntArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Int32]), [
          $.String, $.String, 
          $.Int32, $.String
        ]), 
      Utils_GetINIIntArray
    );

    $.Method({Static:false, Public:true }, "GetIniString", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String
        ]), 
      Utils_GetIniString
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.CardHand */ 

(function CardHand$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1_cardValues)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Int32)) ();
  };


  function CardHand__ctor () {
    this.FHcards = JSIL.Array.New($T00(), 2);
    this.cardHand = JSIL.Array.New($T01(), 7);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.CardHand", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      CardHand__ctor
    );

    $.Field({Static:false, Public:true }, "HandRank", $.Int32);

    $.Field({Static:false, Public:true }, "CardValueTotal", $.Int32);

    $.Field({Static:false, Public:true }, "Kicker", $.Int32);

    $.Field({Static:false, Public:true }, "HighCard", $.Int32);

    $.Field({Static:false, Public:true }, "XofaKindValue", $.Int32);

    $.Field({Static:false, Public:true }, "XofaKindKicker", $.Int32);

    $.Field({Static:false, Public:true }, "TwoPairSecondValue", $.Int32);

    $.Field({Static:false, Public:true }, "FHcards", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.Form1+cardValues")]));

    $.Field({Static:false, Public:true }, "cardHand", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.GamePlayer */ 

(function GamePlayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.CardHand)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Int32)) ();
  };


  function GamePlayer__ctor () {
    this.hand = new ($T00())();
    this.winCards = JSIL.Array.New($T01(), 5);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.GamePlayer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      GamePlayer__ctor
    );

    $.Field({Static:false, Public:true }, "hand", $asm08.TypeRef("TexasHoldEmFoldUp.CardHand"));

    $.Field({Static:false, Public:true }, "winCards", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "RoundRaiseCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.RaiseLevel */ 

(function RaiseLevel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.Double)) ();
  };


  function RaiseLevel__ctor () {
    this.Range = JSIL.Array.New($T00(), 2);
    this.ReRaiseRange = JSIL.Array.New($T00(), 2);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.RaiseLevel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      RaiseLevel__ctor
    );

    $.Field({Static:false, Public:true }, "RaiseHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "Range", $jsilcore.TypeRef("System.Array", [$.Double]));

    $.Field({Static:false, Public:true }, "RaisePercentage", $.Int32);

    $.Field({Static:false, Public:true }, "ReRaiseRange", $jsilcore.TypeRef("System.Array", [$.Double]));

    $.Field({Static:false, Public:true }, "ReRaisePercentage", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.FoldLevel */ 

(function FoldLevel$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.Double)) ();
  };


  function FoldLevel__ctor () {
    this.Range = JSIL.Array.New($T00(), 2);
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.FoldLevel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      FoldLevel__ctor
    );

    $.Field({Static:false, Public:true }, "FoldHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "Range", $jsilcore.TypeRef("System.Array", [$.Double]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.VirtualPlayer */ 

(function VirtualPlayer$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.String)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Settings)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.RaiseLevel)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.FoldLevel)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.String"), [$asm00.TypeRef("System.Char"), $asm00.TypeRef("System.Int32")]))) ();
  };


  function VirtualPlayer__ctor () {
    this.Name = $S00().Construct(" ", $T01().playerNameSize);
    this.RaiseLevels = JSIL.Array.New($T02(), 6);
    this.FoldLevels = JSIL.Array.New($T03(), 8);
    this.AllIn = false;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.VirtualPlayer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      VirtualPlayer__ctor
    );

    $.Field({Static:false, Public:true }, "Name", $.String);

    $.Field({Static:false, Public:true }, "playerNumber", $.Int32);

    $.Field({Static:false, Public:true }, "FoldOnAnyRaise", $.Boolean);

    $.Field({Static:false, Public:true }, "RaiseLevels", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.RaiseLevel")]));

    $.Field({Static:false, Public:true }, "FoldLevels", $jsilcore.TypeRef("System.Array", [$asm08.TypeRef("TexasHoldEmFoldUp.FoldLevel")]));

    $.Field({Static:false, Public:true }, "HoleMinThreshold", $.Int32);

    $.Field({Static:false, Public:true }, "BluffHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "SlowPlayHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "AllInHands", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "BluffPercentage", $.Int32);

    $.Field({Static:false, Public:true }, "LimpPercentage", $.Int32);

    $.Field({Static:false, Public:true }, "BluffCallRaisePercentage", $.Int32);

    $.Field({Static:false, Public:true }, "FlopNoRaiseBetPercentages", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "TurnNoRaiseBetPercentages", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "RiverNoRaiseBetPercentages", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:true }, "MinimumFlopThreshold", $.Int32);

    $.Field({Static:false, Public:true }, "MinimumTurnThreshold", $.Int32);

    $.Field({Static:false, Public:true }, "MiniumuRiverThreshold", $.Int32);

    $.Field({Static:false, Public:true }, "Credits", $.Double);

    $.Field({Static:false, Public:true }, "TwoCardBet", $.Double);

    $.Field({Static:false, Public:true }, "FlopBet", $.Double);

    $.Field({Static:false, Public:true }, "TurnBet", $.Double);

    $.Field({Static:false, Public:true }, "RiverBet", $.Double);

    $.Field({Static:false, Public:true }, "CurrentBetAmount", $.Double);

    $.Field({Static:false, Public:true }, "LastRoundBet", $.Double);

    $.Field({Static:false, Public:true }, "Ante", $.Double);

    $.Field({Static:false, Public:true }, "RoundCallAmount", $.Double);

    $.Field({Static:false, Public:true }, "RoundRaiseAmount", $.Double);

    $.Field({Static:false, Public:true }, "RoundRaiseCount", $.Int32);

    $.Field({Static:false, Public:true }, "Folded", $.Boolean);

    $.Field({Static:false, Public:true }, "FiveCardHandRank", $.Int32);

    $.Field({Static:false, Public:true }, "HighCard", $.Int32);

    $.Field({Static:false, Public:true }, "PocketPair", $.Int32);

    $.Field({Static:false, Public:true }, "Bluffing", $.Boolean);

    $.Field({Static:false, Public:true }, "LimpIn", $.Boolean);

    $.Field({Static:false, Public:true }, "RoundChecked", $.Boolean);

    $.Field({Static:false, Public:true }, "FinalHandRank", $.Int32);

    $.Field({Static:false, Public:true }, "AllIn", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.Win32Support */ 

(function Win32Support$Members () {
  var $, $thisType;

  function Win32Support__ctor () {
  }; 










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.Win32Support", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Win32Support__ctor
    );

    $.PInvokeMethod({Static:true , Public:true }, "BitBlt", 
      new JSIL.MethodSignature($.Boolean, [
          $.IntPtr, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.IntPtr, 
          $.Int32, $.Int32, 
          $asm08.TypeRef("TexasHoldEmFoldUp.Win32Support+TRO")
        ]), 
      {
        Module: "gdi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CreateCompatibleBitmap", 
      new JSIL.MethodSignature($.IntPtr, [
          $.IntPtr, $.Int32, 
          $.Int32
        ]), 
      {
        Module: "gdi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "CreateCompatibleDC", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr]), 
      {
        Module: "gdi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DeleteDC", 
      new JSIL.MethodSignature($asm08.TypeRef("TexasHoldEmFoldUp.Win32Support+Bool"), [$.IntPtr]), 
      {
        Module: "gdi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "DeleteObject", 
      new JSIL.MethodSignature($asm08.TypeRef("TexasHoldEmFoldUp.Win32Support+Bool"), [$.IntPtr]), 
      {
        Module: "gdi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "GetPrivateProfileString", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.String
        ]), 
      {
        Module: "KERNEL32.DLL", 
        CharSet: 'unicode',
        EntryPoint: "GetPrivateProfileStringW", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "PostMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "user32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null

        ]
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SelectObject", 
      new JSIL.MethodSignature($.IntPtr, [$.IntPtr, $.IntPtr]), 
      {
        Module: "gdi32.dll", 
      }
    );

    $.PInvokeMethod({Static:true , Public:true }, "SendMessage", 
      new JSIL.MethodSignature($.Int32, [
          $.IntPtr, $.Int32, 
          $.IntPtr, $.IntPtr
        ]), 
      {
        Module: "user32.dll", 
        CharSet: 'auto',
        Parameters: [
          {
            NativeType: "U4"
          }, null
          , null

        ]
      }
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum TexasHoldEmFoldUp.Win32Support+Bool */ 

JSIL.MakeEnum(
  {
    FullName: "TexasHoldEmFoldUp.Win32Support+Bool", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    False: 0, 
    True: 1, 
  }
);

/* enum TexasHoldEmFoldUp.Win32Support+TRO */ 

JSIL.MakeEnum(
  {
    FullName: "TexasHoldEmFoldUp.Win32Support+TRO", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    BLACKNESS: 66, 
    NOTSRCERASE: 1114278, 
    NOTSRCCOPY: 3342344, 
    SRCERASE: 4457256, 
    DSTINVERT: 5570569, 
    PATINVERT: 5898313, 
    SRCINVERT: 6684742, 
    SRCAND: 8913094, 
    MERGEPAINT: 12255782, 
    MERGECOPY: 12583114, 
    SRCCOPY: 13369376, 
    SRCPAINT: 15597702, 
    PATCOPY: 15728673, 
    PATPAINT: 16452105, 
    WHITENESS: 16711778, 
  }
);

/* class TexasHoldEmFoldUp.SoundResource */ 

(function SoundResource$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.Resources.ResourceManager)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Type)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm00.System.Globalization.CultureInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.Resources.ResourceManager"), [$asm00.TypeRef("System.String"), $asm00.TypeRef("System.Reflection.Assembly")]))) ();
  };


  function SoundResource__ctor () {
  }; 

  function SoundResource_get_Culture () {
    return $thisType.resourceCulture;
  }; 

  function SoundResource_get_highlight () {
    return $thisType.get_ResourceManager().GetStream("highlight", $thisType.resourceCulture);
  }; 

  function SoundResource_get_pressed () {
    return $thisType.get_ResourceManager().GetStream("pressed", $thisType.resourceCulture);
  }; 

  function SoundResource_get_push2 () {
    return $thisType.get_ResourceManager().GetStream("push2", $thisType.resourceCulture);
  }; 

  function SoundResource_get_push3 () {
    return $thisType.get_ResourceManager().GetStream("push3", $thisType.resourceCulture);
  }; 

  function SoundResource_get_ResourceManager () {
    if ($thisType.resourceMan === null) {
      var temp = $S00().Construct("TexasHoldEmFoldUp.SoundResource", $thisType.__Type__.get_Assembly());
      $thisType.resourceMan = temp;
    }
    return $thisType.resourceMan;
  }; 

  function SoundResource_get_s_bang () {
    return $thisType.get_ResourceManager().GetStream("s_bang", $thisType.resourceCulture);
  }; 

  function SoundResource_get_timerbeep () {
    return $thisType.get_ResourceManager().GetStream("timerbeep", $thisType.resourceCulture);
  }; 

  function SoundResource_get_VideoWin () {
    return $thisType.get_ResourceManager().GetStream("VideoWin", $thisType.resourceCulture);
  }; 

  function SoundResource_set_Culture (value) {
    $thisType.resourceCulture = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.SoundResource", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      SoundResource__ctor
    );

    $.Method({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo")), 
      SoundResource_get_Culture
    );

    $.Method({Static:true , Public:false}, "get_highlight", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_highlight
    );

    $.Method({Static:true , Public:false}, "get_pressed", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_pressed
    );

    $.Method({Static:true , Public:false}, "get_push2", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_push2
    );

    $.Method({Static:true , Public:false}, "get_push3", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_push3
    );

    $.Method({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager")), 
      SoundResource_get_ResourceManager
    );

    $.Method({Static:true , Public:false}, "get_s_bang", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_s_bang
    );

    $.Method({Static:true , Public:false}, "get_timerbeep", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_timerbeep
    );

    $.Method({Static:true , Public:false}, "get_VideoWin", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.UnmanagedMemoryStream")), 
      SoundResource_get_VideoWin
    );

    $.Method({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Globalization.CultureInfo")), 
      SoundResource_set_Culture
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm00.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "highlight", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));

    $.Property({Static:true , Public:false}, "pressed", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));

    $.Property({Static:true , Public:false}, "push2", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));

    $.Property({Static:true , Public:false}, "push3", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));

    $.Property({Static:true , Public:false}, "s_bang", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));

    $.Property({Static:true , Public:false}, "timerbeep", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));

    $.Property({Static:true , Public:false}, "VideoWin", $asm00.TypeRef("System.IO.UnmanagedMemoryStream"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class TexasHoldEmFoldUp.SurrenderForm */ 

(function SurrenderForm$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm08.TexasHoldEmFoldUp.Form1)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm06.System.Windows.Forms.Form)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm06.System.Windows.Forms.Control)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm06.System.Windows.Forms.Timer)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.System.EventHandler)) ();
  };
  var $T05 = function () {
    return ($T05 = JSIL.Memoize($asm00.System.Boolean)) ();
  };
  var $T06 = function () {
    return ($T06 = JSIL.Memoize($asm00.System.IDisposable)) ();
  };
  var $T07 = function () {
    return ($T07 = JSIL.Memoize($asm00.System.Object)) ();
  };
  var $T08 = function () {
    return ($T08 = JSIL.Memoize($asm00.System.EventArgs)) ();
  };
  var $T09 = function () {
    return ($T09 = JSIL.Memoize($asm06.System.Windows.Forms.Label)) ();
  };
  var $T0A = function () {
    return ($T0A = JSIL.Memoize($asm06.System.Windows.Forms.TextBox)) ();
  };
  var $T0B = function () {
    return ($T0B = JSIL.Memoize($asm05.System.Drawing.Font)) ();
  };
  var $T0C = function () {
    return ($T0C = JSIL.Memoize($asm05.System.Drawing.FontStyle)) ();
  };
  var $T0D = function () {
    return ($T0D = JSIL.Memoize($asm05.System.Drawing.GraphicsUnit)) ();
  };
  var $T0E = function () {
    return ($T0E = JSIL.Memoize($asm05.System.Drawing.Point)) ();
  };
  var $T0F = function () {
    return ($T0F = JSIL.Memoize($asm05.System.Drawing.Size)) ();
  };
  var $T10 = function () {
    return ($T10 = JSIL.Memoize($asm05.System.Drawing.Color)) ();
  };
  var $T11 = function () {
    return ($T11 = JSIL.Memoize($asm06.System.Windows.Forms.TextBoxBase)) ();
  };
  var $T12 = function () {
    return ($T12 = JSIL.Memoize($asm06.System.Windows.Forms.BorderStyle)) ();
  };
  var $T13 = function () {
    return ($T13 = JSIL.Memoize($asm06.System.Windows.Forms.HorizontalAlignment)) ();
  };
  var $T14 = function () {
    return ($T14 = JSIL.Memoize($asm06.System.Windows.Forms.ContainerControl)) ();
  };
  var $T15 = function () {
    return ($T15 = JSIL.Memoize($asm05.System.Drawing.SizeF)) ();
  };
  var $T16 = function () {
    return ($T16 = JSIL.Memoize($asm06.System.Windows.Forms.AutoScaleMode)) ();
  };
  var $T17 = function () {
    return ($T17 = JSIL.Memoize($asm06.System.Windows.Forms.Control_ControlCollection)) ();
  };
  var $T18 = function () {
    return ($T18 = JSIL.Memoize($asm06.System.Windows.Forms.FormBorderStyle)) ();
  };
  var $T19 = function () {
    return ($T19 = JSIL.Memoize($asm06.System.Windows.Forms.FormStartPosition)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm06.TypeRef("System.Windows.Forms.Timer"), null))) ();
  };
  var $S01 = function () {
    return ($S01 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S02 = function () {
    return ($S02 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Font"), [
        $asm00.TypeRef("System.String"), $asm00.TypeRef("System.Single"), 
        $asm05.TypeRef("System.Drawing.FontStyle"), $asm05.TypeRef("System.Drawing.GraphicsUnit"), 
        $asm00.TypeRef("System.Byte")
      ]))) ();
  };
  var $S03 = function () {
    return ($S03 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Point"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S04 = function () {
    return ($S04 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.Size"), [$asm00.TypeRef("System.Int32"), $asm00.TypeRef("System.Int32")]))) ();
  };
  var $S05 = function () {
    return ($S05 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S06 = function () {
    return ($S06 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $S07 = function () {
    return ($S07 = JSIL.Memoize(new JSIL.ConstructorSignature($asm05.TypeRef("System.Drawing.SizeF"), [$asm00.TypeRef("System.Single"), $asm00.TypeRef("System.Single")]))) ();
  };
  var $S08 = function () {
    return ($S08 = JSIL.Memoize(JSIL.MethodSignature.Return($asm06.TypeRef("System.Windows.Forms.Control+ControlCollection")))) ();
  };
  var $S09 = function () {
    return ($S09 = JSIL.Memoize(new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.EventArgs")]))) ();
  };
  var $IM00 = function () {
    return ($IM00 = JSIL.Memoize($asm00.System.IDisposable.Dispose)) ();
  };


  function SurrenderForm__ctor (parentForm) {
    this.components = null;
    $T01().prototype._ctor.call(this);
    this.InitializeComponent();
    this.parent = parentForm;
    (this.textBox1).set_Text(this.parent.surrenderString);
    this.flashTimer = $S00().Construct();
    (this.flashTimer).set_Interval(500);
    (this.flashTimer).add_Tick($T04().New(this, function () { return $thisType.prototype.flashTimer_Tick.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "flashTimer_Tick", $S01(), false); }.bind(this)));
    (this.flashTimer).Start();
  }; 

  function SurrenderForm_Dispose$00 (disposing) {
    if (disposing && (this.components !== null)) {
      $IM00().Call(this.components, null);
    }
    $T01().prototype.Dispose.call(this, disposing);
  }; 

  function SurrenderForm_flashTimer_Tick (sender, e) {
    this.show = !this.show;
    var flag = this.show;
    if (flag) {
      (this.label1).set_Text(" SURRENDER?");
    } else {
      (this.label1).set_Text("");
    }
  }; 

  function SurrenderForm_InitializeComponent () {
    this.label1 = new ($T09())();
    this.textBox1 = new ($T0A())();
    this.textBox2 = new ($T0A())();
    this.SuspendLayout();
    (this.label1).set_AutoSize(true);
    (this.label1).set_Font($S02().Construct("Arial Black", 15.75, $T0C().Bold, $T0D().Point, 0));
    (this.label1.Location = $S03().Construct(10, 55));
    (this.label1).set_Name("label1");
    (this.label1.Size = $S04().Construct(189, 30));
    (this.label1).set_TabIndex(2);
    (this.label1).set_Text(" SURRENDER?");
    $T02().prototype.add_Click.call(this.label1, $T04().New(this, function () { return $thisType.prototype.label1_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "label1_Click", $S05(), false); }.bind(this)));
    (this.textBox1.BackColor = $T10().get_Red());
    (this.textBox1).set_BorderStyle($T12().None);
    (this.textBox1).set_Font($S02().Construct("Microsoft Sans Serif", 9.75, $T0C().Bold, $T0D().Point, 0));
    (this.textBox1.Location = $S03().Construct(15, 97));
    (this.textBox1).set_Name("textBox1");
    (this.textBox1.Size = $S04().Construct(51, 15));
    (this.textBox1).set_TabIndex(3);
    (this.textBox1).set_Visible(false);
    (this.textBox2.BackColor = $T10().get_Red());
    (this.textBox2).set_BorderStyle($T12().None);
    (this.textBox2).set_Font($S02().Construct("Microsoft Sans Serif", 8.25, $T0C().Bold, $T0D().Point, 0));
    (this.textBox2.Location = $S03().Construct(4, 1));
    (this.textBox2).set_Multiline(true);
    (this.textBox2).set_Name("textBox2");
    (this.textBox2).set_ReadOnly(true);
    (this.textBox2.Size = $S04().Construct(195, 51));
    (this.textBox2).set_TabIndex(4);
    (this.textBox2).set_TabStop(false);
    (this.textBox2).set_TextAlign($T13().Center);
    $T11().prototype.add_Click.call(this.textBox2, $T04().New(this, function () { return $thisType.prototype.textBox2_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "textBox2_Click", $S06(), false); }.bind(this)));
    (this.ContainerControl$AutoScaleDimensions = $S07().Construct(6, 13));
    this.set_AutoScaleMode($T16().Font);
    (this.BackColor = $T10().get_Red());
    (this.Form$ClientSize = $S04().Construct(205, 94));
    $T01().prototype.set_ControlBox.call(this, false);
    ($S08().Call($T02().prototype, "get_Controls", null, this)).Add(this.textBox2);
    ($S08().Call($T02().prototype, "get_Controls", null, this)).Add(this.textBox1);
    ($S08().Call($T02().prototype, "get_Controls", null, this)).Add(this.label1);
    $T01().prototype.set_FormBorderStyle.call(this, $T18().FixedToolWindow);
    (this.Form$Location = $S03().Construct(33, 620));
    $T02().prototype.set_Name.call(this, "SurrenderForm");
    $T01().prototype.set_StartPosition.call(this, $T19().Manual);
    $T01().prototype.set_TopMost.call(this, true);
    $T02().prototype.add_Click.call(this, $T04().New(this, function () { return $thisType.prototype.SurrenderForm_Click.call(this, arguments[0], arguments[1]); }.bind(this), function () { return JSIL.GetMethodInfo($thisType, "SurrenderForm_Click", $S09(), false); }.bind(this)));
    this.ResumeLayout(false);
    this.PerformLayout();
  }; 

  function SurrenderForm_label1_Click (sender, e) {
    this.SurrenderForm_Click(sender, e);
  }; 

  function SurrenderForm_SurrenderForm_Click (sender, e) {
    this.Hide();
    (this.parent).playerFoldButton_Click(this.parent.playerSurrenderButton, e);
  }; 

  function SurrenderForm_textBox2_Click (sender, e) {
    this.SurrenderForm_Click(sender, e);
  }; 

  JSIL.MakeType({
      BaseType: $asm06.TypeRef("System.Windows.Forms.Form"), 
      Name: "TexasHoldEmFoldUp.SurrenderForm", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm08.TypeRef("TexasHoldEmFoldUp.Form1")), 
      SurrenderForm__ctor
    );

    $.Method({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean), 
      SurrenderForm_Dispose$00
    );

    $.Method({Static:false, Public:false}, "flashTimer_Tick", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      SurrenderForm_flashTimer_Tick
    );

    $.Method({Static:false, Public:false}, "InitializeComponent", 
      JSIL.MethodSignature.Void, 
      SurrenderForm_InitializeComponent
    );

    $.Method({Static:false, Public:false}, "label1_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      SurrenderForm_label1_Click
    );

    $.Method({Static:false, Public:false}, "SurrenderForm_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      SurrenderForm_SurrenderForm_Click
    );

    $.Method({Static:false, Public:false}, "textBox2_Click", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.EventArgs")]), 
      SurrenderForm_textBox2_Click
    );

    $.Field({Static:false, Public:false}, "parent", $asm08.TypeRef("TexasHoldEmFoldUp.Form1"));

    $.Field({Static:false, Public:false}, "flashTimer", $asm06.TypeRef("System.Windows.Forms.Timer"));

    $.Field({Static:false, Public:false}, "show", $.Boolean);

    $.Field({Static:false, Public:false}, "components", $asm01.TypeRef("System.ComponentModel.IContainer"));

    $.Field({Static:false, Public:false}, "label1", $asm06.TypeRef("System.Windows.Forms.Label"));

    $.Field({Static:false, Public:false}, "textBox1", $asm06.TypeRef("System.Windows.Forms.TextBox"));

    $.Field({Static:false, Public:true }, "textBox2", $asm06.TypeRef("System.Windows.Forms.TextBox"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class TexasHoldEmFoldUp.TexasHoldem */ 

(function TexasHoldem$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Resources.ResourceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Drawing.Bitmap)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.System.Globalization.CultureInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.Resources.ResourceManager"), [$asm00.TypeRef("System.String"), $asm00.TypeRef("System.Reflection.Assembly")]))) ();
  };


  function TexasHoldem__ctor () {
  }; 

  function TexasHoldem_get_background_1 () {
    var obj = $thisType.get_ResourceManager().GetObject("background_1", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function TexasHoldem_get_background_11 () {
    var obj = $thisType.get_ResourceManager().GetObject("background_11", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function TexasHoldem_get_backgroundLeft_1 () {
    var obj = $thisType.get_ResourceManager().GetObject("backgroundLeft_1", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function TexasHoldem_get_CreditWindow () {
    var obj = $thisType.get_ResourceManager().GetObject("CreditWindow", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function TexasHoldem_get_Culture () {
    return $thisType.resourceCulture;
  }; 

  function TexasHoldem_get_ResourceManager () {
    if ($thisType.resourceMan === null) {
      var temp = $S00().Construct("TexasHoldEmFoldUp.TexasHoldem", $thisType.__Type__.get_Assembly());
      $thisType.resourceMan = temp;
    }
    return $thisType.resourceMan;
  }; 

  function TexasHoldem_set_Culture (value) {
    $thisType.resourceCulture = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.TexasHoldem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      TexasHoldem__ctor
    );

    $.Method({Static:true , Public:false}, "get_background_1", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      TexasHoldem_get_background_1
    );

    $.Method({Static:true , Public:false}, "get_background_11", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      TexasHoldem_get_background_11
    );

    $.Method({Static:true , Public:false}, "get_backgroundLeft_1", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      TexasHoldem_get_backgroundLeft_1
    );

    $.Method({Static:true , Public:false}, "get_CreditWindow", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      TexasHoldem_get_CreditWindow
    );

    $.Method({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo")), 
      TexasHoldem_get_Culture
    );

    $.Method({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager")), 
      TexasHoldem_get_ResourceManager
    );

    $.Method({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Globalization.CultureInfo")), 
      TexasHoldem_set_Culture
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm00.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "background_1", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "background_11", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "backgroundLeft_1", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "CreditWindow", $asm05.TypeRef("System.Drawing.Bitmap"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

JSIL.DeclareNamespace("TexasHoldEmFoldUp.Properties");
/* class TexasHoldEmFoldUp.Properties.Resources */ 

(function Resources$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm00.System.Object)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm00.System.Resources.ResourceManager)) ();
  };
  var $T02 = function () {
    return ($T02 = JSIL.Memoize($asm05.System.Drawing.Bitmap)) ();
  };
  var $T03 = function () {
    return ($T03 = JSIL.Memoize($asm00.System.Type)) ();
  };
  var $T04 = function () {
    return ($T04 = JSIL.Memoize($asm00.System.Globalization.CultureInfo)) ();
  };
  var $S00 = function () {
    return ($S00 = JSIL.Memoize(new JSIL.ConstructorSignature($asm00.TypeRef("System.Resources.ResourceManager"), [$asm00.TypeRef("System.String"), $asm00.TypeRef("System.Reflection.Assembly")]))) ();
  };


  function Resources__ctor () {
  }; 

  function Resources_get_bet_background1 () {
    var obj = $thisType.get_ResourceManager().GetObject("bet_background1", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_BonusBackground () {
    var obj = $thisType.get_ResourceManager().GetObject("BonusBackground", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_BonusBackground1 () {
    var obj = $thisType.get_ResourceManager().GetObject("BonusBackground1", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_BonusBackgroundNew () {
    var obj = $thisType.get_ResourceManager().GetObject("BonusBackgroundNew", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_button () {
    var obj = $thisType.get_ResourceManager().GetObject("button", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_button16 () {
    var obj = $thisType.get_ResourceManager().GetObject("button16", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_CreditWindow () {
    var obj = $thisType.get_ResourceManager().GetObject("CreditWindow", $thisType.resourceCulture);
    return $T02().$Cast(obj);
  }; 

  function Resources_get_Culture () {
    return $thisType.resourceCulture;
  }; 

  function Resources_get_ResourceManager () {
    if ($thisType.resourceMan === null) {
      var temp = $S00().Construct("TexasHoldEmFoldUp.Properties.Resources", $thisType.__Type__.get_Assembly());
      $thisType.resourceMan = temp;
    }
    return $thisType.resourceMan;
  }; 

  function Resources_set_Culture (value) {
    $thisType.resourceCulture = value;
  }; 

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "TexasHoldEmFoldUp.Properties.Resources", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void, 
      Resources__ctor
    );

    $.Method({Static:true , Public:false}, "get_bet_background1", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_bet_background1
    );

    $.Method({Static:true , Public:false}, "get_BonusBackground", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_BonusBackground
    );

    $.Method({Static:true , Public:false}, "get_BonusBackground1", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_BonusBackground1
    );

    $.Method({Static:true , Public:false}, "get_BonusBackgroundNew", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_BonusBackgroundNew
    );

    $.Method({Static:true , Public:false}, "get_button", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_button
    );

    $.Method({Static:true , Public:false}, "get_button16", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_button16
    );

    $.Method({Static:true , Public:false}, "get_CreditWindow", 
      JSIL.MethodSignature.Return($asm05.TypeRef("System.Drawing.Bitmap")), 
      Resources_get_CreditWindow
    );

    $.Method({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo")), 
      Resources_get_Culture
    );

    $.Method({Static:true , Public:false}, "get_ResourceManager", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager")), 
      Resources_get_ResourceManager
    );

    $.Method({Static:true , Public:false}, "set_Culture", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Globalization.CultureInfo")), 
      Resources_set_Culture
    );

    $.Field({Static:true , Public:false}, "resourceMan", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "resourceCulture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:false}, "ResourceManager", $asm00.TypeRef("System.Resources.ResourceManager"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"))
      .Attribute($asm01.TypeRef("System.ComponentModel.EditorBrowsableAttribute"), function () { return [$asm01.System.ComponentModel.EditorBrowsableState.Advanced]; });

    $.Property({Static:true , Public:false}, "bet_background1", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "BonusBackground", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "BonusBackground1", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "BonusBackgroundNew", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "button", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "button16", $asm05.TypeRef("System.Drawing.Bitmap"));

    $.Property({Static:true , Public:false}, "CreditWindow", $asm05.TypeRef("System.Drawing.Bitmap"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm01.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0"]; })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerNonUserCodeAttribute"))
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"));

})();

/* class TexasHoldEmFoldUp.Properties.Settings */ 

(function Settings$Members () {
  var $, $thisType;
  var $T00 = function () {
    return ($T00 = JSIL.Memoize($asm01.System.Configuration.SettingsBase)) ();
  };
  var $T01 = function () {
    return ($T01 = JSIL.Memoize($asm01.System.Configuration.ApplicationSettingsBase)) ();
  };


  function Settings__ctor () {
    $T01().prototype._ctor.call(this);
  }; 

  function Settings_get_Default () {
    return $thisType.defaultInstance;
  }; 

  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.Configuration.ApplicationSettingsBase"), 
      Name: "TexasHoldEmFoldUp.Properties.Settings", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.Method({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void, 
      Settings__ctor
    );

    $.Method({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type), 
      Settings_get_Default
    );

    $.Field({Static:true , Public:false}, "defaultInstance", $.Type);


    function Settings__cctor () {
      $thisType.defaultInstance = $thisType.$Cast($T00().Synchronized(new $thisType()));
    }; 

    $.Method({Static:true , Public:false}, ".cctor", 
      JSIL.MethodSignature.Void, 
      Settings__cctor
    );

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Runtime.CompilerServices.CompilerGeneratedAttribute"))
    .Attribute($asm01.TypeRef("System.CodeDom.Compiler.GeneratedCodeAttribute"), function () { return ["Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0"]; });

})();


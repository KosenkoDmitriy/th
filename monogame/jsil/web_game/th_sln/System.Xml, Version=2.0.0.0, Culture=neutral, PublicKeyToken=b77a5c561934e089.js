/* Generated by JSIL v0.8.2 build 30252. See http://jsil.org/ for more information. */ 
'use strict';
/* Generating type stubs only */ 
var $asm07 = JSIL.DeclareAssembly("System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

/* class FXAssembly */ 

(function FXAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("FXAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Version", $.String, "2.0.0.0");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class ThisAssembly */ 

(function ThisAssembly$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("ThisAssembly", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Title", $.String, "System.Xml.dll");

    $.Constant({Static:true , Public:false}, "Description", $.String, "System.Xml.dll");

    $.Constant({Static:true , Public:false}, "DefaultAlias", $.String, "System.Xml.dll");

    $.Constant({Static:true , Public:false}, "Copyright", $.String, "\xa9 Microsoft Corporation.  All rights reserved.");

    $.Constant({Static:true , Public:false}, "Version", $.String, "2.0.0.0");

    $.Constant({Static:true , Public:false}, "InformationalVersion", $.String, "2.0.50727.6387");

    $.Constant({Static:true , Public:false}, "DailyBuildNumber", $.Int32, 50727);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class AssemblyRef */ 

(function AssemblyRef$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("AssemblyRef", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "EcmaPublicKey", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyToken", $.String, "b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "EcmaPublicKeyFull", $.String, "00000000000000000400000000000000");

    $.Constant({Static:true , Public:false}, "Mscorlib", $.String, "mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemData", $.String, "System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemDataOracleClient", $.String, "System.Data.OracleClient, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "System", $.String, "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemRuntimeRemoting", $.String, "System.Runtime.Remoting, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemWindowsForms", $.String, "System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "SystemXml", $.String, "System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKey", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyToken", $.String, "b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftPublicKeyFull", $.String, "002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293");

    $.Constant({Static:true , Public:false}, "SystemConfiguration", $.String, "System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemConfigurationInstall", $.String, "System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDeployment", $.String, "System.Deployment, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDesign", $.String, "System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDirectoryServices", $.String, "System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawingDesign", $.String, "System.Drawing.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemDrawing", $.String, "System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemEnterpriseServices", $.String, "System.EnterpriseServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemManagement", $.String, "System.Management, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemMessaging", $.String, "System.Messaging, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemRuntimeSerializationFormattersSoap", $.String, "System.Runtime.Serialization.Formatters.Soap, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemSecurity", $.String, "System.Security, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemServiceProcess", $.String, "System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWeb", $.String, "System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebMobile", $.String, "System.Web.Mobile, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebRegularExpressions", $.String, "System.Web.RegularExpressions, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "SystemWebServices", $.String, "System.Web.Services, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudio", $.String, "Microsoft.VisualStudio, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWindowsForms", $.String, "Microsoft.VisualStudio.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "VJSharpCodeProvider", $.String, "VJSharpCodeProvider, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsPublicKey", $.String, "b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "ASPBrowserCapsFactory", $.String, "ASP.BrowserCapsFactory, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b7bd7678b977bd8f");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesigner", $.String, "Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVisualStudioWeb", $.String, "Microsoft.VisualStudio.Web, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftVSDesignerMobile", $.String, "Microsoft.VSDesigner.Mobile, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");

    $.Constant({Static:true , Public:false}, "MicrosoftJScript", $.String, "Microsoft.JScript, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Xml");
/* class System.Xml.ResDescriptionAttribute */ 

(function ResDescriptionAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.DescriptionAttribute"), 
      Name: "System.Xml.ResDescriptionAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Description", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "replaced", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Description", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Xml.ResCategoryAttribute */ 

(function ResCategoryAttribute$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.CategoryAttribute"), 
      Name: "System.Xml.ResCategoryAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetLocalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.All]; });

})();

/* class System.Xml.Res */ 

(function Res$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Res", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Culture", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Globalization.CultureInfo"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Resources", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Resources.ResourceManager"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetLoader", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.Object])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:true }, "GetString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "Xml_UserException", $.String, "Xml_UserException");

    $.Constant({Static:true , Public:false}, "Xml_DefaultException", $.String, "Xml_DefaultException");

    $.Constant({Static:true , Public:false}, "Xml_InvalidOperation", $.String, "Xml_InvalidOperation");

    $.Constant({Static:true , Public:false}, "Xml_StackOverflow", $.String, "Xml_StackOverflow");

    $.Constant({Static:true , Public:false}, "Xml_ErrorFilePosition", $.String, "Xml_ErrorFilePosition");

    $.Constant({Static:true , Public:false}, "Xslt_NoStylesheetLoaded", $.String, "Xslt_NoStylesheetLoaded");

    $.Constant({Static:true , Public:false}, "Xslt_NotCompiledStylesheet", $.String, "Xslt_NotCompiledStylesheet");

    $.Constant({Static:true , Public:false}, "Xml_UnclosedQuote", $.String, "Xml_UnclosedQuote");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOF", $.String, "Xml_UnexpectedEOF");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOF1", $.String, "Xml_UnexpectedEOF1");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEOFInElementContent", $.String, "Xml_UnexpectedEOFInElementContent");

    $.Constant({Static:true , Public:false}, "Xml_BadStartNameChar", $.String, "Xml_BadStartNameChar");

    $.Constant({Static:true , Public:false}, "Xml_BadNameChar", $.String, "Xml_BadNameChar");

    $.Constant({Static:true , Public:false}, "Xml_BadNameCharWithPos", $.String, "Xml_BadNameCharWithPos");

    $.Constant({Static:true , Public:false}, "Xml_BadDecimalEntity", $.String, "Xml_BadDecimalEntity");

    $.Constant({Static:true , Public:false}, "Xml_BadHexEntity", $.String, "Xml_BadHexEntity");

    $.Constant({Static:true , Public:false}, "Xml_MissingByteOrderMark", $.String, "Xml_MissingByteOrderMark");

    $.Constant({Static:true , Public:false}, "Xml_UnknownEncoding", $.String, "Xml_UnknownEncoding");

    $.Constant({Static:true , Public:false}, "Xml_InternalError", $.String, "Xml_InternalError");

    $.Constant({Static:true , Public:false}, "Xml_InvalidCharInThisEncoding", $.String, "Xml_InvalidCharInThisEncoding");

    $.Constant({Static:true , Public:false}, "Xml_ErrorPosition", $.String, "Xml_ErrorPosition");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedTokenEx", $.String, "Xml_UnexpectedTokenEx");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedTokens2", $.String, "Xml_UnexpectedTokens2");

    $.Constant({Static:true , Public:false}, "Xml_ExpectingWhiteSpace", $.String, "Xml_ExpectingWhiteSpace");

    $.Constant({Static:true , Public:false}, "Xml_TagMismatch", $.String, "Xml_TagMismatch");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedEndTag", $.String, "Xml_UnexpectedEndTag");

    $.Constant({Static:true , Public:false}, "Xml_UnknownNs", $.String, "Xml_UnknownNs");

    $.Constant({Static:true , Public:false}, "Xml_BadAttributeChar", $.String, "Xml_BadAttributeChar");

    $.Constant({Static:true , Public:false}, "Xml_MissingRoot", $.String, "Xml_MissingRoot");

    $.Constant({Static:true , Public:false}, "Xml_MultipleRoots", $.String, "Xml_MultipleRoots");

    $.Constant({Static:true , Public:false}, "Xml_InvalidRootData", $.String, "Xml_InvalidRootData");

    $.Constant({Static:true , Public:false}, "Xml_XmlDeclNotFirst", $.String, "Xml_XmlDeclNotFirst");

    $.Constant({Static:true , Public:false}, "Xml_InvalidXmlDecl", $.String, "Xml_InvalidXmlDecl");

    $.Constant({Static:true , Public:false}, "Xml_InvalidNodeType", $.String, "Xml_InvalidNodeType");

    $.Constant({Static:true , Public:false}, "Xml_InvalidPIName", $.String, "Xml_InvalidPIName");

    $.Constant({Static:true , Public:false}, "Xml_InvalidXmlSpace", $.String, "Xml_InvalidXmlSpace");

    $.Constant({Static:true , Public:false}, "Xml_InvalidVersionNumber", $.String, "Xml_InvalidVersionNumber");

    $.Constant({Static:true , Public:false}, "Xml_DupAttributeName", $.String, "Xml_DupAttributeName");

    $.Constant({Static:true , Public:false}, "Xml_BadDTDLocation", $.String, "Xml_BadDTDLocation");

    $.Constant({Static:true , Public:false}, "Xml_ElementNotFound", $.String, "Xml_ElementNotFound");

    $.Constant({Static:true , Public:false}, "Xml_ElementNotFoundNs", $.String, "Xml_ElementNotFoundNs");

    $.Constant({Static:true , Public:false}, "Xml_PartialContentNodeTypeNotSupportedEx", $.String, "Xml_PartialContentNodeTypeNotSupportedEx");

    $.Constant({Static:true , Public:false}, "Xml_MultipleDTDsProvided", $.String, "Xml_MultipleDTDsProvided");

    $.Constant({Static:true , Public:false}, "Xml_CanNotBindToReservedNamespace", $.String, "Xml_CanNotBindToReservedNamespace");

    $.Constant({Static:true , Public:false}, "Xml_XmlnsBelongsToReservedNs", $.String, "Xml_XmlnsBelongsToReservedNs");

    $.Constant({Static:true , Public:false}, "Xml_InvalidCharacter", $.String, "Xml_InvalidCharacter");

    $.Constant({Static:true , Public:false}, "Xml_ExpectDtdMarkup", $.String, "Xml_ExpectDtdMarkup");

    $.Constant({Static:true , Public:false}, "Xml_InvalidBinHexValue", $.String, "Xml_InvalidBinHexValue");

    $.Constant({Static:true , Public:false}, "Xml_InvalidBinHexValueOddCount", $.String, "Xml_InvalidBinHexValueOddCount");

    $.Constant({Static:true , Public:false}, "Xml_InvalidTextDecl", $.String, "Xml_InvalidTextDecl");

    $.Constant({Static:true , Public:false}, "Xml_InvalidBase64Value", $.String, "Xml_InvalidBase64Value");

    $.Constant({Static:true , Public:false}, "Xml_ExpectExternalOrPublicId", $.String, "Xml_ExpectExternalOrPublicId");

    $.Constant({Static:true , Public:false}, "Xml_ExpectExternalIdOrEntityValue", $.String, "Xml_ExpectExternalIdOrEntityValue");

    $.Constant({Static:true , Public:false}, "Xml_ExpectAttType", $.String, "Xml_ExpectAttType");

    $.Constant({Static:true , Public:false}, "Xml_ExpectIgnoreOrInclude", $.String, "Xml_ExpectIgnoreOrInclude");

    $.Constant({Static:true , Public:false}, "Xml_ExpectSubOrClose", $.String, "Xml_ExpectSubOrClose");

    $.Constant({Static:true , Public:false}, "Xml_ExpectExternalOrClose", $.String, "Xml_ExpectExternalOrClose");

    $.Constant({Static:true , Public:false}, "Xml_ExpectOp", $.String, "Xml_ExpectOp");

    $.Constant({Static:true , Public:false}, "Xml_ExpectNoWhitespace", $.String, "Xml_ExpectNoWhitespace");

    $.Constant({Static:true , Public:false}, "Xml_ExpectPcData", $.String, "Xml_ExpectPcData");

    $.Constant({Static:true , Public:false}, "Xml_UndeclaredParEntity", $.String, "Xml_UndeclaredParEntity");

    $.Constant({Static:true , Public:false}, "Xml_UndeclaredEntity", $.String, "Xml_UndeclaredEntity");

    $.Constant({Static:true , Public:false}, "Xml_RecursiveParEntity", $.String, "Xml_RecursiveParEntity");

    $.Constant({Static:true , Public:false}, "Xml_RecursiveGenEntity", $.String, "Xml_RecursiveGenEntity");

    $.Constant({Static:true , Public:false}, "Xml_ExternalEntityInAttValue", $.String, "Xml_ExternalEntityInAttValue");

    $.Constant({Static:true , Public:false}, "Xml_UnparsedEntityRef", $.String, "Xml_UnparsedEntityRef");

    $.Constant({Static:true , Public:false}, "Xml_InvalidConditionalSection", $.String, "Xml_InvalidConditionalSection");

    $.Constant({Static:true , Public:false}, "Xml_UnclosedConditionalSection", $.String, "Xml_UnclosedConditionalSection");

    $.Constant({Static:true , Public:false}, "Xml_InvalidParEntityRef", $.String, "Xml_InvalidParEntityRef");

    $.Constant({Static:true , Public:false}, "Xml_InvalidContentModel", $.String, "Xml_InvalidContentModel");

    $.Constant({Static:true , Public:false}, "Xml_InvalidXmlDocument", $.String, "Xml_InvalidXmlDocument");

    $.Constant({Static:true , Public:false}, "Xml_FragmentId", $.String, "Xml_FragmentId");

    $.Constant({Static:true , Public:false}, "Xml_ColonInLocalName", $.String, "Xml_ColonInLocalName");

    $.Constant({Static:true , Public:false}, "Xml_InvalidAttributeType", $.String, "Xml_InvalidAttributeType");

    $.Constant({Static:true , Public:false}, "Xml_InvalidAttributeType1", $.String, "Xml_InvalidAttributeType1");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedCDataEnd", $.String, "Xml_UnexpectedCDataEnd");

    $.Constant({Static:true , Public:false}, "Xml_EnumerationRequired", $.String, "Xml_EnumerationRequired");

    $.Constant({Static:true , Public:false}, "Xml_NotSameNametable", $.String, "Xml_NotSameNametable");

    $.Constant({Static:true , Public:false}, "Xml_NametableMismatch", $.String, "Xml_NametableMismatch");

    $.Constant({Static:true , Public:false}, "Xml_NoDTDPresent", $.String, "Xml_NoDTDPresent");

    $.Constant({Static:true , Public:false}, "Xml_MultipleValidaitonTypes", $.String, "Xml_MultipleValidaitonTypes");

    $.Constant({Static:true , Public:false}, "Xml_BadNamespaceDecl", $.String, "Xml_BadNamespaceDecl");

    $.Constant({Static:true , Public:false}, "Xml_ErrorParsingEntityName", $.String, "Xml_ErrorParsingEntityName");

    $.Constant({Static:true , Public:false}, "Xml_NoValidation", $.String, "Xml_NoValidation");

    $.Constant({Static:true , Public:false}, "Xml_WhitespaceHandling", $.String, "Xml_WhitespaceHandling");

    $.Constant({Static:true , Public:false}, "Xml_InvalidResetStateCall", $.String, "Xml_InvalidResetStateCall");

    $.Constant({Static:true , Public:false}, "Xml_EntityHandling", $.String, "Xml_EntityHandling");

    $.Constant({Static:true , Public:false}, "Xml_InvalidNmToken", $.String, "Xml_InvalidNmToken");

    $.Constant({Static:true , Public:false}, "Xml_EntityRefNesting", $.String, "Xml_EntityRefNesting");

    $.Constant({Static:true , Public:false}, "Xml_CannotResolveEntity", $.String, "Xml_CannotResolveEntity");

    $.Constant({Static:true , Public:false}, "Xml_CannotResolveExternalSubset", $.String, "Xml_CannotResolveExternalSubset");

    $.Constant({Static:true , Public:false}, "Xml_CannotResolveUrl", $.String, "Xml_CannotResolveUrl");

    $.Constant({Static:true , Public:false}, "Xml_CDATAEndInText", $.String, "Xml_CDATAEndInText");

    $.Constant({Static:true , Public:false}, "Xml_ExternalEntityInStandAloneDocument", $.String, "Xml_ExternalEntityInStandAloneDocument");

    $.Constant({Static:true , Public:false}, "Xml_DtdAfterRootElement", $.String, "Xml_DtdAfterRootElement");

    $.Constant({Static:true , Public:false}, "Xml_ReadOnlyProperty", $.String, "Xml_ReadOnlyProperty");

    $.Constant({Static:true , Public:false}, "Xml_DtdIsProhibited", $.String, "Xml_DtdIsProhibited");

    $.Constant({Static:true , Public:false}, "Xml_DtdIsProhibitedEx", $.String, "Xml_DtdIsProhibitedEx");

    $.Constant({Static:true , Public:false}, "Xml_AttlistDuplEnumValue", $.String, "Xml_AttlistDuplEnumValue");

    $.Constant({Static:true , Public:false}, "Xml_AttlistDuplNotationValue", $.String, "Xml_AttlistDuplNotationValue");

    $.Constant({Static:true , Public:false}, "Xml_EncodingSwitchAfterResetState", $.String, "Xml_EncodingSwitchAfterResetState");

    $.Constant({Static:true , Public:false}, "Xml_ReadSubtreeNotOnElement", $.String, "Xml_ReadSubtreeNotOnElement");

    $.Constant({Static:true , Public:false}, "Xml_DtdNotAllowedInFragment", $.String, "Xml_DtdNotAllowedInFragment");

    $.Constant({Static:true , Public:false}, "Xml_CannotStartDocumentOnFragment", $.String, "Xml_CannotStartDocumentOnFragment");

    $.Constant({Static:true , Public:false}, "Xml_InvalidWhitespaceCharacter", $.String, "Xml_InvalidWhitespaceCharacter");

    $.Constant({Static:true , Public:false}, "Xml_IncompatibleConformanceLevel", $.String, "Xml_IncompatibleConformanceLevel");

    $.Constant({Static:true , Public:false}, "Xml_BinaryXmlReadAsText", $.String, "Xml_BinaryXmlReadAsText");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedNodeType", $.String, "Xml_UnexpectedNodeType");

    $.Constant({Static:true , Public:false}, "Xml_ErrorOpeningExternalDtd", $.String, "Xml_ErrorOpeningExternalDtd");

    $.Constant({Static:true , Public:false}, "Xml_ErrorOpeningExternalEntity", $.String, "Xml_ErrorOpeningExternalEntity");

    $.Constant({Static:true , Public:false}, "Xml_ReadBinaryContentNotSupported", $.String, "Xml_ReadBinaryContentNotSupported");

    $.Constant({Static:true , Public:false}, "Xml_ReadValueChunkNotSupported", $.String, "Xml_ReadValueChunkNotSupported");

    $.Constant({Static:true , Public:false}, "Xml_InvalidReadContentAs", $.String, "Xml_InvalidReadContentAs");

    $.Constant({Static:true , Public:false}, "Xml_InvalidReadElementContentAs", $.String, "Xml_InvalidReadElementContentAs");

    $.Constant({Static:true , Public:false}, "Xml_MixedReadElementContentAs", $.String, "Xml_MixedReadElementContentAs");

    $.Constant({Static:true , Public:false}, "Xml_MixingReadValueChunkWithBinary", $.String, "Xml_MixingReadValueChunkWithBinary");

    $.Constant({Static:true , Public:false}, "Xml_MixingBinaryContentMethods", $.String, "Xml_MixingBinaryContentMethods");

    $.Constant({Static:true , Public:false}, "Xml_MixingV1StreamingWithV2Binary", $.String, "Xml_MixingV1StreamingWithV2Binary");

    $.Constant({Static:true , Public:false}, "Xml_InvalidReadValueChunk", $.String, "Xml_InvalidReadValueChunk");

    $.Constant({Static:true , Public:false}, "Xml_ReadContentAsFormatException", $.String, "Xml_ReadContentAsFormatException");

    $.Constant({Static:true , Public:false}, "Xml_DoubleBaseUri", $.String, "Xml_DoubleBaseUri");

    $.Constant({Static:true , Public:false}, "Xml_NotEnoughSpaceForSurrogatePair", $.String, "Xml_NotEnoughSpaceForSurrogatePair");

    $.Constant({Static:true , Public:false}, "Xml_EmptyUrl", $.String, "Xml_EmptyUrl");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedNodeInSimpleContent", $.String, "Xml_UnexpectedNodeInSimpleContent");

    $.Constant({Static:true , Public:false}, "Xml_UnsupportedClass", $.String, "Xml_UnsupportedClass");

    $.Constant({Static:true , Public:false}, "Xml_NullResolver", $.String, "Xml_NullResolver");

    $.Constant({Static:true , Public:false}, "Xml_UntrustedCodeSettingResolver", $.String, "Xml_UntrustedCodeSettingResolver");

    $.Constant({Static:true , Public:false}, "Xml_InvalidQuote", $.String, "Xml_InvalidQuote");

    $.Constant({Static:true , Public:false}, "Xml_UndefPrefix", $.String, "Xml_UndefPrefix");

    $.Constant({Static:true , Public:false}, "Xml_PrefixForEmptyNs", $.String, "Xml_PrefixForEmptyNs");

    $.Constant({Static:true , Public:false}, "Xml_NoNamespaces", $.String, "Xml_NoNamespaces");

    $.Constant({Static:true , Public:false}, "Xml_InvalidCDataChars", $.String, "Xml_InvalidCDataChars");

    $.Constant({Static:true , Public:false}, "Xml_InvalidCommentChars", $.String, "Xml_InvalidCommentChars");

    $.Constant({Static:true , Public:false}, "Xml_NotTheFirst", $.String, "Xml_NotTheFirst");

    $.Constant({Static:true , Public:false}, "Xml_InvalidPiChars", $.String, "Xml_InvalidPiChars");

    $.Constant({Static:true , Public:false}, "Xml_UndefNamespace", $.String, "Xml_UndefNamespace");

    $.Constant({Static:true , Public:false}, "Xml_EmptyName", $.String, "Xml_EmptyName");

    $.Constant({Static:true , Public:false}, "Xml_EmptyLocalName", $.String, "Xml_EmptyLocalName");

    $.Constant({Static:true , Public:false}, "Xml_InvalidNameChars", $.String, "Xml_InvalidNameChars");

    $.Constant({Static:true , Public:false}, "Xml_InvalidNameCharsDetail", $.String, "Xml_InvalidNameCharsDetail");

    $.Constant({Static:true , Public:false}, "Xml_NoStartTag", $.String, "Xml_NoStartTag");

    $.Constant({Static:true , Public:false}, "Xml_Closed", $.String, "Xml_Closed");

    $.Constant({Static:true , Public:false}, "Xml_ClosedOrError", $.String, "Xml_ClosedOrError");

    $.Constant({Static:true , Public:false}, "Xml_WrongToken", $.String, "Xml_WrongToken");

    $.Constant({Static:true , Public:false}, "Xml_InvalidPrefix", $.String, "Xml_InvalidPrefix");

    $.Constant({Static:true , Public:false}, "Xml_XmlPrefix", $.String, "Xml_XmlPrefix");

    $.Constant({Static:true , Public:false}, "Xml_XmlnsPrefix", $.String, "Xml_XmlnsPrefix");

    $.Constant({Static:true , Public:false}, "Xml_NamespaceDeclXmlXmlns", $.String, "Xml_NamespaceDeclXmlXmlns");

    $.Constant({Static:true , Public:false}, "Xml_NonWhitespace", $.String, "Xml_NonWhitespace");

    $.Constant({Static:true , Public:false}, "Xml_DupXmlDecl", $.String, "Xml_DupXmlDecl");

    $.Constant({Static:true , Public:false}, "Xml_CannotWriteXmlDecl", $.String, "Xml_CannotWriteXmlDecl");

    $.Constant({Static:true , Public:false}, "Xml_NoRoot", $.String, "Xml_NoRoot");

    $.Constant({Static:true , Public:false}, "Xml_InvalidIndentation", $.String, "Xml_InvalidIndentation");

    $.Constant({Static:true , Public:false}, "Xml_NotInWriteState", $.String, "Xml_NotInWriteState");

    $.Constant({Static:true , Public:false}, "Xml_InvalidPosition", $.String, "Xml_InvalidPosition");

    $.Constant({Static:true , Public:false}, "Xml_IncompleteEntity", $.String, "Xml_IncompleteEntity");

    $.Constant({Static:true , Public:false}, "Xml_IncompleteDtdContent", $.String, "Xml_IncompleteDtdContent");

    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogateHighChar", $.String, "Xml_InvalidSurrogateHighChar");

    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogateMissingLowChar", $.String, "Xml_InvalidSurrogateMissingLowChar");

    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogatePairWithArgs", $.String, "Xml_InvalidSurrogatePairWithArgs");

    $.Constant({Static:true , Public:false}, "Xml_SurrogatePairSplit", $.String, "Xml_SurrogatePairSplit");

    $.Constant({Static:true , Public:false}, "Xml_NoMultipleRoots", $.String, "Xml_NoMultipleRoots");

    $.Constant({Static:true , Public:false}, "Xml_RedefinePrefix", $.String, "Xml_RedefinePrefix");

    $.Constant({Static:true , Public:false}, "Xml_DtdAlreadyWritten", $.String, "Xml_DtdAlreadyWritten");

    $.Constant({Static:true , Public:false}, "XmlBadName", $.String, "XmlBadName");

    $.Constant({Static:true , Public:false}, "XmlNoNameAllowed", $.String, "XmlNoNameAllowed");

    $.Constant({Static:true , Public:false}, "Xml_InvalidCharsInIndent", $.String, "Xml_InvalidCharsInIndent");

    $.Constant({Static:true , Public:false}, "Xml_IndentCharsNotWhitespace", $.String, "Xml_IndentCharsNotWhitespace");

    $.Constant({Static:true , Public:false}, "Xml_ConformanceLevelFragment", $.String, "Xml_ConformanceLevelFragment");

    $.Constant({Static:true , Public:false}, "XmlDocument_ValidateInvalidNodeType", $.String, "XmlDocument_ValidateInvalidNodeType");

    $.Constant({Static:true , Public:false}, "XmlDocument_NodeNotFromDocument", $.String, "XmlDocument_NodeNotFromDocument");

    $.Constant({Static:true , Public:false}, "XmlDocument_NoNodeSchemaInfo", $.String, "XmlDocument_NoNodeSchemaInfo");

    $.Constant({Static:true , Public:false}, "XmlDocument_NoSchemaInfo", $.String, "XmlDocument_NoSchemaInfo");

    $.Constant({Static:true , Public:false}, "Sch_DefaultException", $.String, "Sch_DefaultException");

    $.Constant({Static:true , Public:false}, "Sch_ParEntityRefNesting", $.String, "Sch_ParEntityRefNesting");

    $.Constant({Static:true , Public:false}, "Sch_DupElementDecl", $.String, "Sch_DupElementDecl");

    $.Constant({Static:true , Public:false}, "Sch_IdAttrDeclared", $.String, "Sch_IdAttrDeclared");

    $.Constant({Static:true , Public:false}, "Sch_RootMatchDocType", $.String, "Sch_RootMatchDocType");

    $.Constant({Static:true , Public:false}, "Sch_DupId", $.String, "Sch_DupId");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredElement", $.String, "Sch_UndeclaredElement");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredAttribute", $.String, "Sch_UndeclaredAttribute");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredNotation", $.String, "Sch_UndeclaredNotation");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredId", $.String, "Sch_UndeclaredId");

    $.Constant({Static:true , Public:false}, "Sch_SchemaRootExpected", $.String, "Sch_SchemaRootExpected");

    $.Constant({Static:true , Public:false}, "Sch_XSDSchemaRootExpected", $.String, "Sch_XSDSchemaRootExpected");

    $.Constant({Static:true , Public:false}, "Sch_UnsupportedAttribute", $.String, "Sch_UnsupportedAttribute");

    $.Constant({Static:true , Public:false}, "Sch_UnsupportedElement", $.String, "Sch_UnsupportedElement");

    $.Constant({Static:true , Public:false}, "Sch_MissAttribute", $.String, "Sch_MissAttribute");

    $.Constant({Static:true , Public:false}, "Sch_AnnotationLocation", $.String, "Sch_AnnotationLocation");

    $.Constant({Static:true , Public:false}, "Sch_DataTypeTextOnly", $.String, "Sch_DataTypeTextOnly");

    $.Constant({Static:true , Public:false}, "Sch_UnknownModel", $.String, "Sch_UnknownModel");

    $.Constant({Static:true , Public:false}, "Sch_UnknownOrder", $.String, "Sch_UnknownOrder");

    $.Constant({Static:true , Public:false}, "Sch_UnknownContent", $.String, "Sch_UnknownContent");

    $.Constant({Static:true , Public:false}, "Sch_UnknownRequired", $.String, "Sch_UnknownRequired");

    $.Constant({Static:true , Public:false}, "Sch_UnknownDtType", $.String, "Sch_UnknownDtType");

    $.Constant({Static:true , Public:false}, "Sch_MixedMany", $.String, "Sch_MixedMany");

    $.Constant({Static:true , Public:false}, "Sch_GroupDisabled", $.String, "Sch_GroupDisabled");

    $.Constant({Static:true , Public:false}, "Sch_MissDtvalue", $.String, "Sch_MissDtvalue");

    $.Constant({Static:true , Public:false}, "Sch_MissDtvaluesAttribute", $.String, "Sch_MissDtvaluesAttribute");

    $.Constant({Static:true , Public:false}, "Sch_DupDtType", $.String, "Sch_DupDtType");

    $.Constant({Static:true , Public:false}, "Sch_DupAttribute", $.String, "Sch_DupAttribute");

    $.Constant({Static:true , Public:false}, "Sch_RequireEnumeration", $.String, "Sch_RequireEnumeration");

    $.Constant({Static:true , Public:false}, "Sch_DefaultIdValue", $.String, "Sch_DefaultIdValue");

    $.Constant({Static:true , Public:false}, "Sch_ElementNotAllowed", $.String, "Sch_ElementNotAllowed");

    $.Constant({Static:true , Public:false}, "Sch_ElementMissing", $.String, "Sch_ElementMissing");

    $.Constant({Static:true , Public:false}, "Sch_ManyMaxOccurs", $.String, "Sch_ManyMaxOccurs");

    $.Constant({Static:true , Public:false}, "Sch_MaxOccursInvalid", $.String, "Sch_MaxOccursInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MinOccursInvalid", $.String, "Sch_MinOccursInvalid");

    $.Constant({Static:true , Public:false}, "Sch_DtMaxLengthInvalid", $.String, "Sch_DtMaxLengthInvalid");

    $.Constant({Static:true , Public:false}, "Sch_DtMinLengthInvalid", $.String, "Sch_DtMinLengthInvalid");

    $.Constant({Static:true , Public:false}, "Sch_DupDtMaxLength", $.String, "Sch_DupDtMaxLength");

    $.Constant({Static:true , Public:false}, "Sch_DupDtMinLength", $.String, "Sch_DupDtMinLength");

    $.Constant({Static:true , Public:false}, "Sch_DtMinMaxLength", $.String, "Sch_DtMinMaxLength");

    $.Constant({Static:true , Public:false}, "Sch_DupElement", $.String, "Sch_DupElement");

    $.Constant({Static:true , Public:false}, "Sch_DupGroupParticle", $.String, "Sch_DupGroupParticle");

    $.Constant({Static:true , Public:false}, "Sch_InvalidValue", $.String, "Sch_InvalidValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidValueDetailed", $.String, "Sch_InvalidValueDetailed");

    $.Constant({Static:true , Public:false}, "Sch_MissRequiredAttribute", $.String, "Sch_MissRequiredAttribute");

    $.Constant({Static:true , Public:false}, "Sch_FixedAttributeValue", $.String, "Sch_FixedAttributeValue");

    $.Constant({Static:true , Public:false}, "Sch_FixedElementValue", $.String, "Sch_FixedElementValue");

    $.Constant({Static:true , Public:false}, "Sch_AttributeValueDataTypeDetailed", $.String, "Sch_AttributeValueDataTypeDetailed");

    $.Constant({Static:true , Public:false}, "Sch_AttributeDefaultDataType", $.String, "Sch_AttributeDefaultDataType");

    $.Constant({Static:true , Public:false}, "Sch_IncludeLocation", $.String, "Sch_IncludeLocation");

    $.Constant({Static:true , Public:false}, "Sch_ImportLocation", $.String, "Sch_ImportLocation");

    $.Constant({Static:true , Public:false}, "Sch_RedefineLocation", $.String, "Sch_RedefineLocation");

    $.Constant({Static:true , Public:false}, "Sch_InvalidBlockDefaultValue", $.String, "Sch_InvalidBlockDefaultValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidFinalDefaultValue", $.String, "Sch_InvalidFinalDefaultValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementBlockValue", $.String, "Sch_InvalidElementBlockValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementFinalValue", $.String, "Sch_InvalidElementFinalValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidSimpleTypeFinalValue", $.String, "Sch_InvalidSimpleTypeFinalValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidComplexTypeBlockValue", $.String, "Sch_InvalidComplexTypeBlockValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidComplexTypeFinalValue", $.String, "Sch_InvalidComplexTypeFinalValue");

    $.Constant({Static:true , Public:false}, "Sch_DupIdentityConstraint", $.String, "Sch_DupIdentityConstraint");

    $.Constant({Static:true , Public:false}, "Sch_DupGlobalElement", $.String, "Sch_DupGlobalElement");

    $.Constant({Static:true , Public:false}, "Sch_DupGlobalAttribute", $.String, "Sch_DupGlobalAttribute");

    $.Constant({Static:true , Public:false}, "Sch_DupSimpleType", $.String, "Sch_DupSimpleType");

    $.Constant({Static:true , Public:false}, "Sch_DupComplexType", $.String, "Sch_DupComplexType");

    $.Constant({Static:true , Public:false}, "Sch_DupGroup", $.String, "Sch_DupGroup");

    $.Constant({Static:true , Public:false}, "Sch_DupAttributeGroup", $.String, "Sch_DupAttributeGroup");

    $.Constant({Static:true , Public:false}, "Sch_DupNotation", $.String, "Sch_DupNotation");

    $.Constant({Static:true , Public:false}, "Sch_DefaultFixedAttributes", $.String, "Sch_DefaultFixedAttributes");

    $.Constant({Static:true , Public:false}, "Sch_FixedInRef", $.String, "Sch_FixedInRef");

    $.Constant({Static:true , Public:false}, "Sch_FixedDefaultInRef", $.String, "Sch_FixedDefaultInRef");

    $.Constant({Static:true , Public:false}, "Sch_DupXsdElement", $.String, "Sch_DupXsdElement");

    $.Constant({Static:true , Public:false}, "Sch_ForbiddenAttribute", $.String, "Sch_ForbiddenAttribute");

    $.Constant({Static:true , Public:false}, "Sch_AttributeIgnored", $.String, "Sch_AttributeIgnored");

    $.Constant({Static:true , Public:false}, "Sch_ElementRef", $.String, "Sch_ElementRef");

    $.Constant({Static:true , Public:false}, "Sch_TypeMutualExclusive", $.String, "Sch_TypeMutualExclusive");

    $.Constant({Static:true , Public:false}, "Sch_ElementNameRef", $.String, "Sch_ElementNameRef");

    $.Constant({Static:true , Public:false}, "Sch_AttributeNameRef", $.String, "Sch_AttributeNameRef");

    $.Constant({Static:true , Public:false}, "Sch_TextNotAllowed", $.String, "Sch_TextNotAllowed");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredType", $.String, "Sch_UndeclaredType");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredSimpleType", $.String, "Sch_UndeclaredSimpleType");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredEquivClass", $.String, "Sch_UndeclaredEquivClass");

    $.Constant({Static:true , Public:false}, "Sch_AttListPresence", $.String, "Sch_AttListPresence");

    $.Constant({Static:true , Public:false}, "Sch_NotationValue", $.String, "Sch_NotationValue");

    $.Constant({Static:true , Public:false}, "Sch_EnumerationValue", $.String, "Sch_EnumerationValue");

    $.Constant({Static:true , Public:false}, "Sch_EmptyAttributeValue", $.String, "Sch_EmptyAttributeValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidLanguageId", $.String, "Sch_InvalidLanguageId");

    $.Constant({Static:true , Public:false}, "Sch_XmlSpace", $.String, "Sch_XmlSpace");

    $.Constant({Static:true , Public:false}, "Sch_InvalidXsdAttributeValue", $.String, "Sch_InvalidXsdAttributeValue");

    $.Constant({Static:true , Public:false}, "Sch_InvalidXsdAttributeDatatypeValue", $.String, "Sch_InvalidXsdAttributeDatatypeValue");

    $.Constant({Static:true , Public:false}, "Sch_ElementValueDataTypeDetailed", $.String, "Sch_ElementValueDataTypeDetailed");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementDefaultValue", $.String, "Sch_InvalidElementDefaultValue");

    $.Constant({Static:true , Public:false}, "Sch_NonDeterministic", $.String, "Sch_NonDeterministic");

    $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAnyEx", $.String, "Sch_NonDeterministicAnyEx");

    $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAnyAny", $.String, "Sch_NonDeterministicAnyAny");

    $.Constant({Static:true , Public:false}, "Sch_StandAlone", $.String, "Sch_StandAlone");

    $.Constant({Static:true , Public:false}, "Sch_XmlNsAttribute", $.String, "Sch_XmlNsAttribute");

    $.Constant({Static:true , Public:false}, "Sch_AllElement", $.String, "Sch_AllElement");

    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceInclude", $.String, "Sch_MismatchTargetNamespaceInclude");

    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceImport", $.String, "Sch_MismatchTargetNamespaceImport");

    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespaceEx", $.String, "Sch_MismatchTargetNamespaceEx");

    $.Constant({Static:true , Public:false}, "Sch_XsiTypeNotFound", $.String, "Sch_XsiTypeNotFound");

    $.Constant({Static:true , Public:false}, "Sch_XsiTypeAbstract", $.String, "Sch_XsiTypeAbstract");

    $.Constant({Static:true , Public:false}, "Sch_ListFromNonatomic", $.String, "Sch_ListFromNonatomic");

    $.Constant({Static:true , Public:false}, "Sch_UnionFromUnion", $.String, "Sch_UnionFromUnion");

    $.Constant({Static:true , Public:false}, "Sch_DupLengthFacet", $.String, "Sch_DupLengthFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupMinLengthFacet", $.String, "Sch_DupMinLengthFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupMaxLengthFacet", $.String, "Sch_DupMaxLengthFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupWhiteSpaceFacet", $.String, "Sch_DupWhiteSpaceFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupMaxInclusiveFacet", $.String, "Sch_DupMaxInclusiveFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupMaxExclusiveFacet", $.String, "Sch_DupMaxExclusiveFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupMinInclusiveFacet", $.String, "Sch_DupMinInclusiveFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupMinExclusiveFacet", $.String, "Sch_DupMinExclusiveFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupTotalDigitsFacet", $.String, "Sch_DupTotalDigitsFacet");

    $.Constant({Static:true , Public:false}, "Sch_DupFractionDigitsFacet", $.String, "Sch_DupFractionDigitsFacet");

    $.Constant({Static:true , Public:false}, "Sch_LengthFacetProhibited", $.String, "Sch_LengthFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_MinLengthFacetProhibited", $.String, "Sch_MinLengthFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_MaxLengthFacetProhibited", $.String, "Sch_MaxLengthFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_PatternFacetProhibited", $.String, "Sch_PatternFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_EnumerationFacetProhibited", $.String, "Sch_EnumerationFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceFacetProhibited", $.String, "Sch_WhiteSpaceFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveFacetProhibited", $.String, "Sch_MaxInclusiveFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveFacetProhibited", $.String, "Sch_MaxExclusiveFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveFacetProhibited", $.String, "Sch_MinInclusiveFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveFacetProhibited", $.String, "Sch_MinExclusiveFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsFacetProhibited", $.String, "Sch_TotalDigitsFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsFacetProhibited", $.String, "Sch_FractionDigitsFacetProhibited");

    $.Constant({Static:true , Public:false}, "Sch_LengthFacetInvalid", $.String, "Sch_LengthFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MinLengthFacetInvalid", $.String, "Sch_MinLengthFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MaxLengthFacetInvalid", $.String, "Sch_MaxLengthFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveFacetInvalid", $.String, "Sch_MaxInclusiveFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveFacetInvalid", $.String, "Sch_MaxExclusiveFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveFacetInvalid", $.String, "Sch_MinInclusiveFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveFacetInvalid", $.String, "Sch_MinExclusiveFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsFacetInvalid", $.String, "Sch_TotalDigitsFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsFacetInvalid", $.String, "Sch_FractionDigitsFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_PatternFacetInvalid", $.String, "Sch_PatternFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_EnumerationFacetInvalid", $.String, "Sch_EnumerationFacetInvalid");

    $.Constant({Static:true , Public:false}, "Sch_InvalidWhiteSpace", $.String, "Sch_InvalidWhiteSpace");

    $.Constant({Static:true , Public:false}, "Sch_UnknownFacet", $.String, "Sch_UnknownFacet");

    $.Constant({Static:true , Public:false}, "Sch_LengthAndMinMax", $.String, "Sch_LengthAndMinMax");

    $.Constant({Static:true , Public:false}, "Sch_MinLengthGtMaxLength", $.String, "Sch_MinLengthGtMaxLength");

    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsGtTotalDigits", $.String, "Sch_FractionDigitsGtTotalDigits");

    $.Constant({Static:true , Public:false}, "Sch_LengthConstraintFailed", $.String, "Sch_LengthConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_MinLengthConstraintFailed", $.String, "Sch_MinLengthConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_MaxLengthConstraintFailed", $.String, "Sch_MaxLengthConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_PatternConstraintFailed", $.String, "Sch_PatternConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_EnumerationConstraintFailed", $.String, "Sch_EnumerationConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveConstraintFailed", $.String, "Sch_MaxInclusiveConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveConstraintFailed", $.String, "Sch_MaxExclusiveConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveConstraintFailed", $.String, "Sch_MinInclusiveConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveConstraintFailed", $.String, "Sch_MinExclusiveConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsConstraintFailed", $.String, "Sch_TotalDigitsConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsConstraintFailed", $.String, "Sch_FractionDigitsConstraintFailed");

    $.Constant({Static:true , Public:false}, "Sch_UnionFailedEx", $.String, "Sch_UnionFailedEx");

    $.Constant({Static:true , Public:false}, "Sch_NotationRequired", $.String, "Sch_NotationRequired");

    $.Constant({Static:true , Public:false}, "Sch_DupNotationAttribute", $.String, "Sch_DupNotationAttribute");

    $.Constant({Static:true , Public:false}, "Sch_MissingPublicSystemAttribute", $.String, "Sch_MissingPublicSystemAttribute");

    $.Constant({Static:true , Public:false}, "Sch_NotationAttributeOnEmptyElement", $.String, "Sch_NotationAttributeOnEmptyElement");

    $.Constant({Static:true , Public:false}, "Sch_RefNotInScope", $.String, "Sch_RefNotInScope");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredIdentityConstraint", $.String, "Sch_UndeclaredIdentityConstraint");

    $.Constant({Static:true , Public:false}, "Sch_RefInvalidIdentityConstraint", $.String, "Sch_RefInvalidIdentityConstraint");

    $.Constant({Static:true , Public:false}, "Sch_RefInvalidCardin", $.String, "Sch_RefInvalidCardin");

    $.Constant({Static:true , Public:false}, "Sch_ReftoKeyref", $.String, "Sch_ReftoKeyref");

    $.Constant({Static:true , Public:false}, "Sch_EmptyXPath", $.String, "Sch_EmptyXPath");

    $.Constant({Static:true , Public:false}, "Sch_UnresolvedPrefix", $.String, "Sch_UnresolvedPrefix");

    $.Constant({Static:true , Public:false}, "Sch_UnresolvedKeyref", $.String, "Sch_UnresolvedKeyref");

    $.Constant({Static:true , Public:false}, "Sch_ICXpathError", $.String, "Sch_ICXpathError");

    $.Constant({Static:true , Public:false}, "Sch_SelectorAttr", $.String, "Sch_SelectorAttr");

    $.Constant({Static:true , Public:false}, "Sch_FieldSimpleTypeExpected", $.String, "Sch_FieldSimpleTypeExpected");

    $.Constant({Static:true , Public:false}, "Sch_FieldSingleValueExpected", $.String, "Sch_FieldSingleValueExpected");

    $.Constant({Static:true , Public:false}, "Sch_MissingKey", $.String, "Sch_MissingKey");

    $.Constant({Static:true , Public:false}, "Sch_DuplicateKey", $.String, "Sch_DuplicateKey");

    $.Constant({Static:true , Public:false}, "Sch_TargetNamespaceXsi", $.String, "Sch_TargetNamespaceXsi");

    $.Constant({Static:true , Public:false}, "Sch_UndeclaredEntity", $.String, "Sch_UndeclaredEntity");

    $.Constant({Static:true , Public:false}, "Sch_UnparsedEntityRef", $.String, "Sch_UnparsedEntityRef");

    $.Constant({Static:true , Public:false}, "Sch_MaxOccursInvalidXsd", $.String, "Sch_MaxOccursInvalidXsd");

    $.Constant({Static:true , Public:false}, "Sch_MinOccursInvalidXsd", $.String, "Sch_MinOccursInvalidXsd");

    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveExclusive", $.String, "Sch_MaxInclusiveExclusive");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveExclusive", $.String, "Sch_MinInclusiveExclusive");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveGtMaxInclusive", $.String, "Sch_MinInclusiveGtMaxInclusive");

    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveGtMaxExclusive", $.String, "Sch_MinExclusiveGtMaxExclusive");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveGtMaxExclusive", $.String, "Sch_MinInclusiveGtMaxExclusive");

    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveGtMaxInclusive", $.String, "Sch_MinExclusiveGtMaxInclusive");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestriction", $.String, "Sch_SimpleTypeRestriction");

    $.Constant({Static:true , Public:false}, "Sch_InvalidFacetPosition", $.String, "Sch_InvalidFacetPosition");

    $.Constant({Static:true , Public:false}, "Sch_AttributeMutuallyExclusive", $.String, "Sch_AttributeMutuallyExclusive");

    $.Constant({Static:true , Public:false}, "Sch_AnyAttributeLastChild", $.String, "Sch_AnyAttributeLastChild");

    $.Constant({Static:true , Public:false}, "Sch_ComplexTypeContentModel", $.String, "Sch_ComplexTypeContentModel");

    $.Constant({Static:true , Public:false}, "Sch_ComplexContentContentModel", $.String, "Sch_ComplexContentContentModel");

    $.Constant({Static:true , Public:false}, "Sch_NotNormalizedString", $.String, "Sch_NotNormalizedString");

    $.Constant({Static:true , Public:false}, "Sch_NotTokenString", $.String, "Sch_NotTokenString");

    $.Constant({Static:true , Public:false}, "Sch_FractionDigitsNotOnDecimal", $.String, "Sch_FractionDigitsNotOnDecimal");

    $.Constant({Static:true , Public:false}, "Sch_ContentInNill", $.String, "Sch_ContentInNill");

    $.Constant({Static:true , Public:false}, "Sch_NoElementSchemaFound", $.String, "Sch_NoElementSchemaFound");

    $.Constant({Static:true , Public:false}, "Sch_NoAttributeSchemaFound", $.String, "Sch_NoAttributeSchemaFound");

    $.Constant({Static:true , Public:false}, "Sch_InvalidNamespace", $.String, "Sch_InvalidNamespace");

    $.Constant({Static:true , Public:false}, "Sch_InvalidTargetNamespaceAttribute", $.String, "Sch_InvalidTargetNamespaceAttribute");

    $.Constant({Static:true , Public:false}, "Sch_InvalidNamespaceAttribute", $.String, "Sch_InvalidNamespaceAttribute");

    $.Constant({Static:true , Public:false}, "Sch_InvalidSchemaLocation", $.String, "Sch_InvalidSchemaLocation");

    $.Constant({Static:true , Public:false}, "Sch_ImportTargetNamespace", $.String, "Sch_ImportTargetNamespace");

    $.Constant({Static:true , Public:false}, "Sch_ImportTargetNamespaceNull", $.String, "Sch_ImportTargetNamespaceNull");

    $.Constant({Static:true , Public:false}, "Sch_GroupDoubleRedefine", $.String, "Sch_GroupDoubleRedefine");

    $.Constant({Static:true , Public:false}, "Sch_ComponentRedefineNotFound", $.String, "Sch_ComponentRedefineNotFound");

    $.Constant({Static:true , Public:false}, "Sch_GroupRedefineNotFound", $.String, "Sch_GroupRedefineNotFound");

    $.Constant({Static:true , Public:false}, "Sch_AttrGroupDoubleRedefine", $.String, "Sch_AttrGroupDoubleRedefine");

    $.Constant({Static:true , Public:false}, "Sch_AttrGroupRedefineNotFound", $.String, "Sch_AttrGroupRedefineNotFound");

    $.Constant({Static:true , Public:false}, "Sch_ComplexTypeDoubleRedefine", $.String, "Sch_ComplexTypeDoubleRedefine");

    $.Constant({Static:true , Public:false}, "Sch_ComplexTypeRedefineNotFound", $.String, "Sch_ComplexTypeRedefineNotFound");

    $.Constant({Static:true , Public:false}, "Sch_SimpleToComplexTypeRedefine", $.String, "Sch_SimpleToComplexTypeRedefine");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeDoubleRedefine", $.String, "Sch_SimpleTypeDoubleRedefine");

    $.Constant({Static:true , Public:false}, "Sch_ComplexToSimpleTypeRedefine", $.String, "Sch_ComplexToSimpleTypeRedefine");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRedefineNotFound", $.String, "Sch_SimpleTypeRedefineNotFound");

    $.Constant({Static:true , Public:false}, "Sch_MinMaxGroupRedefine", $.String, "Sch_MinMaxGroupRedefine");

    $.Constant({Static:true , Public:false}, "Sch_MultipleGroupSelfRef", $.String, "Sch_MultipleGroupSelfRef");

    $.Constant({Static:true , Public:false}, "Sch_MultipleAttrGroupSelfRef", $.String, "Sch_MultipleAttrGroupSelfRef");

    $.Constant({Static:true , Public:false}, "Sch_InvalidTypeRedefine", $.String, "Sch_InvalidTypeRedefine");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementRef", $.String, "Sch_InvalidElementRef");

    $.Constant({Static:true , Public:false}, "Sch_MinGtMax", $.String, "Sch_MinGtMax");

    $.Constant({Static:true , Public:false}, "Sch_DupSelector", $.String, "Sch_DupSelector");

    $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoSelector", $.String, "Sch_IdConstraintNoSelector");

    $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoFields", $.String, "Sch_IdConstraintNoFields");

    $.Constant({Static:true , Public:false}, "Sch_IdConstraintNoRefer", $.String, "Sch_IdConstraintNoRefer");

    $.Constant({Static:true , Public:false}, "Sch_SelectorBeforeFields", $.String, "Sch_SelectorBeforeFields");

    $.Constant({Static:true , Public:false}, "Sch_NoSimpleTypeContent", $.String, "Sch_NoSimpleTypeContent");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestRefBase", $.String, "Sch_SimpleTypeRestRefBase");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeRestRefBaseNone", $.String, "Sch_SimpleTypeRestRefBaseNone");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeListRefBase", $.String, "Sch_SimpleTypeListRefBase");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeListRefBaseNone", $.String, "Sch_SimpleTypeListRefBaseNone");

    $.Constant({Static:true , Public:false}, "Sch_SimpleTypeUnionNoBase", $.String, "Sch_SimpleTypeUnionNoBase");

    $.Constant({Static:true , Public:false}, "Sch_NoRestOrExtQName", $.String, "Sch_NoRestOrExtQName");

    $.Constant({Static:true , Public:false}, "Sch_NoRestOrExt", $.String, "Sch_NoRestOrExt");

    $.Constant({Static:true , Public:false}, "Sch_NoGroupParticle", $.String, "Sch_NoGroupParticle");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAllMin", $.String, "Sch_InvalidAllMin");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAllMax", $.String, "Sch_InvalidAllMax");

    $.Constant({Static:true , Public:false}, "Sch_InvalidFacet", $.String, "Sch_InvalidFacet");

    $.Constant({Static:true , Public:false}, "Sch_AbstractElement", $.String, "Sch_AbstractElement");

    $.Constant({Static:true , Public:false}, "Sch_XsiTypeBlockedEx", $.String, "Sch_XsiTypeBlockedEx");

    $.Constant({Static:true , Public:false}, "Sch_InvalidXsiNill", $.String, "Sch_InvalidXsiNill");

    $.Constant({Static:true , Public:false}, "Sch_SubstitutionNotAllowed", $.String, "Sch_SubstitutionNotAllowed");

    $.Constant({Static:true , Public:false}, "Sch_SubstitutionBlocked", $.String, "Sch_SubstitutionBlocked");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInEmptyEx", $.String, "Sch_InvalidElementInEmptyEx");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInTextOnlyEx", $.String, "Sch_InvalidElementInTextOnlyEx");

    $.Constant({Static:true , Public:false}, "Sch_InvalidTextInElement", $.String, "Sch_InvalidTextInElement");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContent", $.String, "Sch_InvalidElementContent");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentComplex", $.String, "Sch_InvalidElementContentComplex");

    $.Constant({Static:true , Public:false}, "Sch_IncompleteContent", $.String, "Sch_IncompleteContent");

    $.Constant({Static:true , Public:false}, "Sch_IncompleteContentComplex", $.String, "Sch_IncompleteContentComplex");

    $.Constant({Static:true , Public:false}, "Sch_InvalidTextInElementExpecting", $.String, "Sch_InvalidTextInElementExpecting");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentExpecting", $.String, "Sch_InvalidElementContentExpecting");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementContentExpectingComplex", $.String, "Sch_InvalidElementContentExpectingComplex");

    $.Constant({Static:true , Public:false}, "Sch_IncompleteContentExpecting", $.String, "Sch_IncompleteContentExpecting");

    $.Constant({Static:true , Public:false}, "Sch_IncompleteContentExpectingComplex", $.String, "Sch_IncompleteContentExpectingComplex");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementSubstitution", $.String, "Sch_InvalidElementSubstitution");

    $.Constant({Static:true , Public:false}, "Sch_ElementNameAndNamespace", $.String, "Sch_ElementNameAndNamespace");

    $.Constant({Static:true , Public:false}, "Sch_ElementName", $.String, "Sch_ElementName");

    $.Constant({Static:true , Public:false}, "Sch_ContinuationString", $.String, "Sch_ContinuationString");

    $.Constant({Static:true , Public:false}, "Sch_AnyElementNS", $.String, "Sch_AnyElementNS");

    $.Constant({Static:true , Public:false}, "Sch_AnyElement", $.String, "Sch_AnyElement");

    $.Constant({Static:true , Public:false}, "Sch_InvalidTextInEmpty", $.String, "Sch_InvalidTextInEmpty");

    $.Constant({Static:true , Public:false}, "Sch_InvalidWhitespaceInEmpty", $.String, "Sch_InvalidWhitespaceInEmpty");

    $.Constant({Static:true , Public:false}, "Sch_InvalidPIComment", $.String, "Sch_InvalidPIComment");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAttributeRef", $.String, "Sch_InvalidAttributeRef");

    $.Constant({Static:true , Public:false}, "Sch_OptionalDefaultAttribute", $.String, "Sch_OptionalDefaultAttribute");

    $.Constant({Static:true , Public:false}, "Sch_AttributeCircularRef", $.String, "Sch_AttributeCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_IdentityConstraintCircularRef", $.String, "Sch_IdentityConstraintCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_SubstitutionCircularRef", $.String, "Sch_SubstitutionCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAnyAttribute", $.String, "Sch_InvalidAnyAttribute");

    $.Constant({Static:true , Public:false}, "Sch_DupIdAttribute", $.String, "Sch_DupIdAttribute");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAllElementMax", $.String, "Sch_InvalidAllElementMax");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAny", $.String, "Sch_InvalidAny");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAnyDetailed", $.String, "Sch_InvalidAnyDetailed");

    $.Constant({Static:true , Public:false}, "Sch_InvalidExamplar", $.String, "Sch_InvalidExamplar");

    $.Constant({Static:true , Public:false}, "Sch_NoExamplar", $.String, "Sch_NoExamplar");

    $.Constant({Static:true , Public:false}, "Sch_InvalidSubstitutionMember", $.String, "Sch_InvalidSubstitutionMember");

    $.Constant({Static:true , Public:false}, "Sch_RedefineNoSchema", $.String, "Sch_RedefineNoSchema");

    $.Constant({Static:true , Public:false}, "Sch_ProhibitedAttribute", $.String, "Sch_ProhibitedAttribute");

    $.Constant({Static:true , Public:false}, "Sch_TypeCircularRef", $.String, "Sch_TypeCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_TwoIdAttrUses", $.String, "Sch_TwoIdAttrUses");

    $.Constant({Static:true , Public:false}, "Sch_AttrUseAndWildId", $.String, "Sch_AttrUseAndWildId");

    $.Constant({Static:true , Public:false}, "Sch_MoreThanOneWildId", $.String, "Sch_MoreThanOneWildId");

    $.Constant({Static:true , Public:false}, "Sch_BaseFinalExtension", $.String, "Sch_BaseFinalExtension");

    $.Constant({Static:true , Public:false}, "Sch_NotSimpleContent", $.String, "Sch_NotSimpleContent");

    $.Constant({Static:true , Public:false}, "Sch_NotComplexContent", $.String, "Sch_NotComplexContent");

    $.Constant({Static:true , Public:false}, "Sch_BaseFinalRestriction", $.String, "Sch_BaseFinalRestriction");

    $.Constant({Static:true , Public:false}, "Sch_BaseFinalList", $.String, "Sch_BaseFinalList");

    $.Constant({Static:true , Public:false}, "Sch_BaseFinalUnion", $.String, "Sch_BaseFinalUnion");

    $.Constant({Static:true , Public:false}, "Sch_UndefBaseRestriction", $.String, "Sch_UndefBaseRestriction");

    $.Constant({Static:true , Public:false}, "Sch_UndefBaseExtension", $.String, "Sch_UndefBaseExtension");

    $.Constant({Static:true , Public:false}, "Sch_DifContentType", $.String, "Sch_DifContentType");

    $.Constant({Static:true , Public:false}, "Sch_InvalidContentRestriction", $.String, "Sch_InvalidContentRestriction");

    $.Constant({Static:true , Public:false}, "Sch_InvalidContentRestrictionDetailed", $.String, "Sch_InvalidContentRestrictionDetailed");

    $.Constant({Static:true , Public:false}, "Sch_InvalidBaseToEmpty", $.String, "Sch_InvalidBaseToEmpty");

    $.Constant({Static:true , Public:false}, "Sch_InvalidBaseToMixed", $.String, "Sch_InvalidBaseToMixed");

    $.Constant({Static:true , Public:false}, "Sch_DupAttributeUse", $.String, "Sch_DupAttributeUse");

    $.Constant({Static:true , Public:false}, "Sch_InvalidParticleRestriction", $.String, "Sch_InvalidParticleRestriction");

    $.Constant({Static:true , Public:false}, "Sch_InvalidParticleRestrictionDetailed", $.String, "Sch_InvalidParticleRestrictionDetailed");

    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForAll", $.String, "Sch_ForbiddenDerivedParticleForAll");

    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForElem", $.String, "Sch_ForbiddenDerivedParticleForElem");

    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForChoice", $.String, "Sch_ForbiddenDerivedParticleForChoice");

    $.Constant({Static:true , Public:false}, "Sch_ForbiddenDerivedParticleForSeq", $.String, "Sch_ForbiddenDerivedParticleForSeq");

    $.Constant({Static:true , Public:false}, "Sch_ElementFromElement", $.String, "Sch_ElementFromElement");

    $.Constant({Static:true , Public:false}, "Sch_ElementFromAnyRule1", $.String, "Sch_ElementFromAnyRule1");

    $.Constant({Static:true , Public:false}, "Sch_ElementFromAnyRule2", $.String, "Sch_ElementFromAnyRule2");

    $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule1", $.String, "Sch_AnyFromAnyRule1");

    $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule2", $.String, "Sch_AnyFromAnyRule2");

    $.Constant({Static:true , Public:false}, "Sch_AnyFromAnyRule3", $.String, "Sch_AnyFromAnyRule3");

    $.Constant({Static:true , Public:false}, "Sch_GroupBaseFromAny1", $.String, "Sch_GroupBaseFromAny1");

    $.Constant({Static:true , Public:false}, "Sch_GroupBaseFromAny2", $.String, "Sch_GroupBaseFromAny2");

    $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase1", $.String, "Sch_ElementFromGroupBase1");

    $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase2", $.String, "Sch_ElementFromGroupBase2");

    $.Constant({Static:true , Public:false}, "Sch_ElementFromGroupBase3", $.String, "Sch_ElementFromGroupBase3");

    $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestRangeInvalid", $.String, "Sch_GroupBaseRestRangeInvalid");

    $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestNoMap", $.String, "Sch_GroupBaseRestNoMap");

    $.Constant({Static:true , Public:false}, "Sch_GroupBaseRestNotEmptiable", $.String, "Sch_GroupBaseRestNotEmptiable");

    $.Constant({Static:true , Public:false}, "Sch_SeqFromAll", $.String, "Sch_SeqFromAll");

    $.Constant({Static:true , Public:false}, "Sch_SeqFromChoice", $.String, "Sch_SeqFromChoice");

    $.Constant({Static:true , Public:false}, "Sch_UndefGroupRef", $.String, "Sch_UndefGroupRef");

    $.Constant({Static:true , Public:false}, "Sch_GroupCircularRef", $.String, "Sch_GroupCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_AllRefNotRoot", $.String, "Sch_AllRefNotRoot");

    $.Constant({Static:true , Public:false}, "Sch_AllRefMinMax", $.String, "Sch_AllRefMinMax");

    $.Constant({Static:true , Public:false}, "Sch_NotAllAlone", $.String, "Sch_NotAllAlone");

    $.Constant({Static:true , Public:false}, "Sch_AttributeGroupCircularRef", $.String, "Sch_AttributeGroupCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_UndefAttributeGroupRef", $.String, "Sch_UndefAttributeGroupRef");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAttributeExtension", $.String, "Sch_InvalidAttributeExtension");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAnyAttributeRestriction", $.String, "Sch_InvalidAnyAttributeRestriction");

    $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionProhibited", $.String, "Sch_AttributeRestrictionProhibited");

    $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionInvalid", $.String, "Sch_AttributeRestrictionInvalid");

    $.Constant({Static:true , Public:false}, "Sch_AttributeFixedInvalid", $.String, "Sch_AttributeFixedInvalid");

    $.Constant({Static:true , Public:false}, "Sch_AttributeUseInvalid", $.String, "Sch_AttributeUseInvalid");

    $.Constant({Static:true , Public:false}, "Sch_AttributeRestrictionInvalidFromWildcard", $.String, "Sch_AttributeRestrictionInvalidFromWildcard");

    $.Constant({Static:true , Public:false}, "Sch_NoDerivedAttribute", $.String, "Sch_NoDerivedAttribute");

    $.Constant({Static:true , Public:false}, "Sch_UnexpressibleAnyAttribute", $.String, "Sch_UnexpressibleAnyAttribute");

    $.Constant({Static:true , Public:false}, "Sch_RefInvalidAttribute", $.String, "Sch_RefInvalidAttribute");

    $.Constant({Static:true , Public:false}, "Sch_ElementCircularRef", $.String, "Sch_ElementCircularRef");

    $.Constant({Static:true , Public:false}, "Sch_RefInvalidElement", $.String, "Sch_RefInvalidElement");

    $.Constant({Static:true , Public:false}, "Sch_ElementCannotHaveValue", $.String, "Sch_ElementCannotHaveValue");

    $.Constant({Static:true , Public:false}, "Sch_ElementInMixedWithFixed", $.String, "Sch_ElementInMixedWithFixed");

    $.Constant({Static:true , Public:false}, "Sch_ElementTypeCollision", $.String, "Sch_ElementTypeCollision");

    $.Constant({Static:true , Public:false}, "Sch_InvalidIncludeLocation", $.String, "Sch_InvalidIncludeLocation");

    $.Constant({Static:true , Public:false}, "Sch_CannotLoadSchema", $.String, "Sch_CannotLoadSchema");

    $.Constant({Static:true , Public:false}, "Sch_CannotLoadSchemaLocation", $.String, "Sch_CannotLoadSchemaLocation");

    $.Constant({Static:true , Public:false}, "Sch_LengthGtBaseLength", $.String, "Sch_LengthGtBaseLength");

    $.Constant({Static:true , Public:false}, "Sch_MinLengthGtBaseMinLength", $.String, "Sch_MinLengthGtBaseMinLength");

    $.Constant({Static:true , Public:false}, "Sch_MaxLengthGtBaseMaxLength", $.String, "Sch_MaxLengthGtBaseMaxLength");

    $.Constant({Static:true , Public:false}, "Sch_MaxMinLengthBaseLength", $.String, "Sch_MaxMinLengthBaseLength");

    $.Constant({Static:true , Public:false}, "Sch_MaxInclusiveMismatch", $.String, "Sch_MaxInclusiveMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MaxExclusiveMismatch", $.String, "Sch_MaxExclusiveMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MinInclusiveMismatch", $.String, "Sch_MinInclusiveMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MinExclusiveMismatch", $.String, "Sch_MinExclusiveMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MinExlIncMismatch", $.String, "Sch_MinExlIncMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MinExlMaxExlMismatch", $.String, "Sch_MinExlMaxExlMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MinIncMaxExlMismatch", $.String, "Sch_MinIncMaxExlMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MinIncExlMismatch", $.String, "Sch_MinIncExlMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MaxIncExlMismatch", $.String, "Sch_MaxIncExlMismatch");

    $.Constant({Static:true , Public:false}, "Sch_MaxExlIncMismatch", $.String, "Sch_MaxExlIncMismatch");

    $.Constant({Static:true , Public:false}, "Sch_TotalDigitsMismatch", $.String, "Sch_TotalDigitsMismatch");

    $.Constant({Static:true , Public:false}, "Sch_FacetBaseFixed", $.String, "Sch_FacetBaseFixed");

    $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceRestriction1", $.String, "Sch_WhiteSpaceRestriction1");

    $.Constant({Static:true , Public:false}, "Sch_WhiteSpaceRestriction2", $.String, "Sch_WhiteSpaceRestriction2");

    $.Constant({Static:true , Public:false}, "Sch_UnSpecifiedDefaultAttributeInExternalStandalone", $.String, "Sch_UnSpecifiedDefaultAttributeInExternalStandalone");

    $.Constant({Static:true , Public:false}, "Sch_StandAloneNormalization", $.String, "Sch_StandAloneNormalization");

    $.Constant({Static:true , Public:false}, "Sch_XsiNilAndFixed", $.String, "Sch_XsiNilAndFixed");

    $.Constant({Static:true , Public:false}, "Sch_MixSchemaTypes", $.String, "Sch_MixSchemaTypes");

    $.Constant({Static:true , Public:false}, "Sch_XSDSchemaOnly", $.String, "Sch_XSDSchemaOnly");

    $.Constant({Static:true , Public:false}, "Sch_InvalidPublicAttribute", $.String, "Sch_InvalidPublicAttribute");

    $.Constant({Static:true , Public:false}, "Sch_InvalidSystemAttribute", $.String, "Sch_InvalidSystemAttribute");

    $.Constant({Static:true , Public:false}, "Sch_TypeAfterConstraints", $.String, "Sch_TypeAfterConstraints");

    $.Constant({Static:true , Public:false}, "Sch_XsiNilAndType", $.String, "Sch_XsiNilAndType");

    $.Constant({Static:true , Public:false}, "Sch_DupSimpleTypeChild", $.String, "Sch_DupSimpleTypeChild");

    $.Constant({Static:true , Public:false}, "Sch_InvalidIdAttribute", $.String, "Sch_InvalidIdAttribute");

    $.Constant({Static:true , Public:false}, "Sch_InvalidNameAttributeEx", $.String, "Sch_InvalidNameAttributeEx");

    $.Constant({Static:true , Public:false}, "Sch_InvalidAttribute", $.String, "Sch_InvalidAttribute");

    $.Constant({Static:true , Public:false}, "Sch_EmptyChoice", $.String, "Sch_EmptyChoice");

    $.Constant({Static:true , Public:false}, "Sch_DerivedNotFromBase", $.String, "Sch_DerivedNotFromBase");

    $.Constant({Static:true , Public:false}, "Sch_NeedSimpleTypeChild", $.String, "Sch_NeedSimpleTypeChild");

    $.Constant({Static:true , Public:false}, "Sch_InvalidCollection", $.String, "Sch_InvalidCollection");

    $.Constant({Static:true , Public:false}, "Sch_UnrefNS", $.String, "Sch_UnrefNS");

    $.Constant({Static:true , Public:false}, "Sch_InvalidSimpleTypeRestriction", $.String, "Sch_InvalidSimpleTypeRestriction");

    $.Constant({Static:true , Public:false}, "Sch_MultipleRedefine", $.String, "Sch_MultipleRedefine");

    $.Constant({Static:true , Public:false}, "Sch_NullValue", $.String, "Sch_NullValue");

    $.Constant({Static:true , Public:false}, "Sch_ComplexContentModel", $.String, "Sch_ComplexContentModel");

    $.Constant({Static:true , Public:false}, "Sch_SchemaNotPreprocessed", $.String, "Sch_SchemaNotPreprocessed");

    $.Constant({Static:true , Public:false}, "Sch_SchemaNotRemoved", $.String, "Sch_SchemaNotRemoved");

    $.Constant({Static:true , Public:false}, "Sch_ComponentAlreadySeenForNS", $.String, "Sch_ComponentAlreadySeenForNS");

    $.Constant({Static:true , Public:false}, "Sch_DefaultAttributeNotApplied", $.String, "Sch_DefaultAttributeNotApplied");

    $.Constant({Static:true , Public:false}, "Sch_NotXsiAttribute", $.String, "Sch_NotXsiAttribute");

    $.Constant({Static:true , Public:false}, "Sch_XsdDateTimeCompare", $.String, "Sch_XsdDateTimeCompare");

    $.Constant({Static:true , Public:false}, "Sch_InvalidNullCast", $.String, "Sch_InvalidNullCast");

    $.Constant({Static:true , Public:false}, "Sch_SchemaDoesNotExist", $.String, "Sch_SchemaDoesNotExist");

    $.Constant({Static:true , Public:false}, "Sch_InvalidDateTimeOption", $.String, "Sch_InvalidDateTimeOption");

    $.Constant({Static:true , Public:false}, "Sch_InvalidStartTransition", $.String, "Sch_InvalidStartTransition");

    $.Constant({Static:true , Public:false}, "Sch_InvalidStateTransition", $.String, "Sch_InvalidStateTransition");

    $.Constant({Static:true , Public:false}, "Sch_InvalidEndValidation", $.String, "Sch_InvalidEndValidation");

    $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementCall", $.String, "Sch_InvalidEndElementCall");

    $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementCallTyped", $.String, "Sch_InvalidEndElementCallTyped");

    $.Constant({Static:true , Public:false}, "Sch_InvalidEndElementMultiple", $.String, "Sch_InvalidEndElementMultiple");

    $.Constant({Static:true , Public:false}, "Sch_DuplicateAttribute", $.String, "Sch_DuplicateAttribute");

    $.Constant({Static:true , Public:false}, "Sch_InvalidPartialValidationType", $.String, "Sch_InvalidPartialValidationType");

    $.Constant({Static:true , Public:false}, "Sch_SchemaElementNameMismatch", $.String, "Sch_SchemaElementNameMismatch");

    $.Constant({Static:true , Public:false}, "Sch_SchemaAttributeNameMismatch", $.String, "Sch_SchemaAttributeNameMismatch");

    $.Constant({Static:true , Public:false}, "Sch_ValidateAttributeInvalidCall", $.String, "Sch_ValidateAttributeInvalidCall");

    $.Constant({Static:true , Public:false}, "Sch_ValidateElementInvalidCall", $.String, "Sch_ValidateElementInvalidCall");

    $.Constant({Static:true , Public:false}, "Sch_EnumNotStarted", $.String, "Sch_EnumNotStarted");

    $.Constant({Static:true , Public:false}, "Sch_EnumFinished", $.String, "Sch_EnumFinished");

    $.Constant({Static:true , Public:false}, "SchInf_schema", $.String, "SchInf_schema");

    $.Constant({Static:true , Public:false}, "SchInf_entity", $.String, "SchInf_entity");

    $.Constant({Static:true , Public:false}, "SchInf_simplecontent", $.String, "SchInf_simplecontent");

    $.Constant({Static:true , Public:false}, "SchInf_extension", $.String, "SchInf_extension");

    $.Constant({Static:true , Public:false}, "SchInf_particle", $.String, "SchInf_particle");

    $.Constant({Static:true , Public:false}, "SchInf_ct", $.String, "SchInf_ct");

    $.Constant({Static:true , Public:false}, "SchInf_seq", $.String, "SchInf_seq");

    $.Constant({Static:true , Public:false}, "SchInf_noseq", $.String, "SchInf_noseq");

    $.Constant({Static:true , Public:false}, "SchInf_noct", $.String, "SchInf_noct");

    $.Constant({Static:true , Public:false}, "SchInf_UnknownParticle", $.String, "SchInf_UnknownParticle");

    $.Constant({Static:true , Public:false}, "SchInf_schematype", $.String, "SchInf_schematype");

    $.Constant({Static:true , Public:false}, "SchInf_NoElement", $.String, "SchInf_NoElement");

    $.Constant({Static:true , Public:false}, "Xp_UnclosedString", $.String, "Xp_UnclosedString");

    $.Constant({Static:true , Public:false}, "Xp_ExprExpected", $.String, "Xp_ExprExpected");

    $.Constant({Static:true , Public:false}, "Xp_InvalidArgumentType", $.String, "Xp_InvalidArgumentType");

    $.Constant({Static:true , Public:false}, "Xp_InvalidNumArgs", $.String, "Xp_InvalidNumArgs");

    $.Constant({Static:true , Public:false}, "Xp_InvalidName", $.String, "Xp_InvalidName");

    $.Constant({Static:true , Public:false}, "Xp_InvalidToken", $.String, "Xp_InvalidToken");

    $.Constant({Static:true , Public:false}, "Xp_NodeSetExpected", $.String, "Xp_NodeSetExpected");

    $.Constant({Static:true , Public:false}, "Xp_NotSupported", $.String, "Xp_NotSupported");

    $.Constant({Static:true , Public:false}, "Xp_InvalidPattern", $.String, "Xp_InvalidPattern");

    $.Constant({Static:true , Public:false}, "Xp_InvalidKeyPattern", $.String, "Xp_InvalidKeyPattern");

    $.Constant({Static:true , Public:false}, "Xp_BadQueryObject", $.String, "Xp_BadQueryObject");

    $.Constant({Static:true , Public:false}, "Xp_UndefinedXsltContext", $.String, "Xp_UndefinedXsltContext");

    $.Constant({Static:true , Public:false}, "Xp_NoContext", $.String, "Xp_NoContext");

    $.Constant({Static:true , Public:false}, "Xp_UndefVar", $.String, "Xp_UndefVar");

    $.Constant({Static:true , Public:false}, "Xp_UndefFunc", $.String, "Xp_UndefFunc");

    $.Constant({Static:true , Public:false}, "Xp_FunctionFailed", $.String, "Xp_FunctionFailed");

    $.Constant({Static:true , Public:false}, "Xp_CurrentNotAllowed", $.String, "Xp_CurrentNotAllowed");

    $.Constant({Static:true , Public:false}, "Xdom_DualDocumentTypeNode", $.String, "Xdom_DualDocumentTypeNode");

    $.Constant({Static:true , Public:false}, "Xdom_DualDocumentElementNode", $.String, "Xdom_DualDocumentElementNode");

    $.Constant({Static:true , Public:false}, "Xdom_DualDeclarationNode", $.String, "Xdom_DualDeclarationNode");

    $.Constant({Static:true , Public:false}, "Xdom_Import", $.String, "Xdom_Import");

    $.Constant({Static:true , Public:false}, "Xdom_Import_NullNode", $.String, "Xdom_Import_NullNode");

    $.Constant({Static:true , Public:false}, "Xdom_NoRootEle", $.String, "Xdom_NoRootEle");

    $.Constant({Static:true , Public:false}, "Xdom_Attr_Name", $.String, "Xdom_Attr_Name");

    $.Constant({Static:true , Public:false}, "Xdom_AttrCol_Object", $.String, "Xdom_AttrCol_Object");

    $.Constant({Static:true , Public:false}, "Xdom_AttrCol_Insert", $.String, "Xdom_AttrCol_Insert");

    $.Constant({Static:true , Public:false}, "Xdom_NamedNode_Context", $.String, "Xdom_NamedNode_Context");

    $.Constant({Static:true , Public:false}, "Xdom_Version", $.String, "Xdom_Version");

    $.Constant({Static:true , Public:false}, "Xdom_standalone", $.String, "Xdom_standalone");

    $.Constant({Static:true , Public:false}, "Xdom_Ele_Prefix", $.String, "Xdom_Ele_Prefix");

    $.Constant({Static:true , Public:false}, "Xdom_Ent_Innertext", $.String, "Xdom_Ent_Innertext");

    $.Constant({Static:true , Public:false}, "Xdom_EntRef_SetVal", $.String, "Xdom_EntRef_SetVal");

    $.Constant({Static:true , Public:false}, "Xdom_WS_Char", $.String, "Xdom_WS_Char");

    $.Constant({Static:true , Public:false}, "Xdom_Node_SetVal", $.String, "Xdom_Node_SetVal");

    $.Constant({Static:true , Public:false}, "Xdom_Empty_LocalName", $.String, "Xdom_Empty_LocalName");

    $.Constant({Static:true , Public:false}, "Xdom_Set_InnerXml", $.String, "Xdom_Set_InnerXml");

    $.Constant({Static:true , Public:false}, "Xdom_Attr_InUse", $.String, "Xdom_Attr_InUse");

    $.Constant({Static:true , Public:false}, "Xdom_Enum_ElementList", $.String, "Xdom_Enum_ElementList");

    $.Constant({Static:true , Public:false}, "Xdom_Invalid_NT_String", $.String, "Xdom_Invalid_NT_String");

    $.Constant({Static:true , Public:false}, "Xdom_InvalidCharacter_EntityReference", $.String, "Xdom_InvalidCharacter_EntityReference");

    $.Constant({Static:true , Public:false}, "Xdom_IndexOutOfRange", $.String, "Xdom_IndexOutOfRange");

    $.Constant({Static:true , Public:false}, "Xpn_BadPosition", $.String, "Xpn_BadPosition");

    $.Constant({Static:true , Public:false}, "Xpn_MissingParent", $.String, "Xpn_MissingParent");

    $.Constant({Static:true , Public:false}, "Xpn_NoContent", $.String, "Xpn_NoContent");

    $.Constant({Static:true , Public:false}, "Xdom_Load_NoDocument", $.String, "Xdom_Load_NoDocument");

    $.Constant({Static:true , Public:false}, "Xdom_Load_NoReader", $.String, "Xdom_Load_NoReader");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Null_Doc", $.String, "Xdom_Node_Null_Doc");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Child", $.String, "Xdom_Node_Insert_Child");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Contain", $.String, "Xdom_Node_Insert_Contain");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Path", $.String, "Xdom_Node_Insert_Path");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Context", $.String, "Xdom_Node_Insert_Context");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_Location", $.String, "Xdom_Node_Insert_Location");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Insert_TypeConflict", $.String, "Xdom_Node_Insert_TypeConflict");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Remove_Contain", $.String, "Xdom_Node_Remove_Contain");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Remove_Child", $.String, "Xdom_Node_Remove_Child");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Modify_ReadOnly", $.String, "Xdom_Node_Modify_ReadOnly");

    $.Constant({Static:true , Public:false}, "Xdom_TextNode_SplitText", $.String, "Xdom_TextNode_SplitText");

    $.Constant({Static:true , Public:false}, "Xdom_Attr_Reserved_XmlNS", $.String, "Xdom_Attr_Reserved_XmlNS");

    $.Constant({Static:true , Public:false}, "Xdom_Node_Cloning", $.String, "Xdom_Node_Cloning");

    $.Constant({Static:true , Public:false}, "Xnr_ResolveEntity", $.String, "Xnr_ResolveEntity");

    $.Constant({Static:true , Public:false}, "XmlMissingType", $.String, "XmlMissingType");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedType", $.String, "XmlUnsupportedType");

    $.Constant({Static:true , Public:false}, "XmlSerializerUnsupportedType", $.String, "XmlSerializerUnsupportedType");

    $.Constant({Static:true , Public:false}, "XmlSerializerUnsupportedMember", $.String, "XmlSerializerUnsupportedMember");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedTypeKind", $.String, "XmlUnsupportedTypeKind");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedSoapTypeKind", $.String, "XmlUnsupportedSoapTypeKind");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedIDictionary", $.String, "XmlUnsupportedIDictionary");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedIDictionaryDetails", $.String, "XmlUnsupportedIDictionaryDetails");

    $.Constant({Static:true , Public:false}, "XmlDuplicateTypeName", $.String, "XmlDuplicateTypeName");

    $.Constant({Static:true , Public:false}, "XmlSerializableNameMissing1", $.String, "XmlSerializableNameMissing1");

    $.Constant({Static:true , Public:false}, "XmlConstructorInaccessible", $.String, "XmlConstructorInaccessible");

    $.Constant({Static:true , Public:false}, "XmlTypeInaccessible", $.String, "XmlTypeInaccessible");

    $.Constant({Static:true , Public:false}, "XmlTypeStatic", $.String, "XmlTypeStatic");

    $.Constant({Static:true , Public:false}, "XmlNoDefaultAccessors", $.String, "XmlNoDefaultAccessors");

    $.Constant({Static:true , Public:false}, "XmlNoAddMethod", $.String, "XmlNoAddMethod");

    $.Constant({Static:true , Public:false}, "XmlAttributeSetAgain", $.String, "XmlAttributeSetAgain");

    $.Constant({Static:true , Public:false}, "XmlIllegalWildcard", $.String, "XmlIllegalWildcard");

    $.Constant({Static:true , Public:false}, "XmlIllegalArrayElement", $.String, "XmlIllegalArrayElement");

    $.Constant({Static:true , Public:false}, "XmlIllegalForm", $.String, "XmlIllegalForm");

    $.Constant({Static:true , Public:false}, "XmlBareTextMember", $.String, "XmlBareTextMember");

    $.Constant({Static:true , Public:false}, "XmlBareAttributeMember", $.String, "XmlBareAttributeMember");

    $.Constant({Static:true , Public:false}, "XmlReflectionError", $.String, "XmlReflectionError");

    $.Constant({Static:true , Public:false}, "XmlTypeReflectionError", $.String, "XmlTypeReflectionError");

    $.Constant({Static:true , Public:false}, "XmlPropertyReflectionError", $.String, "XmlPropertyReflectionError");

    $.Constant({Static:true , Public:false}, "XmlFieldReflectionError", $.String, "XmlFieldReflectionError");

    $.Constant({Static:true , Public:false}, "XmlInvalidDataTypeUsage", $.String, "XmlInvalidDataTypeUsage");

    $.Constant({Static:true , Public:false}, "XmlInvalidXsdDataType", $.String, "XmlInvalidXsdDataType");

    $.Constant({Static:true , Public:false}, "XmlDataTypeMismatch", $.String, "XmlDataTypeMismatch");

    $.Constant({Static:true , Public:false}, "XmlIllegalTypeContext", $.String, "XmlIllegalTypeContext");

    $.Constant({Static:true , Public:false}, "XmlUdeclaredXsdType", $.String, "XmlUdeclaredXsdType");

    $.Constant({Static:true , Public:false}, "XmlAnyElementNamespace", $.String, "XmlAnyElementNamespace");

    $.Constant({Static:true , Public:false}, "XmlInvalidConstantAttribute", $.String, "XmlInvalidConstantAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalDefault", $.String, "XmlIllegalDefault");

    $.Constant({Static:true , Public:false}, "XmlIllegalAttributesArrayAttribute", $.String, "XmlIllegalAttributesArrayAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalElementsArrayAttribute", $.String, "XmlIllegalElementsArrayAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalArrayArrayAttribute", $.String, "XmlIllegalArrayArrayAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalAttribute", $.String, "XmlIllegalAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalType", $.String, "XmlIllegalType");

    $.Constant({Static:true , Public:false}, "XmlIllegalAttrOrText", $.String, "XmlIllegalAttrOrText");

    $.Constant({Static:true , Public:false}, "XmlIllegalSoapAttribute", $.String, "XmlIllegalSoapAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalAttrOrTextInterface", $.String, "XmlIllegalAttrOrTextInterface");

    $.Constant({Static:true , Public:false}, "XmlIllegalAttributeFlagsArray", $.String, "XmlIllegalAttributeFlagsArray");

    $.Constant({Static:true , Public:false}, "XmlIllegalAnyElement", $.String, "XmlIllegalAnyElement");

    $.Constant({Static:true , Public:false}, "XmlInvalidIsNullable", $.String, "XmlInvalidIsNullable");

    $.Constant({Static:true , Public:false}, "XmlInvalidNotNullable", $.String, "XmlInvalidNotNullable");

    $.Constant({Static:true , Public:false}, "XmlInvalidFormUnqualified", $.String, "XmlInvalidFormUnqualified");

    $.Constant({Static:true , Public:false}, "XmlDuplicateNamespace", $.String, "XmlDuplicateNamespace");

    $.Constant({Static:true , Public:false}, "XmlElementHasNoName", $.String, "XmlElementHasNoName");

    $.Constant({Static:true , Public:false}, "XmlAttributeHasNoName", $.String, "XmlAttributeHasNoName");

    $.Constant({Static:true , Public:false}, "XmlElementImportedTwice", $.String, "XmlElementImportedTwice");

    $.Constant({Static:true , Public:false}, "XmlHiddenMember", $.String, "XmlHiddenMember");

    $.Constant({Static:true , Public:false}, "XmlInvalidXmlOverride", $.String, "XmlInvalidXmlOverride");

    $.Constant({Static:true , Public:false}, "XmlMembersDeriveError", $.String, "XmlMembersDeriveError");

    $.Constant({Static:true , Public:false}, "XmlTypeUsedTwice", $.String, "XmlTypeUsedTwice");

    $.Constant({Static:true , Public:false}, "XmlMissingGroup", $.String, "XmlMissingGroup");

    $.Constant({Static:true , Public:false}, "XmlMissingAttributeGroup", $.String, "XmlMissingAttributeGroup");

    $.Constant({Static:true , Public:false}, "XmlMissingDataType", $.String, "XmlMissingDataType");

    $.Constant({Static:true , Public:false}, "XmlInvalidEncoding", $.String, "XmlInvalidEncoding");

    $.Constant({Static:true , Public:false}, "XmlMissingElement", $.String, "XmlMissingElement");

    $.Constant({Static:true , Public:false}, "XmlMissingAttribute", $.String, "XmlMissingAttribute");

    $.Constant({Static:true , Public:false}, "XmlMissingMethodEnum", $.String, "XmlMissingMethodEnum");

    $.Constant({Static:true , Public:false}, "XmlNoAttributeHere", $.String, "XmlNoAttributeHere");

    $.Constant({Static:true , Public:false}, "XmlNeedAttributeHere", $.String, "XmlNeedAttributeHere");

    $.Constant({Static:true , Public:false}, "XmlElementNameMismatch", $.String, "XmlElementNameMismatch");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedDefaultType", $.String, "XmlUnsupportedDefaultType");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedDefaultValue", $.String, "XmlUnsupportedDefaultValue");

    $.Constant({Static:true , Public:false}, "XmlInvalidDefaultValue", $.String, "XmlInvalidDefaultValue");

    $.Constant({Static:true , Public:false}, "XmlInvalidDefaultEnumValue", $.String, "XmlInvalidDefaultEnumValue");

    $.Constant({Static:true , Public:false}, "XmlUnknownNode", $.String, "XmlUnknownNode");

    $.Constant({Static:true , Public:false}, "XmlUnknownConstant", $.String, "XmlUnknownConstant");

    $.Constant({Static:true , Public:false}, "XmlSerializeError", $.String, "XmlSerializeError");

    $.Constant({Static:true , Public:false}, "XmlSerializeErrorDetails", $.String, "XmlSerializeErrorDetails");

    $.Constant({Static:true , Public:false}, "XmlCompilerError", $.String, "XmlCompilerError");

    $.Constant({Static:true , Public:false}, "XmlSchemaDuplicateNamespace", $.String, "XmlSchemaDuplicateNamespace");

    $.Constant({Static:true , Public:false}, "XmlSchemaCompiled", $.String, "XmlSchemaCompiled");

    $.Constant({Static:true , Public:false}, "XmlInvalidSchemaExtension", $.String, "XmlInvalidSchemaExtension");

    $.Constant({Static:true , Public:false}, "XmlInvalidArrayDimentions", $.String, "XmlInvalidArrayDimentions");

    $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeName", $.String, "XmlInvalidArrayTypeName");

    $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeNamespace", $.String, "XmlInvalidArrayTypeNamespace");

    $.Constant({Static:true , Public:false}, "XmlMissingArrayType", $.String, "XmlMissingArrayType");

    $.Constant({Static:true , Public:false}, "XmlEmptyArrayType", $.String, "XmlEmptyArrayType");

    $.Constant({Static:true , Public:false}, "XmlInvalidArraySyntax", $.String, "XmlInvalidArraySyntax");

    $.Constant({Static:true , Public:false}, "XmlInvalidArrayTypeSyntax", $.String, "XmlInvalidArrayTypeSyntax");

    $.Constant({Static:true , Public:false}, "XmlMismatchedArrayBrackets", $.String, "XmlMismatchedArrayBrackets");

    $.Constant({Static:true , Public:false}, "XmlInvalidArrayLength", $.String, "XmlInvalidArrayLength");

    $.Constant({Static:true , Public:false}, "XmlMissingHref", $.String, "XmlMissingHref");

    $.Constant({Static:true , Public:false}, "XmlInvalidHref", $.String, "XmlInvalidHref");

    $.Constant({Static:true , Public:false}, "XmlUnknownType", $.String, "XmlUnknownType");

    $.Constant({Static:true , Public:false}, "XmlAbstractType", $.String, "XmlAbstractType");

    $.Constant({Static:true , Public:false}, "XmlMappingsScopeMismatch", $.String, "XmlMappingsScopeMismatch");

    $.Constant({Static:true , Public:false}, "XmlMethodTypeNameConflict", $.String, "XmlMethodTypeNameConflict");

    $.Constant({Static:true , Public:false}, "XmlCannotReconcileAccessor", $.String, "XmlCannotReconcileAccessor");

    $.Constant({Static:true , Public:false}, "XmlCannotReconcileAttributeAccessor", $.String, "XmlCannotReconcileAttributeAccessor");

    $.Constant({Static:true , Public:false}, "XmlCannotReconcileAccessorDefault", $.String, "XmlCannotReconcileAccessorDefault");

    $.Constant({Static:true , Public:false}, "XmlInvalidTypeAttributes", $.String, "XmlInvalidTypeAttributes");

    $.Constant({Static:true , Public:false}, "XmlInvalidAttributeUse", $.String, "XmlInvalidAttributeUse");

    $.Constant({Static:true , Public:false}, "XmlTypesDuplicate", $.String, "XmlTypesDuplicate");

    $.Constant({Static:true , Public:false}, "XmlInvalidSoapArray", $.String, "XmlInvalidSoapArray");

    $.Constant({Static:true , Public:false}, "XmlCannotIncludeInSchema", $.String, "XmlCannotIncludeInSchema");

    $.Constant({Static:true , Public:false}, "XmlSoapCannotIncludeInSchema", $.String, "XmlSoapCannotIncludeInSchema");

    $.Constant({Static:true , Public:false}, "XmlInvalidSerializable", $.String, "XmlInvalidSerializable");

    $.Constant({Static:true , Public:false}, "XmlInvalidUseOfType", $.String, "XmlInvalidUseOfType");

    $.Constant({Static:true , Public:false}, "XmlUnxpectedType", $.String, "XmlUnxpectedType");

    $.Constant({Static:true , Public:false}, "XmlUnknownAnyElement", $.String, "XmlUnknownAnyElement");

    $.Constant({Static:true , Public:false}, "XmlMultipleAttributeOverrides", $.String, "XmlMultipleAttributeOverrides");

    $.Constant({Static:true , Public:false}, "XmlInvalidEnumAttribute", $.String, "XmlInvalidEnumAttribute");

    $.Constant({Static:true , Public:false}, "XmlInvalidReturnPosition", $.String, "XmlInvalidReturnPosition");

    $.Constant({Static:true , Public:false}, "XmlInvalidElementAttribute", $.String, "XmlInvalidElementAttribute");

    $.Constant({Static:true , Public:false}, "XmlInvalidVoid", $.String, "XmlInvalidVoid");

    $.Constant({Static:true , Public:false}, "XmlInvalidContent", $.String, "XmlInvalidContent");

    $.Constant({Static:true , Public:false}, "XmlInvalidSchemaElementType", $.String, "XmlInvalidSchemaElementType");

    $.Constant({Static:true , Public:false}, "XmlInvalidSubstitutionGroupUse", $.String, "XmlInvalidSubstitutionGroupUse");

    $.Constant({Static:true , Public:false}, "XmlElementMissingType", $.String, "XmlElementMissingType");

    $.Constant({Static:true , Public:false}, "XmlInvalidAnyAttributeUse", $.String, "XmlInvalidAnyAttributeUse");

    $.Constant({Static:true , Public:false}, "XmlSoapInvalidAttributeUse", $.String, "XmlSoapInvalidAttributeUse");

    $.Constant({Static:true , Public:false}, "XmlSoapInvalidChoice", $.String, "XmlSoapInvalidChoice");

    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupRef", $.String, "XmlSoapUnsupportedGroupRef");

    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupRepeat", $.String, "XmlSoapUnsupportedGroupRepeat");

    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupNested", $.String, "XmlSoapUnsupportedGroupNested");

    $.Constant({Static:true , Public:false}, "XmlSoapUnsupportedGroupAny", $.String, "XmlSoapUnsupportedGroupAny");

    $.Constant({Static:true , Public:false}, "XmlInvalidEnumContent", $.String, "XmlInvalidEnumContent");

    $.Constant({Static:true , Public:false}, "XmlInvalidAttributeType", $.String, "XmlInvalidAttributeType");

    $.Constant({Static:true , Public:false}, "XmlInvalidBaseType", $.String, "XmlInvalidBaseType");

    $.Constant({Static:true , Public:false}, "XmlPrimitiveBaseType", $.String, "XmlPrimitiveBaseType");

    $.Constant({Static:true , Public:false}, "XmlInvalidIdentifier", $.String, "XmlInvalidIdentifier");

    $.Constant({Static:true , Public:false}, "XmlGenError", $.String, "XmlGenError");

    $.Constant({Static:true , Public:false}, "XmlInvalidXmlns", $.String, "XmlInvalidXmlns");

    $.Constant({Static:true , Public:false}, "XmlCircularReference", $.String, "XmlCircularReference");

    $.Constant({Static:true , Public:false}, "XmlCircularReference2", $.String, "XmlCircularReference2");

    $.Constant({Static:true , Public:false}, "XmlAnonymousBaseType", $.String, "XmlAnonymousBaseType");

    $.Constant({Static:true , Public:false}, "XmlMissingSchema", $.String, "XmlMissingSchema");

    $.Constant({Static:true , Public:false}, "XmlNoSerializableMembers", $.String, "XmlNoSerializableMembers");

    $.Constant({Static:true , Public:false}, "XmlIllegalOverride", $.String, "XmlIllegalOverride");

    $.Constant({Static:true , Public:false}, "XmlReadOnlyCollection", $.String, "XmlReadOnlyCollection");

    $.Constant({Static:true , Public:false}, "XmlRpcNestedValueType", $.String, "XmlRpcNestedValueType");

    $.Constant({Static:true , Public:false}, "XmlRpcRefsInValueType", $.String, "XmlRpcRefsInValueType");

    $.Constant({Static:true , Public:false}, "XmlRpcArrayOfValueTypes", $.String, "XmlRpcArrayOfValueTypes");

    $.Constant({Static:true , Public:false}, "XmlDuplicateElementName", $.String, "XmlDuplicateElementName");

    $.Constant({Static:true , Public:false}, "XmlDuplicateAttributeName", $.String, "XmlDuplicateAttributeName");

    $.Constant({Static:true , Public:false}, "XmlBadBaseElement", $.String, "XmlBadBaseElement");

    $.Constant({Static:true , Public:false}, "XmlBadBaseType", $.String, "XmlBadBaseType");

    $.Constant({Static:true , Public:false}, "XmlUndefinedAlias", $.String, "XmlUndefinedAlias");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierType", $.String, "XmlChoiceIdentifierType");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierArrayType", $.String, "XmlChoiceIdentifierArrayType");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierTypeEnum", $.String, "XmlChoiceIdentifierTypeEnum");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferMemberMissing", $.String, "XmlChoiceIdentiferMemberMissing");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferAmbiguous", $.String, "XmlChoiceIdentiferAmbiguous");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentiferMissing", $.String, "XmlChoiceIdentiferMissing");

    $.Constant({Static:true , Public:false}, "XmlChoiceMissingValue", $.String, "XmlChoiceMissingValue");

    $.Constant({Static:true , Public:false}, "XmlChoiceMissingAnyValue", $.String, "XmlChoiceMissingAnyValue");

    $.Constant({Static:true , Public:false}, "XmlChoiceMismatchChoiceException", $.String, "XmlChoiceMismatchChoiceException");

    $.Constant({Static:true , Public:false}, "XmlArrayItemAmbiguousTypes", $.String, "XmlArrayItemAmbiguousTypes");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedInterface", $.String, "XmlUnsupportedInterface");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedInterfaceDetails", $.String, "XmlUnsupportedInterfaceDetails");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedRank", $.String, "XmlUnsupportedRank");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedInheritance", $.String, "XmlUnsupportedInheritance");

    $.Constant({Static:true , Public:false}, "XmlIllegalMultipleText", $.String, "XmlIllegalMultipleText");

    $.Constant({Static:true , Public:false}, "XmlIllegalMultipleTextMembers", $.String, "XmlIllegalMultipleTextMembers");

    $.Constant({Static:true , Public:false}, "XmlIllegalArrayTextAttribute", $.String, "XmlIllegalArrayTextAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalTypedTextAttribute", $.String, "XmlIllegalTypedTextAttribute");

    $.Constant({Static:true , Public:false}, "XmlIllegalSimpleContentExtension", $.String, "XmlIllegalSimpleContentExtension");

    $.Constant({Static:true , Public:false}, "XmlInvalidCast", $.String, "XmlInvalidCast");

    $.Constant({Static:true , Public:false}, "XmlInvalidCastWithId", $.String, "XmlInvalidCastWithId");

    $.Constant({Static:true , Public:false}, "XmlInvalidArrayRef", $.String, "XmlInvalidArrayRef");

    $.Constant({Static:true , Public:false}, "XmlInvalidNullCast", $.String, "XmlInvalidNullCast");

    $.Constant({Static:true , Public:false}, "XmlMultipleXmlns", $.String, "XmlMultipleXmlns");

    $.Constant({Static:true , Public:false}, "XmlMultipleXmlnsMembers", $.String, "XmlMultipleXmlnsMembers");

    $.Constant({Static:true , Public:false}, "XmlXmlnsInvalidType", $.String, "XmlXmlnsInvalidType");

    $.Constant({Static:true , Public:false}, "XmlSoleXmlnsAttribute", $.String, "XmlSoleXmlnsAttribute");

    $.Constant({Static:true , Public:false}, "XmlConstructorHasSecurityAttributes", $.String, "XmlConstructorHasSecurityAttributes");

    $.Constant({Static:true , Public:false}, "XmlPropertyHasSecurityAttributes", $.String, "XmlPropertyHasSecurityAttributes");

    $.Constant({Static:true , Public:false}, "XmlMethodHasSecurityAttributes", $.String, "XmlMethodHasSecurityAttributes");

    $.Constant({Static:true , Public:false}, "XmlDefaultAccessorHasSecurityAttributes", $.String, "XmlDefaultAccessorHasSecurityAttributes");

    $.Constant({Static:true , Public:false}, "XmlInvalidChoiceIdentifierValue", $.String, "XmlInvalidChoiceIdentifierValue");

    $.Constant({Static:true , Public:false}, "XmlAnyElementDuplicate", $.String, "XmlAnyElementDuplicate");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdDuplicate", $.String, "XmlChoiceIdDuplicate");

    $.Constant({Static:true , Public:false}, "XmlChoiceIdentifierMismatch", $.String, "XmlChoiceIdentifierMismatch");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedRedefine", $.String, "XmlUnsupportedRedefine");

    $.Constant({Static:true , Public:false}, "XmlDuplicateElementInScope", $.String, "XmlDuplicateElementInScope");

    $.Constant({Static:true , Public:false}, "XmlDuplicateElementInScope1", $.String, "XmlDuplicateElementInScope1");

    $.Constant({Static:true , Public:false}, "XmlNoPartialTrust", $.String, "XmlNoPartialTrust");

    $.Constant({Static:true , Public:false}, "XmlInvalidEncodingNotEncoded1", $.String, "XmlInvalidEncodingNotEncoded1");

    $.Constant({Static:true , Public:false}, "XmlInvalidEncoding3", $.String, "XmlInvalidEncoding3");

    $.Constant({Static:true , Public:false}, "XmlInvalidSpecifiedType", $.String, "XmlInvalidSpecifiedType");

    $.Constant({Static:true , Public:false}, "XmlUnsupportedOpenGenericType", $.String, "XmlUnsupportedOpenGenericType");

    $.Constant({Static:true , Public:false}, "XmlMismatchSchemaObjects", $.String, "XmlMismatchSchemaObjects");

    $.Constant({Static:true , Public:false}, "XmlCircularTypeReference", $.String, "XmlCircularTypeReference");

    $.Constant({Static:true , Public:false}, "XmlCircularGroupReference", $.String, "XmlCircularGroupReference");

    $.Constant({Static:true , Public:false}, "XmlRpcLitElementNamespace", $.String, "XmlRpcLitElementNamespace");

    $.Constant({Static:true , Public:false}, "XmlRpcLitElementNullable", $.String, "XmlRpcLitElementNullable");

    $.Constant({Static:true , Public:false}, "XmlRpcLitElements", $.String, "XmlRpcLitElements");

    $.Constant({Static:true , Public:false}, "XmlRpcLitArrayElement", $.String, "XmlRpcLitArrayElement");

    $.Constant({Static:true , Public:false}, "XmlRpcLitAttributeAttributes", $.String, "XmlRpcLitAttributeAttributes");

    $.Constant({Static:true , Public:false}, "XmlRpcLitAttributes", $.String, "XmlRpcLitAttributes");

    $.Constant({Static:true , Public:false}, "XmlSequenceMembers", $.String, "XmlSequenceMembers");

    $.Constant({Static:true , Public:false}, "XmlRpcLitXmlns", $.String, "XmlRpcLitXmlns");

    $.Constant({Static:true , Public:false}, "XmlDuplicateNs", $.String, "XmlDuplicateNs");

    $.Constant({Static:true , Public:false}, "XmlAnonymousInclude", $.String, "XmlAnonymousInclude");

    $.Constant({Static:true , Public:false}, "XmlSchemaIncludeLocation", $.String, "XmlSchemaIncludeLocation");

    $.Constant({Static:true , Public:false}, "XmlSerializableSchemaError", $.String, "XmlSerializableSchemaError");

    $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodName", $.String, "XmlGetSchemaMethodName");

    $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodMissing", $.String, "XmlGetSchemaMethodMissing");

    $.Constant({Static:true , Public:false}, "XmlGetSchemaMethodReturnType", $.String, "XmlGetSchemaMethodReturnType");

    $.Constant({Static:true , Public:false}, "XmlGetSchemaEmptyTypeName", $.String, "XmlGetSchemaEmptyTypeName");

    $.Constant({Static:true , Public:false}, "XmlGetSchemaTypeMissing", $.String, "XmlGetSchemaTypeMissing");

    $.Constant({Static:true , Public:false}, "XmlGetSchemaInclude", $.String, "XmlGetSchemaInclude");

    $.Constant({Static:true , Public:false}, "XmlSerializableAttributes", $.String, "XmlSerializableAttributes");

    $.Constant({Static:true , Public:false}, "XmlSerializableMergeItem", $.String, "XmlSerializableMergeItem");

    $.Constant({Static:true , Public:false}, "XmlSerializableBadDerivation", $.String, "XmlSerializableBadDerivation");

    $.Constant({Static:true , Public:false}, "XmlSerializableMissingClrType", $.String, "XmlSerializableMissingClrType");

    $.Constant({Static:true , Public:false}, "XmlCircularDerivation", $.String, "XmlCircularDerivation");

    $.Constant({Static:true , Public:false}, "XmlSerializerAccessDenied", $.String, "XmlSerializerAccessDenied");

    $.Constant({Static:true , Public:false}, "XmlIdentityAccessDenied", $.String, "XmlIdentityAccessDenied");

    $.Constant({Static:true , Public:false}, "XmlMelformMapping", $.String, "XmlMelformMapping");

    $.Constant({Static:true , Public:false}, "XmlSerializableWriteLess", $.String, "XmlSerializableWriteLess");

    $.Constant({Static:true , Public:false}, "XmlSerializableWriteMore", $.String, "XmlSerializableWriteMore");

    $.Constant({Static:true , Public:false}, "XmlSerializableReadMore", $.String, "XmlSerializableReadMore");

    $.Constant({Static:true , Public:false}, "XmlSerializableReadLess", $.String, "XmlSerializableReadLess");

    $.Constant({Static:true , Public:false}, "XmlSerializableIllegalOperation", $.String, "XmlSerializableIllegalOperation");

    $.Constant({Static:true , Public:false}, "XmlSchemaSyntaxErrorDetails", $.String, "XmlSchemaSyntaxErrorDetails");

    $.Constant({Static:true , Public:false}, "XmlSchemaElementReference", $.String, "XmlSchemaElementReference");

    $.Constant({Static:true , Public:false}, "XmlSchemaAttributeReference", $.String, "XmlSchemaAttributeReference");

    $.Constant({Static:true , Public:false}, "XmlSchemaItem", $.String, "XmlSchemaItem");

    $.Constant({Static:true , Public:false}, "XmlSchemaNamedItem", $.String, "XmlSchemaNamedItem");

    $.Constant({Static:true , Public:false}, "XmlSchemaContentDef", $.String, "XmlSchemaContentDef");

    $.Constant({Static:true , Public:false}, "XmlSchema", $.String, "XmlSchema");

    $.Constant({Static:true , Public:false}, "XmlSerializerCompileFailed", $.String, "XmlSerializerCompileFailed");

    $.Constant({Static:true , Public:false}, "XmlSerializableRootDupName", $.String, "XmlSerializableRootDupName");

    $.Constant({Static:true , Public:false}, "XmlDropDefaultAttribute", $.String, "XmlDropDefaultAttribute");

    $.Constant({Static:true , Public:false}, "XmlDropAttributeValue", $.String, "XmlDropAttributeValue");

    $.Constant({Static:true , Public:false}, "XmlDropArrayAttributeValue", $.String, "XmlDropArrayAttributeValue");

    $.Constant({Static:true , Public:false}, "XmlDropNonPrimitiveAttributeValue", $.String, "XmlDropNonPrimitiveAttributeValue");

    $.Constant({Static:true , Public:false}, "XmlNotKnownDefaultValue", $.String, "XmlNotKnownDefaultValue");

    $.Constant({Static:true , Public:false}, "XmlRemarks", $.String, "XmlRemarks");

    $.Constant({Static:true , Public:false}, "XmlCodegenWarningDetails", $.String, "XmlCodegenWarningDetails");

    $.Constant({Static:true , Public:false}, "XmlExtensionComment", $.String, "XmlExtensionComment");

    $.Constant({Static:true , Public:false}, "XmlExtensionDuplicateDefinition", $.String, "XmlExtensionDuplicateDefinition");

    $.Constant({Static:true , Public:false}, "XmlImporterExtensionBadLocalTypeName", $.String, "XmlImporterExtensionBadLocalTypeName");

    $.Constant({Static:true , Public:false}, "XmlImporterExtensionBadTypeName", $.String, "XmlImporterExtensionBadTypeName");

    $.Constant({Static:true , Public:false}, "XmlConfigurationDuplicateExtension", $.String, "XmlConfigurationDuplicateExtension");

    $.Constant({Static:true , Public:false}, "XmlPregenMissingDirectory", $.String, "XmlPregenMissingDirectory");

    $.Constant({Static:true , Public:false}, "XmlPregenMissingTempDirectory", $.String, "XmlPregenMissingTempDirectory");

    $.Constant({Static:true , Public:false}, "XmlPregenTypeDynamic", $.String, "XmlPregenTypeDynamic");

    $.Constant({Static:true , Public:false}, "XmlSerializerExpiredDetails", $.String, "XmlSerializerExpiredDetails");

    $.Constant({Static:true , Public:false}, "XmlSerializerExpired", $.String, "XmlSerializerExpired");

    $.Constant({Static:true , Public:false}, "XmlPregenAssemblyDynamic", $.String, "XmlPregenAssemblyDynamic");

    $.Constant({Static:true , Public:false}, "XmlNotSerializable", $.String, "XmlNotSerializable");

    $.Constant({Static:true , Public:false}, "XmlPregenOrphanType", $.String, "XmlPregenOrphanType");

    $.Constant({Static:true , Public:false}, "XmlPregenCannotLoad", $.String, "XmlPregenCannotLoad");

    $.Constant({Static:true , Public:false}, "XmlPregenInvalidXmlSerializerAssemblyAttribute", $.String, "XmlPregenInvalidXmlSerializerAssemblyAttribute");

    $.Constant({Static:true , Public:false}, "XmlSequenceInconsistent", $.String, "XmlSequenceInconsistent");

    $.Constant({Static:true , Public:false}, "XmlSequenceUnique", $.String, "XmlSequenceUnique");

    $.Constant({Static:true , Public:false}, "XmlSequenceHierarchy", $.String, "XmlSequenceHierarchy");

    $.Constant({Static:true , Public:false}, "XmlSequenceMatch", $.String, "XmlSequenceMatch");

    $.Constant({Static:true , Public:false}, "XmlDisallowNegativeValues", $.String, "XmlDisallowNegativeValues");

    $.Constant({Static:true , Public:false}, "XmlInternalError", $.String, "XmlInternalError");

    $.Constant({Static:true , Public:false}, "XmlInternalErrorDetails", $.String, "XmlInternalErrorDetails");

    $.Constant({Static:true , Public:false}, "XmlInternalErrorMethod", $.String, "XmlInternalErrorMethod");

    $.Constant({Static:true , Public:false}, "XmlInternalErrorReaderAdvance", $.String, "XmlInternalErrorReaderAdvance");

    $.Constant({Static:true , Public:false}, "XmlNonCLSCompliantException", $.String, "XmlNonCLSCompliantException");

    $.Constant({Static:true , Public:false}, "XmlConvert_BadFormat", $.String, "XmlConvert_BadFormat");

    $.Constant({Static:true , Public:false}, "XmlConvert_Overflow", $.String, "XmlConvert_Overflow");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeBadMapping", $.String, "XmlConvert_TypeBadMapping");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeBadMapping2", $.String, "XmlConvert_TypeBadMapping2");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeListBadMapping", $.String, "XmlConvert_TypeListBadMapping");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeListBadMapping2", $.String, "XmlConvert_TypeListBadMapping2");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeToString", $.String, "XmlConvert_TypeToString");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeFromString", $.String, "XmlConvert_TypeFromString");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeNoPrefix", $.String, "XmlConvert_TypeNoPrefix");

    $.Constant({Static:true , Public:false}, "XmlConvert_TypeNoNamespace", $.String, "XmlConvert_TypeNoNamespace");

    $.Constant({Static:true , Public:false}, "RefSyntaxNotSupportedForElements0", $.String, "RefSyntaxNotSupportedForElements0");

    $.Constant({Static:true , Public:false}, "XPathDocument_MissingSchemas", $.String, "XPathDocument_MissingSchemas");

    $.Constant({Static:true , Public:false}, "XPathDocument_NotEnoughSchemaInfo", $.String, "XPathDocument_NotEnoughSchemaInfo");

    $.Constant({Static:true , Public:false}, "XPathDocument_ValidateInvalidNodeType", $.String, "XPathDocument_ValidateInvalidNodeType");

    $.Constant({Static:true , Public:false}, "XPathDocument_SchemaSetNotAllowed", $.String, "XPathDocument_SchemaSetNotAllowed");

    $.Constant({Static:true , Public:false}, "XmlBin_MissingEndCDATA", $.String, "XmlBin_MissingEndCDATA");

    $.Constant({Static:true , Public:false}, "XmlBin_InvalidQNameID", $.String, "XmlBin_InvalidQNameID");

    $.Constant({Static:true , Public:false}, "XmlBinary_UnexpectedToken", $.String, "XmlBinary_UnexpectedToken");

    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidSqlDecimal", $.String, "XmlBinary_InvalidSqlDecimal");

    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidSignature", $.String, "XmlBinary_InvalidSignature");

    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidProtocolVersion", $.String, "XmlBinary_InvalidProtocolVersion");

    $.Constant({Static:true , Public:false}, "XmlBinary_UnsupportedCodePage", $.String, "XmlBinary_UnsupportedCodePage");

    $.Constant({Static:true , Public:false}, "XmlBinary_InvalidStandalone", $.String, "XmlBinary_InvalidStandalone");

    $.Constant({Static:true , Public:false}, "XmlBinary_NoParserContext", $.String, "XmlBinary_NoParserContext");

    $.Constant({Static:true , Public:false}, "XmlBinary_ListsOfValuesNotSupported", $.String, "XmlBinary_ListsOfValuesNotSupported");

    $.Constant({Static:true , Public:false}, "XmlBinary_CastNotSupported", $.String, "XmlBinary_CastNotSupported");

    $.Constant({Static:true , Public:false}, "XmlBinary_NoRemapPrefix", $.String, "XmlBinary_NoRemapPrefix");

    $.Constant({Static:true , Public:false}, "XmlBinary_AttrWithNsNoPrefix", $.String, "XmlBinary_AttrWithNsNoPrefix");

    $.Constant({Static:true , Public:false}, "XmlBinary_ValueTooBig", $.String, "XmlBinary_ValueTooBig");

    $.Constant({Static:true , Public:false}, "SqlTypes_ArithOverflow", $.String, "SqlTypes_ArithOverflow");

    $.Constant({Static:true , Public:false}, "SqlTypes_ArithTruncation", $.String, "SqlTypes_ArithTruncation");

    $.Constant({Static:true , Public:false}, "SqlTypes_DivideByZero", $.String, "SqlTypes_DivideByZero");

    $.Constant({Static:true , Public:false}, "Enc_InvalidByteInEncoding", $.String, "Enc_InvalidByteInEncoding");

    $.Constant({Static:true , Public:false}, "Arg_ExpectingXmlTextReader", $.String, "Arg_ExpectingXmlTextReader");

    $.Constant({Static:true , Public:false}, "Arg_CannotCreateNode", $.String, "Arg_CannotCreateNode");

    $.Constant({Static:true , Public:false}, "Xml_BadComment", $.String, "Xml_BadComment");

    $.Constant({Static:true , Public:false}, "Xml_NumEntityOverflow", $.String, "Xml_NumEntityOverflow");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedCharacter", $.String, "Xml_UnexpectedCharacter");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedToken1", $.String, "Xml_UnexpectedToken1");

    $.Constant({Static:true , Public:false}, "Xml_TagMismatchFileName", $.String, "Xml_TagMismatchFileName");

    $.Constant({Static:true , Public:false}, "Xml_ReservedNs", $.String, "Xml_ReservedNs");

    $.Constant({Static:true , Public:false}, "Xml_BadElementData", $.String, "Xml_BadElementData");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedElement", $.String, "Xml_UnexpectedElement");

    $.Constant({Static:true , Public:false}, "Xml_TagNotInTheSameEntity", $.String, "Xml_TagNotInTheSameEntity");

    $.Constant({Static:true , Public:false}, "Xml_InvalidPartialContentData", $.String, "Xml_InvalidPartialContentData");

    $.Constant({Static:true , Public:false}, "Xml_CanNotStartWithXmlInNamespace", $.String, "Xml_CanNotStartWithXmlInNamespace");

    $.Constant({Static:true , Public:false}, "Xml_UnparsedEntity", $.String, "Xml_UnparsedEntity");

    $.Constant({Static:true , Public:false}, "Xml_InvalidContentForThisNode", $.String, "Xml_InvalidContentForThisNode");

    $.Constant({Static:true , Public:false}, "Xml_MissingEncodingDecl", $.String, "Xml_MissingEncodingDecl");

    $.Constant({Static:true , Public:false}, "Xml_InvalidSurrogatePair", $.String, "Xml_InvalidSurrogatePair");

    $.Constant({Static:true , Public:false}, "Sch_ErrorPosition", $.String, "Sch_ErrorPosition");

    $.Constant({Static:true , Public:false}, "Sch_ReservedNsDecl", $.String, "Sch_ReservedNsDecl");

    $.Constant({Static:true , Public:false}, "Sch_NotInSchemaCollection", $.String, "Sch_NotInSchemaCollection");

    $.Constant({Static:true , Public:false}, "Sch_NotationNotAttr", $.String, "Sch_NotationNotAttr");

    $.Constant({Static:true , Public:false}, "Sch_InvalidContent", $.String, "Sch_InvalidContent");

    $.Constant({Static:true , Public:false}, "Sch_InvalidContentExpecting", $.String, "Sch_InvalidContentExpecting");

    $.Constant({Static:true , Public:false}, "Sch_InvalidTextWhiteSpace", $.String, "Sch_InvalidTextWhiteSpace");

    $.Constant({Static:true , Public:false}, "Sch_XSCHEMA", $.String, "Sch_XSCHEMA");

    $.Constant({Static:true , Public:false}, "Sch_DubSchema", $.String, "Sch_DubSchema");

    $.Constant({Static:true , Public:false}, "Xp_TokenExpected", $.String, "Xp_TokenExpected");

    $.Constant({Static:true , Public:false}, "Xp_NodeTestExpected", $.String, "Xp_NodeTestExpected");

    $.Constant({Static:true , Public:false}, "Xp_NumberExpected", $.String, "Xp_NumberExpected");

    $.Constant({Static:true , Public:false}, "Xp_QueryExpected", $.String, "Xp_QueryExpected");

    $.Constant({Static:true , Public:false}, "Xp_InvalidArgument", $.String, "Xp_InvalidArgument");

    $.Constant({Static:true , Public:false}, "Xp_FunctionExpected", $.String, "Xp_FunctionExpected");

    $.Constant({Static:true , Public:false}, "Xp_InvalidPatternString", $.String, "Xp_InvalidPatternString");

    $.Constant({Static:true , Public:false}, "Xp_BadQueryString", $.String, "Xp_BadQueryString");

    $.Constant({Static:true , Public:false}, "XdomXpNav_NullParam", $.String, "XdomXpNav_NullParam");

    $.Constant({Static:true , Public:false}, "Xdom_Load_NodeType", $.String, "Xdom_Load_NodeType");

    $.Constant({Static:true , Public:false}, "XmlMissingMethod", $.String, "XmlMissingMethod");

    $.Constant({Static:true , Public:false}, "XmlIncludeSerializableError", $.String, "XmlIncludeSerializableError");

    $.Constant({Static:true , Public:false}, "XmlCompilerDynModule", $.String, "XmlCompilerDynModule");

    $.Constant({Static:true , Public:false}, "XmlInvalidSchemaType", $.String, "XmlInvalidSchemaType");

    $.Constant({Static:true , Public:false}, "XmlInvalidAnyUse", $.String, "XmlInvalidAnyUse");

    $.Constant({Static:true , Public:false}, "XmlSchemaSyntaxError", $.String, "XmlSchemaSyntaxError");

    $.Constant({Static:true , Public:false}, "XmlDuplicateChoiceElement", $.String, "XmlDuplicateChoiceElement");

    $.Constant({Static:true , Public:false}, "XmlConvert_BadTimeSpan", $.String, "XmlConvert_BadTimeSpan");

    $.Constant({Static:true , Public:false}, "XmlConvert_BadBoolean", $.String, "XmlConvert_BadBoolean");

    $.Constant({Static:true , Public:false}, "XmlConvert_BadUri", $.String, "XmlConvert_BadUri");

    $.Constant({Static:true , Public:false}, "Xml_UnexpectedToken", $.String, "Xml_UnexpectedToken");

    $.Constant({Static:true , Public:false}, "Xml_PartialContentNodeTypeNotSupported", $.String, "Xml_PartialContentNodeTypeNotSupported");

    $.Constant({Static:true , Public:false}, "Sch_AttributeValueDataType", $.String, "Sch_AttributeValueDataType");

    $.Constant({Static:true , Public:false}, "Sch_ElementValueDataType", $.String, "Sch_ElementValueDataType");

    $.Constant({Static:true , Public:false}, "Sch_NonDeterministicAny", $.String, "Sch_NonDeterministicAny");

    $.Constant({Static:true , Public:false}, "Sch_MismatchTargetNamespace", $.String, "Sch_MismatchTargetNamespace");

    $.Constant({Static:true , Public:false}, "Sch_UnionFailed", $.String, "Sch_UnionFailed");

    $.Constant({Static:true , Public:false}, "Sch_XsiTypeBlocked", $.String, "Sch_XsiTypeBlocked");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInEmpty", $.String, "Sch_InvalidElementInEmpty");

    $.Constant({Static:true , Public:false}, "Sch_InvalidElementInTextOnly", $.String, "Sch_InvalidElementInTextOnly");

    $.Constant({Static:true , Public:false}, "Sch_InvalidNameAttribute", $.String, "Sch_InvalidNameAttribute");

    $.Field({Static:true , Public:false}, "loader", $.Type);

    $.Field({Static:false, Public:false}, "resources", $asm00.TypeRef("System.Resources.ResourceManager"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "Culture", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Property({Static:true , Public:true }, "Resources", $asm00.TypeRef("System.Resources.ResourceManager"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.HResults */ 

(function HResults$Members () {
  var $, $thisType;

  JSIL.MakeStaticClass("System.HResults", false, [], function ($ib) {
    $ = $ib;

    $.Constant({Static:true , Public:false}, "Configuration", $.Int32, -2146232062);

    $.Constant({Static:true , Public:false}, "Xml", $.Int32, -2146232000);

    $.Constant({Static:true , Public:false}, "XmlSchema", $.Int32, -2146231999);

    $.Constant({Static:true , Public:false}, "XmlXslt", $.Int32, -2146231998);

    $.Constant({Static:true , Public:false}, "XmlXPath", $.Int32, -2146231997);

    $.Constant({Static:true , Public:false}, "Data", $.Int32, -2146232032);

    $.Constant({Static:true , Public:false}, "DataDeletedRowInaccessible", $.Int32, -2146232031);

    $.Constant({Static:true , Public:false}, "DataDuplicateName", $.Int32, -2146232030);

    $.Constant({Static:true , Public:false}, "DataInRowChangingEvent", $.Int32, -2146232029);

    $.Constant({Static:true , Public:false}, "DataInvalidConstraint", $.Int32, -2146232028);

    $.Constant({Static:true , Public:false}, "DataMissingPrimaryKey", $.Int32, -2146232027);

    $.Constant({Static:true , Public:false}, "DataNoNullAllowed", $.Int32, -2146232026);

    $.Constant({Static:true , Public:false}, "DataReadOnly", $.Int32, -2146232025);

    $.Constant({Static:true , Public:false}, "DataRowNotInTable", $.Int32, -2146232024);

    $.Constant({Static:true , Public:false}, "DataVersionNotFound", $.Int32, -2146232023);

    $.Constant({Static:true , Public:false}, "DataConstraint", $.Int32, -2146232022);

    $.Constant({Static:true , Public:false}, "StrongTyping", $.Int32, -2146232021);

    $.Constant({Static:true , Public:false}, "SqlType", $.Int32, -2146232016);

    $.Constant({Static:true , Public:false}, "SqlNullValue", $.Int32, -2146232015);

    $.Constant({Static:true , Public:false}, "SqlTruncate", $.Int32, -2146232014);

    $.Constant({Static:true , Public:false}, "AdapterMapping", $.Int32, -2146232013);

    $.Constant({Static:true , Public:false}, "DataAdapter", $.Int32, -2146232012);

    $.Constant({Static:true , Public:false}, "DBConcurrency", $.Int32, -2146232011);

    $.Constant({Static:true , Public:false}, "OperationAborted", $.Int32, -2146232010);

    $.Constant({Static:true , Public:false}, "InvalidUdt", $.Int32, -2146232009);

    $.Constant({Static:true , Public:false}, "SqlException", $.Int32, -2146232060);

    $.Constant({Static:true , Public:false}, "OdbcException", $.Int32, -2146232009);

    $.Constant({Static:true , Public:false}, "OracleException", $.Int32, -2146232008);

    $.Constant({Static:true , Public:false}, "NteBadKeySet", $.Int32, -2146893802);

    $.Constant({Static:true , Public:false}, "Win32AccessDenied", $.Int32, -2147024891);

    $.Constant({Static:true , Public:false}, "Win32InvalidHandle", $.Int32, -2147024890);

    $.Constant({Static:true , Public:false}, "License", $.Int32, -2146232063);

    $.Constant({Static:true , Public:false}, "InternalBufferOverflow", $.Int32, -2146232059);

    $.Constant({Static:true , Public:false}, "ServiceControllerTimeout", $.Int32, -2146232058);

    $.Constant({Static:true , Public:false}, "Install", $.Int32, -2146232057);

    $.Constant({Static:true , Public:false}, "EFail", $.Int32, -2147467259);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.InvariantComparer */ 

(function InvariantComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.InvariantComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "m_compareInfo", $asm00.TypeRef("System.Globalization.CompareInfo"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Default", $.Type);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Configuration");
/* class System.Configuration.PrivilegedConfigurationManager */ 

(function PrivilegedConfigurationManager$Members () {
  var $, $thisType;



  JSIL.MakeStaticClass("System.Configuration.PrivilegedConfigurationManager", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_ConnectionStrings", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Configuration.ConnectionStringSettingsCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSection", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.Property({Static:true , Public:false}, "ConnectionStrings", $asm02.TypeRef("System.Configuration.ConnectionStringSettingsCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.IncrementalReadDecoder */ 

(function IncrementalReadDecoder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.IncrementalReadDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Base64Decoder */ 

(function Base64Decoder$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.IncrementalReadDecoder"), 
      Name: "System.Xml.Base64Decoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ConstructMapBase64", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Decode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "MaxValidChar", $.Int32, 122);

    $.Constant({Static:true , Public:false}, "Invalid", $.Byte, 255);

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "startIndex", $.Int32);

    $.Field({Static:false, Public:false}, "curIndex", $.Int32);

    $.Field({Static:false, Public:false}, "endIndex", $.Int32);

    $.Field({Static:false, Public:false}, "bits", $.Int32);

    $.Field({Static:false, Public:false}, "bitsFilled", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "CharsBase64", $.String, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

    $.Field({Static:true , Public:false, ReadOnly:true }, "MapBase64", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Base64Encoder */ 

(function Base64Encoder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Base64Encoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Encode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "Base64LineSize", $.Int32, 76);

    $.Constant({Static:true , Public:false}, "LineSizeInBytes", $.Int32, 57);

    $.Field({Static:false, Public:false}, "leftOverBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "leftOverBytesCount", $.Int32);

    $.Field({Static:false, Public:false}, "charsLine", $jsilcore.TypeRef("System.Array", [$.Char]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlRawWriterBase64Encoder */ 

(function XmlRawWriterBase64Encoder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Base64Encoder"), 
      Name: "System.Xml.XmlRawWriterBase64Encoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlRawWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "rawWriter", $asm07.TypeRef("System.Xml.XmlRawWriter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextWriterBase64Encoder */ 

(function XmlTextWriterBase64Encoder$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Base64Encoder"), 
      Name: "System.Xml.XmlTextWriterBase64Encoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextEncoder"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "xmlTextEncoder", $asm07.TypeRef("System.Xml.XmlTextEncoder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BinHexDecoder */ 

(function BinHexDecoder$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.IncrementalReadDecoder"), 
      Name: "System.Xml.BinHexDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Decode", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Char]), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "Decode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Byte]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "startIndex", $.Int32);

    $.Field({Static:false, Public:false}, "curIndex", $.Int32);

    $.Field({Static:false, Public:false}, "endIndex", $.Int32);

    $.Field({Static:false, Public:false}, "hasHalfByteCached", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedHalfByte", $.Byte);

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BinHexEncoder */ 

(function BinHexEncoder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.BinHexEncoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Encode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.Constant({Static:true , Public:false}, "s_hexDigits", $.String, "0123456789ABCDEF");

    $.Constant({Static:true , Public:false}, "CharsChunkSize", $.Int32, 128);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Bits */ 

(function Bits$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Xml.Bits", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "ClearLeast", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "Count", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ExactlyOne", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "LeastPosition", 
      new JSIL.MethodSignature($.Int32, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "MoreThanOne", 
      new JSIL.MethodSignature($.Boolean, [$.UInt32])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0101010101010101", $.UInt32, 1431655765);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0011001100110011", $.UInt32, 858993459);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0000111100001111", $.UInt32, 252645135);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_0000000011111111", $.UInt32, 16711935);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MASK_1111111111111111", $.UInt32, 65535);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BitStack */ 

(function BitStack$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.BitStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "PeekBit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "PopBit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PopCurr", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "PushBit", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "PushCurr", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "bitStack", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:false, Public:false}, "stackPos", $.Int32);

    $.Field({Static:false, Public:false}, "curr", $.UInt32);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BufferBuilder */ 

(function BufferBuilder$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.BufferBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendHelper", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBuffers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Recycle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder+Buffer"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Length", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLength", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "wstrcpy", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "BufferSize", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "InitialBufferArrayLength", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "MaxStringBuilderLength", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "DefaultSBCapacity", $.Int32, 16);

    $.Field({Static:false, Public:false}, "stringBuilder", $asm00.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "buffers", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.BufferBuilder+Buffer")]));

    $.Field({Static:false, Public:false}, "buffersCount", $.Int32);

    $.Field({Static:false, Public:false}, "lastBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "lastBufferIndex", $.Int32);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.BufferBuilder+Buffer */ 

(function Buffer$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.BufferBuilder+Buffer", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "recycledBuffer", $asm00.TypeRef("System.WeakReference"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ByteStack */ 

(function ByteStack$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.ByteStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Peek", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "Pop", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "growthRate", $.Int32);

    $.Field({Static:false, Public:false}, "top", $.Int32);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Property({Static:false, Public:true }, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DiagnosticsSwitches */ 

(function DiagnosticsSwitches$Members () {
  var $, $thisType;








  JSIL.MakeStaticClass("System.Xml.DiagnosticsSwitches", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "get_KeepTempFiles", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NonRecursiveTypeLoading", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_PregenEventLog", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSchema", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSchemaContentModel", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.BooleanSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XmlSerialization", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_XslTypeInference", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Diagnostics.TraceSwitch"))
    );

    $.Field({Static:true , Public:false}, "xmlSchemaContentModel", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Field({Static:true , Public:false}, "xmlSchema", $asm01.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Field({Static:true , Public:false}, "keepTempFiles", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Field({Static:true , Public:false}, "pregenEventLog", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Field({Static:true , Public:false}, "xmlSerialization", $asm01.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Field({Static:true , Public:false}, "xslTypeInference", $asm01.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Field({Static:true , Public:false}, "nonRecursiveTypeLoading", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "XmlSchemaContentModel", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "XmlSchema", $asm01.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "KeepTempFiles", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "PregenEventLog", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));

    $.Property({Static:true , Public:true }, "XmlSerialization", $asm01.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "XslTypeInference", $asm01.TypeRef("System.Diagnostics.TraceSwitch"));

    $.Property({Static:true , Public:true }, "NonRecursiveTypeLoading", $asm01.TypeRef("System.Diagnostics.BooleanSwitch"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.EmptyEnumerator */ 

(function EmptyEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.EmptyEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.HWStack */ 

(function HWStack$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.HWStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Object]), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToTop", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Peek", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "growthRate", $.Int32);

    $.Field({Static:false, Public:false}, "used", $.Int32);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Field({Static:false, Public:false}, "limit", $.Int32);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Length", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* interface System.Xml.IHasXmlNode */ 

JSIL.MakeInterface(
  "System.Xml.IHasXmlNode", true, [], function ($) {
    $.Method({}, "GetNode", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode")));
  }, []);

/* interface System.Xml.IXmlLineInfo */ 

JSIL.MakeInterface(
  "System.Xml.IXmlLineInfo", true, [], function ($) {
    $.Method({}, "HasLineInfo", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_LineNumber", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_LinePosition", JSIL.MethodSignature.Return($.Int32));
    $.Property({}, "LineNumber");
    $.Property({}, "LinePosition");
  }, []);

/* class System.Xml.PositionInfo */ 

(function PositionInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.PositionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPositionInfo", 
      new JSIL.MethodSignature($.Type, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ReaderPositionInfo */ 

(function ReaderPositionInfo$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.PositionInfo"), 
      Name: "System.Xml.ReaderPositionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IXmlNamespaceResolver */ 

JSIL.MakeInterface(
  "System.Xml.IXmlNamespaceResolver", true, [], function ($) {
    $.Method({}, "GetNamespacesInScope", new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")]));
    $.Method({}, "LookupNamespace", new JSIL.MethodSignature($.String, [$.String]));
    $.Method({}, "LookupPrefix", new JSIL.MethodSignature($.String, [$.String]));
  }, []);

/* struct System.Xml.LineInfo */ 

(function LineInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.LineInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "lineNo", $.Int32);

    $.Field({Static:false, Public:false}, "linePos", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ListBase`1 */ 

(function ListBase$b1$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.ListBase`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.GenericParameter("T")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixedSize", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.GenericParameter("T"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.IListEnumerator`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCompatibleType", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Remove", 
      new JSIL.MethodSignature($.Boolean, [$.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.GenericParameter("T")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lT$g.GetEnumerator", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), null)
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Add", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "Add");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Clear", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "Clear");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Contains", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "Contains");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.IndexOf", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "IndexOf");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "Insert");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Remove", 
      JSIL.MethodSignature.Action($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "Remove");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IList.set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IList"), "set_Item");

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixedSize", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IList.Item", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm00.TypeRef("System.Collections.Generic.ICollection`1", [$.GenericParameter("T")]), 
      /* 2 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")]), 
      /* 3 */ $asm00.TypeRef("System.Collections.IList"), 
      /* 4 */ $asm00.TypeRef("System.Collections.ICollection"), 
      /* 5 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Xml.IListEnumerator`1 */ 

(function IListEnumerator$b1$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.IListEnumerator`1", 
      IsPublic: false, 
      IsReferenceType: false, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "sequence", $asm00.TypeRef("System.Collections.Generic.IList`1", [$.GenericParameter("T")]));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "current", $.GenericParameter("T"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.GenericParameter("T"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$.GenericParameter("T")]), 
      /* 1 */ $asm00.TypeRef("System.IDisposable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNameTable */ 

(function XmlNameTable$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNameTable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.NameTable */ 

(function NameTable$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNameTable"), 
      Name: "System.Xml.NameTable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Add", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEntry", 
      new JSIL.MethodSignature($.String, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Get", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TextEquals", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.NameTable+Entry")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "mask", $.Int32);

    $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.NameTable+Entry */ 

(function Entry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.NameTable+Entry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Type
        ])
    );

    $.Field({Static:false, Public:false}, "str", $.String);

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ref */ 

(function Ref$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Ref", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Equal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ValidateNames */ 

(function ValidateNames$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.ValidateNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInvalidNameException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsReservedNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseNameTestThrow", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseNCName", 
      new JSIL.MethodSignature($.Int32, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseNCNameInternal", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseNCNameThrow", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseQName", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseQNameThrow", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitQName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "StartsWithXml", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ThrowInvalidName", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateName", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $asm07.TypeRef("System.Xml.ValidateNames+Flags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidateNameInternal", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $asm07.TypeRef("System.Xml.ValidateNames+Flags"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "ValidateNameThrow", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $asm07.TypeRef("System.Xml.ValidateNames+Flags")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ValidateNames+Flags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ValidateNames+Flags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NCNames: 1, 
    CheckLocalName: 2, 
    AllExceptPrefixMapping: 3, 
    CheckPrefixMapping: 4, 
    AllExceptNCNames: 6, 
    All: 7, 
  }
);

/* struct System.Xml.XmlCharType */ 

(function XmlCharType$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlCharType", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_StaticLock", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "InitInstance", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttributeValueChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsCharData", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsExtender", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsHexDigit", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsLetter", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsNCNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNmToken", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyCharData", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsOnlyWhitespaceWithPos", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsPubidChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPublicId", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsStartNCNameChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsTextChar", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsWhiteSpace", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.Constant({Static:true , Public:false}, "fWhitespace", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "fLetter", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "fNCStartName", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "fNCName", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "fCharData", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "fPublicId", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "fText", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "fAttrValue", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "CharPropertiesSize", $.UInt32, 65536);

    $.Field({Static:true , Public:false}, "s_Lock", $.Object);

    $.Field({Static:true , Public:false}, "s_CharProperties", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]));

    $.Field({Static:false, Public:false}, "charProperties", $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]));

    $.Property({Static:true , Public:false}, "StaticLock", $.Object);

    $.Property({Static:true , Public:false}, "Instance", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlComplianceUtil */ 

(function XmlComplianceUtil$Members () {
  var $, $thisType;






  JSIL.MakeStaticClass("System.Xml.XmlComplianceUtil", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:true }, "CDataNormalize", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsValidLanguageID", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "NonCDataNormalize", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripSpaces", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "StripSpaces", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ExceptionType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ExceptionType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ArgumentException: 0, 
    XmlException: 1, 
  }
);

/* enum System.Xml.XmlDateTimeSerializationMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlDateTimeSerializationMode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Local: 0, 
    Utc: 1, 
    Unspecified: 2, 
    RoundtripKind: 3, 
  }
);

/* class System.Xml.XmlConvert */ 

(function XmlConvert$Members () {
  var $, $thisType;













































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlConvert", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAllDateTimeFormats", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Xml.ExceptionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.ExceptionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.ExceptionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidCharException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Char, $asm07.TypeRef("System.Xml.ExceptionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidHighSurrogateCharException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Char, $asm07.TypeRef("System.Xml.ExceptionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidNameArgumentException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.ArgumentException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Char, $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateInvalidSurrogatePairException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Char, $.Char, 
          $asm07.TypeRef("System.Xml.ExceptionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "DecodeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncodeLocalName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncodeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeName", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "EncodeNmToken", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeValueForDebuggerDisplay", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromBinHexString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromBinHexString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromHex", 
      new JSIL.MethodSignature($.Int32, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AllDateTimeFormats", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNegativeZero", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitString", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StrEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchToLocalTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SwitchToUtcTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBinHexString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToByte", 
      new JSIL.MethodSignature($.Byte, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    )
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlConvert.ToDateTime() that takes in XmlDateTimeSerializationMode"]; });

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String, $asm07.TypeRef("System.Xml.XmlDateTimeSerializationMode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToGuid", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Guid"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToInteger", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.String])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.SByte])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int16])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt16])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt32])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.UInt64])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    )
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlConvert.ToString() that takes in XmlDateTimeSerializationMode"]; });

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime"), $asm07.TypeRef("System.Xml.XmlDateTimeSerializationMode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset"), $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Guid")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToTimeSpan", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.String])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.String])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:true }, "ToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.String])
    )
      .Attribute($asm00.TypeRef("System.CLSCompliantAttribute"), function () { return [false]; });

    $.ExternalMethod({Static:true , Public:false}, "ToUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Uri"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXPathDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXPathString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "TrimString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToBoolean", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToByte", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToChar", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToDouble", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Double])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToGuid", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Guid")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInt16", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int16])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInt32", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInt64", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int64])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToInteger", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToSByte", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.SByte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToSingle", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Single])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToTimeSpan", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.TimeSpan")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUInt16", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt16])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUInt32", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUInt64", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt64])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryToUri", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.Uri")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyName", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyNCName", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyNMTOKEN", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyNormalizedString", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryVerifyTOKEN", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.ExceptionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyCharData", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $asm07.TypeRef("System.Xml.ExceptionType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyNCName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyNMTOKEN", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyNMTOKEN", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.ExceptionType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyNormalizedString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyQName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "VerifyQName", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.ExceptionType")])
    );

    $.ExternalMethod({Static:true , Public:true }, "VerifyTOKEN", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "XPathRound", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.Constant({Static:true , Public:false}, "SurHighStart", $.Int32, 55296);

    $.Constant({Static:true , Public:false}, "SurHighEnd", $.Int32, 56319);

    $.Constant({Static:true , Public:false}, "SurLowStart", $.Int32, 56320);

    $.Constant({Static:true , Public:false}, "SurLowEnd", $.Int32, 57343);

    $.Constant({Static:true , Public:false}, "SurMask", $.Int32, 64512);

    $.Field({Static:true , Public:false}, "crt", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_EncodedCharLength", $.Int32, 7);

    $.Field({Static:true , Public:false}, "c_EncodeCharPattern", $asm01.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "c_DecodeCharPattern", $asm01.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Field({Static:true , Public:false}, "s_allDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "WhitespaceChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:true , Public:false}, "AllDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDownloadManager */ 

(function XmlDownloadManager$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlDownloadManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNonFileStream", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IO.Stream"), [$asm01.TypeRef("System.Uri"), $asm01.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStream", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IO.Stream"), [$asm01.TypeRef("System.Uri"), $asm01.TypeRef("System.Net.ICredentials")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "connections", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.OpenedHost */ 

(function OpenedHost$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.OpenedHost", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nonCachedConnectionsCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlRegisteredNonCachedStream */ 

(function XmlRegisteredNonCachedStream$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.IO.Stream"), 
      Name: "System.Xml.XmlRegisteredNonCachedStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlDownloadManager"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginRead", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "BeginWrite", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IAsyncResult"), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $asm00.TypeRef("System.AsyncCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndRead", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.IAsyncResult")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndWrite", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IAsyncResult"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Finalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanRead", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanSeek", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanWrite", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Position", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadByte", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Seek", 
      new JSIL.MethodSignature($.Int64, [$.Int64, $asm00.TypeRef("System.IO.SeekOrigin")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Position", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteByte", 
      JSIL.MethodSignature.Action($.Byte)
    );

    $.Field({Static:false, Public:false}, "stream", $asm00.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "downloadManager", $asm07.TypeRef("System.Xml.XmlDownloadManager"));

    $.Field({Static:false, Public:false}, "host", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanRead", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanSeek", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanWrite", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Position", $.Int64);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCachedStream */ 

(function XmlCachedStream$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.IO.MemoryStream"), 
      Name: "System.Xml.XmlCachedStream", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.Uri"), $asm00.TypeRef("System.IO.Stream")])
    );

    $.Constant({Static:true , Public:false}, "MoveBufferSize", $.Int32, 4096);

    $.Field({Static:false, Public:false}, "uri", $asm01.TypeRef("System.Uri"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.UTF16Decoder */ 

(function UTF16Decoder$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Text.Decoder"), 
      Name: "System.Xml.UTF16Decoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.Constant({Static:true , Public:false}, "CharSize", $.Int32, 2);

    $.Field({Static:false, Public:false}, "bigEndian", $.Boolean);

    $.Field({Static:false, Public:false}, "lastByte", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.SafeAsciiDecoder */ 

(function SafeAsciiDecoder$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Text.Decoder"), 
      Name: "System.Xml.SafeAsciiDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Encoding */ 

(function Ucs4Encoding$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Text.Encoding"), 
      Name: "System.Xml.Ucs4Encoding", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CodePage", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_2143", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_3412", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_Bigendian", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UCS4_Littleendian", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetByteCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBytes", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetDecoder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Decoder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEncoder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoder"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxByteCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetMaxCharCount", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "ucs4Decoder", $asm07.TypeRef("System.Xml.Ucs4Decoder"));

    $.Property({Static:false, Public:true , Virtual:true }, "CodePage", $.Int32);

    $.Property({Static:true , Public:false}, "UCS4_Littleendian", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "UCS4_Bigendian", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "UCS4_2143", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:true , Public:false}, "UCS4_3412", $asm00.TypeRef("System.Text.Encoding"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Encoding1234 */ 

(function Ucs4Encoding1234$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Encoding"), 
      Name: "System.Xml.Ucs4Encoding1234", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Encoding4321 */ 

(function Ucs4Encoding4321$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Encoding"), 
      Name: "System.Xml.Ucs4Encoding4321", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Encoding2143 */ 

(function Ucs4Encoding2143$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Encoding"), 
      Name: "System.Xml.Ucs4Encoding2143", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Encoding3412 */ 

(function Ucs4Encoding3412$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Encoding"), 
      Name: "System.Xml.Ucs4Encoding3412", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EncodingName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPreamble", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "EncodingName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Decoder */ 

(function Ucs4Decoder$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Text.Decoder"), 
      Name: "System.Xml.Ucs4Decoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Convert", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetCharCount", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnicodeToUTF16", 
      new JSIL.MethodSignature($.Char, [$.UInt32])
    );

    $.Field({Static:false, Public:false}, "lastBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "lastBytesCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Decoder4321 */ 

(function Ucs4Decoder4321$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Decoder"), 
      Name: "System.Xml.Ucs4Decoder4321", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Decoder1234 */ 

(function Ucs4Decoder1234$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Decoder"), 
      Name: "System.Xml.Ucs4Decoder1234", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Decoder2143 */ 

(function Ucs4Decoder2143$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Decoder"), 
      Name: "System.Xml.Ucs4Decoder2143", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Ucs4Decoder3412 */ 

(function Ucs4Decoder3412$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Ucs4Decoder"), 
      Name: "System.Xml.Ucs4Decoder3412", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetFullChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlException */ 

(function XmlException$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.SystemException"), 
      Name: "System.Xml.XmlException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Exception"), 
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.IXmlLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm00.TypeRef("System.Exception"), $asm07.TypeRef("System.Xml.IXmlLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.IXmlLineInfo"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.IXmlLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.IXmlLineInfo"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception"), $.Int32, 
          $.Int32, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildCharExceptionStr", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.String]), [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsCatchableException", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Exception")])
    );

    $.Field({Static:false, Public:false}, "res", $.String);

    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "sourceUri", $.String)
      .Attribute($asm00.TypeRef("System.Runtime.Serialization.OptionalFieldAttribute"));

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SourceUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.Property({Static:false, Public:false}, "ResString", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNamespaceManager */ 

(function XmlNamespaceManager$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNamespaceManager", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_EmptyResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceDeclaration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceDecl", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopScope", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PushScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "MinDeclsCountForHashtable", $.Int32, 16);

    $.Field({Static:true , Public:false}, "s_EmptyResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Field({Static:false, Public:false}, "nsdecls", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNamespaceManager+NamespaceDeclaration")]));

    $.Field({Static:false, Public:false}, "lastDecl", $.Int32);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "scopeId", $.Int32);

    $.Field({Static:false, Public:false}, "hashTable", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "useHashtable", $.Boolean);

    $.Field({Static:false, Public:false}, "xml", $.String);

    $.Field({Static:false, Public:false}, "xmlNs", $.String);

    $.Property({Static:true , Public:false}, "EmptyResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlNamespaceManager+NamespaceDeclaration */ 

(function NamespaceDeclaration$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlNamespaceManager+NamespaceDeclaration", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String);

    $.Field({Static:false, Public:true }, "uri", $.String);

    $.Field({Static:false, Public:true }, "scopeId", $.Int32);

    $.Field({Static:false, Public:true }, "previousNsIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlNamespaceScope */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlNamespaceScope", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    All: 0, 
    ExcludeXml: 1, 
    Local: 2, 
  }
);

/* enum System.Xml.XmlNodeOrder */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlNodeOrder", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Before: 0, 
    After: 1, 
    Same: 2, 
    Unknown: 3, 
  }
);

/* enum System.Xml.XmlNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlNodeType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Element: 1, 
    Attribute: 2, 
    Text: 3, 
    CDATA: 4, 
    EntityReference: 5, 
    Entity: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    Document: 9, 
    DocumentType: 10, 
    DocumentFragment: 11, 
    Notation: 12, 
    Whitespace: 13, 
    SignificantWhitespace: 14, 
    EndElement: 15, 
    EndEntity: 16, 
    XmlDeclaration: 17, 
  }
);

/* class System.Xml.XmlResolver */ 

(function XmlResolver$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Uri"), [$asm01.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Net.ICredentials"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm01.TypeRef("System.Net.ICredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUrlResolver */ 

(function XmlUrlResolver$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlResolver"), 
      Name: "System.Xml.XmlUrlResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DownloadManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDownloadManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Uri"), [$asm01.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Net.ICredentials"))
    );

    $.Field({Static:true , Public:false}, "s_DownloadManager", $.Object);

    $.Field({Static:false, Public:false}, "_credentials", $asm01.TypeRef("System.Net.ICredentials"));

    $.Property({Static:true , Public:false}, "DownloadManager", $asm07.TypeRef("System.Xml.XmlDownloadManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm01.TypeRef("System.Net.ICredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNullResolver */ 

(function XmlNullResolver$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlUrlResolver"), 
      Name: "System.Xml.XmlNullResolver", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Singleton", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlQualifiedName */ 

(function XmlQualifiedName$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlQualifiedName", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Atomize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Verify", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "hash", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlReservedNs */ 

(function XmlReservedNs$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlReservedNs", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "NsDataType", $.String, "urn:schemas-microsoft-com:datatypes");

    $.Constant({Static:true , Public:false}, "NsDataTypeAlias", $.String, "uuid:C2F41010-65B3-11D1-A29F-00AA00C14882");

    $.Constant({Static:true , Public:false}, "NsDataTypeOld", $.String, "urn:uuid:C2F41010-65B3-11D1-A29F-00AA00C14882/");

    $.Constant({Static:true , Public:false}, "NsMsxsl", $.String, "urn:schemas-microsoft-com:xslt");

    $.Constant({Static:true , Public:false}, "NsXdr", $.String, "urn:schemas-microsoft-com:xml-data");

    $.Constant({Static:true , Public:false}, "NsXslDebug", $.String, "urn:schemas-microsoft-com:xslt-debug");

    $.Constant({Static:true , Public:false}, "NsXdrAlias", $.String, "uuid:BDC6E3F0-6DA3-11D1-A2A3-00AA00C14882");

    $.Constant({Static:true , Public:false}, "NsWdXsl", $.String, "http://www.w3.org/TR/WD-xsl");

    $.Constant({Static:true , Public:false}, "NsXml", $.String, "http://www.w3.org/XML/1998/namespace");

    $.Constant({Static:true , Public:false}, "NsXmlNs", $.String, "http://www.w3.org/2000/xmlns/");

    $.Constant({Static:true , Public:false}, "NsXs", $.String, "http://www.w3.org/2001/XMLSchema");

    $.Constant({Static:true , Public:false}, "NsXsd", $.String, "http://www.w3.org/2001/XMLSchema-datatypes");

    $.Constant({Static:true , Public:false}, "NsXsi", $.String, "http://www.w3.org/2001/XMLSchema-instance");

    $.Constant({Static:true , Public:false}, "NsXslt", $.String, "http://www.w3.org/1999/XSL/Transform");

    $.Constant({Static:true , Public:false}, "NsExsltCommon", $.String, "http://exslt.org/common");

    $.Constant({Static:true , Public:false}, "NsExsltDates", $.String, "http://exslt.org/dates-and-times");

    $.Constant({Static:true , Public:false}, "NsExsltMath", $.String, "http://exslt.org/math");

    $.Constant({Static:true , Public:false}, "NsExsltRegExps", $.String, "http://exslt.org/regular-expressions");

    $.Constant({Static:true , Public:false}, "NsExsltSets", $.String, "http://exslt.org/sets");

    $.Constant({Static:true , Public:false}, "NsExsltStrings", $.String, "http://exslt.org/strings");

    $.Constant({Static:true , Public:false}, "NsXQueryFunc", $.String, "http://www.w3.org/2003/11/xpath-functions");

    $.Constant({Static:true , Public:false}, "NsXQueryDataType", $.String, "http://www.w3.org/2003/11/xpath-datatypes");

    $.Constant({Static:true , Public:false}, "NsCollationBase", $.String, "http://collations.microsoft.com");

    $.Constant({Static:true , Public:false}, "NsCollCodePoint", $.String, "http://www.w3.org/2004/10/xpath-functions/collation/codepoint");

    $.Constant({Static:true , Public:false}, "NsXsltInternal", $.String, "http://schemas.microsoft.com/framework/2003/xml/xslt/internal");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSecureResolver */ 

(function XmlSecureResolver$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlResolver"), 
      Name: "System.Xml.XmlSecureResolver", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlResolver"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlResolver"), $asm00.TypeRef("System.Security.Policy.Evidence")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlResolver"), $asm00.TypeRef("System.Security.PermissionSet")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateEvidenceForUrl", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Security.Policy.Evidence"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEntity", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Uri"), [$asm01.TypeRef("System.Uri"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Credentials", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Net.ICredentials"))
    );

    $.Field({Static:false, Public:false}, "resolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "permissionSet", $asm00.TypeRef("System.Security.PermissionSet"));

    $.Property({Static:false, Public:true , Virtual:true }, "Credentials", $asm01.TypeRef("System.Net.ICredentials"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.CharEntityEncoderFallback */ 

(function CharEntityEncoderFallback$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Text.EncoderFallback"), 
      Name: "System.Xml.CharEntityEncoderFallback", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CanReplaceAt", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateFallbackBuffer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.EncoderFallbackBuffer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MaxCharCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StartOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.Int32]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_StartOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "fallbackBuffer", $asm07.TypeRef("System.Xml.CharEntityEncoderFallbackBuffer"));

    $.Field({Static:false, Public:false}, "textContentMarks", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "endMarkPos", $.Int32);

    $.Field({Static:false, Public:false}, "curMarkPos", $.Int32);

    $.Field({Static:false, Public:false}, "startOffset", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "MaxCharCount", $.Int32);

    $.Property({Static:false, Public:false}, "StartOffset", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.CharEntityEncoderFallbackBuffer */ 

(function CharEntityEncoderFallbackBuffer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Text.EncoderFallbackBuffer"), 
      Name: "System.Xml.CharEntityEncoderFallbackBuffer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.CharEntityEncoderFallback"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fallback", 
      new JSIL.MethodSignature($.Boolean, [$.Char, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Fallback", 
      new JSIL.MethodSignature($.Boolean, [
          $.Char, $.Char, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Remaining", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNextChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MovePrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "parent", $asm07.TypeRef("System.Xml.CharEntityEncoderFallback"));

    $.Field({Static:false, Public:false}, "charEntity", $.String);

    $.Field({Static:false, Public:false}, "charEntityIndex", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Remaining", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ConformanceLevel */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ConformanceLevel", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Auto: 0, 
    Fragment: 1, 
    Document: 2, 
  }
);

/* enum System.Xml.EntityHandling */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.EntityHandling", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    ExpandEntities: 1, 
    ExpandCharEntities: 2, 
  }
);

/* class System.Xml.XmlWriter */ 

(function XmlWriter$Members () {
  var $, $thisType;








































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddConformanceWrapper", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm07.TypeRef("System.Xml.XmlWriterSettings"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.TextWriter")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.Text.StringBuilder"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWriterImpl", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $.Boolean, $asm07.TypeRef("System.Xml.XmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateWriterImpl", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteAttributeString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalNamespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "WriteNodeBufferSize", $.Int32, 1024);

    $.Field({Static:false, Public:false}, "writeNodeBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm07.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlRawWriter */ 

(function XmlRawWriter$Members () {
  var $, $thisType;








































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Xml.XmlRawWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRootElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NamespaceResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndBase64", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "SurHighStart", $.Int32, 55296);

    $.Constant({Static:true , Public:false}, "SurHighEnd", $.Int32, 56319);

    $.Constant({Static:true , Public:false}, "SurLowStart", $.Int32, 56320);

    $.Constant({Static:true , Public:false}, "SurLowEnd", $.Int32, 57343);

    $.Constant({Static:true , Public:false}, "SurMask", $.Int32, 64512);

    $.Field({Static:false, Public:false}, "base64Encoder", $asm07.TypeRef("System.Xml.XmlRawWriterBase64Encoder"));

    $.Field({Static:false, Public:false}, "resolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm07.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlEncodedRawTextWriter */ 

(function XmlEncodedRawTextWriter$Members () {
  var $, $thisType;
























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "System.Xml.XmlEncodedRawTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmpEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CarriageReturnEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTextContentMark", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "CharEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeChar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeChars", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeSurrogate", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushEncoder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowTextContentMarks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidXmlChar", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LineFeedEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "LtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawEndCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawStartCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TabEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateContentChars", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCDataSection", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCommentOrPi", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewLine", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Char]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRawWithCharChecking", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "BUFSIZE", $.Int32, 6144);

    $.Constant({Static:true , Public:false}, "OVERFLOW", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "INIT_MARKS_COUNT", $.Int32, 64);

    $.Field({Static:false, Public:false}, "bufBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "stream", $asm00.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "bufPos", $.Int32);

    $.Field({Static:false, Public:false}, "textPos", $.Int32);

    $.Field({Static:false, Public:false}, "contentPos", $.Int32);

    $.Field({Static:false, Public:false}, "cdataPos", $.Int32);

    $.Field({Static:false, Public:false}, "attrEndPos", $.Int32);

    $.Field({Static:false, Public:false}, "bufLen", $.Int32);

    $.Field({Static:false, Public:false}, "writeToNull", $.Boolean);

    $.Field({Static:false, Public:false}, "hadDoubleBracket", $.Boolean);

    $.Field({Static:false, Public:false}, "inAttributeValue", $.Boolean);

    $.Field({Static:false, Public:false}, "bufBytesUsed", $.Int32);

    $.Field({Static:false, Public:false}, "bufChars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "encoder", $asm00.TypeRef("System.Text.Encoder"));

    $.Field({Static:false, Public:false}, "writer", $asm00.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "trackTextContent", $.Boolean);

    $.Field({Static:false, Public:false}, "inTextContent", $.Boolean);

    $.Field({Static:false, Public:false}, "lastMarkPos", $.Int32);

    $.Field({Static:false, Public:false}, "textContentMarks", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "charEntityFallback", $asm07.TypeRef("System.Xml.CharEntityEncoderFallback"));

    $.Field({Static:false, Public:false}, "newLineHandling", $asm07.TypeRef("System.Xml.NewLineHandling"));

    $.Field({Static:false, Public:false}, "closeOutput", $.Boolean);

    $.Field({Static:false, Public:false}, "omitXmlDeclaration", $.Boolean);

    $.Field({Static:false, Public:false}, "autoXmlDeclaration", $.Boolean);

    $.Field({Static:false, Public:false}, "newLineChars", $.String);

    $.Field({Static:false, Public:false}, "standalone", $asm07.TypeRef("System.Xml.XmlStandalone"));

    $.Field({Static:false, Public:false}, "outputMethod", $asm07.TypeRef("System.Xml.XmlOutputMethod"));

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.HtmlEncodedRawTextWriter */ 

(function HtmlEncodedRawTextWriter$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlEncodedRawTextWriter"), 
      Name: "System.Xml.HtmlEncodedRawTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputRestAmps", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMetaElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUriAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "StackIncrement", $.Int32, 10);

    $.Field({Static:false, Public:false}, "elementScope", $asm07.TypeRef("System.Xml.ByteStack"));

    $.Field({Static:false, Public:false}, "currentElementProperties", $asm07.TypeRef("System.Xml.ElementProperties"));

    $.Field({Static:false, Public:false}, "currentAttributeProperties", $asm07.TypeRef("System.Xml.AttributeProperties"));

    $.Field({Static:false, Public:false}, "endsWithAmpersand", $.Boolean);

    $.Field({Static:false, Public:false}, "uriEscapingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "mediaType", $.String);

    $.Field({Static:false, Public:false}, "doNotEscapeUriAttributes", $.Boolean);

    $.Field({Static:true , Public:false}, "elementPropertySearch", $asm07.TypeRef("System.Xml.TernaryTreeReadOnly"));

    $.Field({Static:true , Public:false}, "attributePropertySearch", $asm07.TypeRef("System.Xml.TernaryTreeReadOnly"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.HtmlEncodedRawTextWriterIndent */ 

(function HtmlEncodedRawTextWriterIndent$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.HtmlEncodedRawTextWriter"), 
      Name: "System.Xml.HtmlEncodedRawTextWriterIndent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Field({Static:false, Public:false}, "endBlockPos", $.Int32);

    $.Field({Static:false, Public:false}, "indentChars", $.String);

    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.HtmlTernaryTree */ 

(function HtmlTernaryTree$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.HtmlTernaryTree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "htmlElements", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "htmlAttributes", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUtf8RawTextWriter */ 

(function XmlUtf8RawTextWriter$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "System.Xml.XmlUtf8RawTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AmpEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CarriageReturnEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), $.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "CharToUTF8", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EncodeChar", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Char])]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeMultibyteUTF8", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "EncodeSurrogate", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [
          $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char]), 
          $jsilcore.TypeRef("JSIL.Pointer", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushEncoder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "InRange", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidXmlChar", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [
          $.Int32, $jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSurrogateByte", 
      new JSIL.MethodSignature($.Boolean, [$.Byte])
    );

    $.ExternalMethod({Static:true , Public:false}, "LineFeedEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "LtEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "QuoteEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawEndCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "RawStartCData", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RawText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "TabEntity", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateContentChars", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCDataSection", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCommentOrPi", 
      new JSIL.MethodSignature(null, [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNewLine", 
      new JSIL.MethodSignature($jsilcore.TypeRef("JSIL.Pointer", [$.Byte]), [$jsilcore.TypeRef("JSIL.Pointer", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRawWithCharChecking", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "BUFSIZE", $.Int32, 6144);

    $.Constant({Static:true , Public:false}, "OVERFLOW", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "INIT_MARKS_COUNT", $.Int32, 64);

    $.Field({Static:false, Public:false}, "bufBytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "stream", $asm00.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "bufPos", $.Int32);

    $.Field({Static:false, Public:false}, "textPos", $.Int32);

    $.Field({Static:false, Public:false}, "contentPos", $.Int32);

    $.Field({Static:false, Public:false}, "cdataPos", $.Int32);

    $.Field({Static:false, Public:false}, "attrEndPos", $.Int32);

    $.Field({Static:false, Public:false}, "bufLen", $.Int32);

    $.Field({Static:false, Public:false}, "writeToNull", $.Boolean);

    $.Field({Static:false, Public:false}, "hadDoubleBracket", $.Boolean);

    $.Field({Static:false, Public:false}, "inAttributeValue", $.Boolean);

    $.Field({Static:false, Public:false}, "newLineHandling", $asm07.TypeRef("System.Xml.NewLineHandling"));

    $.Field({Static:false, Public:false}, "closeOutput", $.Boolean);

    $.Field({Static:false, Public:false}, "omitXmlDeclaration", $.Boolean);

    $.Field({Static:false, Public:false}, "autoXmlDeclaration", $.Boolean);

    $.Field({Static:false, Public:false}, "newLineChars", $.String);

    $.Field({Static:false, Public:false}, "standalone", $asm07.TypeRef("System.Xml.XmlStandalone"));

    $.Field({Static:false, Public:false}, "outputMethod", $asm07.TypeRef("System.Xml.XmlOutputMethod"));

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.HtmlUtf8RawTextWriter */ 

(function HtmlUtf8RawTextWriter$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlUtf8RawTextWriter"), 
      Name: "System.Xml.HtmlUtf8RawTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OutputRestAmps", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlAttributeTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHtmlElementTextBlock", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMetaElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUriAttributeText", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Pointer", [$.Char]), $jsilcore.TypeRef("JSIL.Pointer", [$.Char])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "StackIncrement", $.Int32, 10);

    $.Field({Static:false, Public:false}, "elementScope", $asm07.TypeRef("System.Xml.ByteStack"));

    $.Field({Static:false, Public:false}, "currentElementProperties", $asm07.TypeRef("System.Xml.ElementProperties"));

    $.Field({Static:false, Public:false}, "currentAttributeProperties", $asm07.TypeRef("System.Xml.AttributeProperties"));

    $.Field({Static:false, Public:false}, "endsWithAmpersand", $.Boolean);

    $.Field({Static:false, Public:false}, "uriEscapingBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "mediaType", $.String);

    $.Field({Static:false, Public:false}, "doNotEscapeUriAttributes", $.Boolean);

    $.Field({Static:true , Public:false}, "elementPropertySearch", $asm07.TypeRef("System.Xml.TernaryTreeReadOnly"));

    $.Field({Static:true , Public:false}, "attributePropertySearch", $asm07.TypeRef("System.Xml.TernaryTreeReadOnly"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.HtmlUtf8RawTextWriterIndent */ 

(function HtmlUtf8RawTextWriterIndent$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.HtmlUtf8RawTextWriter"), 
      Name: "System.Xml.HtmlUtf8RawTextWriterIndent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FlushBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Field({Static:false, Public:false}, "endBlockPos", $.Int32);

    $.Field({Static:false, Public:false}, "indentChars", $.String);

    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.IncrementalReadDummyDecoder */ 

(function IncrementalReadDummyDecoder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.IncrementalReadDecoder"), 
      Name: "System.Xml.IncrementalReadDummyDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.IncrementalReadCharsDecoder */ 

(function IncrementalReadCharsDecoder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.IncrementalReadDecoder"), 
      Name: "System.Xml.IncrementalReadCharsDecoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Decode", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DecodedCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsFull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetNextOutputBuffer", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "buffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "startIndex", $.Int32);

    $.Field({Static:false, Public:false}, "curIndex", $.Int32);

    $.Field({Static:false, Public:false}, "endIndex", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "DecodedCount", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "IsFull", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.NewLineHandling */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.NewLineHandling", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Replace: 0, 
    Entitize: 1, 
    None: 2, 
  }
);

/* delegate System.Xml.OnRemoveWriter */ 

JSIL.MakeDelegate("System.Xml.OnRemoveWriter", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlRawWriter")));

/* interface System.Xml.IRemovableWriter */ 

JSIL.MakeInterface(
  "System.Xml.IRemovableWriter", false, [], function ($) {
    $.Method({}, "get_OnRemoveWriterEvent", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.OnRemoveWriter")));
    $.Method({}, "set_OnRemoveWriterEvent", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.OnRemoveWriter")));
    $.Property({}, "OnRemoveWriterEvent");
  }, []);

/* class System.Xml.QueryOutputWriter */ 

(function QueryOutputWriter$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "System.Xml.QueryOutputWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlRawWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndCDataSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NamespaceResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartCDataSection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "wrapped", $asm07.TypeRef("System.Xml.XmlRawWriter"));

    $.Field({Static:false, Public:false}, "inCDataSection", $.Boolean);

    $.Field({Static:false, Public:false}, "lookupCDataElems", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Int32]));

    $.Field({Static:false, Public:false}, "bitsCData", $asm07.TypeRef("System.Xml.BitStack"));

    $.Field({Static:false, Public:false}, "qnameCData", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "outputDocType", $.Boolean);

    $.Field({Static:false, Public:false}, "checkWellFormedDoc", $.Boolean);

    $.Field({Static:false, Public:false}, "hasDocElem", $.Boolean);

    $.Field({Static:false, Public:false}, "inAttr", $.Boolean);

    $.Field({Static:false, Public:false}, "systemId", $.String);

    $.Field({Static:false, Public:false}, "publicId", $.String);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ReadContentAsBinaryHelper */ 

(function ReadContentAsBinaryHelper$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.ReadContentAsBinaryHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateOrReset", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Finish", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBase64Decoder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBinHexDecoder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitOnElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextContentNode", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "ChunkSize", $.Int32, 256);

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Xml.ReadContentAsBinaryHelper+State"));

    $.Field({Static:false, Public:false}, "valueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "isEnd", $.Boolean);

    $.Field({Static:false, Public:false}, "canReadValueChunk", $.Boolean);

    $.Field({Static:false, Public:false}, "valueChunk", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "valueChunkLength", $.Int32);

    $.Field({Static:false, Public:false}, "decoder", $asm07.TypeRef("System.Xml.IncrementalReadDecoder"));

    $.Field({Static:false, Public:false}, "base64Decoder", $asm07.TypeRef("System.Xml.Base64Decoder"));

    $.Field({Static:false, Public:false}, "binHexDecoder", $asm07.TypeRef("System.Xml.BinHexDecoder"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ReadContentAsBinaryHelper+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ReadContentAsBinaryHelper+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    InReadContent: 1, 
    InReadElementContent: 2, 
  }
);

/* enum System.Xml.TernaryTreeByte */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.TernaryTreeByte", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    characterByte: 0, 
    leftTree: 1, 
    rightTree: 2, 
    data: 3, 
  }
);

/* enum System.Xml.ElementProperties */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ElementProperties", 
    BaseType: $asm00.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DEFAULT: 0, 
    URI_PARENT: 1, 
    BOOL_PARENT: 2, 
    NAME_PARENT: 4, 
    EMPTY: 8, 
    NO_ENTITIES: 16, 
    HEAD: 32, 
    BLOCK_WS: 64, 
    HAS_NS: 128, 
  }
);

/* enum System.Xml.AttributeProperties */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.AttributeProperties", 
    BaseType: $asm00.TypeRef("System.UInt32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DEFAULT: 0, 
    URI: 1, 
    BOOLEAN: 2, 
    NAME: 4, 
  }
);

/* class System.Xml.TernaryTreeReadOnly */ 

(function TernaryTreeReadOnly$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.TernaryTreeReadOnly", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:true }, "FindCaseInsensitiveString", 
      new JSIL.MethodSignature($.Byte, [$.String])
    );

    $.Field({Static:false, Public:false}, "nodeBuffer", $jsilcore.TypeRef("System.Array", [$.Byte]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ReadState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ReadState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Initial: 0, 
    Interactive: 1, 
    Error: 2, 
    EndOfFile: 3, 
    Closed: 4, 
  }
);

/* class System.Xml.SecureStringHasher */ 

(function SecureStringHasher$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.SecureStringHasher", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Field({Static:false, Public:false}, "hashCodeRandomizer", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEqualityComparer`1", [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TextEncodedRawTextWriter */ 

(function TextEncodedRawTextWriter$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlEncodedRawTextWriter"), 
      Name: "System.Xml.TextEncodedRawTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.TextUtf8RawTextWriter */ 

(function TextUtf8RawTextWriter$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlUtf8RawTextWriter"), 
      Name: "System.Xml.TextUtf8RawTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.ValidatingReaderNodeData */ 

(function ValidatingReaderNodeData$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.ValidatingReaderNodeData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.AttributePSVIInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalStringValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RawValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAtomizedNameWPrefix", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.AttributePSVIInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LocalName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NodeType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OriginalStringValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RawValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetItemData", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "nameWPrefix", $.String);

    $.Field({Static:false, Public:false}, "rawValue", $.String);

    $.Field({Static:false, Public:false}, "originalStringValue", $.String);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "attributePSVIInfo", $asm07.TypeRef("System.Xml.AttributePSVIInfo"));

    $.Field({Static:false, Public:false}, "nodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "lineNo", $.Int32);

    $.Field({Static:false, Public:false}, "linePos", $.Int32);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true }, "RawValue", $.String);

    $.Property({Static:false, Public:true }, "OriginalStringValue", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "AttInfo", $asm07.TypeRef("System.Xml.AttributePSVIInfo"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.ValidationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.ValidationType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Auto: 1, 
    DTD: 2, 
    XDR: 3, 
    Schema: 4, 
  }
);

/* enum System.Xml.WhitespaceHandling */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.WhitespaceHandling", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    All: 0, 
    Significant: 1, 
    None: 2, 
  }
);

/* class System.Xml.XmlAutoDetectWriter */ 

(function XmlAutoDetectWriter$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "System.Xml.XmlAutoDetectWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriterSettings"), $asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateWrappedWriter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlOutputMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureWrappedWriter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlOutputMethod"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OnRemoveWriterEvent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.OnRemoveWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsHtmlTag", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NamespaceResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_OnRemoveWriterEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.OnRemoveWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TextBlockCreatesWriter", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "wrapped", $asm07.TypeRef("System.Xml.XmlRawWriter"));

    $.Field({Static:false, Public:false}, "onRemove", $asm07.TypeRef("System.Xml.OnRemoveWriter"));

    $.Field({Static:false, Public:false}, "writerSettings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Field({Static:false, Public:false}, "eventCache", $asm07.TypeRef("System.Xml.XmlEventCache"));

    $.Field({Static:false, Public:false}, "textWriter", $asm00.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "strm", $asm00.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true , Virtual:true }, "OnRemoveWriterEvent", $asm07.TypeRef("System.Xml.OnRemoveWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IRemovableWriter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlReader */ 

(function XmlReader$Members () {
  var $, $thisType;




















































































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddLineInfo", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlLineInfo")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddValidation", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddWrapper", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm07.TypeRef("System.Xml.XmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CalcBufferSize", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CanReadContentAs", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanReadContentAs", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateDtdValidatingReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), [$.Type, $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadContentAsException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReadContentAsException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.IXmlLineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadElementContentAsException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReadElementContentAsException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.IXmlLineInfo")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderImpl", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm07.TypeRef("System.Xml.XmlParserContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderImpl", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String, $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateReaderImpl", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateSqlReader", 
      new JSIL.MethodSignature($.Type, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsXxx", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDtdSchemaInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaInfo"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEncoding", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Text.Encoding"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetV1ConformanceLevel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ConformanceLevel"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetXmlTextReaderImpl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasValueInternal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsName", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsNameToken", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTextualNode", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      new JSIL.MethodSignature($.Single, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamespacesFlag", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReadElementContentAsXxx", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipSubtree", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IDisposable.Dispose", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.IDisposable"), "Dispose");

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributeValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlTextWriter"), $.Boolean])
    );

    $.Constant({Static:true , Public:false}, "DefaultBufferSize", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "BiggerBufferSize", $.Int32, 8192);

    $.Constant({Static:true , Public:false}, "MaxStreamLengthForDefaultBufferSize", $.Int32, 65536);

    $.Field({Static:true , Public:false}, "IsTextualNodeBitmap", $.UInt32, 24600);

    $.Field({Static:true , Public:false}, "CanReadContentAsBitmap", $.UInt32, 123324);

    $.Field({Static:true , Public:false}, "HasValueBitmap", $.UInt32, 157084);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IDisposable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; });

})();

/* struct System.Xml.XmlReader+DebuggerDisplayProxy */ 

(function DebuggerDisplayProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlReader+DebuggerDisplayProxy", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

/* class System.Xml.XmlWrappingReader */ 

(function XmlWrappingReader$Members () {
  var $, $thisType;















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlWrappingReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DtdSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Reader", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "readerAsIXmlLineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false, Virtual:true }, "DtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCharCheckingReader */ 

(function XmlCharCheckingReader$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWrappingReader"), 
      Name: "System.Xml.XmlCharCheckingReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadBinary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Xml.XmlCharCheckingReader+State"));

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean);

    $.Field({Static:false, Public:false}, "ignorePis", $.Boolean);

    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean);

    $.Field({Static:false, Public:false}, "lastNodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm07.TypeRef("System.Xml.ReadContentAsBinaryHelper"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlCharCheckingReader+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlCharCheckingReader+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initial: 0, 
    InReadBinary: 1, 
    Error: 2, 
    Interactive: 3, 
  }
);

/* class System.Xml.XmlCharCheckingReaderWithNS */ 

(function XmlCharCheckingReaderWithNS$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlCharCheckingReader"), 
      Name: "System.Xml.XmlCharCheckingReaderWithNS", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $.Boolean, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Field({Static:false, Public:false}, "readerAsNSResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlWrappingWriter */ 

(function XmlWrappingWriter$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Xml.XmlWrappingWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Writer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "writer", $asm07.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm07.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "Writer", $asm07.TypeRef("System.Xml.XmlWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCharCheckingWriter */ 

(function XmlCharCheckingWriter$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWrappingWriter"), 
      Name: "System.Xml.XmlCharCheckingWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCharacters", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InterleaveInvalidChars", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Char, 
          $.Char
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNewLines", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNewLines", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNCName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "checkValues", $.Boolean);

    $.Field({Static:false, Public:false}, "checkNames", $.Boolean);

    $.Field({Static:false, Public:false}, "replaceNewLines", $.Boolean);

    $.Field({Static:false, Public:false}, "newLineChars", $.String);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlEncodedRawTextWriterIndent */ 

(function XmlEncodedRawTextWriterIndent$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlEncodedRawTextWriter"), 
      Name: "System.Xml.XmlEncodedRawTextWriterIndent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRootElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "indentChars", $.String);

    $.Field({Static:false, Public:false}, "mixedContent", $.Boolean);

    $.Field({Static:false, Public:false}, "mixedContentStack", $asm07.TypeRef("System.Xml.BitStack"));

    $.Field({Static:false, Public:false}, "conformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlEventCache */ 

(function XmlEventCache$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "System.Xml.XmlEventCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String, 
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "EndEvents", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "EventsToString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "EventsToWriter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRootNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NewEvent", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ToBytes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndBase64", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "InitialPageSize", $.Int32, 32);

    $.Field({Static:false, Public:false}, "pages", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "pageCurr", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlEventCache+XmlEvent")]));

    $.Field({Static:false, Public:false}, "pageSize", $.Int32);

    $.Field({Static:false, Public:false}, "hasRootNode", $.Boolean);

    $.Field({Static:false, Public:false}, "singleText", $asm0A.TypeRef("System.Xml.Xsl.Runtime.StringConcat"));

    $.Field({Static:false, Public:false}, "baseUri", $.String);

    $.Property({Static:false, Public:true }, "BaseUri", $.String);

    $.Property({Static:false, Public:true }, "HasRootNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlEventCache+XmlEventType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlEventCache+XmlEventType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: 0, 
    DocType: 1, 
    StartElem: 2, 
    StartAttr: 3, 
    EndAttr: 4, 
    CData: 5, 
    Comment: 6, 
    PI: 7, 
    Whitespace: 8, 
    String: 9, 
    Raw: 10, 
    EntRef: 11, 
    CharEnt: 12, 
    SurrCharEnt: 13, 
    Base64: 14, 
    BinHex: 15, 
    XmlDecl1: 16, 
    XmlDecl2: 17, 
    StartContent: 18, 
    EndElem: 19, 
    FullEndElem: 20, 
    Nmsp: 21, 
    EndBase64: 22, 
    Close: 23, 
    Flush: 24, 
    Dispose: 25, 
  }
);

/* struct System.Xml.XmlEventCache+XmlEvent */ 

(function XmlEvent$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlEventCache+XmlEvent", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_EventType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Object", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String1", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String2", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_String3", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.String, 
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InitEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"), $.Object])
    );

    $.Field({Static:false, Public:false}, "eventType", $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"));

    $.Field({Static:false, Public:false}, "s1", $.String);

    $.Field({Static:false, Public:false}, "s2", $.String);

    $.Field({Static:false, Public:false}, "s3", $.String);

    $.Field({Static:false, Public:false}, "o", $.Object);

    $.Property({Static:false, Public:true }, "EventType", $asm07.TypeRef("System.Xml.XmlEventCache+XmlEventType"));

    $.Property({Static:false, Public:true }, "String1", $.String);

    $.Property({Static:false, Public:true }, "String2", $.String);

    $.Property({Static:false, Public:true }, "String3", $.String);

    $.Property({Static:false, Public:true }, "Object", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlParserContext */ 

(function XmlParserContext$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlParserContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $asm07.TypeRef("System.Xml.XmlSpace")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $asm07.TypeRef("System.Xml.XmlSpace"), 
          $asm00.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlSpace")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlSpace"), $asm00.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDtdInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocTypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_InternalSubset", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceManager", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameTable", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PublicId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SystemId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlLang", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlSpace", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.Field({Static:false, Public:false}, "_nt", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "_nsMgr", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "_docTypeName", $.String);

    $.Field({Static:false, Public:false}, "_pubId", $.String);

    $.Field({Static:false, Public:false}, "_sysId", $.String);

    $.Field({Static:false, Public:false}, "_internalSubset", $.String);

    $.Field({Static:false, Public:false}, "_xmlLang", $.String);

    $.Field({Static:false, Public:false}, "_xmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "_baseURI", $.String);

    $.Field({Static:false, Public:false}, "_encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true }, "DocTypeName", $.String);

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true }, "InternalSubset", $.String);

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true }, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "HasDtdInfo", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlReaderSettings */ 

(function XmlReaderSettings$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlReaderSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOnly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanResolveExternals", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckCharacters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CloseInput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConformanceLevel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreComments", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreProcessingInstructions", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IgnoreWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumberOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePositionOffset", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxCharactersFromEntities", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxCharactersInDocument", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProhibitDtd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckCharacters", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CloseInput", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConformanceLevel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreComments", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreProcessingInstructions", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IgnoreWhitespace", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumberOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinePositionOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxCharactersFromEntities", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxCharactersInDocument", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NameTable", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProhibitDtd", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schemas", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationFlags", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "lineNumberOffset", $.Int32);

    $.Field({Static:false, Public:false}, "linePositionOffset", $.Int32);

    $.Field({Static:false, Public:false}, "conformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "maxCharactersInDocument", $.Int64);

    $.Field({Static:false, Public:false}, "maxCharactersFromEntities", $.Int64);

    $.Field({Static:false, Public:false}, "validationType", $asm07.TypeRef("System.Xml.ValidationType"));

    $.Field({Static:false, Public:false}, "validationFlags", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "valEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean);

    $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean);

    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean);

    $.Field({Static:false, Public:false}, "closeInput", $.Boolean);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "LineNumberOffset", $.Int32);

    $.Property({Static:false, Public:true }, "LinePositionOffset", $.Int32);

    $.Property({Static:false, Public:true }, "ConformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:true }, "CheckCharacters", $.Boolean);

    $.Property({Static:false, Public:true }, "MaxCharactersInDocument", $.Int64);

    $.Property({Static:false, Public:true }, "MaxCharactersFromEntities", $.Int64);

    $.Property({Static:false, Public:true }, "ValidationType", $asm07.TypeRef("System.Xml.ValidationType"));

    $.Property({Static:false, Public:true }, "ValidationFlags", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

    $.Property({Static:false, Public:true }, "Schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:true }, "IgnoreWhitespace", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreProcessingInstructions", $.Boolean);

    $.Property({Static:false, Public:true }, "IgnoreComments", $.Boolean);

    $.Property({Static:false, Public:true }, "ProhibitDtd", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseInput", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "CanResolveExternals", $.Boolean);

    $.Event({Static:false, Public:true }, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlSpace */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlSpace", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Default: 1, 
    Preserve: 2, 
  }
);

/* class System.Xml.XmlSubtreeReader */ 

(function XmlSubtreeReader$Members () {
  var $, $thisType;



































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWrappingReader"), 
      Name: "System.Xml.XmlSubtreeReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsBinary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsBinary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DtdSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InAttributeActiveState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InNamespaceActiveState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadContentAsType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlSubtreeReader+State")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNsAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNamespaces", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCurrentNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlSubtreeReader+NodeData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEmptyNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Constant({Static:true , Public:false}, "AttributeActiveStates", $.Int32, 98);

    $.Constant({Static:true , Public:false}, "NamespaceActiveStates", $.Int32, 2018);

    $.Field({Static:false, Public:false}, "initialDepth", $.Int32);

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Xml.XmlSubtreeReader+State"));

    $.Field({Static:false, Public:false}, "nsManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "nsAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlSubtreeReader+NodeData")]));

    $.Field({Static:false, Public:false}, "nsAttrCount", $.Int32);

    $.Field({Static:false, Public:false}, "curNsAttr", $.Int32);

    $.Field({Static:false, Public:false}, "xmlns", $.String);

    $.Field({Static:false, Public:false}, "xmlnsUri", $.String);

    $.Field({Static:false, Public:false}, "useCurNode", $.Boolean);

    $.Field({Static:false, Public:false}, "curNode", $asm07.TypeRef("System.Xml.XmlSubtreeReader+NodeData"));

    $.Field({Static:false, Public:false}, "tmpNode", $asm07.TypeRef("System.Xml.XmlSubtreeReader+NodeData"));

    $.Field({Static:false, Public:false}, "InitialNamespaceAttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "DtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "InAttributeActiveState", $.Boolean);

    $.Property({Static:false, Public:false}, "InNamespaceActiveState", $.Boolean);

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSubtreeReader+NodeData */ 

(function NodeData$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlSubtreeReader+NodeData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlSubtreeReader+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlSubtreeReader+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initial: 0, 
    Interactive: 1, 
    Error: 2, 
    EndOfFile: 3, 
    Closed: 4, 
    PopNamespaceScope: 5, 
    ClearNsAttributes: 6, 
    ReadElementContentAsBase64: 7, 
    ReadElementContentAsBinHex: 8, 
    ReadContentAsBase64: 9, 
    ReadContentAsBinHex: 10, 
  }
);

/* class System.Xml.XmlTextEncoder */ 

(function XmlTextEncoder$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlTextEncoder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_QuoteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharEntityImpl", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCharEntityImpl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEntityRefImpl", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRawWithSurrogateChecking", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStringFragment", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateChar", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.Constant({Static:true , Public:false}, "SurHighStart", $.Int32, 55296);

    $.Constant({Static:true , Public:false}, "SurHighEnd", $.Int32, 56319);

    $.Constant({Static:true , Public:false}, "SurLowStart", $.Int32, 56320);

    $.Constant({Static:true , Public:false}, "SurLowEnd", $.Int32, 57343);

    $.Field({Static:false, Public:false}, "textWriter", $asm00.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "inAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "quoteChar", $.Char);

    $.Field({Static:false, Public:false}, "attrValue", $asm07.TypeRef("System.Xml.BufferBuilder"));

    $.Field({Static:false, Public:false}, "cacheAttrValue", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Property({Static:false, Public:false}, "QuoteChar", $.Char);

    $.Property({Static:false, Public:false}, "AttributeValue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReader */ 

(function XmlTextReader$Members () {
  var $, $thisType;




















































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlTextReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.IO.Stream"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.IO.TextReader"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntityHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Impl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTextReaderImpl"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Normalization", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProhibitDtd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_WhitespaceHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WhitespaceHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRemainder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntityHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Normalization", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProhibitDtd", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_WhitespaceHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.WhitespaceHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlValidatingReaderCompatibilityMode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Field({Static:false, Public:false}, "impl", $asm07.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "Normalization", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "WhitespaceHandling", $asm07.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:true }, "ProhibitDtd", $.Boolean);

    $.Property({Static:false, Public:true }, "EntityHandling", $asm07.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "Impl", $asm07.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "XmlValidatingReaderCompatibilityMode", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReaderImpl */ 

(function XmlTextReaderImpl$Members () {
  var $, $thisType;





























































































































































































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlTextReaderImpl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlResolver"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.IO.Stream"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.IO.TextReader"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlParserContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm07.TypeRef("System.Xml.XmlParserContext"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.XmlReaderSettings"), 
          $.String, $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlParserContext"), 
          $asm07.TypeRef("System.Xml.XmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttributeChunkToList", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), $asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttributeNoChecks", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributesAndNormalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "AdjustLineInfo", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.LineInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AllocNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"), [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeDuplCheck", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeNamespaceLookup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeCurrentNodeType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckEncoding", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Text.Encoding"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "DetectEncoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnNewLine", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnPublicId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.LineInfo"), 
          $asm07.TypeRef("System.Xml.LineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_OnSystemId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.LineInfo"), 
          $asm07.TypeRef("System.Xml.LineInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseComment", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseNamedCharRef", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $asm07.TypeRef("System.Xml.BufferBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParseNumericCharRef", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.BufferBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ParsePI", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PopEntity", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.SchemaEntity")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushExternalSubset", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_PushInternalDtd", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_ReadData", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DtdParserProxy_Throw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EatWhitespaces", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.BufferBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementNamespaceLookup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishAttributeValueIterator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishIncrementalRead", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishOtherValueIterator", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishPartialValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadContentAsBinary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadElementContentAsBinary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadValueChunk", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FullAttributeCleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_BaseUri", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_DtdValidation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_EntityStackLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_EventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_IsEntityEolNormalized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_LineNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_LineStartPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_Normalization", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ParsingBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_ParsingBufferLength", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdParserProxy_V1CompatibilityMode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdValidation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EntityHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FragmentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InAttributeValueIterator", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSchemaType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Normalization", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OuterReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProhibitDtd", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StandAlone", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_V1ComformanceLevel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_V1Compat", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WhitespaceHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WhitespaceHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChars", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexOfAttributeWithoutPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIndexOfAttributeWithPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRemainder", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTextNodeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeType"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetWhitespaceType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+EntityType"), [
          $.Boolean, $asm07.TypeRef("System.Xml.XmlTextReaderImpl+EntityExpandType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleGeneralEntityReference", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl+EntityType"), [
          $.String, $.Boolean, 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementalRead", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementalRead", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBase64Decoder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitBinHexDecoder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitFragmentReader", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $asm07.TypeRef("System.Xml.XmlParserContext"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitIncrementalRead", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IncrementalReadDecoder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadContentAsBinary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitReadElementContentAsBinary", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.IO.Stream"), 
          $asm00.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Uri"), $asm00.TypeRef("System.IO.Stream"), 
          $asm00.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStreamInput", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $asm00.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $asm00.TypeRef("System.Text.Encoding")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitStringInput", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Text.Encoding"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitTextReaderInput", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvalidCharRecovery", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveOffEntityReference", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextContentNode", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnDefaultNamespaceDecl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnEof", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNamespaceDecl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnNewLine", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "OnXmlReservedAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenStream", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IO.Stream"), [$asm01.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenUrl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OpenUrlDelegate", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributeValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttributeValueSlow", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Char, 
          $asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCData", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCDataOrComment", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCDataOrComment", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCharRefInline", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+EntityType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseComment", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDoctypeDecl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDocumentContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDtdFromParserContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEntityName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEntityReference", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFragmentAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseName", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNamedCharRef", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $asm07.TypeRef("System.Xml.BufferBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNamedCharRefInline", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Boolean, 
          $asm07.TypeRef("System.Xml.BufferBuilder")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNumericCharRef", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $asm07.TypeRef("System.Xml.BufferBuilder"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+EntityType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNumericCharRefInline", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $.Boolean, 
          $asm07.TypeRef("System.Xml.BufferBuilder"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+EntityType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.BufferBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePIValue", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
      new JSIL.MethodSignature($.Int32, [
          $.Boolean, $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRootLevelWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXmlDeclaration", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseXmlDeclarationFragment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopElementContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopParsingState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopXmlContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushExternalEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushInternalEntity", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushParsingState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushXmlContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadChars", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadData", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDataInName", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementContentAsBinary", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RegisterConsumedCharacters", 
      new JSIL.MethodSignature(null, [$.Int64, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReThrow", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Exception"), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DisableUndeclaredEntityCheck", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdParserProxy_CurrentPosition", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdParserProxy_EventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EntityHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalSchemaType", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_InternalTypedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Normalization", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OuterReader", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ProhibitDtd", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WhitespaceHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.WhitespaceHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlValidatingReaderCompatibilityMode", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetErrorState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupEncoding", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupEndEntityNodeInAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupEndEntityNodeInContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupFromParserContext", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlParserContext"), $asm07.TypeRef("System.Xml.XmlReaderSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReadContentAsBinaryState", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingFunction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShiftBuffer", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipPartialTextValue", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchEncoding", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchEncodingToUTF8", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowTagMismatch", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnclosedElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowWithoutLineInfo", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnDecodeChars", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UriEqual", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ZeroEndingStream", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Constant({Static:true , Public:false}, "MaxBytesToMove", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "ApproxXmlDeclLength", $.Int32, 80);

    $.Constant({Static:true , Public:false}, "NodesInitialSize", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "InitialAttributesCount", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "InitialParsingStateStackSize", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "InitialParsingStatesDepth", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "DtdChidrenInitialSize", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "MaxByteSequenceLen", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "MaxAttrDuplWalkCount", $.Int32, 250);

    $.Constant({Static:true , Public:false}, "MinWhitespaceLookahedCount", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "XmlDeclarationBegining", $.String, "<?xml");

    $.Constant({Static:true , Public:false}, "SurHighStart", $.Int32, 55296);

    $.Constant({Static:true , Public:false}, "SurHighEnd", $.Int32, 56319);

    $.Constant({Static:true , Public:false}, "SurLowStart", $.Int32, 56320);

    $.Constant({Static:true , Public:false}, "SurLowEnd", $.Int32, 57343);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "ps", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingState"));

    $.Field({Static:false, Public:false}, "parsingFunction", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingFunction"));

    $.Field({Static:false, Public:false}, "nextParsingFunction", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingFunction"));

    $.Field({Static:false, Public:false}, "nextNextParsingFunction", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingFunction"));

    $.Field({Static:false, Public:false}, "nodes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")]));

    $.Field({Static:false, Public:false}, "curNode", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData"));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "curAttrIndex", $.Int32);

    $.Field({Static:false, Public:false}, "attrCount", $.Int32);

    $.Field({Static:false, Public:false}, "attrHashtable", $.Int32);

    $.Field({Static:false, Public:false}, "attrDuplWalkCount", $.Int32);

    $.Field({Static:false, Public:false}, "attrNeedNamespaceLookup", $.Boolean);

    $.Field({Static:false, Public:false}, "fullAttrCleanup", $.Boolean);

    $.Field({Static:false, Public:false}, "attrDuplSortingArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+NodeData")]));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "nameTableFromSettings", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "url", $.String);

    $.Field({Static:false, Public:false}, "compressedStack", $asm00.TypeRef("System.Threading.CompressedStack"));

    $.Field({Static:false, Public:false}, "normalize", $.Boolean);

    $.Field({Static:false, Public:false}, "supportNamespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "whitespaceHandling", $asm07.TypeRef("System.Xml.WhitespaceHandling"));

    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean);

    $.Field({Static:false, Public:false}, "entityHandling", $asm07.TypeRef("System.Xml.EntityHandling"));

    $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean);

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "lineNumberOffset", $.Int32);

    $.Field({Static:false, Public:false}, "linePositionOffset", $.Int32);

    $.Field({Static:false, Public:false}, "closeInput", $.Boolean);

    $.Field({Static:false, Public:false}, "maxCharactersInDocument", $.Int64);

    $.Field({Static:false, Public:false}, "maxCharactersFromEntities", $.Int64);

    $.Field({Static:false, Public:false}, "v1Compat", $.Boolean);

    $.Field({Static:false, Public:false}, "namespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "lastPrefix", $.String);

    $.Field({Static:false, Public:false}, "xmlContext", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+XmlContext"));

    $.Field({Static:false, Public:false}, "parsingStatesStack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingState")]));

    $.Field({Static:false, Public:false}, "parsingStatesStackTop", $.Int32);

    $.Field({Static:false, Public:false}, "reportedBaseUri", $.String);

    $.Field({Static:false, Public:false}, "reportedEncoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "dtdParserProxy", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+DtdParserProxy"));

    $.Field({Static:false, Public:false}, "fragmentType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "fragment", $.Boolean);

    $.Field({Static:false, Public:false}, "fragmentParserContext", $asm07.TypeRef("System.Xml.XmlParserContext"));

    $.Field({Static:false, Public:false}, "incReadDecoder", $asm07.TypeRef("System.Xml.IncrementalReadDecoder"));

    $.Field({Static:false, Public:false}, "incReadState", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+IncrementalReadState"));

    $.Field({Static:false, Public:false}, "incReadDepth", $.Int32);

    $.Field({Static:false, Public:false}, "incReadLeftStartPos", $.Int32);

    $.Field({Static:false, Public:false}, "incReadLeftEndPos", $.Int32);

    $.Field({Static:false, Public:false}, "incReadLineInfo", $asm07.TypeRef("System.Xml.LineInfo"));

    $.Field({Static:false, Public:false}, "readCharsDecoder", $asm07.TypeRef("System.Xml.IncrementalReadCharsDecoder"));

    $.Field({Static:false, Public:false}, "binHexDecoder", $asm07.TypeRef("System.Xml.BinHexDecoder"));

    $.Field({Static:false, Public:false}, "base64Decoder", $asm07.TypeRef("System.Xml.Base64Decoder"));

    $.Field({Static:false, Public:false}, "attributeValueBaseEntityId", $.Int32);

    $.Field({Static:false, Public:false}, "emptyEntityInAttributeResolved", $.Boolean);

    $.Field({Static:false, Public:false}, "validationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "validatingReaderCompatFlag", $.Boolean);

    $.Field({Static:false, Public:false}, "addDefaultAttributesAndNormalize", $.Boolean);

    $.Field({Static:false, Public:false}, "qName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "stringBuilder", $asm07.TypeRef("System.Xml.BufferBuilder"));

    $.Field({Static:false, Public:false}, "rootElementParsed", $.Boolean);

    $.Field({Static:false, Public:false}, "standalone", $.Boolean);

    $.Field({Static:false, Public:false}, "nextEntityId", $.Int32);

    $.Field({Static:false, Public:false}, "parsingMode", $asm07.TypeRef("System.Xml.XmlTextReaderImpl+ParsingMode"));

    $.Field({Static:false, Public:false}, "readState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Field({Static:false, Public:false}, "lastEntity", $asm07.TypeRef("System.Xml.Schema.SchemaEntity"));

    $.Field({Static:false, Public:false}, "afterResetState", $.Boolean);

    $.Field({Static:false, Public:false}, "documentStartBytePos", $.Int32);

    $.Field({Static:false, Public:false}, "readValueOffset", $.Int32);

    $.Field({Static:false, Public:false}, "charactersInDocument", $.Int64);

    $.Field({Static:false, Public:false}, "charactersFromEntities", $.Int64);

    $.Field({Static:false, Public:false}, "disableUndeclaredEntityCheck", $.Boolean);

    $.Field({Static:false, Public:false}, "outerReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "Xml", $.String);

    $.Field({Static:false, Public:false}, "XmlNs", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "OuterReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "Normalization", $.Boolean);

    $.Property({Static:false, Public:false}, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "WhitespaceHandling", $asm07.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false}, "ProhibitDtd", $.Boolean);

    $.Property({Static:false, Public:false}, "EntityHandling", $asm07.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_DtdValidation", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_Normalization", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_Namespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_V1CompatibilityMode", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_BaseUri", $asm01.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_IsEof", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_ParsingBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false}, "DtdParserProxy_ParsingBufferLength", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_EntityStackLength", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_IsEntityEolNormalized", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdParserProxy_EventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false}, "DtdParserProxy_LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "DtdParserProxy_LineStartPosition", $.Int32);

    $.Property({Static:false, Public:false}, "InAttributeValueIterator", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdValidation", $.Boolean);

    $.Property({Static:false, Public:false}, "InEntity", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "XmlValidatingReaderCompatibilityMode", $.Boolean);

    $.Property({Static:false, Public:false}, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false}, "FragmentType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false}, "InternalSchemaType", $.Object);

    $.Property({Static:false, Public:false}, "InternalTypedValue", $.Object);

    $.Property({Static:false, Public:false}, "StandAlone", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "V1Compat", $.Boolean);

    $.Property({Static:false, Public:false}, "V1ComformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:false}, "DisableUndeclaredEntityCheck", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlTextReaderImpl+ParsingFunction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextReaderImpl+ParsingFunction", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    ElementContent: 0, 
    NoData: 1, 
    OpenUrl: 2, 
    SwitchToInteractive: 3, 
    SwitchToInteractiveXmlDecl: 4, 
    DocumentContent: 5, 
    MoveToElementContent: 6, 
    PopElementContext: 7, 
    PopEmptyElementContext: 8, 
    ResetAttributesRootLevel: 9, 
    Error: 10, 
    Eof: 11, 
    ReaderClosed: 12, 
    EntityReference: 13, 
    InIncrementalRead: 14, 
    FragmentAttribute: 15, 
    ReportEndEntity: 16, 
    AfterResolveEntityInContent: 17, 
    AfterResolveEmptyEntityInContent: 18, 
    XmlDeclarationFragment: 19, 
    GoToEof: 20, 
    PartialTextValue: 21, 
    InReadAttributeValue: 22, 
    InReadValueChunk: 23, 
    InReadContentAsBinary: 24, 
    InReadElementContentAsBinary: 25, 
  }
);

/* enum System.Xml.XmlTextReaderImpl+ParsingMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextReaderImpl+ParsingMode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Full: 0, 
    SkipNode: 1, 
    SkipContent: 2, 
  }
);

/* enum System.Xml.XmlTextReaderImpl+EntityType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextReaderImpl+EntityType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CharacterDec: 0, 
    CharacterHex: 1, 
    CharacterNamed: 2, 
    Expanded: 3, 
    ExpandedInAttribute: 4, 
    Skipped: 5, 
    Unexpanded: 6, 
    FakeExpanded: 7, 
  }
);

/* enum System.Xml.XmlTextReaderImpl+EntityExpandType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextReaderImpl+EntityExpandType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OnlyGeneral: 0, 
    OnlyCharacter: 1, 
    All: 2, 
  }
);

/* enum System.Xml.XmlTextReaderImpl+IncrementalReadState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextReaderImpl+IncrementalReadState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Text: 0, 
    StartTag: 1, 
    PI: 2, 
    CDATA: 3, 
    Comment: 4, 
    Attributes: 5, 
    AttributeValue: 6, 
    ReadData: 7, 
    EndElement: 8, 
    End: 9, 
    ReadValueChunk_OnCachedValue: 10, 
    ReadValueChunk_OnPartialValue: 11, 
    ReadContentAsBinary_OnCachedValue: 12, 
    ReadContentAsBinary_OnPartialValue: 13, 
    ReadContentAsBinary_End: 14, 
  }
);

/* struct System.Xml.XmlTextReaderImpl+ParsingState */ 

(function ParsingState$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlTextReaderImpl+ParsingState", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "charPos", $.Int32);

    $.Field({Static:false, Public:false}, "charsUsed", $.Int32);

    $.Field({Static:false, Public:false}, "encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "appendMode", $.Boolean);

    $.Field({Static:false, Public:false}, "stream", $asm00.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "decoder", $asm00.TypeRef("System.Text.Decoder"));

    $.Field({Static:false, Public:false}, "bytes", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "bytePos", $.Int32);

    $.Field({Static:false, Public:false}, "bytesUsed", $.Int32);

    $.Field({Static:false, Public:false}, "textReader", $asm00.TypeRef("System.IO.TextReader"));

    $.Field({Static:false, Public:false}, "lineNo", $.Int32);

    $.Field({Static:false, Public:false}, "lineStartPos", $.Int32);

    $.Field({Static:false, Public:false}, "baseUriStr", $.String);

    $.Field({Static:false, Public:false}, "baseUri", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "isEof", $.Boolean);

    $.Field({Static:false, Public:false}, "isStreamEof", $.Boolean);

    $.Field({Static:false, Public:false}, "entity", $asm07.TypeRef("System.Xml.Schema.SchemaEntity"));

    $.Field({Static:false, Public:false}, "entityId", $.Int32);

    $.Field({Static:false, Public:false}, "eolNormalized", $.Boolean);

    $.Field({Static:false, Public:false}, "entityResolvedManually", $.Boolean);

    $.Property({Static:false, Public:false}, "LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReaderImpl+XmlContext */ 

(function XmlContext$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlTextReaderImpl+XmlContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.Field({Static:false, Public:false}, "xmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "xmlLang", $.String);

    $.Field({Static:false, Public:false}, "defaultNamespace", $.String);

    $.Field({Static:false, Public:false}, "previousContext", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReaderImpl+NoNamespaceManager */ 

(function NoNamespaceManager$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
      Name: "System.Xml.XmlTextReaderImpl+NoNamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PopScope", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PushScope", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReaderImpl+DtdParserProxy */ 

(function DtdParserProxy$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlTextReaderImpl+DtdParserProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextReaderImpl"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlTextReaderImpl"), $asm07.TypeRef("System.Xml.Schema.SchemaInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlTextReaderImpl")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalDtdSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_BaseUri", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_BaseUri");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_CurrentPosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_DtdValidation", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_DtdValidation");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_EntityStackLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_EntityStackLength");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_EventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_EventHandler");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_IsEntityEolNormalized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_IsEntityEolNormalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_IsEof", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_IsEof");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_LineNo", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_LineNo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_LineStartPosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_LineStartPosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_NamespaceManager");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_Namespaces");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_NameTable");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_Normalization", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_Normalization");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_ParsingBuffer", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char]))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_ParsingBuffer");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_ParsingBufferLength", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_ParsingBufferLength");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.get_V1CompatibilityMode", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "get_V1CompatibilityMode");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.OnNewLine", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "OnNewLine");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.OnPublicId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.LineInfo"), 
          $asm07.TypeRef("System.Xml.LineInfo")
        ])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "OnPublicId");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.OnSystemId", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.LineInfo"), 
          $asm07.TypeRef("System.Xml.LineInfo")
        ])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "OnSystemId");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParseComment", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "ParseComment");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParseNamedCharRef", 
      new JSIL.MethodSignature($.Int32, [$.Boolean, $asm07.TypeRef("System.Xml.BufferBuilder")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "ParseNamedCharRef");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParseNumericCharRef", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.BufferBuilder")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "ParseNumericCharRef");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParsePI", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "ParsePI");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PopEntity", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.SchemaEntity")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "PopEntity");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PushEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "PushEntity");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PushExternalSubset", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "PushExternalSubset");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.PushInternalDtd", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "PushInternalDtd");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ReadData", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "ReadData");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaException")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "SendValidationEvent");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.set_CurrentPosition", 
      JSIL.MethodSignature.Action($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "set_CurrentPosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.set_EventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "set_EventHandler");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.Throw", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IDtdParserAdapter"), "Throw");

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Field({Static:false, Public:false}, "dtdParser", $asm07.TypeRef("System.Xml.DtdParser"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "InternalDtdSubset", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.DtdValidation", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.Normalization", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.Namespaces", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.V1CompatibilityMode", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.BaseUri", $asm01.TypeRef("System.Uri"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.IsEof", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParsingBuffer", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.ParsingBufferLength", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.EntityStackLength", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.IsEntityEolNormalized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.EventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.LineNo", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IDtdParserAdapter.LineStartPosition", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.IDtdParserAdapter")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReaderImpl+NodeData */ 

(function NodeData$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlTextReaderImpl+NodeData", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustLineInfo", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.LineInfo")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.BufferBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyTo", 
      new JSIL.MethodSignature($.Int32, [
          $.Int32, $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyToBinary", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.IncrementalReadDecoder"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNameWPrefix", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDefaultAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_None", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StringValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueBuffered", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameWPrefix", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnBufferInvalidated", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsDefaultAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsEmptyElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetLineInfo2", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamedNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNodeType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetNamedNode", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValue", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueNode", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNodeType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetValueNode", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $jsilcore.TypeRef("System.Array", [$.Char]), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.IComparable.CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm00.TypeRef("System.IComparable"), "CompareTo");

    $.ExternalMethod({Static:false, Public:false}, "TrimSpacesInValue", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "s_None", $.Type);

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "nameWPrefix", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "valueStartPos", $.Int32);

    $.Field({Static:false, Public:false}, "valueLength", $.Int32);

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.LineInfo"));

    $.Field({Static:false, Public:false}, "lineInfo2", $asm07.TypeRef("System.Xml.LineInfo"));

    $.Field({Static:false, Public:false}, "quoteChar", $.Char);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "isEmptyOrDefault", $.Boolean);

    $.Field({Static:false, Public:false}, "entityId", $.Int32);

    $.Field({Static:false, Public:false}, "xmlContextPushed", $.Boolean);

    $.Field({Static:false, Public:false}, "nextAttrValueChunk", $.Type);

    $.Field({Static:false, Public:false}, "schemaType", $.Object);

    $.Field({Static:false, Public:false}, "typedValue", $.Object);

    $.Property({Static:true , Public:false}, "None", $.Type);

    $.Property({Static:false, Public:false}, "LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    $.Property({Static:false, Public:false}, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDefaultAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "ValueBuffered", $.Boolean);

    $.Property({Static:false, Public:false}, "StringValue", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlTextReaderImpl+SchemaAttDefToNodeDataComparer */ 

(function SchemaAttDefToNodeDataComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlTextReaderImpl+SchemaAttDefToNodeDataComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Instance", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IComparer"))
    );

    $.Field({Static:true , Public:false}, "s_instance", $asm00.TypeRef("System.Collections.IComparer"));

    $.Property({Static:true , Public:false}, "Instance", $asm00.TypeRef("System.Collections.IComparer"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.IDtdParserAdapter */ 

JSIL.MakeInterface(
  "System.Xml.IDtdParserAdapter", false, [], function ($) {
    $.Method({}, "get_NameTable", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable")));
    $.Method({}, "get_NamespaceManager", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager")));
    $.Method({}, "get_DtdValidation", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Normalization", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_Namespaces", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_V1CompatibilityMode", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_BaseUri", JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri")));
    $.Method({}, "get_ParsingBuffer", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.Char])));
    $.Method({}, "get_ParsingBufferLength", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_CurrentPosition", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "set_CurrentPosition", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_LineNo", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_LineStartPosition", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_IsEof", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_EntityStackLength", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_IsEntityEolNormalized", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "ReadData", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "OnNewLine", JSIL.MethodSignature.Action($.Int32));
    $.Method({}, "get_EventHandler", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")));
    $.Method({}, "set_EventHandler", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")));
    $.Method({}, "SendValidationEvent", new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaException")]));
    $.Method({}, "ParseNumericCharRef", new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.BufferBuilder")]));
    $.Method({}, "ParseNamedCharRef", new JSIL.MethodSignature($.Int32, [$.Boolean, $asm07.TypeRef("System.Xml.BufferBuilder")]));
    $.Method({}, "ParsePI", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder")));
    $.Method({}, "ParseComment", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BufferBuilder")));
    $.Method({}, "PushEntity", new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaEntity"), $.Int32]));
    $.Method({}, "PopEntity", new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.SchemaEntity")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])]));
    $.Method({}, "PushExternalSubset", new JSIL.MethodSignature($.Boolean, [$.String, $.String]));
    $.Method({}, "PushInternalDtd", new JSIL.MethodSignature(null, [$.String, $.String]));
    $.Method({}, "OnSystemId", new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.LineInfo"), 
          $asm07.TypeRef("System.Xml.LineInfo")
        ]));
    $.Method({}, "OnPublicId", new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.LineInfo"), 
          $asm07.TypeRef("System.Xml.LineInfo")
        ]));
    $.Method({}, "Throw", JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception")));
    $.Property({}, "NameTable");
    $.Property({}, "NamespaceManager");
    $.Property({}, "DtdValidation");
    $.Property({}, "Normalization");
    $.Property({}, "Namespaces");
    $.Property({}, "V1CompatibilityMode");
    $.Property({}, "BaseUri");
    $.Property({}, "ParsingBuffer");
    $.Property({}, "ParsingBufferLength");
    $.Property({}, "CurrentPosition");
    $.Property({}, "LineNo");
    $.Property({}, "LineStartPosition");
    $.Property({}, "IsEof");
    $.Property({}, "EntityStackLength");
    $.Property({}, "IsEntityEolNormalized");
    $.Property({}, "EventHandler");
  }, []);

/* enum System.Xml.Formatting */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Formatting", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Indented: 1, 
  }
);

/* class System.Xml.XmlTextWriter */ 

(function XmlTextWriter$Members () {
  var $, $thisType;





































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Xml.XmlTextWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToNamespaceHashtable", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoComplete", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlTextWriter+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AutoCompleteAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FindPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FlushEncoders", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseStream", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Formatting", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Formatting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indentation", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IndentChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleSpecialAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Indent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteEndElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteName", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalWriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceInCurrentScope", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushStack", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Formatting", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Formatting"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Indentation", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IndentChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_QuoteChar", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "StartDocument", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateName", 
      new JSIL.MethodSignature(null, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyPrefixXml", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndAttributeQuote", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndStartTag", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteNmToken", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "NamespaceStackInitialSize", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "MaxNamespacesWalkCount", $.Int32, 16);

    $.Field({Static:false, Public:false}, "textWriter", $asm00.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "xmlEncoder", $asm07.TypeRef("System.Xml.XmlTextEncoder"));

    $.Field({Static:false, Public:false}, "encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "formatting", $asm07.TypeRef("System.Xml.Formatting"));

    $.Field({Static:false, Public:false}, "indented", $.Boolean);

    $.Field({Static:false, Public:false}, "indentation", $.Int32);

    $.Field({Static:false, Public:false}, "indentChar", $.Char);

    $.Field({Static:false, Public:false}, "stack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextWriter+TagInfo")]));

    $.Field({Static:false, Public:false}, "top", $.Int32);

    $.Field({Static:false, Public:false}, "stateTable", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextWriter+State")]));

    $.Field({Static:false, Public:false}, "currentState", $asm07.TypeRef("System.Xml.XmlTextWriter+State"));

    $.Field({Static:false, Public:false}, "lastToken", $asm07.TypeRef("System.Xml.XmlTextWriter+Token"));

    $.Field({Static:false, Public:false}, "base64Encoder", $asm07.TypeRef("System.Xml.XmlTextWriterBase64Encoder"));

    $.Field({Static:false, Public:false}, "quoteChar", $.Char);

    $.Field({Static:false, Public:false}, "curQuoteChar", $.Char);

    $.Field({Static:false, Public:false}, "namespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "specialAttr", $asm07.TypeRef("System.Xml.XmlTextWriter+SpecialAttr"));

    $.Field({Static:false, Public:false}, "prefixForXmlNs", $.String);

    $.Field({Static:false, Public:false}, "flush", $.Boolean);

    $.Field({Static:false, Public:false}, "nsStack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextWriter+Namespace")]));

    $.Field({Static:false, Public:false}, "nsTop", $.Int32);

    $.Field({Static:false, Public:false}, "nsHashtable", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "useNsHashtable", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:true , Public:false}, "stateName", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "tokenName", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "stateTableDefault", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextWriter+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "stateTableDocument", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlTextWriter+State")]));

    $.Property({Static:false, Public:true }, "BaseStream", $asm00.TypeRef("System.IO.Stream"));

    $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "Formatting", $asm07.TypeRef("System.Xml.Formatting"));

    $.Property({Static:false, Public:true }, "Indentation", $.Int32);

    $.Property({Static:false, Public:true }, "IndentChar", $.Char);

    $.Property({Static:false, Public:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm07.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlTextWriter+NamespaceState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextWriter+NamespaceState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Uninitialized: 0, 
    NotDeclaredButInScope: 1, 
    DeclaredButNotWrittenOut: 2, 
    DeclaredAndWrittenOut: 3, 
  }
);

/* struct System.Xml.XmlTextWriter+TagInfo */ 

(function TagInfo$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlTextWriter+TagInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "defaultNs", $.String);

    $.Field({Static:false, Public:false}, "defaultNsState", $asm07.TypeRef("System.Xml.XmlTextWriter+NamespaceState"));

    $.Field({Static:false, Public:false}, "xmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "xmlLang", $.String);

    $.Field({Static:false, Public:false}, "prevNsTop", $.Int32);

    $.Field({Static:false, Public:false}, "prefixCount", $.Int32);

    $.Field({Static:false, Public:false}, "mixed", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlTextWriter+Namespace */ 

(function Namespace$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlTextWriter+Namespace", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "declared", $.Boolean);

    $.Field({Static:false, Public:false}, "prevNsIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlTextWriter+SpecialAttr */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextWriter+SpecialAttr", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    XmlSpace: 1, 
    XmlLang: 2, 
    XmlNs: 3, 
  }
);

/* enum System.Xml.XmlTextWriter+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextWriter+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Start: 0, 
    Prolog: 1, 
    PostDTD: 2, 
    Element: 3, 
    Attribute: 4, 
    Content: 5, 
    AttrOnly: 6, 
    Epilog: 7, 
    Error: 8, 
    Closed: 9, 
  }
);

/* enum System.Xml.XmlTextWriter+Token */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTextWriter+Token", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    PI: 0, 
    Doctype: 1, 
    Comment: 2, 
    CData: 3, 
    StartElement: 4, 
    EndElement: 5, 
    LongEndElement: 6, 
    StartAttribute: 7, 
    EndAttribute: 8, 
    Content: 9, 
    Base64: 10, 
    RawData: 11, 
    Whitespace: 12, 
    Empty: 13, 
  }
);

/* class System.Xml.XmlUtf8RawTextWriterIndent */ 

(function XmlUtf8RawTextWriterIndent$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlUtf8RawTextWriter"), 
      Name: "System.Xml.XmlUtf8RawTextWriterIndent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding"), 
          $asm07.TypeRef("System.Xml.XmlWriterSettings"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRootElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "indentChars", $.String);

    $.Field({Static:false, Public:false}, "mixedContent", $.Boolean);

    $.Field({Static:false, Public:false}, "mixedContentStack", $asm07.TypeRef("System.Xml.BitStack"));

    $.Field({Static:false, Public:false}, "conformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlValidatingReader */ 

(function XmlValidatingReader$Members () {
  var $, $thisType;

































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlValidatingReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EntityHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Impl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadTypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EntityHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Field({Static:false, Public:false}, "impl", $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SchemaType", $.Object);

    $.Property({Static:false, Public:true }, "Reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true }, "ValidationType", $asm07.TypeRef("System.Xml.ValidationType"));

    $.Property({Static:false, Public:true }, "Schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Property({Static:false, Public:true }, "EntityHandling", $asm07.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:false}, "Impl", $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"));

    $.Event({Static:false, Public:true }, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202"]; });

})();

/* class System.Xml.XmlValidatingReaderImpl */ 

(function XmlValidatingReaderImpl$Members () {
  var $, $thisType;


























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlValidatingReaderImpl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "add_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EntityHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Normalization", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OuterReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderImpl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTextReaderImpl"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StandAlone", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypedValueObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Validator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.BaseValidator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveOffEntityReference", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDtdFromParserContext", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessCoreReaderEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadTypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "remove_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveEntityInternally", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EntityHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.EntityHandling"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OuterReader", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaTypeObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypedValueObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValidationType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Validator", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.BaseValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "UpdateHandlers", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateDtd", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "coreReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "coreReaderImpl", $asm07.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Field({Static:false, Public:false}, "coreReaderNSResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Field({Static:false, Public:false}, "validationType", $asm07.TypeRef("System.Xml.ValidationType"));

    $.Field({Static:false, Public:false}, "validator", $asm07.TypeRef("System.Xml.Schema.BaseValidator"));

    $.Field({Static:false, Public:false}, "schemaCollection", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Field({Static:false, Public:false}, "processIdentityConstraints", $.Boolean);

    $.Field({Static:false, Public:false}, "parsingFunction", $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl+ParsingFunction"));

    $.Field({Static:false, Public:false}, "internalEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "parserContext", $asm07.TypeRef("System.Xml.XmlParserContext"));

    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm07.TypeRef("System.Xml.ReadContentAsBinaryHelper"));

    $.Field({Static:false, Public:false}, "outerReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:false}, "OuterReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "SchemaType", $.Object);

    $.Property({Static:false, Public:false}, "Reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "ReaderImpl", $asm07.TypeRef("System.Xml.XmlTextReaderImpl"));

    $.Property({Static:false, Public:false}, "ValidationType", $asm07.TypeRef("System.Xml.ValidationType"));

    $.Property({Static:false, Public:false}, "Schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Property({Static:false, Public:false}, "EntityHandling", $asm07.TypeRef("System.Xml.EntityHandling"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "Namespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "Validator", $asm07.TypeRef("System.Xml.Schema.BaseValidator"));

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "StandAlone", $.Boolean);

    $.Property({Static:false, Public:false}, "SchemaTypeObject", $.Object);

    $.Property({Static:false, Public:false}, "TypedValueObject", $.Object);

    $.Property({Static:false, Public:false}, "Normalization", $.Boolean);

    $.Event({Static:false, Public:false}, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlValidatingReaderImpl+ParsingFunction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlValidatingReaderImpl+ParsingFunction", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Read: 0, 
    Init: 1, 
    ParseDtdFromContext: 2, 
    ResolveEntityInternally: 3, 
    InReadBinaryContent: 4, 
    ReaderClosed: 5, 
    Error: 6, 
    None: 7, 
  }
);

/* class System.Xml.XmlWellFormedWriter */ 

(function XmlWellFormedWriter$Members () {
  var $, $thisType;
































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlWriter"), 
      Name: "System.Xml.XmlWellFormedWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlWriterSettings")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToAttrHashTable", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToNamespaceHashtable", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AdvanceState", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWellFormedWriter+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNCName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DupAttrException", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlException"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InnerWriter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClosedOrErrorState", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RawWriter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlRawWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SaveAttrValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetStateName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+State")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidCharsException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupLocalNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaceIndex", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSpecialAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWellFormedWriter+SpecialAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartFragment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidStateTransition", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+Token"), $asm07.TypeRef("System.Xml.XmlWellFormedWriter+State")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBase64", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteBinHex", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartDocumentImpl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "ElementStackInitialSize", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "NamespaceStackInitialSize", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "AttributeArrayInitialSize", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "MaxAttrDuplWalkCount", $.Int32, 14);

    $.Constant({Static:true , Public:false}, "MaxNamespacesWalkCount", $.Int32, 16);

    $.Field({Static:false, Public:false}, "writer", $asm07.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "rawWriter", $asm07.TypeRef("System.Xml.XmlRawWriter"));

    $.Field({Static:false, Public:false}, "predefinedNamespaces", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Field({Static:false, Public:false}, "nsStack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+Namespace")]));

    $.Field({Static:false, Public:false}, "nsTop", $.Int32);

    $.Field({Static:false, Public:false}, "nsHashtable", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "useNsHashtable", $.Boolean);

    $.Field({Static:false, Public:false}, "elemScopeStack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+ElementScope")]));

    $.Field({Static:false, Public:false}, "elemTop", $.Int32);

    $.Field({Static:false, Public:false}, "attrStack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+AttrName")]));

    $.Field({Static:false, Public:false}, "attrCount", $.Int32);

    $.Field({Static:false, Public:false}, "attrHashTable", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $.Int32]));

    $.Field({Static:false, Public:false}, "specAttr", $asm07.TypeRef("System.Xml.XmlWellFormedWriter+SpecialAttribute"));

    $.Field({Static:false, Public:false}, "attrValue", $asm00.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "curDeclPrefix", $.String);

    $.Field({Static:false, Public:false}, "stateTable", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+State")]));

    $.Field({Static:false, Public:false}, "currentState", $asm07.TypeRef("System.Xml.XmlWellFormedWriter+State"));

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "conformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Field({Static:false, Public:false}, "dtdWritten", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlDeclFollows", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "hasher", $asm07.TypeRef("System.Xml.SecureStringHasher"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "stateName", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "tokenName", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "state2WriteState", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.WriteState")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StateTableDocument", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "StateTableAuto", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlWellFormedWriter+State")]));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteState", $asm07.TypeRef("System.Xml.WriteState"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false}, "InnerWriter", $asm07.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "SaveAttrValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClosedOrErrorState", $.Boolean);

    $.Property({Static:false, Public:false}, "RawWriter", $asm07.TypeRef("System.Xml.XmlRawWriter"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlWellFormedWriter+NamespaceResolverProxy */ 

(function NamespaceResolverProxy$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlWellFormedWriter+NamespaceResolverProxy", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWellFormedWriter"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Field({Static:false, Public:false}, "wfWriter", $asm07.TypeRef("System.Xml.XmlWellFormedWriter"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlWellFormedWriter+ElementScope */ 

(function ElementScope$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlWellFormedWriter+ElementScope", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlRawWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFullEndElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlRawWriter"))
    );

    $.Field({Static:false, Public:false}, "prevNSTop", $.Int32);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "xmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:false}, "xmlLang", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlWellFormedWriter+NamespaceKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlWellFormedWriter+NamespaceKind", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Written: 0, 
    NeedToWrite: 1, 
    Implied: 2, 
    Special: 3, 
  }
);

/* struct System.Xml.XmlWellFormedWriter+Namespace */ 

(function Namespace$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlWellFormedWriter+Namespace", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlWellFormedWriter+NamespaceKind")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDecl", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlRawWriter")])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "kind", $asm07.TypeRef("System.Xml.XmlWellFormedWriter+NamespaceKind"));

    $.Field({Static:false, Public:false}, "prevNsIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlWellFormedWriter+AttrName */ 

(function AttrName$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlWellFormedWriter+AttrName", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, "IsDuplicate", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "prev", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlWellFormedWriter+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlWellFormedWriter+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Start: 0, 
    TopLevel: 1, 
    Document: 2, 
    Element: 3, 
    Content: 4, 
    B64Content: 5, 
    B64Attribute: 6, 
    AfterRootEle: 7, 
    Attribute: 8, 
    SpecialAttr: 9, 
    EndDocument: 10, 
    RootLevelAttr: 11, 
    RootLevelSpecAttr: 12, 
    RootLevelB64Attr: 13, 
    AfterRootLevelAttr: 14, 
    Closed: 15, 
    Error: 16, 
    StartContent: 101, 
    StartContentEle: 102, 
    StartContentB64: 103, 
    StartDoc: 104, 
    StartDocEle: 106, 
    EndAttrSEle: 107, 
    EndAttrEEle: 108, 
    EndAttrSCont: 109, 
    EndAttrSAttr: 111, 
    PostB64Cont: 112, 
    PostB64Attr: 113, 
    PostB64RootAttr: 114, 
    StartFragEle: 115, 
    StartFragCont: 116, 
    StartFragB64: 117, 
    StartRootLevelAttr: 118, 
  }
);

/* enum System.Xml.XmlWellFormedWriter+Token */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlWellFormedWriter+Token", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    StartDocument: 0, 
    EndDocument: 1, 
    PI: 2, 
    Comment: 3, 
    Dtd: 4, 
    StartElement: 5, 
    EndElement: 6, 
    StartAttribute: 7, 
    EndAttribute: 8, 
    Text: 9, 
    CData: 10, 
    AtomicValue: 11, 
    Base64: 12, 
    RawData: 13, 
    Whitespace: 14, 
  }
);

/* enum System.Xml.XmlWellFormedWriter+SpecialAttribute */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlWellFormedWriter+SpecialAttribute", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    No: 0, 
    DefaultXmlns: 1, 
    PrefixedXmlns: 2, 
    XmlSpace: 3, 
    XmlLang: 4, 
  }
);

/* enum System.Xml.WriteState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.WriteState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Start: 0, 
    Prolog: 1, 
    Element: 2, 
    Attribute: 3, 
    Content: 4, 
    Closed: 5, 
    Error: 6, 
  }
);

/* enum System.Xml.XmlOutputMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlOutputMethod", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Xml: 0, 
    Html: 1, 
    Text: 2, 
    AutoDetect: 3, 
  }
);

/* enum System.Xml.XmlStandalone */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlStandalone", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Omit: 0, 
    Yes: 1, 
    No: 2, 
  }
);

/* enum System.Xml.TriState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.TriState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unknown: -1, 
    False: 0, 
    True: 1, 
  }
);

/* class System.Xml.XmlWriterSettings */ 

(function XmlWriterSettings$Members () {
  var $, $thisType;
















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlWriterSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Xsl.Runtime.XmlQueryDataReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckReadOnly", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AutoXmlDeclaration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CDataSectionElements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckCharacters", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CloseOutput", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ConformanceLevel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DocTypePublic", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DocTypeSystem", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DoNotEscapeUriAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Indent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IndentChars", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalIndent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.TriState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsQuerySpecific", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MediaType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergeCDataSections", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewLineChars", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewLineHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.NewLineHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewLineOnAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OmitXmlDeclaration", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputMethod", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlOutputMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetObjectData", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Xsl.Runtime.XmlQueryDataWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AutoXmlDeclaration", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckCharacters", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CloseOutput", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ConformanceLevel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.ConformanceLevel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DocTypePublic", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DocTypeSystem", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DoNotEscapeUriAttributes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Indent", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IndentChars", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MediaType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MergeCDataSections", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewLineChars", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewLineHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.NewLineHandling"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NewLineOnAttributes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OmitXmlDeclaration", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_OutputMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlOutputMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Standalone", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.Field({Static:false, Public:false}, "encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "omitXmlDecl", $.Boolean);

    $.Field({Static:false, Public:false}, "newLineHandling", $asm07.TypeRef("System.Xml.NewLineHandling"));

    $.Field({Static:false, Public:false}, "newLineChars", $.String);

    $.Field({Static:false, Public:false}, "indent", $asm07.TypeRef("System.Xml.TriState"));

    $.Field({Static:false, Public:false}, "indentChars", $.String);

    $.Field({Static:false, Public:false}, "newLineOnAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "closeOutput", $.Boolean);

    $.Field({Static:false, Public:false}, "conformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "outputMethod", $asm07.TypeRef("System.Xml.XmlOutputMethod"));

    $.Field({Static:false, Public:false}, "cdataSections", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:false, Public:false}, "doNotEscapeUriAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "mergeCDataSections", $.Boolean);

    $.Field({Static:false, Public:false}, "mediaType", $.String);

    $.Field({Static:false, Public:false}, "docTypeSystem", $.String);

    $.Field({Static:false, Public:false}, "docTypePublic", $.String);

    $.Field({Static:false, Public:false}, "standalone", $asm07.TypeRef("System.Xml.XmlStandalone"));

    $.Field({Static:false, Public:false}, "autoXmlDecl", $.Boolean);

    $.Field({Static:false, Public:false}, "isReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Encoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true }, "OmitXmlDeclaration", $.Boolean);

    $.Property({Static:false, Public:true }, "NewLineHandling", $asm07.TypeRef("System.Xml.NewLineHandling"));

    $.Property({Static:false, Public:true }, "NewLineChars", $.String);

    $.Property({Static:false, Public:true }, "Indent", $.Boolean);

    $.Property({Static:false, Public:true }, "IndentChars", $.String);

    $.Property({Static:false, Public:true }, "NewLineOnAttributes", $.Boolean);

    $.Property({Static:false, Public:true }, "CloseOutput", $.Boolean);

    $.Property({Static:false, Public:true }, "ConformanceLevel", $asm07.TypeRef("System.Xml.ConformanceLevel"));

    $.Property({Static:false, Public:true }, "CheckCharacters", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "OutputMethod", $asm07.TypeRef("System.Xml.XmlOutputMethod"));

    $.Property({Static:false, Public:false}, "CDataSectionElements", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Property({Static:false, Public:true }, "DoNotEscapeUriAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "MergeCDataSections", $.Boolean);

    $.Property({Static:false, Public:false}, "MediaType", $.String);

    $.Property({Static:false, Public:false}, "DocTypeSystem", $.String);

    $.Property({Static:false, Public:false}, "DocTypePublic", $.String);

    $.Property({Static:false, Public:false}, "Standalone", $asm07.TypeRef("System.Xml.XmlStandalone"));

    $.Property({Static:false, Public:false}, "AutoXmlDeclaration", $.Boolean);

    $.Property({Static:false, Public:false}, "InternalIndent", $asm07.TypeRef("System.Xml.TriState"));

    $.Property({Static:false, Public:false}, "IsQuerySpecific", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.CachingEventHandler */ 

JSIL.MakeDelegate("System.Xml.CachingEventHandler", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XsdCachingReader")));

/* class System.Xml.AttributePSVIInfo */ 

(function AttributePSVIInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.AttributePSVIInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "typedAttributeValue", $.Object);

    $.Field({Static:false, Public:false}, "attributeSchemaInfo", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Schema");
/* interface System.Xml.Schema.IXmlSchemaInfo */ 

JSIL.MakeInterface(
  "System.Xml.Schema.IXmlSchemaInfo", true, [], function ($) {
    $.Method({}, "get_Validity", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity")));
    $.Method({}, "get_IsDefault", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_IsNil", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_MemberType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")));
    $.Method({}, "get_SchemaType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType")));
    $.Method({}, "get_SchemaElement", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")));
    $.Method({}, "get_SchemaAttribute", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute")));
    $.Property({}, "Validity");
    $.Property({}, "IsDefault");
    $.Property({}, "IsNil");
    $.Property({}, "MemberType");
    $.Property({}, "SchemaType");
    $.Property({}, "SchemaElement");
    $.Property({}, "SchemaAttribute");
  }, []);

/* class System.Xml.XsdValidatingReader */ 

(function XsdValidatingReader$Members () {
  var $, $thisType;















































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XsdValidatingReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm07.TypeRef("System.Xml.XmlReaderSettings"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm07.TypeRef("System.Xml.XmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttributePSVI", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.AttributePSVIInfo"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "CachingCallBack", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XsdCachingReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAttributesInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDummyTextNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeXmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementXmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributePSVI", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.AttributePSVIInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributePSVI", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.AttributePSVIInfo"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCachingReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XsdCachingReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIsDefault", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOriginalAtomicValueStringOfElement", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")]), $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXSDRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElementEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessEndElementEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessReaderEvent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAheadForMemberType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTillEndElement", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReturnBoxedValue", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupValidator", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReaderSettings"), $asm07.TypeRef("System.Xml.XmlReader"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_IsDefault");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_IsNil", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_IsNil");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_MemberType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_SchemaAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_SchemaAttribute");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_SchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_SchemaElement");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_SchemaType");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.get_Validity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), "get_Validity");

    $.ExternalMethod({Static:false, Public:false}, "ValidateAttributes", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "InitialAttributeCount", $.Int32, 8);

    $.Field({Static:false, Public:false}, "coreReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "coreReaderNSResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Field({Static:false, Public:false}, "thisNSResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Field({Static:false, Public:false}, "validator", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidator"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "validationEvent", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "validationState", $asm07.TypeRef("System.Xml.XsdValidatingReader+ValidatingReaderState"));

    $.Field({Static:false, Public:false}, "valueGetter", $asm07.TypeRef("System.Xml.Schema.XmlValueGetter"));

    $.Field({Static:false, Public:false}, "nsManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "manageNamespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "processInlineSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "replayCache", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedNode", $asm07.TypeRef("System.Xml.ValidatingReaderNodeData"));

    $.Field({Static:false, Public:false}, "attributePSVI", $asm07.TypeRef("System.Xml.AttributePSVIInfo"));

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "coreReaderAttributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "currentAttrIndex", $.Int32);

    $.Field({Static:false, Public:false}, "attributePSVINodes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.AttributePSVIInfo")]));

    $.Field({Static:false, Public:false}, "defaultAttributes", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm07.TypeRef("System.Xml.Schema.Parser"));

    $.Field({Static:false, Public:false}, "atomicValue", $.Object);

    $.Field({Static:false, Public:false}, "xmlSchemaInfo", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"));

    $.Field({Static:false, Public:false}, "originalAtomicValueString", $.String);

    $.Field({Static:false, Public:false}, "coreReaderNameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "cachingReader", $asm07.TypeRef("System.Xml.XsdCachingReader"));

    $.Field({Static:false, Public:false}, "textNode", $asm07.TypeRef("System.Xml.ValidatingReaderNodeData"));

    $.Field({Static:false, Public:false}, "NsXmlNs", $.String);

    $.Field({Static:false, Public:false}, "NsXs", $.String);

    $.Field({Static:false, Public:false}, "NsXsi", $.String);

    $.Field({Static:false, Public:false}, "XsiType", $.String);

    $.Field({Static:false, Public:false}, "XsiNil", $.String);

    $.Field({Static:false, Public:false}, "XsdSchema", $.String);

    $.Field({Static:false, Public:false}, "XsiSchemaLocation", $.String);

    $.Field({Static:false, Public:false}, "XsiNoNamespaceSchemaLocation", $.String);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm07.TypeRef("System.Xml.ReadContentAsBinaryHelper"));

    $.Field({Static:false, Public:false}, "savedState", $asm07.TypeRef("System.Xml.XsdValidatingReader+ValidatingReaderState"));

    $.Field({Static:true , Public:false}, "TypeOfString", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.IsDefault", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.IsNil", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.Validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.MemberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.SchemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:false}, "ElementXmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "AttributeXmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "AttributeSchemaInfo", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
      /* 3 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XsdValidatingReader+ValidatingReaderState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XsdValidatingReader+ValidatingReaderState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    OnReadAttributeValue: -2, 
    OnDefaultAttribute: -1, 
    None: 0, 
    Init: 1, 
    Read: 2, 
    OnAttribute: 3, 
    ClearAttributes: 4, 
    ParseInlineSchema: 5, 
    ReadAhead: 6, 
    OnReadBinaryContent: 7, 
    ReaderClosed: 8, 
    EOF: 9, 
    Error: 10, 
  }
);

/* class System.Xml.XsdCachingReader */ 

(function XsdCachingReader$Members () {
  var $, $thisType;


























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XsdCachingReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
          $asm07.TypeRef("System.Xml.CachingEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddContent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAttributesInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateDummyTextNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [$.String, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeIndexWithoutPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeIndexWithPrefix", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCoreReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetLineInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadOriginalContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordEndElementNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordTextNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.ValidatingReaderNodeData"), [
          $.String, $.String, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetToReplayMode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchTextNodeAndEndElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlLineInfo"), "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlLineInfo"), "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlLineInfo"), "HasLineInfo");

    $.Constant({Static:true , Public:false}, "InitialAttributeCount", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "InitialContentCount", $.Int32, 4);

    $.Field({Static:false, Public:false}, "coreReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "coreReaderNameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "contentEvents", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.ValidatingReaderNodeData")]));

    $.Field({Static:false, Public:false}, "attributeEvents", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.ValidatingReaderNodeData")]));

    $.Field({Static:false, Public:false}, "cachedNode", $asm07.TypeRef("System.Xml.ValidatingReaderNodeData"));

    $.Field({Static:false, Public:false}, "cacheState", $asm07.TypeRef("System.Xml.XsdCachingReader+CachingReaderState"));

    $.Field({Static:false, Public:false}, "contentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "attributeCount", $.Int32);

    $.Field({Static:false, Public:false}, "returnOriginalStringValues", $.Boolean);

    $.Field({Static:false, Public:false}, "cacheHandler", $asm07.TypeRef("System.Xml.CachingEventHandler"));

    $.Field({Static:false, Public:false}, "currentAttrIndex", $.Int32);

    $.Field({Static:false, Public:false}, "currentContentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "readAhead", $.Boolean);

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "textNode", $asm07.TypeRef("System.Xml.ValidatingReaderNodeData"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.XsdCachingReader+CachingReaderState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XsdCachingReader+CachingReaderState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Init: 1, 
    Record: 2, 
    Replay: 3, 
    ReaderClosed: 4, 
    Error: 5, 
  }
);

/* enum System.Xml.DocumentXmlWriterType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DocumentXmlWriterType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    InsertSiblingAfter: 0, 
    InsertSiblingBefore: 1, 
    PrependChild: 2, 
    AppendChild: 3, 
    AppendAttribute: 4, 
    ReplaceToFollowingSibling: 5, 
  }
);

/* class System.Xml.DocumentXmlWriter */ 

(function DocumentXmlWriter$Members () {
  var $, $thisType;













































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "System.Xml.DocumentXmlWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.DocumentXmlWriterType"), $asm07.TypeRef("System.Xml.XmlNode"), 
          $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlAttribute"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddChild", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Close", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.WriteState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseWithAppendAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CloseWithReplaceToFollowingSibling", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EndNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NamespaceManager", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Navigator", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.DocumentXPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSettings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "StartState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DocumentXmlWriter+State"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "VerifyState", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.DocumentXmlWriter+Method"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartDocument", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.DocumentXmlWriterType"));

    $.Field({Static:false, Public:false}, "start", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "namespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Xml.DocumentXmlWriter+State"));

    $.Field({Static:false, Public:false}, "write", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "fragment", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Field({Static:false, Public:false}, "navigator", $asm07.TypeRef("System.Xml.DocumentXPathNavigator"));

    $.Field({Static:false, Public:false}, "end", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:true , Public:false}, "changeState", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.DocumentXmlWriter+State")]));

    $.Property({Static:false, Public:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true }, "Navigator", $asm07.TypeRef("System.Xml.DocumentXPathNavigator"));

    $.Property({Static:false, Public:true }, "EndNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.DocumentXmlWriter+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DocumentXmlWriter+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Error: 0, 
    Attribute: 1, 
    Prolog: 2, 
    Fragment: 3, 
    Content: 4, 
    Last: 5, 
  }
);

/* enum System.Xml.DocumentXmlWriter+Method */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DocumentXmlWriter+Method", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    WriteXmlDeclaration: 0, 
    WriteStartDocument: 1, 
    WriteEndDocument: 2, 
    WriteDocType: 3, 
    WriteStartElement: 4, 
    WriteEndElement: 5, 
    WriteFullEndElement: 6, 
    WriteStartAttribute: 7, 
    WriteEndAttribute: 8, 
    WriteNamespaceDeclaration: 9, 
    WriteCData: 10, 
    WriteComment: 11, 
    WriteProcessingInstruction: 12, 
    WriteEntityRef: 13, 
    WriteWhitespace: 14, 
    WriteString: 15, 
  }
);

JSIL.DeclareNamespace("System.Xml.XPath");
/* class System.Xml.XPath.XPathItem */ 

(function XPathItem$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathItem", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.XPath.IXPathNavigable */ 

JSIL.MakeInterface(
  "System.Xml.XPath.IXPathNavigable", true, [], function ($) {
    $.Method({}, "CreateNavigator", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator")));
  }, []);

/* class System.Xml.XPath.XPathNavigator */ 

(function XPathNavigator$Members () {
  var $, $thisType;










































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathItem"), 
      Name: "System.Xml.XPath.XPathNavigator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChildElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSubtree", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckValidity", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareSiblings", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compile", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathExpression"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CompileMatchPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathExpression"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateContextReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteRange", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteSelf", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathExpression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathExpression"), $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanEdit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IndexInParent", 
      JSIL.MethodSignature.Return($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:true , Public:true }, "get_NavigatorComparer", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEqualityComparer"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnderlyingObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContentKindMask", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDepth", 
      new JSIL.MethodSignature($.Int32, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKindMask", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespaces", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNamespaceManager"), [$asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValidatingReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertElementAfter", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertElementBefore", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsText", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidSiblingType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathExpression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Matches", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToFirstNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNextNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNonDescendant", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToPrevious", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChildElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlWriter"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceSelf", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceSelf", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceSelf", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Select", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathExpression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectAncestors", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectAncestors", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XPath.XPathExpression")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_OuterXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetTypedValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSubtree", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "AllMask", $.Int32, 2147483647);

    $.Constant({Static:true , Public:false}, "NoAttrNmspMask", $.Int32, 2147483635);

    $.Constant({Static:true , Public:false}, "TextMask", $.Int32, 112);

    $.Field({Static:true , Public:false, ReadOnly:true }, "comparer", $asm07.TypeRef("System.Xml.XPath.XPathNavigatorKeyComparer"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NodeTypeLetter", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UniqueIdTbl", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ContentKindMasks", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:true , Public:true }, "NavigatorComparer", $asm00.TypeRef("System.Collections.IEqualityComparer"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanEdit", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false}, "IndexInParent", $.UInt32);

    $.Property({Static:false, Public:false, Virtual:true }, "UniqueId", $.String);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.ICloneable"), 
      /* 1 */ $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; });

})();

/* class System.Xml.XPath.XPathNavigator+CheckValidityHelper */ 

(function CheckValidityHelper$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathNavigator+CheckValidityHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.XPath.XPathNavigatorReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.Field({Static:false, Public:false}, "isValid", $.Boolean);

    $.Field({Static:false, Public:false}, "nextEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XPath.XPathNavigatorReader"));

    $.Property({Static:false, Public:false}, "IsValid", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XPath.XPathNavigator+DebuggerDisplayProxy */ 

(function DebuggerDisplayProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XPath.XPathNavigator+DebuggerDisplayProxy", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

/* class System.Xml.DocumentXPathNavigator */ 

(function DocumentXPathNavigator$Members () {
  var $, $thisType;

























































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), 
      Name: "System.Xml.DocumentXPathNavigator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CalibrateText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckAttributePosition", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlAttribute"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlAttributeCollection")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckValidity", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteAttribute", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlAttribute"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteRange", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteSelf", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "DeleteToFollowingSibling", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FirstChildTail", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanEdit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_UnderlyingObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueDocument", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDepth", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespaceManager", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNamespaceManager"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsFollowingSibling", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidChild", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToFirstNamespaceGlobal", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlAttributeCollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToFirstNamespaceLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlAttributeCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToNextNamespaceGlobal", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlAttributeCollection")]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "MoveToNextNamespaceLocal", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlAttributeCollection"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NextSibling", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextSiblingTail", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "OwnerNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParentNodeTail", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PathHasDuplicateNamespace", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Xml.XmlElement"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousSibling", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousSiblingTail", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousText", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreviousTextTail", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceRange", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlWriter"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ResetAttributePosition", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlAttribute"), $asm07.TypeRef("System.Xml.XmlAttributeCollection"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetPosition", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IHasXmlNode.GetNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    )
      .Overrides($asm07.TypeRef("System.Xml.IHasXmlNode"), "GetNode");

    $.ExternalMethod({Static:false, Public:false}, "TextEnd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "TextStart", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:false, Public:false}, "document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "source", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "attributeIndex", $.Int32);

    $.Field({Static:false, Public:false}, "namespaceParent", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false}, "ValueDocument", $.String);

    $.Property({Static:false, Public:false}, "ValueText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "UnderlyingObject", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanEdit", $.Boolean);

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Xml.IHasXmlNode")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XPath.XPathNodeIterator */ 

(function XPathNodeIterator$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathNodeIterator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.ICloneable"), "Clone");

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.ICloneable"), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Position={CurrentPosition}, Current={debuggerDisplayProxy}"]; });

})();

/* class System.Xml.XPath.XPathNodeIterator+Enumerator */ 

(function Enumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathNodeIterator+Enumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "original", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.Field({Static:false, Public:false}, "current", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.Field({Static:false, Public:false}, "iterationStarted", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_Empty */ 

(function DocumentXPathNodeIterator_Empty$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), 
      Name: "System.Xml.DocumentXPathNodeIterator_Empty", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.DocumentXPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_ElemDescendants */ 

(function DocumentXPathNodeIterator_ElemDescendants$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), 
      Name: "System.Xml.DocumentXPathNodeIterator_ElemDescendants", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.DocumentXPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetPosition", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.DocumentXPathNavigator"));

    $.Field({Static:false, Public:false}, "level", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_AllElemChildren */ 

(function DocumentXPathNodeIterator_AllElemChildren$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), 
      Name: "System.Xml.DocumentXPathNodeIterator_AllElemChildren", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.DocumentXPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf */ 

(function DocumentXPathNodeIterator_AllElemChildren_AndSelf$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.DocumentXPathNodeIterator_AllElemChildren"), 
      Name: "System.Xml.DocumentXPathNodeIterator_AllElemChildren_AndSelf", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.DocumentXPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName */ 

(function DocumentXPathNodeIterator_ElemChildren_NoLocalName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), 
      Name: "System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.DocumentXPathNavigator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:false, Public:false}, "nsAtom", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName */ 

(function DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemChildren_NoLocalName"), 
      Name: "System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf_NoLocalName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.DocumentXPathNavigator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_ElemChildren */ 

(function DocumentXPathNodeIterator_ElemChildren$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemDescendants"), 
      Name: "System.Xml.DocumentXPathNodeIterator_ElemChildren", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.DocumentXPathNavigator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:false, Public:false}, "localNameAtom", $.String);

    $.Field({Static:false, Public:false}, "nsAtom", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf */ 

(function DocumentXPathNodeIterator_ElemChildren_AndSelf$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.DocumentXPathNodeIterator_ElemChildren"), 
      Name: "System.Xml.DocumentXPathNodeIterator_ElemChildren_AndSelf", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.DocumentXPathNavigator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DomNameTable */ 

(function DomNameTable$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.DomNameTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Grow", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "InitialSize", $.Int32, 64);

    $.Field({Static:false, Public:false}, "entries", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlName")]));

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "mask", $.Int32);

    $.Field({Static:false, Public:false}, "ownerDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNode */ 

(function XmlNode$Members () {
  var $, $thisType;






















































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AfterEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AncestorNode", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($.Type, [$.Type, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AppendChildText", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeforeEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertAfter", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertBefore", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($.Type, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CopyChildren", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlDocument"), $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "FindChild", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ChildNodes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_FirstChild", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildNodes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LastChild", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreviousSibling", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEventArgs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [
          $.Type, $.Type, 
          $.Type, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlNodeChangedAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespaceOfPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespaceOfPrefixStrict", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetPrefixOfNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrefixOfNamespaceStrict", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetXPAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasReadOnlyParent", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsConnected", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NestTextNodes", 
      new JSIL.MethodSignature(null, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Normalize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizeWinner", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveChild", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($.Type, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectNodes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectNodes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeList"), [$.String, $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SelectSingleNode", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParentForLoad", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "SplitName", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Supports", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:true , Public:false}, "UnnestTextNodes", 
      new JSIL.MethodSignature(null, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "parentNode", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "ChildNodes", $asm07.TypeRef("System.Xml.XmlNodeList"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Xml.XmlAttributeCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "FirstChild", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "LastChild", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildNodes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "Document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $.Type);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.ICloneable"), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable"), 
      /* 2 */ $asm07.TypeRef("System.Xml.XPath.IXPathNavigable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{debuggerDisplayProxy}"]; })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.XmlAttribute */ 

(function XmlAttribute$Members () {
  var $, $thisType;












































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNode"), 
      Name: "System.Xml.XmlAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlName"), $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalNameHash", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Specified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareOwnerElementInElementIdAttrMap", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrependChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetOwnerElementInElementIdAttrMap", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlName"));

    $.Field({Static:false, Public:false}, "lastChild", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:false}, "LocalNameHash", $.Int32);

    $.Property({Static:false, Public:false}, "XmlName", $asm07.TypeRef("System.Xml.XmlName"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Specified", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerElement", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.Property({Static:false, Public:false}, "IsNamespace", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNamedNodeMap */ 

(function XmlNamedNodeMap$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNamedNodeMap", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNodeForLoad", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Nodes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamedItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamedItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertNodeAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamedItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveNamedItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveNodeAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReplaceNodeAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetNamedItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:false, Public:false}, "parent", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "nodes", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "Nodes", $asm00.TypeRef("System.Collections.ArrayList"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlAttributeCollection */ 

(function XmlAttributeCollection$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNamedNodeMap"), 
      Name: "System.Xml.XmlAttributeCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Append", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Detach", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffset", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindNodeOffsetNS", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute"), $asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute"), $asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InsertNodeAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32, $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InsertParentIntoElementIdAttrMap", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalAppendAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareParentInElementIdAttrMap", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Prepend", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDuplicateAttribute", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "RemoveNodeAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveParentFromElementIdAttrMap", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetParentInElementIdAttrMap", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetNamedItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.Property({Static:false, Public:true }, "ItemOf", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:true }, "ItemOf", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:true }, "ItemOf", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("System.Collections.ICollection")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["ItemOf"]; });

})();

/* class System.Xml.XmlLinkedNode */ 

(function XmlLinkedNode$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNode"), 
      Name: "System.Xml.XmlLinkedNode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreviousSibling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "PreviousSibling", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCharacterData */ 

(function XmlCharacterData$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlLinkedNode"), 
      Name: "System.Xml.XmlCharacterData", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckOnData", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "DecideXPNodeTypeForTextNodes", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "DeleteData", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Data", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertData", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceData", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Data", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Substring", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "data", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Data", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Length", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlCDataSection */ 

(function XmlCDataSection$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlCharacterData"), 
      Name: "System.Xml.XmlCDataSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlChildEnumerator */ 

(function XmlChildEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlChildEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "container", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "child", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "isFirst", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:false}, "Current", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeList */ 

(function XmlNodeList$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNodeList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ItemOf", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ItemOf", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["ItemOf"]; });

})();

/* class System.Xml.XmlChildNodes */ 

(function XmlChildNodes$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNodeList"), 
      Name: "System.Xml.XmlChildNodes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "container", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlComment */ 

(function XmlComment$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlCharacterData"), 
      Name: "System.Xml.XmlComment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDeclaration */ 

(function XmlDeclaration$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlLinkedNode"), 
      Name: "System.Xml.XmlDeclaration", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Standalone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Encoding", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Standalone", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Constant({Static:true , Public:false}, "YES", $.String, "yes");

    $.Constant({Static:true , Public:false}, "NO", $.String, "no");

    $.Constant({Static:true , Public:false}, "VERNUM", $.String, "1.0");

    $.Field({Static:false, Public:false}, "encoding", $.String);

    $.Field({Static:false, Public:false}, "standalone", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "Encoding", $.String);

    $.Property({Static:false, Public:true }, "Standalone", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDocument */ 

(function XmlDocument$Members () {
  var $, $thisType;




































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNode"), 
      Name: "System.Xml.XmlDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlImplementation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeChanged", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeChanging", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeInserted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeInserting", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeRemoved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_NodeRemoving", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttrXmlName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElementWithId", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdInfo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlName"), $asm07.TypeRef("System.Xml.XmlName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AfterEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "BeforeEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertAfter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertBefore", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConvertToNodeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeType"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateCDataSection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlCDataSection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateComment", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlComment"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateDefaultAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocumentFragment", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocumentFragment"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocumentType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlDocumentType"), [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateEntityReference", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlEntityReference"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNavigator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [
          $asm07.TypeRef("System.Xml.XmlNodeType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateProcessingInstruction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlProcessingInstruction"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateSignificantWhitespace", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlSignificantWhitespace"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateTextNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlText"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateWhitespace", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlWhitespace"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateXmlDeclaration", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlDeclaration"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ActualLoadingStatus", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanReportValidity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Declaration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocumentElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DocumentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocumentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Encoding", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Entities", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamedNodeMap"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasEntityReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSetResolver", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Implementation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlImplementation"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLoading", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceXml", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Standalone", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TextEncoding", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Text.Encoding"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [
          $asm07.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElement", 
      new JSIL.MethodSignature($asm00.TypeRef("System.WeakReference"), [$asm00.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementById", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeList"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntityNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlEntity"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetEventArgs", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [
          $asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode"), 
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlNodeChangedAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIDInfoByElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [$asm07.TypeRef("System.Xml.XmlName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIDInfoByElement_", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [$asm07.TypeRef("System.Xml.XmlName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInsertEventArgsForLoad", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaElementDecl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlName"), [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasNodeTypeInNextSiblings", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "HasNodeTypeInPrevSiblings", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportChildren", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportNodeInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTextNode", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LoadXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "NormalizeText", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrepareDefaultAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [
          $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeChanged", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeChanging", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeInserted", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeInserting", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeRemoved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_NodeRemoving", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveElementWithId", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Save", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ActualLoadingStatus", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Entities", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNamedNodeMap"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsLoading", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PreserveWhitespace", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schemas", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReader"), [$asm07.TypeRef("System.Xml.XmlTextReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Validate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Validate", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "implementation", $asm07.TypeRef("System.Xml.XmlImplementation"));

    $.Field({Static:false, Public:false}, "domNameTable", $asm07.TypeRef("System.Xml.DomNameTable"));

    $.Field({Static:false, Public:false}, "lastChild", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Field({Static:false, Public:false}, "entities", $asm07.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Field({Static:false, Public:false}, "htElementIdMap", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "htElementIDAttrDecl", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "reportValidity", $.Boolean);

    $.Field({Static:false, Public:false}, "actualLoadingStatus", $.Boolean);

    $.Field({Static:false, Public:false}, "onNodeInsertingDelegate", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onNodeInsertedDelegate", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onNodeRemovingDelegate", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onNodeRemovedDelegate", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onNodeChangingDelegate", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Field({Static:false, Public:false}, "onNodeChangedDelegate", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Field({Static:false, Public:false}, "fEntRefNodesPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "fCDataNodesPresent", $.Boolean);

    $.Field({Static:false, Public:false}, "preserveWhitespace", $.Boolean);

    $.Field({Static:false, Public:false}, "isLoading", $.Boolean);

    $.Field({Static:false, Public:false}, "strDocumentName", $.String);

    $.Field({Static:false, Public:false}, "strDocumentFragmentName", $.String);

    $.Field({Static:false, Public:false}, "strCommentName", $.String);

    $.Field({Static:false, Public:false}, "strTextName", $.String);

    $.Field({Static:false, Public:false}, "strCDataSectionName", $.String);

    $.Field({Static:false, Public:false}, "strEntityName", $.String);

    $.Field({Static:false, Public:false}, "strID", $.String);

    $.Field({Static:false, Public:false}, "strXmlns", $.String);

    $.Field({Static:false, Public:false}, "strXml", $.String);

    $.Field({Static:false, Public:false}, "strSpace", $.String);

    $.Field({Static:false, Public:false}, "strLang", $.String);

    $.Field({Static:false, Public:false}, "strEmpty", $.String);

    $.Field({Static:false, Public:false}, "strNonSignificantWhitespaceName", $.String);

    $.Field({Static:false, Public:false}, "strSignificantWhitespaceName", $.String);

    $.Field({Static:false, Public:false}, "strReservedXmlns", $.String);

    $.Field({Static:false, Public:false}, "strReservedXml", $.String);

    $.Field({Static:false, Public:false}, "baseURI", $.String);

    $.Field({Static:false, Public:false}, "resolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "bSetResolver", $.Boolean);

    $.Field({Static:false, Public:false}, "objLock", $.Object);

    $.Field({Static:false, Public:false}, "namespaceXml", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Field({Static:true , Public:false}, "EmptyEnumerator", $asm07.TypeRef("System.Xml.EmptyEnumerator"));

    $.Field({Static:true , Public:false}, "NotKnownSchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Field({Static:true , Public:false}, "ValidSchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Field({Static:true , Public:false}, "InvalidSchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "DocumentType", $asm07.TypeRef("System.Xml.XmlDocumentType"));

    $.Property({Static:false, Public:false, Virtual:true }, "Declaration", $asm07.TypeRef("System.Xml.XmlDeclaration"));

    $.Property({Static:false, Public:true }, "Implementation", $asm07.TypeRef("System.Xml.XmlImplementation"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "DocumentElement", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $.Type);

    $.Property({Static:false, Public:true }, "Schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "CanReportValidity", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSetResolver", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "PreserveWhitespace", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "Entities", $asm07.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Property({Static:false, Public:false}, "IsLoading", $.Boolean);

    $.Property({Static:false, Public:false}, "ActualLoadingStatus", $.Boolean);

    $.Property({Static:false, Public:false}, "TextEncoding", $asm00.TypeRef("System.Text.Encoding"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false}, "Version", $.String);

    $.Property({Static:false, Public:false}, "Encoding", $.String);

    $.Property({Static:false, Public:false}, "Standalone", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false}, "HasEntityReferences", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceXml", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Event({Static:false, Public:true }, "NodeInserting", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Event({Static:false, Public:true }, "NodeInserted", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Event({Static:false, Public:true }, "NodeRemoving", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Event({Static:false, Public:true }, "NodeRemoved", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Event({Static:false, Public:true }, "NodeChanging", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.Event({Static:false, Public:true }, "NodeChanged", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDocumentFragment */ 

(function XmlDocumentFragment$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNode"), 
      Name: "System.Xml.XmlDocumentFragment", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertAfter", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CanInsertBefore", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "lastChild", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDocumentType */ 

(function XmlDocumentType$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlLinkedNode"), 
      Name: "System.Xml.XmlDocumentType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DtdSchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Entities", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamedNodeMap"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_InternalSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamedNodeMap"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParseWithNamespaces", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DtdSchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParseWithNamespaces", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "publicId", $.String);

    $.Field({Static:false, Public:false}, "systemId", $.String);

    $.Field({Static:false, Public:false}, "internalSubset", $.String);

    $.Field({Static:false, Public:false}, "namespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "entities", $asm07.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Field({Static:false, Public:false}, "notations", $asm07.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "Entities", $asm07.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Property({Static:false, Public:true }, "Notations", $asm07.TypeRef("System.Xml.XmlNamedNodeMap"));

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true }, "InternalSubset", $.String);

    $.Property({Static:false, Public:false}, "ParseWithNamespaces", $.Boolean);

    $.Property({Static:false, Public:false}, "DtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DocumentSchemaValidator */ 

(function DocumentSchemaValidator$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.DocumentSchemaValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AncestorTypeHasWildcard", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNodeSequenceCapacity", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeFinderValidator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidator"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateValidator", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSchemaInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSchemaInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PsviAugmentation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNodeValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromAncestors", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [
          $asm07.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromParent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallBack", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_PsviAugmentation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultAttributeSchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeFinderCallBack", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Validate", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildrenTillNextAncestor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateSingleElement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlElement"), $.Boolean, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ])
    );

    $.Field({Static:false, Public:false}, "validator", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidator"));

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "nsManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "defaultAttributes", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "nodeValueGetter", $asm07.TypeRef("System.Xml.Schema.XmlValueGetter"));

    $.Field({Static:false, Public:false}, "attributeSchemaInfo", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "internalEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "startNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "currentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "nodeSequenceToValidate", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "isPartialTreeValid", $.Boolean);

    $.Field({Static:false, Public:false}, "psviAugmentation", $.Boolean);

    $.Field({Static:false, Public:false}, "isValid", $.Boolean);

    $.Field({Static:false, Public:false}, "NsXmlNs", $.String);

    $.Field({Static:false, Public:false}, "NsXsi", $.String);

    $.Field({Static:false, Public:false}, "XsiType", $.String);

    $.Field({Static:false, Public:false}, "XsiNil", $.String);

    $.Property({Static:false, Public:true }, "PsviAugmentation", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlDOMTextWriter */ 

(function XmlDOMTextWriter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlTextWriter"), 
      Name: "System.Xml.XmlDOMTextWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Text.Encoding")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlElement */ 

(function XmlElement$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlLinkedNode"), 
      Name: "System.Xml.XmlElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlName"), $.Boolean, 
          $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AppendChildForLoad", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttributeCollection"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NextSibling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlName"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttributeNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttributeNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeList"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetElementsByTagName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeList"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetXPAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAll", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAllAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAllChildren", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttributeAt", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttributeNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveAttributeNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsEmpty", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlName"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttribute", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttributeNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetAttributeNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlName"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.XmlAttributeCollection"));

    $.Field({Static:false, Public:false}, "lastChild", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:false}, "XmlName", $asm07.TypeRef("System.Xml.XmlName"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "OwnerDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Attributes", $asm07.TypeRef("System.Xml.XmlAttributeCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NextSibling", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlElementList */ 

(function XmlElementList$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNodeList"), 
      Name: "System.Xml.XmlElementList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConcurrencyCheck", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChangeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMatchingNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNextNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNthMatchingNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [
          $asm07.TypeRef("System.Xml.XmlNode"), $.Boolean, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextElemInPreOrder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrevElemInPreOrder", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.Field({Static:false, Public:false}, "asterisk", $.String);

    $.Field({Static:false, Public:false}, "changeCount", $.Int32);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceURI", $.String);

    $.Field({Static:false, Public:false}, "rootNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "curInd", $.Int32);

    $.Field({Static:false, Public:false}, "curElem", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "empty", $.Boolean);

    $.Field({Static:false, Public:false}, "atomized", $.Boolean);

    $.Field({Static:false, Public:false}, "matchCount", $.Int32);

    $.Property({Static:false, Public:false}, "ChangeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlElementListEnumerator */ 

(function XmlElementListEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlElementListEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlElementList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Xml.XmlElementList"));

    $.Field({Static:false, Public:false}, "curElem", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "changeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlEmptyElementListEnumerator */ 

(function XmlEmptyElementListEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlEmptyElementListEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlElementList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlElementListListener */ 

(function XmlElementListListener$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlElementListListener", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Xml.XmlElementList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "OnListChanged", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs")])
    );

    $.Field({Static:false, Public:false}, "elemList", $asm00.TypeRef("System.WeakReference"));

    $.Field({Static:false, Public:false}, "doc", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "nodeChangeHandler", $asm07.TypeRef("System.Xml.XmlNodeChangedEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlEntity */ 

(function XmlEntity$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNode"), 
      Name: "System.Xml.XmlEntity", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NotationName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "publicId", $.String);

    $.Field({Static:false, Public:false}, "systemId", $.String);

    $.Field({Static:false, Public:false}, "notationName", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "unparsedReplacementStr", $.String);

    $.Field({Static:false, Public:false}, "baseURI", $.String);

    $.Field({Static:false, Public:false}, "lastChild", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Field({Static:false, Public:false}, "childrenFoliating", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true }, "NotationName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlEntityReference */ 

(function XmlEntityReference$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlLinkedNode"), 
      Name: "System.Xml.XmlEntityReference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ConstructBaseURI", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChildBaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsContainer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_LastNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsValidChildType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_LastNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlLinkedNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetParentForLoad", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "lastChild", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsContainer", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "LastNode", $asm07.TypeRef("System.Xml.XmlLinkedNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "ChildBaseURI", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlNodeChangedAction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlNodeChangedAction", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Insert: 0, 
    Remove: 1, 
    Change: 2, 
  }
);

/* class System.Xml.XmlImplementation */ 

(function XmlImplementation$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlImplementation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateDocument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "HasFeature", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlLoader */ 

(function XmlLoader$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlLoader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInnerXmlReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNodeType"), 
          $asm07.TypeRef("System.Xml.XmlParserContext"), $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EntitizeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandEntity", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlEntity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpandEntityReference", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlEntityReference"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContext", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlParserContext"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Load", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Xml.XmlReader"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNodeDirect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDeclarationNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDefaultAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDocSequence", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDocumentType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaInfo"), $asm07.TypeRef("System.Xml.XmlDocumentType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadDocumentTypeNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocumentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadEntityReferenceNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlEntityReference"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInnerXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlAttribute"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInnerXmlElement", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadNodeDirect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDocumentType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlDocumentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDocumentType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlDocumentType"), $.Boolean, 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePartialContent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNamespaceManager"), [
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $asm07.TypeRef("System.Xml.XmlNodeType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseXmlDeclarationValue", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadCurrentNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveDuplicateNamespace", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlElement"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnexpectedNodeType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.Field({Static:false, Public:false}, "doc", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "preserveWhitespace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlName */ 

(function XmlName$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Xml.XmlDocument"), $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Xml.XmlDocument"), $.Type, 
          $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OwnerDocument", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "ownerDoc", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "HashCode", $.Int32);

    $.Property({Static:false, Public:true }, "OwnerDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNameEx */ 

(function XmlNameEx$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlName"), 
      Name: "System.Xml.XmlNameEx", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Xml.XmlDocument"), $asm07.TypeRef("System.Xml.XmlName"), 
          $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIsDefault", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetIsNil", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValidity", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.Constant({Static:true , Public:false}, "ValidityMask", $.Byte, 3);

    $.Constant({Static:true , Public:false}, "IsDefaultBit", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "IsNilBit", $.Byte, 8);

    $.Field({Static:false, Public:false}, "flags", $.Byte);

    $.Field({Static:false, Public:false}, "memberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "schemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "decl", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.DebuggerDisplayXmlNodeProxy */ 

(function DebuggerDisplayXmlNodeProxy$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.DebuggerDisplayXmlNodeProxy", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "node", $asm07.TypeRef("System.Xml.XmlNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

/* class System.Xml.XmlNodeChangedEventArgs */ 

(function XmlNodeChangedEventArgs$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.XmlNodeChangedEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode"), 
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlNodeChangedAction")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Action", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeChangedAction"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewParent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NewValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Node", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldParent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OldValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "action", $asm07.TypeRef("System.Xml.XmlNodeChangedAction"));

    $.Field({Static:false, Public:false}, "node", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "oldParent", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "newParent", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "oldValue", $.String);

    $.Field({Static:false, Public:false}, "newValue", $.String);

    $.Property({Static:false, Public:true }, "Action", $asm07.TypeRef("System.Xml.XmlNodeChangedAction"));

    $.Property({Static:false, Public:true }, "Node", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "OldParent", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "NewParent", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true }, "OldValue", $.String);

    $.Property({Static:false, Public:true }, "NewValue", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.XmlNodeChangedEventHandler */ 

JSIL.MakeDelegate("System.Xml.XmlNodeChangedEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.XmlNodeChangedEventArgs")]));

/* class System.Xml.XmlNodeReaderNavigator */ 

(function XmlNodeReaderNavigator$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNodeReaderNavigator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIndexCondition", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "DefaultLookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CreatedOnAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOnAttrVal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOnDeclOrDocType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_OwnerElementNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeFromElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeFromElement", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDecAttrInd", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeclarationAttr", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlDeclaration"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDeclarationAttr", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDocTypeAttrInd", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDocumentTypeAttr", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlDocumentType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetDocumentTypeAttr", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDecAttr", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitDocTypeAttr", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsLocalNameEmpty", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "LogMove", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttributeFromElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlElement"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadAttributeValue", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlNodeType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetMove", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlNodeType")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ResetToAttribute", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "RollBackMove", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("JSIL.Reference", [$.Int32]))
    );

    $.Constant({Static:true , Public:false}, "strPublicID", $.String, "PUBLIC");

    $.Constant({Static:true , Public:false}, "strSystemID", $.String, "SYSTEM");

    $.Constant({Static:true , Public:false}, "strVersion", $.String, "version");

    $.Constant({Static:true , Public:false}, "strStandalone", $.String, "standalone");

    $.Constant({Static:true , Public:false}, "strEncoding", $.String, "encoding");

    $.Field({Static:false, Public:false}, "curNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "elemNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "logNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "attrIndex", $.Int32);

    $.Field({Static:false, Public:false}, "logAttrIndex", $.Int32);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "doc", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "nAttrInd", $.Int32);

    $.Field({Static:false, Public:false}, "nDeclarationAttrCount", $.Int32);

    $.Field({Static:false, Public:false}, "nDocTypeAttrCount", $.Int32);

    $.Field({Static:false, Public:false}, "nLogLevel", $.Int32);

    $.Field({Static:false, Public:false}, "nLogAttrInd", $.Int32);

    $.Field({Static:false, Public:false}, "bLogOnAttrVal", $.Boolean);

    $.Field({Static:false, Public:false}, "bCreatedOnAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "decNodeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNodeReaderNavigator+VirtualAttribute")]));

    $.Field({Static:false, Public:false}, "docTypeNodeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNodeReaderNavigator+VirtualAttribute")]));

    $.Field({Static:false, Public:false}, "bOnAttrVal", $.Boolean);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:false}, "IsOnAttrVal", $.Boolean);

    $.Property({Static:false, Public:false}, "OwnerElementNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:false}, "CreatedOnAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:false}, "IsOnDeclOrDocType", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlNodeReaderNavigator+VirtualAttribute */ 

(function VirtualAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlNodeReaderNavigator+VirtualAttribute", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeReader */ 

(function XmlNodeReader$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlNodeReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishReadBinary", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsInReadingStates", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadAtZeroLevel", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadForward", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNextNode", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReSetReadingMarks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEndOfFile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.Field({Static:false, Public:false}, "readerNav", $asm07.TypeRef("System.Xml.XmlNodeReaderNavigator"));

    $.Field({Static:false, Public:false}, "nodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "curDepth", $.Int32);

    $.Field({Static:false, Public:false}, "readState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Field({Static:false, Public:false}, "fEOF", $.Boolean);

    $.Field({Static:false, Public:false}, "bResolveEntity", $.Boolean);

    $.Field({Static:false, Public:false}, "bStartFromDocument", $.Boolean);

    $.Field({Static:false, Public:false}, "bInReadBinary", $.Boolean);

    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm07.TypeRef("System.Xml.ReadContentAsBinaryHelper"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNotation */ 

(function XmlNotation$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNode"), 
      Name: "System.Xml.XmlNotation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_OuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PublicId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SystemId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerXml", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "publicId", $.String);

    $.Field({Static:false, Public:false}, "systemId", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsReadOnly", $.Boolean);

    $.Property({Static:false, Public:true }, "PublicId", $.String);

    $.Property({Static:false, Public:true }, "SystemId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "OuterXml", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerXml", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlProcessingInstruction */ 

(function XmlProcessingInstruction$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlLinkedNode"), 
      Name: "System.Xml.XmlProcessingInstruction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Data", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_InnerText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Target", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPLocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Data", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "target", $.String);

    $.Field({Static:false, Public:false}, "data", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true }, "Target", $.String);

    $.Property({Static:false, Public:true }, "Data", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "XPLocalName", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSignificantWhitespace */ 

(function XmlSignificantWhitespace$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlCharacterData"), 
      Name: "System.Xml.XmlSignificantWhitespace", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlText */ 

(function XmlText$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlCharacterData"), 
      Name: "System.Xml.XmlText", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SplitText", 
      new JSIL.MethodSignature($.Type, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlUnspecifiedAttribute */ 

(function XmlUnspecifiedAttribute$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlAttribute"), 
      Name: "System.Xml.XmlUnspecifiedAttribute", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlDocument")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AppendChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Specified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertAfter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InsertBefore", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "RemoveChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReplaceChild", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XmlNode"), $asm07.TypeRef("System.Xml.XmlNode")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_InnerText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSpecified", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "fSpecified", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Specified", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "InnerText", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlWhitespace */ 

(function XmlWhitespace$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlCharacterData"), 
      Name: "System.Xml.XmlWhitespace", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlDocument")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CloneNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ParentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_PreviousText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_XPNodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteContentTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteTo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ParentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:false, Virtual:true }, "XPNodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "PreviousText", $asm07.TypeRef("System.Xml.XmlNode"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XPathNodeList */ 

(function XPathNodeList$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNodeList"), 
      Name: "System.Xml.XPathNodeList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUntil", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "list", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "nodeIterator", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.Field({Static:false, Public:false}, "done", $.Boolean);

    $.Field({Static:true , Public:false, ReadOnly:true }, "nullparams", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm00.System.Object, 0);
      });

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlNodeListEnumerator */ 

(function XmlNodeListEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlNodeListEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPathNodeList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Xml.XPathNodeList"));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Field({Static:false, Public:false}, "valid", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.BinXmlToken */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.BinXmlToken", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    NotImpl: -2, 
    EOF: -1, 
    Error: 0, 
    SQL_SMALLINT: 1, 
    SQL_INT: 2, 
    SQL_REAL: 3, 
    SQL_FLOAT: 4, 
    SQL_MONEY: 5, 
    SQL_BIT: 6, 
    SQL_TINYINT: 7, 
    SQL_BIGINT: 8, 
    SQL_UUID: 9, 
    SQL_DECIMAL: 10, 
    SQL_NUMERIC: 11, 
    SQL_BINARY: 12, 
    SQL_CHAR: 13, 
    SQL_NCHAR: 14, 
    SQL_VARBINARY: 15, 
    SQL_VARCHAR: 16, 
    SQL_NVARCHAR: 17, 
    SQL_DATETIME: 18, 
    SQL_SMALLDATETIME: 19, 
    SQL_SMALLMONEY: 20, 
    SQL_TEXT: 22, 
    SQL_IMAGE: 23, 
    SQL_NTEXT: 24, 
    SQL_UDT: 27, 
    XSD_KATMAI_TIMEOFFSET: 122, 
    XSD_KATMAI_DATETIMEOFFSET: 123, 
    XSD_KATMAI_DATEOFFSET: 124, 
    XSD_KATMAI_TIME: 125, 
    XSD_KATMAI_DATETIME: 126, 
    XSD_KATMAI_DATE: 127, 
    XSD_TIME: 129, 
    XSD_DATETIME: 130, 
    XSD_DATE: 131, 
    XSD_BINHEX: 132, 
    XSD_BASE64: 133, 
    XSD_BOOLEAN: 134, 
    XSD_DECIMAL: 135, 
    XSD_BYTE: 136, 
    XSD_UNSIGNEDSHORT: 137, 
    XSD_UNSIGNEDINT: 138, 
    XSD_UNSIGNEDLONG: 139, 
    XSD_QNAME: 140, 
    NmFlush: 233, 
    Extn: 234, 
    EndNest: 235, 
    Nest: 236, 
    XmlText: 237, 
    QName: 239, 
    Name: 240, 
    EndCData: 241, 
    CData: 242, 
    Comment: 243, 
    PI: 244, 
    EndAttrs: 245, 
    Attr: 246, 
    EndElem: 247, 
    Element: 248, 
    Subset: 249, 
    Public: 250, 
    System: 251, 
    DocType: 252, 
    Encoding: 253, 
    XmlDecl: 254, 
  }
);

/* struct System.Xml.BinXmlSqlDecimal */ 

(function BinXmlSqlDecimal$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.BinXmlSqlDecimal", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddULong", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "AdjustScale", 
      new JSIL.MethodSignature(null, [$.Int32, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertValid", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:false}, "ChFromDigit", 
      new JSIL.MethodSignature($.Char, [$.UInt32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CLenFromPrec", 
      new JSIL.MethodSignature($.Byte, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "DivByULong", 
      new JSIL.MethodSignature($.UInt32, [$.UInt32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FGt10_38", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.UInt32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "FZero", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsPositive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "MpDiv1", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.UInt32, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "MpNormalize", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$.UInt32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MultByULong", 
      JSIL.MethodSignature.Action($.UInt32)
    );

    $.ExternalMethod({Static:false, Public:false}, "StoreFromWorkingArray", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.UInt32]))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "TrimTrailingZeros", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "UIntFromByteArray", 
      new JSIL.MethodSignature($.UInt32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUI4", 
      new JSIL.MethodSignature(null, [$.UInt32, $asm00.TypeRef("System.IO.Stream")])
    );

    $.Field({Static:false, Public:false}, "m_bLen", $.Byte);

    $.Field({Static:false, Public:false}, "m_bPrec", $.Byte);

    $.Field({Static:false, Public:false}, "m_bScale", $.Byte);

    $.Field({Static:false, Public:false}, "m_bSign", $.Byte);

    $.Field({Static:false, Public:false}, "m_data1", $.UInt32);

    $.Field({Static:false, Public:false}, "m_data2", $.UInt32);

    $.Field({Static:false, Public:false}, "m_data3", $.UInt32);

    $.Field({Static:false, Public:false}, "m_data4", $.UInt32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "NUMERIC_MAX_PRECISION", $.Byte, 38);

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxPrecision", $.Byte, function ($pi) {
        return $pi.NUMERIC_MAX_PRECISION;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "MaxScale", $.Byte, function ($pi) {
        return $pi.NUMERIC_MAX_PRECISION;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_cNumeMax", $.Int32, 4);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_lInt32Base", $.Int64, 4294967296);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_ulInt32Base", $.UInt64, 4294967296);

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_ulInt32BaseForMod", $.UInt64, function ($pi) {
        return ($pi.x_ulInt32Base - ($asm00.System.Int64.FromNumber(1)).ToUInt64());
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_llMax", $.UInt64, 9223372036854775807);

    $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE", $.Double, function ($pi) {
        return $pi.x_lInt32Base.ToNumber(-1, false);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE2", $.Double, function ($pi) {
        return (+$pi.DUINT_BASE * +$pi.DUINT_BASE);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DUINT_BASE3", $.Double, function ($pi) {
        return (+$pi.DUINT_BASE2 * +$pi.DUINT_BASE);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "x_rgulShiftBase", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "rgCLenFromPrec", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Property({Static:false, Public:true }, "IsPositive", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.BinXmlSqlMoney */ 

(function BinXmlSqlMoney$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.BinXmlSqlMoney", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "data", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.BinXmlDateTime */ 

(function BinXmlDateTime$Members () {
  var $, $thisType;














































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.BinXmlDateTime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdDate", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdDateTime", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BreakDownXsdTime", 
      new JSIL.MethodSignature(null, [
          $.Int64, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFractions", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetFractions", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKatmaiDateTicks", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKatmaiTimeTicks", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKatmaiTimeZoneTicks", 
      new JSIL.MethodSignature($.Int64, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlDateTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlDateTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.UInt32])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlSmallDateTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:true }, "SqlSmallDateTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int16, $.UInt16])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write2Dig", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write3Dec", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Write4DigNeg", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteDate", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTime", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTimeFullPrecision", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Text.StringBuilder"), $.Int32, 
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTimeZone", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteTimeZone", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Text.StringBuilder"), $.Boolean, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdDateToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateOffsetToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateTimeToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiDateToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdKatmaiTimeToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdTimeToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:true }, "XsdTimeToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.Constant({Static:true , Public:false}, "MaxFractionDigits", $.Int32, 7);

    $.Field({Static:true , Public:false}, "KatmaiTimeScaleMultiplicator", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerMillisecond", $.Double, 0.3);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerSecond", $.Int32, 300);

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerMinute", $.Int32, function ($pi) {
        return Math.imul($pi.SQLTicksPerSecond, 60);
      });

    $.Field({Static:true , Public:true , ReadOnly:true }, "SQLTicksPerHour", $.Int32, function ($pi) {
        return Math.imul($pi.SQLTicksPerMinute, 60);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SQLTicksPerDay", $.Int32, function ($pi) {
        return Math.imul($pi.SQLTicksPerHour, 24);
      });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSqlBinaryReader */ 

(function XmlSqlBinaryReader$Members () {
  var $, $thisType;











































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XmlSqlBinaryReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.XmlReaderSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInitNamespace", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddQName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CDATAValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAllowContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckText", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeType"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTextIsWS", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValueTokenBounds", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Fill", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Fill_", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "FillAllowEOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishCDATA", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishContentAsXXX", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateImpliedXmlnsAttrs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTokenTypeMap", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributeText", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      new JSIL.MethodSignature($.String, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringAligned", 
      new JSIL.MethodSignature($.String, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUInt64", 
      new JSIL.MethodSignature($.UInt64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm07.TypeRef("System.Xml.BinXmlToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXsdKatmaiTokenLength", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.BinXmlToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GrowElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "HashCheckForDuplicateAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadCDATA", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadData", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadDoctype", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadEndNest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadNest", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadPI", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ImplReadXmlText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LocateAttribute", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LocateAttribute", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "NameFlush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NextToken2", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.BinXmlToken"), [$asm07.TypeRef("System.Xml.BinXmlToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB32", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB32_", 
      new JSIL.MethodSignature($.Int32, [$.Byte])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMB64", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "PeekNextToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PeekToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PopNamespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlSqlBinaryReader+NamespaceDecl"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PositionOnAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "PushNamespace", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadByte", 
      JSIL.MethodSignature.Return($.Byte)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsFloat", 
      JSIL.MethodSignature.Return($.Single)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDoc", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadInit", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNameRef", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadQNameRef", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadUShort", 
      JSIL.MethodSignature.Return($.UInt16)
    );

    $.ExternalMethod({Static:false, Public:false}, "RescanNextToken", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReScanOverValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.BinXmlToken"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanOverAnyValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeType"), [
          $asm07.TypeRef("System.Xml.BinXmlToken"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanOverValue", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeType"), [
          $asm07.TypeRef("System.Xml.BinXmlToken"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanText", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupContentAsXXX", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SimpleCheckForDuplicateAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipExtn", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.ExternalMethod({Static:false, Public:false}, "ThrowNotSupported", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.BinXmlToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowXmlException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFromTextReader", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateFromTextReader", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAs", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.BinXmlToken"), $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTimeOffset", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDateTimeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDecimal", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsObject", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.BinXmlToken"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.BinXmlToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValueAsULong", 
      JSIL.MethodSignature.Return($.UInt64)
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyVersion", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.BinXmlToken")])
    );

    $.ExternalMethod({Static:false, Public:false}, "XmlDeclValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdKatmaiTimeScaleToValueLength", 
      new JSIL.MethodSignature($.Int32, [$.Byte])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "TypeOfObject", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Object.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "TypeOfString", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.String.__Type__;
      });

    $.Field({Static:true , Public:false}, "TokenTypeMap", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), null);

    $.Field({Static:true , Public:false}, "XsdKatmaiTimeScaleToValueLengthMap", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:true , Public:false}, "ScanState2ReadState", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.ReadState")]));

    $.Field({Static:false, Public:false}, "inStrm", $asm00.TypeRef("System.IO.Stream"));

    $.Field({Static:false, Public:false}, "data", $jsilcore.TypeRef("System.Array", [$.Byte]));

    $.Field({Static:false, Public:false}, "pos", $.Int32);

    $.Field({Static:false, Public:false}, "mark", $.Int32);

    $.Field({Static:false, Public:false}, "end", $.Int32);

    $.Field({Static:false, Public:false}, "offset", $.Int64);

    $.Field({Static:false, Public:false}, "eof", $.Boolean);

    $.Field({Static:false, Public:false}, "sniffed", $.Boolean);

    $.Field({Static:false, Public:false}, "isEmpty", $.Boolean);

    $.Field({Static:false, Public:false}, "docState", $.Int32);

    $.Field({Static:false, Public:false}, "symbolTables", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+SymbolTables"));

    $.Field({Static:false, Public:false}, "xnt", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "xntFromSettings", $.Boolean);

    $.Field({Static:false, Public:false}, "xml", $.String);

    $.Field({Static:false, Public:false}, "xmlns", $.String);

    $.Field({Static:false, Public:false}, "nsxmlns", $.String);

    $.Field({Static:false, Public:false}, "baseUri", $.String);

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+ScanState"));

    $.Field({Static:false, Public:false}, "nodetype", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "token", $asm07.TypeRef("System.Xml.BinXmlToken"));

    $.Field({Static:false, Public:false}, "attrIndex", $.Int32);

    $.Field({Static:false, Public:false}, "qnameOther", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"));

    $.Field({Static:false, Public:false}, "qnameElement", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"));

    $.Field({Static:false, Public:false}, "parentNodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "elementStack", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlSqlBinaryReader+ElemInfo")]));

    $.Field({Static:false, Public:false}, "elemDepth", $.Int32);

    $.Field({Static:false, Public:false}, "attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlSqlBinaryReader+AttrInfo")]));

    $.Field({Static:false, Public:false}, "attrHashTbl", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "attrCount", $.Int32);

    $.Field({Static:false, Public:false}, "posAfterAttrs", $.Int32);

    $.Field({Static:false, Public:false}, "xmlspacePreserve", $.Boolean);

    $.Field({Static:false, Public:false}, "tokLen", $.Int32);

    $.Field({Static:false, Public:false}, "tokDataPos", $.Int32);

    $.Field({Static:false, Public:false}, "hasTypedValue", $.Boolean);

    $.Field({Static:false, Public:false}, "valueType", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "stringValue", $.String);

    $.Field({Static:false, Public:false}, "namespaces", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+NamespaceDecl")]));

    $.Field({Static:false, Public:false}, "prevNameInfo", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+NestedBinXml"));

    $.Field({Static:false, Public:false}, "textXmlReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "closeInput", $.Boolean);

    $.Field({Static:false, Public:false}, "checkCharacters", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreWhitespace", $.Boolean);

    $.Field({Static:false, Public:false}, "ignorePIs", $.Boolean);

    $.Field({Static:false, Public:false}, "ignoreComments", $.Boolean);

    $.Field({Static:false, Public:false}, "prohibitDtd", $.Boolean);

    $.Field({Static:false, Public:false}, "hasher", $asm07.TypeRef("System.Xml.SecureStringHasher"));

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "unicode", $asm00.TypeRef("System.Text.Encoding"));

    $.Field({Static:false, Public:false}, "version", $.Byte);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XmlSqlBinaryReader+ScanState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlSqlBinaryReader+ScanState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Doc: 0, 
    XmlText: 1, 
    Attr: 2, 
    AttrVal: 3, 
    AttrValPseudoValue: 4, 
    Init: 5, 
    Error: 6, 
    EOF: 7, 
    Closed: 8, 
  }
);

/* struct System.Xml.XmlSqlBinaryReader+QName */ 

(function QName$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlSqlBinaryReader+QName", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 3, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckPrefixNS", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNSHashCode", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.SecureStringHasher")])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchNs", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchPrefix", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Equality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Inequality", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:true }, "prefix", $.String);

    $.Field({Static:false, Public:true }, "localname", $.String);

    $.Field({Static:false, Public:true }, "namespaceUri", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlSqlBinaryReader+ElemInfo */ 

(function ElemInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlSqlBinaryReader+ElemInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSqlBinaryReader+NamespaceDecl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"), $.Boolean])
    );

    $.Field({Static:false, Public:true }, "$name", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"));

    $.Field({Static:false, Public:true }, "xmlLang", $.String);

    $.Field({Static:false, Public:true }, "xmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Field({Static:false, Public:true }, "xmlspacePreserve", $.Boolean);

    $.Field({Static:false, Public:true }, "nsdecls", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+NamespaceDecl"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlSqlBinaryReader+AttrInfo */ 

(function AttrInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlSqlBinaryReader+AttrInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "AdjustPosition", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalnameAndNamespaceUri", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetLocalnameAndNamespaceUriAndHash", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Xml.SecureStringHasher"), $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchHashNS", 
      new JSIL.MethodSignature($.Boolean, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "MatchNS", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"), $.Int32])
    );

    $.Field({Static:false, Public:true }, "$name", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName"));

    $.Field({Static:false, Public:true }, "val", $.String);

    $.Field({Static:false, Public:true }, "contentPos", $.Int32);

    $.Field({Static:false, Public:true }, "hashCode", $.Int32);

    $.Field({Static:false, Public:true }, "prevHash", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSqlBinaryReader+NamespaceDecl */ 

(function NamespaceDecl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlSqlBinaryReader+NamespaceDecl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Type, $.Type, 
          $.Int32, $.Boolean
        ])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String);

    $.Field({Static:false, Public:true }, "uri", $.String);

    $.Field({Static:false, Public:true }, "scopeLink", $.Type);

    $.Field({Static:false, Public:true }, "prevLink", $.Type);

    $.Field({Static:false, Public:true }, "scope", $.Int32);

    $.Field({Static:false, Public:true }, "implied", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.XmlSqlBinaryReader+SymbolTables */ 

(function SymbolTables$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.XmlSqlBinaryReader+SymbolTables", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "symtable", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:true }, "symCount", $.Int32);

    $.Field({Static:false, Public:true }, "qnametable", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlSqlBinaryReader+QName")]));

    $.Field({Static:false, Public:true }, "qnameCount", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XmlSqlBinaryReader+NestedBinXml */ 

(function NestedBinXml$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XmlSqlBinaryReader+NestedBinXml", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+SymbolTables"), $.Int32, 
          $.Type
        ])
    );

    $.Field({Static:false, Public:true }, "symbolTables", $asm07.TypeRef("System.Xml.XmlSqlBinaryReader+SymbolTables"));

    $.Field({Static:false, Public:true }, "docState", $.Int32);

    $.Field({Static:false, Public:true }, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("MS");
JSIL.DeclareNamespace("MS.Internal");
JSIL.DeclareNamespace("MS.Internal.Xml");
JSIL.DeclareNamespace("MS.Internal.Xml.Cache");
/* enum MS.Internal.Xml.Cache.TextBlockType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.Cache.TextBlockType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Text: 4, 
    SignificantWhitespace: 5, 
    Whitespace: 6, 
  }
);

/* class MS.Internal.Xml.Cache.XPathDocumentBuilder */ 

(function XPathDocumentBuilder$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlRawWriter"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathDocument"), $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathDocument+LoadFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSibling", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CachedTextNode", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ComputeLineInfo", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateIdTables", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Flush", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathDocument"), $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathDocument+LoadFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LinkSimilarElements", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewNamespaceNode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $.String, 
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "NewNode", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartElementContent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteCharEntity", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteChars", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteComment", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteDocType", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndAttribute", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteEndElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteEntityRef", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteFullEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteFullEndElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteNamespaceDeclaration", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteProcessingInstruction", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteRaw", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteString", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("MS.Internal.Xml.Cache.TextBlockType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteSurrogateCharEntity", 
      new JSIL.MethodSignature(null, [$.Char, $.Char])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "WriteWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlStandalone"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "WriteXmlDeclaration", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "ElementIndexSize", $.Int32, 64);

    $.Field({Static:false, Public:false}, "nodePageFact", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder+NodePageFactory"));

    $.Field({Static:false, Public:false}, "nmspPageFact", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder+NodePageFactory"));

    $.Field({Static:false, Public:false}, "textBldr", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBuilder+TextBlockBuilder"));

    $.Field({Static:false, Public:false}, "stkNmsp", $asm01.TypeRef("System.Collections.Generic.Stack`1", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")]));

    $.Field({Static:false, Public:false}, "infoTable", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"));

    $.Field({Static:false, Public:false}, "doc", $asm07.TypeRef("System.Xml.XPath.XPathDocument"));

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "atomizeNames", $.Boolean);

    $.Field({Static:false, Public:false}, "pageNmsp", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "idxNmsp", $.Int32);

    $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "idxParent", $.Int32);

    $.Field({Static:false, Public:false}, "pageSibling", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "idxSibling", $.Int32);

    $.Field({Static:false, Public:false}, "lineNumBase", $.Int32);

    $.Field({Static:false, Public:false}, "linePosBase", $.Int32);

    $.Field({Static:false, Public:false}, "idAttrName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "elemIdMap", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "elemNameIndex", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")]));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct MS.Internal.Xml.Cache.XPathDocumentBuilder+NodePageFactory */ 

(function NodePageFactory$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentBuilder+NodePageFactory", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "AllocateSlot", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextNodeIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextNodePage", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "page", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageInfo", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

    $.Field({Static:false, Public:false}, "pageSize", $.Int32);

    $.Property({Static:false, Public:true }, "NextNodePage", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "NextNodeIndex", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct MS.Internal.Xml.Cache.XPathDocumentBuilder+TextBlockBuilder */ 

(function TextBlockBuilder$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentBuilder+TextBlockBuilder", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_HasText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TextType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.Cache.TextBlockType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ReadText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "WriteTextBlock", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("MS.Internal.Xml.Cache.TextBlockType")])
    );

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "textType", $asm07.TypeRef("MS.Internal.Xml.Cache.TextBlockType"));

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "lineNum", $.Int32);

    $.Field({Static:false, Public:false}, "linePos", $.Int32);

    $.Property({Static:false, Public:true }, "TextType", $asm07.TypeRef("MS.Internal.Xml.Cache.TextBlockType"));

    $.Property({Static:false, Public:true }, "HasText", $.Boolean);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathDocumentBaseIterator */ 

(function XPathDocumentBaseIterator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentBaseIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "ctxt", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"));

    $.Field({Static:false, Public:false}, "pos", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathDocumentElementChildIterator */ 

(function XPathDocumentElementChildIterator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentElementChildIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathDocumentKindChildIterator */ 

(function XPathDocumentKindChildIterator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentKindChildIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "typ", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator */ 

(function XPathDocumentElementDescendantIterator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentElementDescendantIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "end", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"));

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator */ 

(function XPathDocumentKindDescendantIterator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentBaseIterator"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentKindDescendantIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "end", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathDocumentNavigator"));

    $.Field({Static:false, Public:false}, "typ", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathDocumentNavigator */ 

(function XPathDocumentNavigator$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), 
      Name: "MS.Internal.Xml.Cache.XPathDocumentNavigator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_UniqueId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFollowingEnd", 
      new JSIL.MethodSignature($.Int32, [
          $.Type, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetPositionHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimaryLocation", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSecondaryLocation", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsContentKindMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDescendant", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsElementMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsKindMatch", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectChildren", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SelectDescendants", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "pageCurrent", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "idxCurrent", $.Int32);

    $.Field({Static:false, Public:false}, "idxParent", $.Int32);

    $.Field({Static:false, Public:false}, "atomizedLocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "UniqueId", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 3 */ $asm07.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct MS.Internal.Xml.Cache.XPathNode */ 

(function XPathNode$Members () {
  var $, $thisType;









































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xml.Cache.XPathNode", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ElementMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AllowShortcutTag", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollapsedLinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathDocument"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasCollapsedText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasContentChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasElementChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasNamespaceDecls", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasSibling", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAttrNmsp", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsXmlNamespaceNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalNameHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParent", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetRoot", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSibling", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSimilarElement", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$.Type])])])
    );

    $.ExternalMethod({Static:false, Public:true }, "NameMatch", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasNamespaceDecls", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCollapsedLineInfoOffset", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetCollapsedValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetEmptyValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetLineInfoOffsets", 
      new JSIL.MethodSignature(null, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetParentProperties", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSibling", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetSimilarElement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoTable"), $jsilcore.TypeRef("System.Array", [$.Type]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "SetValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "NodeTypeMask", $.UInt32, 15);

    $.Constant({Static:true , Public:false}, "HasAttributeBit", $.UInt32, 16);

    $.Constant({Static:true , Public:false}, "HasContentChildBit", $.UInt32, 32);

    $.Constant({Static:true , Public:false}, "HasElementChildBit", $.UInt32, 64);

    $.Constant({Static:true , Public:false}, "HasCollapsedTextBit", $.UInt32, 128);

    $.Constant({Static:true , Public:false}, "AllowShortcutTagBit", $.UInt32, 256);

    $.Constant({Static:true , Public:false}, "HasNmspDeclsBit", $.UInt32, 512);

    $.Constant({Static:true , Public:false}, "LineNumberMask", $.UInt32, 16776192);

    $.Constant({Static:true , Public:false}, "LineNumberShift", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "CollapsedPositionShift", $.Int32, 24);

    $.Constant({Static:true , Public:true }, "MaxLineNumberOffset", $.Int32, 16383);

    $.Constant({Static:true , Public:true }, "MaxLinePositionOffset", $.Int32, 65535);

    $.Constant({Static:true , Public:true }, "MaxCollapsedPositionOffset", $.Int32, 255);

    $.Field({Static:false, Public:false}, "info", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"));

    $.Field({Static:false, Public:false}, "idxSibling", $.UInt16);

    $.Field({Static:false, Public:false}, "idxParent", $.UInt16);

    $.Field({Static:false, Public:false}, "idxSimilar", $.UInt16);

    $.Field({Static:false, Public:false}, "posOffset", $.UInt16);

    $.Field({Static:false, Public:false}, "props", $.UInt32);

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

    $.Property({Static:false, Public:true }, "Document", $asm07.TypeRef("System.Xml.XPath.XPathDocument"));

    $.Property({Static:false, Public:true }, "BaseUri", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "CollapsedLinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "PageInfo", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

    $.Property({Static:false, Public:true }, "IsXmlNamespaceNode", $.Boolean);

    $.Property({Static:false, Public:true }, "HasSibling", $.Boolean);

    $.Property({Static:false, Public:true }, "HasCollapsedText", $.Boolean);

    $.Property({Static:false, Public:true }, "HasAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "HasContentChild", $.Boolean);

    $.Property({Static:false, Public:true }, "HasElementChild", $.Boolean);

    $.Property({Static:false, Public:true }, "IsAttrNmsp", $.Boolean);

    $.Property({Static:false, Public:true }, "IsText", $.Boolean);

    $.Property({Static:false, Public:true }, "HasNamespaceDecls", $.Boolean);

    $.Property({Static:false, Public:true }, "AllowShortcutTag", $.Boolean);

    $.Property({Static:false, Public:true }, "LocalNameHashCode", $.Int32);

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct MS.Internal.Xml.Cache.XPathNodeRef */ 

(function XPathNodeRef$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xml.Cache.XPathNodeRef", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Index", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Null", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Page", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "page", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "idx", $.Int32);

    $.Property({Static:true , Public:true }, "Null", $.Type);

    $.Property({Static:false, Public:true }, "IsNull", $.Boolean);

    $.Property({Static:false, Public:true }, "Page", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "Index", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathNodeHelper */ 

(function XPathNodeHelper$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.Cache.XPathNodeHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetChild", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentChild", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentChild", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentSibling", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetContentSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementChild", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetElementSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFirstAttribute", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetFollowing", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetInScopeNamespaces", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLocalNamespaces", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetLocation", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNextAttribute", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetNonDescendant", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetParent", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPreviousContentSibling", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPreviousContentSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetPreviousElementSibling", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetTextFollowing", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathNodePageInfo */ 

(function XPathNodePageInfo$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.Cache.XPathNodePageInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextPage", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreviousPage", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NextPage", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NodeCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "pageNum", $.Int32);

    $.Field({Static:false, Public:false}, "nodeCount", $.Int32);

    $.Field({Static:false, Public:false}, "pagePrev", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageNext", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "PageNumber", $.Int32);

    $.Property({Static:false, Public:true }, "NodeCount", $.Int32);

    $.Property({Static:false, Public:true }, "PreviousPage", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "NextPage", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathNodeInfoAtom */ 

(function XPathNodeInfoAtom$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.Cache.XPathNodeInfoAtom", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 10, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm07.TypeRef("System.Xml.XPath.XPathDocument"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathDocument"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumberBase", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePositionBase", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalNameHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PageInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentPage", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SiblingPage", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SimilarElementPage", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Init", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm07.TypeRef("System.Xml.XPath.XPathDocument"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "localName", $.String);

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "baseUri", $.String);

    $.Field({Static:false, Public:false}, "pageParent", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageSibling", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageSimilar", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "doc", $asm07.TypeRef("System.Xml.XPath.XPathDocument"));

    $.Field({Static:false, Public:false}, "lineNumBase", $.Int32);

    $.Field({Static:false, Public:false}, "linePosBase", $.Int32);

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);

    $.Field({Static:false, Public:false}, "localNameHash", $.Int32);

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Field({Static:false, Public:false}, "pageInfo", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

    $.Property({Static:false, Public:true }, "PageInfo", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodePageInfo"));

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceUri", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "BaseUri", $.String);

    $.Property({Static:false, Public:true }, "SiblingPage", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "SimilarElementPage", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "ParentPage", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Property({Static:false, Public:true }, "Document", $asm07.TypeRef("System.Xml.XPath.XPathDocument"));

    $.Property({Static:false, Public:true }, "LineNumberBase", $.Int32);

    $.Property({Static:false, Public:true }, "LinePositionBase", $.Int32);

    $.Property({Static:false, Public:true }, "LocalNameHashCode", $.Int32);

    $.Property({Static:false, Public:true }, "Next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.Cache.XPathNodeInfoTable */ 

(function XPathNodeInfoTable$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.Cache.XPathNodeInfoTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Atomize", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"), [
          $.String, $.String, 
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $asm07.TypeRef("System.Xml.XPath.XPathDocument"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Constant({Static:true , Public:false}, "DefaultTableSize", $.Int32, 32);

    $.Field({Static:false, Public:false}, "hashTable", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom")]));

    $.Field({Static:false, Public:false}, "sizeTable", $.Int32);

    $.Field({Static:false, Public:false}, "infoCached", $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeInfoAtom"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XPath.XPathDocument */ 

(function XPathDocument$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathDocument", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlSpace")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlSpace")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdElement", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddNamespace", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CreateNavigator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCollapsedTextNode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootNode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXmlNamespaceNode", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromReader", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlSpace")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadFromWriter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlRawWriter"), [$asm07.TypeRef("System.Xml.XPath.XPathDocument+LoadFlags"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupIdElement", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])])
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupNamespaces", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")])])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCollapsedTextNode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetRootNode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetupReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlTextReaderImpl"), [$asm07.TypeRef("System.Xml.XmlTextReaderImpl")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetXmlNamespaceNode", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]), $.Int32])
    );

    $.Field({Static:false, Public:false}, "pageText", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageRoot", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "pageXmlNmsp", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNode")]));

    $.Field({Static:false, Public:false}, "idxText", $.Int32);

    $.Field({Static:false, Public:false}, "idxRoot", $.Int32);

    $.Field({Static:false, Public:false}, "idxXmlNmsp", $.Int32);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "hasLineInfo", $.Boolean);

    $.Field({Static:false, Public:false}, "mapNmsp", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef"), $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")]));

    $.Field({Static:false, Public:false}, "idValueMap", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$.String, $asm07.TypeRef("MS.Internal.Xml.Cache.XPathNodeRef")]));

    $.Property({Static:false, Public:false}, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "HasLineInfo", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.XPath.IXPathNavigable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XPath.XPathDocument+LoadFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XPathDocument+LoadFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    AtomizeNames: 1, 
    Fragment: 2, 
  }
);

/* class System.Xml.XPath.XPathException */ 

(function XPathException$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.SystemException"), 
      Name: "System.Xml.XPath.XPathException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $.String, 
          $asm00.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "res", $.String);

    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XPath.XmlSortOrder */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XmlSortOrder", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Ascending: 1, 
    Descending: 2, 
  }
);

/* enum System.Xml.XPath.XmlCaseOrder */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XmlCaseOrder", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    UpperFirst: 1, 
    LowerFirst: 2, 
  }
);

/* enum System.Xml.XPath.XmlDataType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XmlDataType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Text: 1, 
    Number: 2, 
  }
);

/* enum System.Xml.XPath.XPathResultType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XPathResultType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Number: 0, 
    String: 1, 
    Navigator: 1, 
    Boolean: 2, 
    NodeSet: 3, 
    Any: 5, 
    Error: 6, 
  }
);

/* class System.Xml.XPath.XPathExpression */ 

(function XPathExpression$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathExpression", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.Collections.IComparer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.XPath.XmlSortOrder"), 
          $asm07.TypeRef("System.Xml.XPath.XmlCaseOrder"), $.String, 
          $asm07.TypeRef("System.Xml.XPath.XmlDataType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "Compile", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compile", 
      new JSIL.MethodSignature($.Type, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Expression", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XPath.XPathNamespaceScope */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XPathNamespaceScope", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    All: 0, 
    ExcludeXml: 1, 
    Local: 2, 
  }
);

/* class System.Xml.XPath.XPathNavigatorKeyComparer */ 

(function XPathNavigatorKeyComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.XPath.XPathNavigatorKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XPath.XPathNavigatorReader */ 

(function XPathNavigatorReader$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.XPath.XPathNavigatorReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
          $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReading", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NamespaceManager", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UnderlyingObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElemNav", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetElemNav", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNamespaceByIndex", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.Int32, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttr", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SetEOF", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "GetNamespacesInScope");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupNamespace");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlNamespaceResolver.LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), "LookupPrefix");

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNodeType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeType"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.Constant({Static:true , Public:false}, "space", $.String, "space");

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "navToRead", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "state", $asm07.TypeRef("System.Xml.XPath.XPathNavigatorReader+State"));

    $.Field({Static:false, Public:false}, "nodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Field({Static:false, Public:false}, "attrCount", $.Int32);

    $.Field({Static:false, Public:false}, "readEntireDocument", $.Boolean);

    $.Field({Static:false, Public:false}, "lineInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Field({Static:false, Public:false}, "readBinaryHelper", $asm07.TypeRef("System.Xml.ReadContentAsBinaryHelper"));

    $.Field({Static:false, Public:false}, "savedState", $asm07.TypeRef("System.Xml.XPath.XPathNavigatorReader+State"));

    $.Field({Static:true , Public:false}, "convertFromXPathNodeType", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNodeType")]));

    $.Property({Static:false, Public:false}, "UnderlyingObject", $.Object);

    $.Property({Static:false, Public:false}, "IsReading", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XPath.XPathNavigatorReader+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XPathNavigatorReader+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Initial: 0, 
    Content: 1, 
    EndElement: 2, 
    Attribute: 3, 
    AttrVal: 4, 
    InReadBinary: 5, 
    EOF: 6, 
    Closed: 7, 
    Error: 8, 
  }
);

/* class System.Xml.XPath.XPathNavigatorReaderWithSI */ 

(function XPathNavigatorReaderWithSI$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNavigatorReader"), 
      Name: "System.Xml.XPath.XPathNavigatorReaderWithSI", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.IXmlLineInfo"), 
          $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.ImplementInterfaces(
      /* 2 */ $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.XPath.XmlEmptyNavigator */ 

(function XmlEmptyNavigator$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), 
      Name: "System.Xml.XPath.XmlEmptyNavigator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ComparePosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasChildren", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Singleton", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsSamePosition", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveTo", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirst", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToId", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextNamespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToParent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPrevious", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToRoot", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:false}, "singleton", $.Type);

    $.Property({Static:true , Public:true }, "Singleton", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasChildren", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.XPath.XPathNodeType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XPath.XPathNodeType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Root: 0, 
    Element: 1, 
    Attribute: 2, 
    Namespace: 3, 
    Text: 4, 
    SignificantWhitespace: 5, 
    Whitespace: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    All: 9, 
  }
);

JSIL.DeclareNamespace("MS.Internal.Xml.XPath");
/* class MS.Internal.Xml.XPath.ResetableIterator */ 

(function ResetableIterator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), 
      Name: "MS.Internal.Xml.XPath.ResetableIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToPosition", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ResetCount", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Query */ 

(function Query$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), 
      Name: "MS.Internal.Xml.XPath.Query", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AssertDOD", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]), $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), 
          $.Int32
        ])
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "AssertQuery", 
      JSIL.MethodSignature.Action($.Type)
    )
      .Attribute($asm00.TypeRef("System.Diagnostics.ConditionalAttribute"), function () { return ["DEBUG"]; });

    $.ExternalMethod({Static:true , Public:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:true , Public:true }, "CompareNodes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNodeOrder"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XsltDefaultPriority", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMedian", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXPathType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathResultType"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]), $asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Constant({Static:true , Public:true }, "XPathResultType_Navigator", $asm07.TypeRef("System.Xml.XPath.XPathResultType"), 4);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "XsltDefaultPriority", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["{ToString()}"]; });

})();

/* class MS.Internal.Xml.XPath.ContextQuery */ 

(function ContextQuery$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.ContextQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "contextNode", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.AbsoluteQuery */ 

(function AbsoluteQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ContextQuery"), 
      Name: "MS.Internal.Xml.XPath.AbsoluteQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.AstNode */ 

(function AstNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.AstNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.AstNode+AstType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.AstNode+AstType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Axis: 0, 
    Operator: 1, 
    Filter: 2, 
    ConstantOperand: 3, 
    Function: 4, 
    Group: 5, 
    Root: 6, 
    Variable: 7, 
    Error: 8, 
  }
);

/* class MS.Internal.Xml.XPath.BaseAxisQuery */ 

(function BaseAxisQuery$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.BaseAxisQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTest", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeTest", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XsltDefaultPriority", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "matches", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "qyInput", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "nameTest", $.Boolean);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "nsUri", $.String);

    $.Field({Static:false, Public:false}, "typeTest", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Field({Static:false, Public:false}, "currentNode", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "NameTest", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeTest", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "XsltDefaultPriority", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.AttributeQuery */ 

(function AttributeQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.AttributeQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "onAttribute", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Axis */ 

(function Axis$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Axis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"), $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"), $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AbbrAxis", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Input", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOfAxis", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Urn", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Input", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Urn", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "axisType", $asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"));

    $.Field({Static:false, Public:false}, "input", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "nodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Field({Static:false, Public:false}, "abbrAxis", $.Boolean);

    $.Field({Static:false, Public:false}, "urn", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "Input", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Property({Static:false, Public:true }, "TypeOfAxis", $asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"));

    $.Property({Static:false, Public:true }, "AbbrAxis", $.Boolean);

    $.Property({Static:false, Public:true }, "Urn", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.Axis+AxisType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.Axis+AxisType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Ancestor: 0, 
    AncestorOrSelf: 1, 
    Attribute: 2, 
    Child: 3, 
    Descendant: 4, 
    DescendantOrSelf: 5, 
    Following: 6, 
    FollowingSibling: 7, 
    Namespace: 8, 
    Parent: 9, 
    Preceding: 10, 
    PrecedingSibling: 11, 
    Self: 12, 
    None: 13, 
  }
);

/* class MS.Internal.Xml.XPath.ValueQuery */ 

(function ValueQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.ValueQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.BooleanExpr */ 

(function BooleanExpr$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.BooleanExpr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "opnd1", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "opnd2", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "isOr", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.BooleanFunctions */ 

(function BooleanFunctions$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.BooleanFunctions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Lang", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Not", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.ExternalMethod({Static:true , Public:false}, "toBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "toBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "toBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.Field({Static:false, Public:false}, "arg", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "funcType", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.CacheAxisQuery */ 

(function CacheAxisQuery$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.CacheAxisQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "outputBuffer", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.ChildrenQuery */ 

(function ChildrenQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.ChildrenQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "iterator", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.CacheChildrenQuery */ 

(function CacheChildrenQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ChildrenQuery"), 
      Name: "MS.Internal.Xml.XPath.CacheChildrenQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DecideNextNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextInput", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nextInput", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "elementStk", $asm07.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]));

    $.Field({Static:false, Public:false}, "positionStk", $asm07.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$.Int32]));

    $.Field({Static:false, Public:false}, "needInput", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.CacheOutputQuery */ 

(function CacheOutputQuery$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.CacheOutputQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "input", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "outputBuffer", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.ClonableStack`1 */ 

(function ClonableStack$b1$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.Generic.List`1", [new JSIL.GenericParameter("T", "MS.Internal.Xml.XPath.ClonableStack`1")]), 
      Name: "MS.Internal.Xml.XPath.ClonableStack`1", 
      IsPublic: false, 
      IsReferenceType: true, 
      GenericParameters: ["T"], 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$.GenericParameter("T")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$.GenericParameter("T")]), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Peek", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Pop", 
      new JSIL.MethodSignature($.GenericParameter("T"), null)
    );

    $.ExternalMethod({Static:false, Public:true }, "Push", 
      new JSIL.MethodSignature(null, [$.GenericParameter("T")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.CompiledXpathExpr */ 

(function CompiledXpathExpr$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathExpression"), 
      Name: "MS.Internal.Xml.XPath.CompiledXpathExpr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.Collections.IComparer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "AddSort", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.XPath.XmlSortOrder"), 
          $asm07.TypeRef("System.Xml.XPath.XmlCaseOrder"), $.String, 
          $asm07.TypeRef("System.Xml.XPath.XmlDataType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CheckErrors", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathExpression"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Expression", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QueryTree", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlNamespaceResolver"))
    );

    $.Field({Static:false, Public:false}, "query", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "expr", $.String);

    $.Field({Static:false, Public:false}, "needContext", $.Boolean);

    $.Property({Static:false, Public:false}, "QueryTree", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Property({Static:false, Public:true , Virtual:true }, "Expression", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Xsl");
/* class System.Xml.Xsl.XsltContext */ 

(function XsltContext$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
      Name: "System.Xml.Xsl.XsltContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.NameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareDocument", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Whitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveFunction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Xsl.IXsltContextFunction"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Xsl.IXsltContextVariable"), [$.String, $.String])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Whitespace", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.CompiledXpathExpr+UndefinedXsltContext */ 

(function UndefinedXsltContext$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Xsl.XsltContext"), 
      Name: "MS.Internal.Xml.XPath.CompiledXpathExpr+UndefinedXsltContext", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNamespaceManager"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareDocument", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_DefaultNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Whitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveFunction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Xsl.IXsltContextFunction"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Xsl.IXsltContextVariable"), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "nsManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:true , Virtual:true }, "DefaultNamespace", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Whitespace", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathComparerHelper */ 

(function XPathComparerHelper$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.XPathComparerHelper", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XmlSortOrder"), $asm07.TypeRef("System.Xml.XPath.XmlCaseOrder"), 
          $.String, $asm07.TypeRef("System.Xml.XPath.XmlDataType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.Field({Static:false, Public:false}, "order", $asm07.TypeRef("System.Xml.XPath.XmlSortOrder"));

    $.Field({Static:false, Public:false}, "caseOrder", $asm07.TypeRef("System.Xml.XPath.XmlCaseOrder"));

    $.Field({Static:false, Public:false}, "cinfo", $asm00.TypeRef("System.Globalization.CultureInfo"));

    $.Field({Static:false, Public:false}, "dataType", $asm07.TypeRef("System.Xml.XPath.XmlDataType"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.DescendantBaseQuery */ 

(function DescendantBaseQuery$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.DescendantBaseQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean);

    $.Field({Static:false, Public:false}, "abbrAxis", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.DescendantQuery */ 

(function DescendantQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.DescendantBaseQuery"), 
      Name: "MS.Internal.Xml.XPath.DescendantQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nodeIterator", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.DescendantOverDescendantQuery */ 

(function DescendantOverDescendantQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.DescendantBaseQuery"), 
      Name: "MS.Internal.Xml.XPath.DescendantOverDescendantQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.Boolean, 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToFirstChild", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveUpUntillNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "level", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.DocumentOrderQuery */ 

(function DocumentOrderQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), 
      Name: "MS.Internal.Xml.XPath.DocumentOrderQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.EmptyQuery */ 

(function EmptyQuery$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.EmptyQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.ExtensionQuery */ 

(function ExtensionQuery$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.ExtensionQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessResult", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "xsltContext", $asm07.TypeRef("System.Xml.Xsl.XsltContext"));

    $.Field({Static:false, Public:false}, "queryIterator", $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false}, "QName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.FunctionQuery */ 

(function FunctionQuery$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ExtensionQuery"), 
      Name: "MS.Internal.Xml.XPath.FunctionQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "args", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")]));

    $.Field({Static:false, Public:false}, "$function", $asm07.TypeRef("System.Xml.Xsl.IXsltContextFunction"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Filter */ 

(function Filter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Filter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Condition", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Input", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Field({Static:false, Public:false}, "input", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Field({Static:false, Public:false}, "condition", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "Input", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true }, "Condition", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.FilterQuery */ 

(function FilterQuery$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.FilterQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluatePredicate", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Condition", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "cond", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "noPosition", $.Boolean);

    $.Property({Static:false, Public:true }, "Condition", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.FollowingQuery */ 

(function FollowingQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.FollowingQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "input", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "iterator", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.FollSiblingQuery */ 

(function FollSiblingQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.FollSiblingQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "FetchInput", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Visited", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.Field({Static:false, Public:false}, "elementStk", $asm07.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]));

    $.Field({Static:false, Public:false}, "parentStk", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]));

    $.Field({Static:false, Public:false}, "nextInput", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.ForwardPositionQuery */ 

(function ForwardPositionQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), 
      Name: "MS.Internal.Xml.XPath.ForwardPositionQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Function */ 

(function Function$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Function", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $asm00.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm00.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArgumentList", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeOfFunction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"))
    );

    $.Field({Static:false, Public:false}, "functionType", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Field({Static:false, Public:false}, "argumentList", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:true , Public:false}, "ReturnTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "TypeOfFunction", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Property({Static:false, Public:true }, "ArgumentList", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.Function+FunctionType */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.Function+FunctionType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    FuncLast: 0, 
    FuncPosition: 1, 
    FuncCount: 2, 
    FuncID: 3, 
    FuncLocalName: 4, 
    FuncNameSpaceUri: 5, 
    FuncName: 6, 
    FuncString: 7, 
    FuncBoolean: 8, 
    FuncNumber: 9, 
    FuncTrue: 10, 
    FuncFalse: 11, 
    FuncNot: 12, 
    FuncConcat: 13, 
    FuncStartsWith: 14, 
    FuncContains: 15, 
    FuncSubstringBefore: 16, 
    FuncSubstringAfter: 17, 
    FuncSubstring: 18, 
    FuncStringLength: 19, 
    FuncNormalize: 20, 
    FuncTranslate: 21, 
    FuncLang: 22, 
    FuncSum: 23, 
    FuncFloor: 24, 
    FuncCeiling: 25, 
    FuncRound: 26, 
    FuncUserDefined: 27, 
  }
);

/* class MS.Internal.Xml.XPath.Group */ 

(function Group$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Group", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GroupNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Field({Static:false, Public:false}, "groupNode", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "GroupNode", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.GroupQuery */ 

(function GroupQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.GroupQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.IDQuery */ 

(function IDQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), 
      Name: "MS.Internal.Xml.XPath.IDQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessIds", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.IteratorFilter */ 

(function IteratorFilter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), 
      Name: "MS.Internal.Xml.XPath.IteratorFilter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "innerIterator", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.QueryProps */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.QueryProps", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Position: 1, 
    Count: 2, 
    Cached: 4, 
    Reverse: 8, 
    Merge: 16, 
  }
);

/* class MS.Internal.Xml.XPath.LogicalExpr */ 

(function LogicalExpr$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.LogicalExpr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolBoolO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolNumberE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolNumberO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpBoolStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpNumberNumberO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryBoolO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryQueryE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryQueryO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpQueryStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfBoolE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfBoolO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfQueryE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfQueryO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfRtfE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfRtfO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpRtfStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringNumber", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringStringE", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "cmpStringStringO", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Rtf", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "op", $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"));

    $.Field({Static:false, Public:false}, "opnd1", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "opnd2", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "invertOp", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CompXsltE", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.XPath.LogicalExpr+cmpXslt")])]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "CompXsltO", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.XPath.LogicalExpr+cmpXslt")])]));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate MS.Internal.Xml.XPath.LogicalExpr+cmpXslt */ 

JSIL.MakeDelegate("MS.Internal.Xml.XPath.LogicalExpr+cmpXslt", false, [], 
  new JSIL.MethodSignature($asm00.TypeRef("System.Boolean"), [
      $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $asm00.TypeRef("System.Object"), 
      $asm00.TypeRef("System.Object")
    ]));

/* struct MS.Internal.Xml.XPath.LogicalExpr+NodeSet */ 

(function NodeSet$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "MS.Internal.Xml.XPath.LogicalExpr+NodeSet", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 1, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "opnd", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true }, "Value", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.MergeFilterQuery */ 

(function MergeFilterQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheOutputQuery"), 
      Name: "MS.Internal.Xml.XPath.MergeFilterQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "child", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.NamespaceQuery */ 

(function NamespaceQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.NamespaceQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "matches", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "onNamespace", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.NodeFunctions */ 

(function NodeFunctions$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.NodeFunctions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "EvaluateArg", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "arg", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "funcType", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Field({Static:false, Public:false}, "xsltContext", $asm07.TypeRef("System.Xml.Xsl.XsltContext"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.NumberFunctions */ 

(function NumberFunctions$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.NumberFunctions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Ceiling", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Floor", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Number", 
      new JSIL.MethodSignature($.Double, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "Number", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Number", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Round", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Sum", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.Field({Static:false, Public:false}, "arg", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "ftype", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.NumericExpr */ 

(function NumericExpr$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.NumericExpr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetValue", 
      new JSIL.MethodSignature($.Double, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $.Double, 
          $.Double
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "op", $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"));

    $.Field({Static:false, Public:false}, "opnd1", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "opnd2", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Operand */ 

(function Operand$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Operand", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperandValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Field({Static:false, Public:false}, "val", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "OperandValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.OperandQuery */ 

(function OperandQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.OperandQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "val", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Operator */ 

(function Operator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Operator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"), $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
          $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Operand2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OperatorType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Field({Static:false, Public:false}, "opType", $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"));

    $.Field({Static:false, Public:false}, "opnd1", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Field({Static:false, Public:false}, "opnd2", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "OperatorType", $asm07.TypeRef("MS.Internal.Xml.XPath.Operator+Op"));

    $.Property({Static:false, Public:true }, "Operand1", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));

    $.Property({Static:false, Public:true }, "Operand2", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.Operator+Op */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.Operator+Op", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    LT: 0, 
    GT: 1, 
    LE: 2, 
    GE: 3, 
    EQ: 4, 
    NE: 5, 
    OR: 6, 
    AND: 7, 
    PLUS: 8, 
    MINUS: 9, 
    MUL: 10, 
    MOD: 11, 
    DIV: 12, 
    UNION: 13, 
    INVALID: 14, 
  }
);

/* class MS.Internal.Xml.XPath.ParentQuery */ 

(function ParentQuery$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.ParentQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.PrecedingQuery */ 

(function PrecedingQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.PrecedingQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "workIterator", $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"));

    $.Field({Static:false, Public:false}, "ancestorStk", $asm07.TypeRef("MS.Internal.Xml.XPath.ClonableStack`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")]));

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.PreSiblingQuery */ 

(function PreSiblingQuery$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.PreSiblingQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:false}, "NotVisited", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.QueryBuilder */ 

(function QueryBuilder$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.QueryBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Build", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Build", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Build", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPatternQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildPatternQuery", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanBeNumber", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessArguments", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")]), [$asm00.TypeRef("System.Collections.ArrayList"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Props")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAxis", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Axis"), $asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Flags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Props")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessFilter", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Filter"), $asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Flags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Props")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessFunction", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm07.TypeRef("MS.Internal.Xml.XPath.Function"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Props")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNode", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [
          $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Flags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Props")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessOperator", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm07.TypeRef("MS.Internal.Xml.XPath.Operator"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("MS.Internal.Xml.XPath.QueryBuilder+Props")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessVariable", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$asm07.TypeRef("MS.Internal.Xml.XPath.Variable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "query", $.String);

    $.Field({Static:false, Public:false}, "allowVar", $.Boolean);

    $.Field({Static:false, Public:false}, "allowKey", $.Boolean);

    $.Field({Static:false, Public:false}, "allowCurrent", $.Boolean);

    $.Field({Static:false, Public:false}, "needContext", $.Boolean);

    $.Field({Static:false, Public:false}, "firstInput", $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.QueryBuilder+Flags */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.QueryBuilder+Flags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    SmartDesc: 1, 
    PosFilter: 2, 
    Filter: 4, 
  }
);

/* enum MS.Internal.Xml.XPath.QueryBuilder+Props */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.QueryBuilder+Props", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    PosFilter: 1, 
    HasPosition: 2, 
    HasLast: 4, 
    NonFlat: 8, 
  }
);

/* class MS.Internal.Xml.XPath.UnionExpr */ 

(function UnionExpr$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.UnionExpr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MatchNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAfterPosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessBeforePosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSamePosition", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "qy1", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "qy2", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "advance1", $.Boolean);

    $.Field({Static:false, Public:false}, "advance2", $.Boolean);

    $.Field({Static:false, Public:false}, "currentNode", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "nextNode", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.ReversePositionQuery */ 

(function ReversePositionQuery$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ForwardPositionQuery"), 
      Name: "MS.Internal.Xml.XPath.ReversePositionQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Root */ 

(function Root$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Root", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.SortQuery */ 

(function SortQuery$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), 
      Name: "MS.Internal.Xml.XPath.SortQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Query"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSort", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $asm00.TypeRef("System.Collections.IComparer")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildResultsList", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "results", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.SortKey")]));

    $.Field({Static:false, Public:false}, "comparer", $asm07.TypeRef("MS.Internal.Xml.XPath.XPathSortComparer"));

    $.Field({Static:false, Public:false}, "qyInput", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.SortKey */ 

(function SortKey$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.SortKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Node", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumKeys", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OriginalPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Field({Static:false, Public:false}, "numKeys", $.Int32);

    $.Field({Static:false, Public:false}, "keys", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "originalPosition", $.Int32);

    $.Field({Static:false, Public:false}, "node", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true }, "Item", $.Object);

    $.Property({Static:false, Public:true }, "NumKeys", $.Int32);

    $.Property({Static:false, Public:true }, "OriginalPosition", $.Int32);

    $.Property({Static:false, Public:true }, "Node", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class MS.Internal.Xml.XPath.XPathSortComparer */ 

(function XPathSortComparer$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.XPathSortComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSort", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $asm00.TypeRef("System.Collections.IComparer")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Expression", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Query"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumSorts", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IComparer$lMS.Internal.Xml.XPath.SortKey$g.Compare", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("MS.Internal.Xml.XPath.SortKey"), $asm07.TypeRef("MS.Internal.Xml.XPath.SortKey")])
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.SortKey")]), "Compare");

    $.Constant({Static:true , Public:false}, "minSize", $.Int32, 3);

    $.Field({Static:false, Public:false}, "expressions", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")]));

    $.Field({Static:false, Public:false}, "comparers", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Collections.IComparer")]));

    $.Field({Static:false, Public:false}, "numSorts", $.Int32);

    $.Property({Static:false, Public:true }, "NumSorts", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IComparer`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.SortKey")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.StringFunctions */ 

(function StringFunctions$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ValueQuery"), 
      Name: "MS.Internal.Xml.XPath.StringFunctions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Concat", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Normalize", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.ExternalMethod({Static:false, Public:false}, "StartsWith", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringLength", 
      new JSIL.MethodSignature($.Double, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Substring", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubstringAfter", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SubstringBefore", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:true , Public:false}, "toString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:true , Public:false}, "toString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "toString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Translate", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.Field({Static:false, Public:false}, "funcType", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Field({Static:false, Public:false}, "argList", $asm00.TypeRef("System.Collections.Generic.IList`1", [$asm07.TypeRef("MS.Internal.Xml.XPath.Query")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "compareInfo", $asm00.TypeRef("System.Globalization.CompareInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.Variable */ 

(function Variable$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), 
      Name: "MS.Internal.Xml.XPath.Variable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Localname", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReturnType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"))
    );

    $.Field({Static:false, Public:false}, "localname", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Type", $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode+AstType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReturnType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.Property({Static:false, Public:true }, "Localname", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.VariableQuery */ 

(function VariableQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ExtensionQuery"), 
      Name: "MS.Internal.Xml.XPath.VariableQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_StaticType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "SetXsltContext", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltContext"))
    );

    $.Field({Static:false, Public:false}, "variable", $asm07.TypeRef("System.Xml.Xsl.IXsltContextVariable"));

    $.Property({Static:false, Public:true , Virtual:true }, "StaticType", $asm07.TypeRef("System.Xml.XPath.XPathResultType"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathAxisIterator */ 

(function XPathAxisIterator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathAxisIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Matches", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.XPath.XPathNodeType"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "uri", $.String);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean);

    $.Field({Static:false, Public:false}, "first", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "Matches", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathAncestorIterator */ 

(function XPathAncestorIterator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathAncestorIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathAncestorQuery */ 

(function XPathAncestorQuery$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.CacheAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.XPathAncestorQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Evaluate", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XPath.XPathNodeIterator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "PrintQuery", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.Field({Static:false, Public:false}, "matchSelf", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Properties", $asm07.TypeRef("MS.Internal.Xml.XPath.QueryProps"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathArrayIterator */ 

(function XPathArrayIterator$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathArrayIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AsList", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IList"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_debuggerDisplayProxy", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "list", $asm00.TypeRef("System.Collections.IList"));

    $.Field({Static:false, Public:false}, "index", $.Int32);

    $.Property({Static:false, Public:true }, "AsList", $asm00.TypeRef("System.Collections.IList"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "debuggerDisplayProxy", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Diagnostics.DebuggerDisplayAttribute"), function () { return ["Position={CurrentPosition}, Current={debuggerDisplayProxy, nq}"]; });

})();

/* class MS.Internal.Xml.XPath.XPathChildIterator */ 

(function XPathChildIterator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathChildIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathDescendantIterator */ 

(function XPathDescendantIterator$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.XPathAxisIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathDescendantIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XPath.XPathNodeType"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "level", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathEmptyIterator */ 

(function XPathEmptyIterator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathEmptyIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:true , Public:true }, "Instance", $.Type);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathMultyIterator */ 

(function XPathMultyIterator$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathMultyIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Advance", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SiftItem", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.Field({Static:false, Public:false}, "arr", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator")]));

    $.Field({Static:false, Public:false}, "firstNotEmpty", $.Int32);

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathParser */ 

(function XPathParser$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.XPathParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNodeSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathResultType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckToken", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner+LexKind"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAxesTable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFunctionTable", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAxis", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"), [$asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNodeType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPrimaryExpr", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsStep", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner+LexKind")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextLex", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAdditiveExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAndExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEqualityExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExpresion", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFilterExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseIdKeyPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLocationPath", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseLocationPathPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMethod", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseMultiplicativeExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNodeTest", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [
          $asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), $asm07.TypeRef("MS.Internal.Xml.XPath.Axis+AxisType"), 
          $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseOrExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePathExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePattern", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePredicate", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePrimaryExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRelationalExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRelativeLocationPath", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseRelativePathPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStep", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseStepPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnaryExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnionExpr", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$asm07.TypeRef("MS.Internal.Xml.XPath.AstNode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseXPathExpresion", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "ParseXPathPattern", 
      new JSIL.MethodSignature($asm07.TypeRef("MS.Internal.Xml.XPath.AstNode"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "PassToken", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner+LexKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TestOp", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.Field({Static:false, Public:false}, "scanner", $asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray1", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Xml.XPath.XPathResultType, 0);
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray2", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray3", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray4", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray5", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray6", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray7", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray8", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "temparray9", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Field({Static:true , Public:false}, "functionTable", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "AxesTable", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathParser+ParamInfo */ 

(function ParamInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.XPathParser+ParamInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"), $.Int32, 
          $.Int32, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ArgTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Maxargs", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minargs", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "ftype", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Field({Static:false, Public:false}, "minargs", $.Int32);

    $.Field({Static:false, Public:false}, "maxargs", $.Int32);

    $.Field({Static:false, Public:false}, "argTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));

    $.Property({Static:false, Public:true }, "FType", $asm07.TypeRef("MS.Internal.Xml.XPath.Function+FunctionType"));

    $.Property({Static:false, Public:true }, "Minargs", $.Int32);

    $.Property({Static:false, Public:true }, "Maxargs", $.Int32);

    $.Property({Static:false, Public:true }, "ArgTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathScanner */ 

(function XPathScanner$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "MS.Internal.Xml.XPath.XPathScanner", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CanBeFunction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurerntChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner+LexKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NumberValue", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceText", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_StringValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "NextChar", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "NextLex", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanFraction", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNumber", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SkipSpace", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "xpathExpr", $.String);

    $.Field({Static:false, Public:false}, "xpathExprIndex", $.Int32);

    $.Field({Static:false, Public:false}, "kind", $asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner+LexKind"));

    $.Field({Static:false, Public:false}, "currentChar", $.Char);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "stringValue", $.String);

    $.Field({Static:false, Public:false}, "numberValue", $.Double);

    $.Field({Static:false, Public:false}, "canBeFunction", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Property({Static:false, Public:true }, "SourceText", $.String);

    $.Property({Static:false, Public:false}, "CurerntChar", $.Char);

    $.Property({Static:false, Public:true }, "Kind", $asm07.TypeRef("MS.Internal.Xml.XPath.XPathScanner+LexKind"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "StringValue", $.String);

    $.Property({Static:false, Public:true }, "NumberValue", $.Double);

    $.Property({Static:false, Public:true }, "CanBeFunction", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum MS.Internal.Xml.XPath.XPathScanner+LexKind */ 

JSIL.MakeEnum(
  {
    FullName: "MS.Internal.Xml.XPath.XPathScanner+LexKind", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Bang: 33, 
    Quote: 34, 
    Dollar: 36, 
    Apos: 39, 
    LParens: 40, 
    RParens: 41, 
    Star: 42, 
    Plus: 43, 
    Comma: 44, 
    Minus: 45, 
    Dot: 46, 
    Slash: 47, 
    Lt: 60, 
    Eq: 61, 
    Gt: 62, 
    At: 64, 
    And: 65, 
    DotDot: 68, 
    Eof: 69, 
    Ge: 71, 
    Le: 76, 
    Ne: 78, 
    Or: 79, 
    SlashSlash: 83, 
    LBracket: 91, 
    RBracket: 93, 
    Axe: 97, 
    Number: 100, 
    Name: 110, 
    String: 115, 
    Union: 124, 
  }
);

/* class MS.Internal.Xml.XPath.XPathSelectionIterator */ 

(function XPathSelectionIterator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathSelectionIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("MS.Internal.Xml.XPath.Query")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "query", $asm07.TypeRef("MS.Internal.Xml.XPath.Query"));

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathSelfQuery */ 

(function XPathSelfQuery$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.BaseAxisQuery"), 
      Name: "MS.Internal.Xml.XPath.XPathSelfQuery", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("MS.Internal.Xml.XPath.Query"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.XPath.XPathNodeType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Advance", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class MS.Internal.Xml.XPath.XPathSingletonIterator */ 

(function XPathSingletonIterator$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.ResetableIterator"), 
      Name: "MS.Internal.Xml.XPath.XPathSingletonIterator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNodeIterator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CurrentPosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nav", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Field({Static:false, Public:false}, "position", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.XPath.XPathNavigator"));

    $.Property({Static:false, Public:true , Virtual:true }, "CurrentPosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Xsl.XslCompiledTransform */ 

(function XslCompiledTransform$Members () {
  var $, $thisType;










































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Xsl.XslCompiledTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCommand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckInput", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileQilToMsil", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltSettings"))
    );

    $.ExternalMethod({Static:true , Public:true }, "CompileToType", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"), [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver"), $.Boolean, 
          $asm00.TypeRef("System.Reflection.Emit.TypeBuilder"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileXsltToQil", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReader", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Errors", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OutputSettings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriterSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TemporaryFiles", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.TempFileCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFirstError", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.CompilerError"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.IXPathNavigable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.MethodInfo"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadInternal", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.Compiler.CompilerResults"), [
          $.Object, $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintQil", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.XmlWriter"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "TestCompile", 
      new JSIL.MethodSignature($asm0A.TypeRef("System.Xml.Xsl.Qil.QilExpression"), [
          $.Object, $asm07.TypeRef("System.Xml.Xsl.XsltSettings"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TestGenerate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlWriter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.Constant({Static:true , Public:false}, "Version", $.String, "2.0.0.0");

    $.Field({Static:true , Public:false, ReadOnly:true }, "MemberAccessPermissionSet", $asm00.TypeRef("System.Security.PermissionSet"));

    $.Field({Static:false, Public:false}, "enableDebug", $.Boolean);

    $.Field({Static:false, Public:false}, "compilerResults", $asm01.TypeRef("System.CodeDom.Compiler.CompilerResults"));

    $.Field({Static:false, Public:false}, "outputSettings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Field({Static:false, Public:false}, "qil", $asm0A.TypeRef("System.Xml.Xsl.Qil.QilExpression"));

    $.Field({Static:false, Public:false}, "command", $asm0A.TypeRef("System.Xml.Xsl.XmlILCommand"));

    $.Field({Static:true , Public:false}, "GeneratedCodeCtor", $asm00.TypeRef("System.Reflection.ConstructorInfo"));

    $.Property({Static:false, Public:false}, "Errors", $asm01.TypeRef("System.CodeDom.Compiler.CompilerErrorCollection"));

    $.Property({Static:false, Public:true }, "OutputSettings", $asm07.TypeRef("System.Xml.XmlWriterSettings"));

    $.Property({Static:false, Public:true }, "TemporaryFiles", $asm01.TypeRef("System.CodeDom.Compiler.TempFileCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Xsl.XsltMessageEncounteredEventArgs */ 

(function XsltMessageEncounteredEventArgs$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.Xsl.XsltMessageEncounteredEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Xsl.XsltMessageEncounteredEventHandler */ 

JSIL.MakeDelegate("System.Xml.Xsl.XsltMessageEncounteredEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventArgs")]));

/* class System.Xml.Xsl.XsltArgumentList */ 

(function XsltArgumentList$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Xsl.XsltArgumentList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "add_XsltMessageEncountered", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddExtensionObject", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddParam", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckArgumentNull", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExtensionObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParam", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_XsltMessageEncountered", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveExtensionObject", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveParam", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "parameters", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "extensions", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "xsltMessageEncountered", $asm07.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler"));

    $.Event({Static:false, Public:true }, "XsltMessageEncountered", $asm07.TypeRef("System.Xml.Xsl.XsltMessageEncounteredEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.Xsl.IXsltContextFunction */ 

JSIL.MakeInterface(
  "System.Xml.Xsl.IXsltContextFunction", true, [], function ($) {
    $.Method({}, "get_Minargs", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_Maxargs", JSIL.MethodSignature.Return($.Int32));
    $.Method({}, "get_ReturnType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType")));
    $.Method({}, "get_ArgTypes", JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XPath.XPathResultType")])));
    $.Method({}, "Invoke", new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.Xsl.XsltContext"), $jsilcore.TypeRef("System.Array", [$.Object]), 
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator")
        ]));
    $.Property({}, "Minargs");
    $.Property({}, "Maxargs");
    $.Property({}, "ReturnType");
    $.Property({}, "ArgTypes");
  }, []);

/* interface System.Xml.Xsl.IXsltContextVariable */ 

JSIL.MakeInterface(
  "System.Xml.Xsl.IXsltContextVariable", true, [], function ($) {
    $.Method({}, "get_IsLocal", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_IsParam", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "get_VariableType", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XPath.XPathResultType")));
    $.Method({}, "Evaluate", new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Xsl.XsltContext")]));
    $.Property({}, "IsLocal");
    $.Property({}, "IsParam");
    $.Property({}, "VariableType");
  }, []);

/* class System.Xml.Xsl.XsltException */ 

(function XsltException$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.SystemException"), 
      Name: "System.Xml.Xsl.XsltException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32, $asm00.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FormatMessage", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    )
      .Parameter(1, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SourceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.Field({Static:false, Public:false}, "res", $.String);

    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "sourceUri", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SourceUri", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Xsl.XsltCompileException */ 

(function XsltCompileException$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Xsl.XsltException"), 
      Name: "System.Xml.Xsl.XsltCompileException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Exception"), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Xsl.XslTransform */ 

(function XslTransform$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Xsl.XslTransform", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCommand", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Debugger", 
      JSIL.MethodSignature.Return($asm0A.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.IXPathNavigable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.XmlResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XmlResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Load", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.XPathNavigator"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [$asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.TextWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm00.TypeRef("System.IO.Stream")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XPath.IXPathNavigable"), $asm07.TypeRef("System.Xml.Xsl.XsltArgumentList"), 
          $asm07.TypeRef("System.Xml.XmlWriter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Transform", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "_XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "_CompiledStylesheet", $asm0A.TypeRef("System.Xml.Xsl.XsltOld.Stylesheet"));

    $.Field({Static:false, Public:false}, "_QueryStore", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm0A.TypeRef("System.Xml.Xsl.XsltOld.TheQuery")]));

    $.Field({Static:false, Public:false}, "_RootAction", $asm0A.TypeRef("System.Xml.Xsl.XsltOld.RootAction"));

    $.Field({Static:false, Public:false}, "$debugger", $asm0A.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "Debugger", $asm0A.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202"]; });

})();

/* class System.Xml.Xsl.XslTransform+DebuggerAddapter */ 

(function DebuggerAddapter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Xsl.XslTransform+DebuggerAddapter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetBuiltInTemplatesUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnInstructionCompile", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XPath.XPathNavigator"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "OnInstructionExecute", 
      JSIL.MethodSignature.Action($asm0A.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltProcessor"))
    );

    $.Field({Static:false, Public:false}, "unknownDebugger", $.Object);

    $.Field({Static:false, Public:false}, "getBltIn", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "onCompile", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "onExecute", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.ImplementInterfaces(
      /* 0 */ $asm0A.TypeRef("System.Xml.Xsl.XsltOld.Debugger.IXsltDebugger")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Xsl.XsltSettings */ 

(function XsltSettings$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Xsl.XsltSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Boolean, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_Default", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableDocumentFunction", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableScript", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeDebugInformation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TempFiles", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.TempFileCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "get_TrustedXslt", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WarningLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableDocumentFunction", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableScript", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeDebugInformation", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TempFiles", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.CodeDom.Compiler.TempFileCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TreatWarningsAsErrors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WarningLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "enableDocumentFunction", $.Boolean);

    $.Field({Static:false, Public:false}, "enableScript", $.Boolean);

    $.Field({Static:false, Public:false}, "checkOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "includeDebugInformation", $.Boolean);

    $.Field({Static:false, Public:false}, "warningLevel", $.Int32);

    $.Field({Static:false, Public:false}, "treatWarningsAsErrors", $.Boolean);

    $.Field({Static:false, Public:false}, "tempFiles", $asm01.TypeRef("System.CodeDom.Compiler.TempFileCollection"));

    $.Property({Static:true , Public:true }, "Default", $.Type);

    $.Property({Static:true , Public:true }, "TrustedXslt", $.Type);

    $.Property({Static:false, Public:true }, "EnableDocumentFunction", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableScript", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IncludeDebugInformation", $.Boolean);

    $.Property({Static:false, Public:false}, "WarningLevel", $.Int32);

    $.Property({Static:false, Public:false}, "TreatWarningsAsErrors", $.Boolean);

    $.Property({Static:false, Public:false}, "TempFiles", $asm01.TypeRef("System.CodeDom.Compiler.TempFileCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.AxisElement */ 

(function AxisElement$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.AxisElement", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Xml.Schema.ForwardAxis")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Schema.ForwardAxis")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDepth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "curNode", $asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Field({Static:false, Public:false}, "rootDepth", $.Int32);

    $.Field({Static:false, Public:false}, "curDepth", $.Int32);

    $.Field({Static:false, Public:false}, "isMatch", $.Boolean);

    $.Property({Static:false, Public:false}, "CurNode", $asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.AxisStack */ 

(function AxisStack$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.AxisStack", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ForwardAxis"), $asm07.TypeRef("System.Xml.Schema.ActiveAxis")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Equal", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Length", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Subtree", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ForwardAxis"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToChild", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveToParent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "stack", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "subtree", $asm07.TypeRef("System.Xml.Schema.ForwardAxis"));

    $.Field({Static:false, Public:false}, "parent", $asm07.TypeRef("System.Xml.Schema.ActiveAxis"));

    $.Property({Static:false, Public:false}, "Subtree", $asm07.TypeRef("System.Xml.Schema.ForwardAxis"));

    $.Property({Static:false, Public:false}, "Length", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ActiveAxis */ 

(function ActiveAxis$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.ActiveAxis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.Asttree"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CurrentDepth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveToStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Reactivate", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "currentDepth", $.Int32);

    $.Field({Static:false, Public:false}, "isActive", $.Boolean);

    $.Field({Static:false, Public:false}, "axisTree", $asm07.TypeRef("System.Xml.Schema.Asttree"));

    $.Field({Static:false, Public:false}, "axisStack", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "CurrentDepth", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DoubleLinkAxis */ 

(function DoubleLinkAxis$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("MS.Internal.Xml.XPath.Axis"), 
      Name: "System.Xml.Schema.DoubleLinkAxis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConvertTree", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($asm07.TypeRef("MS.Internal.Xml.XPath.Axis"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($asm07.TypeRef("MS.Internal.Xml.XPath.Axis"))
    );

    $.Field({Static:false, Public:false}, "next", $asm07.TypeRef("MS.Internal.Xml.XPath.Axis"));

    $.Property({Static:false, Public:false}, "Next", $asm07.TypeRef("MS.Internal.Xml.XPath.Axis"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ForwardAxis */ 

(function ForwardAxis$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.ForwardAxis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsDss", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSelfAxis", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TopNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"))
    );

    $.Field({Static:false, Public:false}, "topNode", $asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Field({Static:false, Public:false}, "rootNode", $asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Field({Static:false, Public:false}, "isAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isDss", $.Boolean);

    $.Field({Static:false, Public:false}, "isSelfAxis", $.Boolean);

    $.Property({Static:false, Public:false}, "RootNode", $asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Property({Static:false, Public:false}, "TopNode", $asm07.TypeRef("System.Xml.Schema.DoubleLinkAxis"));

    $.Property({Static:false, Public:false}, "IsAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsDss", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSelfAxis", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Asttree */ 

(function Asttree$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.Asttree", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Xml.XmlNamespaceManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompileXPath", 
      new JSIL.MethodSignature(null, [
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Xml.XmlNamespaceManager")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubtreeArray", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDescendantOrSelf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNameTest", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSelf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetURN", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("MS.Internal.Xml.XPath.Axis"), $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.Field({Static:false, Public:false}, "fAxisArray", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "xpathexpr", $.String);

    $.Field({Static:false, Public:false}, "isField", $.Boolean);

    $.Field({Static:false, Public:false}, "nsmgr", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Property({Static:false, Public:false}, "SubtreeArray", $asm00.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.BaseValidator */ 

(function BaseValidator$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.BaseValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateInstance", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Xml.ValidationType"), $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseUri", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PositionInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.PositionInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaCollection", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaNames"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ProcessEntity", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
          $.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveTextValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseUri", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "schemaCollection", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "positionInfo", $asm07.TypeRef("System.Xml.PositionInfo"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "baseUri", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"));

    $.Field({Static:false, Public:false}, "elementName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Xml.Schema.ValidationState"));

    $.Field({Static:false, Public:false}, "textValue", $asm00.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "textString", $.String);

    $.Field({Static:false, Public:false}, "hasSibling", $.Boolean);

    $.Field({Static:false, Public:false}, "checkDatatype", $.Boolean);

    $.Property({Static:false, Public:true }, "Reader", $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"));

    $.Property({Static:false, Public:true }, "SchemaCollection", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"));

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "SchemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Property({Static:false, Public:true }, "PositionInfo", $asm07.TypeRef("System.Xml.PositionInfo"));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "BaseUri", $asm01.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "EventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.AutoValidator */ 

(function AutoValidator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseValidator"), 
      Name: "System.Xml.Schema.AutoValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "DetectValidationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ValidationType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "x_schema", $.String, "x-schema");

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.BaseProcessor */ 

(function BaseProcessor$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.BaseProcessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToTable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompilationSettings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasErrors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaNames", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaNames"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidAttributeGroupRedefine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidGroupRedefine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidTypeRedefine", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEventNoThrow", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "compilationSettings", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

    $.Field({Static:false, Public:false}, "errorCount", $.Int32);

    $.Field({Static:false, Public:false}, "NsXml", $.String);

    $.Property({Static:false, Public:false}, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "SchemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Property({Static:false, Public:false}, "EventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Property({Static:false, Public:false}, "CompilationSettings", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

    $.Property({Static:false, Public:false}, "HasErrors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.BitSet */ 

(function BitSet$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.BitSet", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "And", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureLength", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Get", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Intersects", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "NextSet", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "Or", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Set", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Subscript", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.Constant({Static:true , Public:false}, "bitSlotShift", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "bitSlotMask", $.Int32, 31);

    $.Field({Static:false, Public:false}, "count", $.Int32);

    $.Field({Static:false, Public:false}, "bits", $jsilcore.TypeRef("System.Array", [$.UInt32]));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Boolean);

    $.Property({Static:false, Public:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Schema.ChameleonKey */ 

(function ChameleonKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.ChameleonKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "targetNS", $.String);

    $.Field({Static:false, Public:false}, "chameleonLocation", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "hashCode", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.CompiledIdentityConstraint */ 

(function CompiledIdentityConstraint$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.CompiledIdentityConstraint", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fields", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.Asttree")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Role", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint+ConstraintRole"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Selector", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.Asttree"))
    );

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "role", $asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint+ConstraintRole"));

    $.Field({Static:false, Public:false}, "selector", $asm07.TypeRef("System.Xml.Schema.Asttree"));

    $.Field({Static:false, Public:false}, "fields", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.Asttree")]));

    $.Field({Static:false, Public:false}, "refer", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "Role", $asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint+ConstraintRole"));

    $.Property({Static:false, Public:true }, "Selector", $asm07.TypeRef("System.Xml.Schema.Asttree"));

    $.Property({Static:false, Public:true }, "Fields", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.Asttree")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.CompiledIdentityConstraint+ConstraintRole */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.CompiledIdentityConstraint+ConstraintRole", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unique: 0, 
    Key: 1, 
    Keyref: 2, 
  }
);

/* class System.Xml.Schema.Compiler */ 

(function Compiler$Members () {
  var $, $thisType;












































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseProcessor"), 
      Name: "System.Xml.Schema.Compiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildParticleContentModel", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateEffectiveTotalRange", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeAll", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeChoice", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeGroupRef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeParticle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizePointlessRoot", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeSequence", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAtrributeGroupRestriction", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUnionType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeIntersection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeUnion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileBaseMemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.ContentValidator"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentExtension", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentRestriction", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexTypeElements", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileContentTypeParticle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileIdentityConstraint", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileLocalAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSubstitutionGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyPosition", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm07.TypeRef("System.Xml.Schema.SchemaInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnySchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMappingParticle", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaContentType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSimpleType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAllCompiledSchemas", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAnyFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsChoiceFromChoiceSubstGroup", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromElement", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsFixedEqual", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaDeclBase"), $asm07.TypeRef("System.Xml.Schema.SchemaDeclBase")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsParticleEmptiable", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsProcessContentsRestricted", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromAll", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAll")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromChoice", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal"), 
          $asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Output", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSubstitutionGroups", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RecursivelyCheckRedefinedAttributeGroups", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecursivelyCheckRedefinedGroups", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDefaultFixed", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UpdateSForSSimpleTypes", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "restrictionErrorMsg", $.String);

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "attributeGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "elements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "schemaTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "groups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "notations", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "examplars", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "identityConstraints", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "complexTypeStack", $asm00.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "schemasToCompile", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "importedSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "schemaForSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ConstraintStruct */ 

(function ConstraintStruct$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.ConstraintStruct", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TableDim", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "constraint", $asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"));

    $.Field({Static:false, Public:false}, "axisSelector", $asm07.TypeRef("System.Xml.Schema.SelectorActiveAxis"));

    $.Field({Static:false, Public:false}, "axisFields", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "qualifiedTable", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "keyrefTable", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "tableDim", $.Int32);

    $.Property({Static:false, Public:false}, "TableDim", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.LocatedActiveAxis */ 

(function LocatedActiveAxis$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ActiveAxis"), 
      Name: "System.Xml.Schema.LocatedActiveAxis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.Asttree"), $asm07.TypeRef("System.Xml.Schema.KeySequence"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Column", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Reactivate", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.KeySequence"))
    );

    $.Field({Static:false, Public:false}, "column", $.Int32);

    $.Field({Static:false, Public:false}, "isMatched", $.Boolean);

    $.Field({Static:false, Public:false}, "Ks", $asm07.TypeRef("System.Xml.Schema.KeySequence"));

    $.Property({Static:false, Public:false}, "Column", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SelectorActiveAxis */ 

(function SelectorActiveAxis$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ActiveAxis"), 
      Name: "System.Xml.Schema.SelectorActiveAxis", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.Asttree"), $asm07.TypeRef("System.Xml.Schema.ConstraintStruct")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "EndElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EmptyStack", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_lastDepth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "PopKS", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.KeySequence"))
    );

    $.ExternalMethod({Static:false, Public:true }, "PushKS", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Int32])
    );

    $.Field({Static:false, Public:false}, "cs", $asm07.TypeRef("System.Xml.Schema.ConstraintStruct"));

    $.Field({Static:false, Public:false}, "KSs", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "KSpointer", $.Int32);

    $.Property({Static:false, Public:true }, "EmptyStack", $.Boolean);

    $.Property({Static:false, Public:true }, "lastDepth", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.KSStruct */ 

(function KSStruct$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.KSStruct", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.KeySequence"), $.Int32])
    );

    $.Field({Static:false, Public:true }, "depth", $.Int32);

    $.Field({Static:false, Public:true }, "ks", $asm07.TypeRef("System.Xml.Schema.KeySequence"));

    $.Field({Static:false, Public:true }, "fields", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.LocatedActiveAxis")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.TypedObject */ 

(function TypedObject$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.TypedObject", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dim", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dvalue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDecimal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ListDValueEquals", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetDecimal", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "dstruct", $asm07.TypeRef("System.Xml.Schema.TypedObject+DecimalStruct"));

    $.Field({Static:false, Public:false}, "ovalue", $.Object);

    $.Field({Static:false, Public:false}, "svalue", $.String);

    $.Field({Static:false, Public:false}, "xsdtype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "dim", $.Int32);

    $.Field({Static:false, Public:false}, "isList", $.Boolean);

    $.Property({Static:false, Public:true }, "Dim", $.Int32);

    $.Property({Static:false, Public:true }, "IsList", $.Boolean);

    $.Property({Static:false, Public:true }, "IsDecimal", $.Boolean);

    $.Property({Static:false, Public:true }, "Dvalue", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Decimal")]));

    $.Property({Static:false, Public:true }, "Value", $.Object);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.TypedObject+DecimalStruct */ 

(function DecimalStruct$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.TypedObject+DecimalStruct", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Dvalue", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Decimal")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDecimal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDecimal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "isDecimal", $.Boolean);

    $.Field({Static:false, Public:false}, "dvalue", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Decimal")]));

    $.Property({Static:false, Public:true }, "IsDecimal", $.Boolean);

    $.Property({Static:false, Public:true }, "Dvalue", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Decimal")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.KeySequence */ 

(function KeySequence$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.KeySequence", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.TypedObject")]))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PosCol", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PosLine", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsQualified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "ks", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.TypedObject")]));

    $.Field({Static:false, Public:false}, "dim", $.Int32);

    $.Field({Static:false, Public:false}, "hashcode", $.Int32);

    $.Field({Static:false, Public:false}, "posline", $.Int32);

    $.Field({Static:false, Public:false}, "poscol", $.Int32);

    $.Property({Static:false, Public:true }, "PosLine", $.Int32);

    $.Property({Static:false, Public:true }, "PosCol", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Schema.UpaException */ 

(function UpaException$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Exception"), 
      Name: "System.Xml.Schema.UpaException", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle1", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle2", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "particle1", $.Object);

    $.Field({Static:false, Public:false}, "particle2", $.Object);

    $.Property({Static:false, Public:true }, "Particle1", $.Object);

    $.Property({Static:false, Public:true }, "Particle2", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SymbolsDictionary */ 

(function SymbolsDictionary$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SymbolsDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddName", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespaceList", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.NamespaceList"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWildcard", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CountOfNames", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsUpaEnforced", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetNamespaceListSymbols", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ICollection"), [$asm07.TypeRef("System.Xml.Schema.NamespaceList")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetParticle", 
      new JSIL.MethodSignature($.Object, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "NameOf", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsUpaEnforced", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "last", $.Int32);

    $.Field({Static:false, Public:false}, "names", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "wildcards", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "particles", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "particleLast", $.Object);

    $.Field({Static:false, Public:false}, "isUpaEnforced", $.Boolean);

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "CountOfNames", $.Int32);

    $.Property({Static:false, Public:true }, "IsUpaEnforced", $.Boolean);

    $.Property({Static:false, Public:true }, "Item", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* struct System.Xml.Schema.Position */ 

(function Position$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.Position", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.Field({Static:false, Public:true }, "symbol", $.Int32);

    $.Field({Static:false, Public:true }, "particle", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Positions */ 

(function Positions$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.Positions", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.Position"), [$.Int32])
    );

    $.Field({Static:false, Public:false}, "positions", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Schema.Position"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Schema.SyntaxTreeNode */ 

(function SyntaxTreeNode$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SyntaxTreeNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.Schema.Positions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.InteriorNode"), $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm07.TypeRef("System.Xml.Schema.Positions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsRangeNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsRangeNode", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.LeafNode */ 

(function LeafNode$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), 
      Name: "System.Xml.Schema.LeafNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm07.TypeRef("System.Xml.Schema.Positions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.InteriorNode"), $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm07.TypeRef("System.Xml.Schema.Positions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Pos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Pos", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "pos", $.Int32);

    $.Property({Static:false, Public:true }, "Pos", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.NamespaceListNode */ 

(function NamespaceListNode$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), 
      Name: "System.Xml.Schema.NamespaceListNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.NamespaceList"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm07.TypeRef("System.Xml.Schema.Positions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.InteriorNode"), $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm07.TypeRef("System.Xml.Schema.Positions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetResolvedSymbols", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ICollection"), [$asm07.TypeRef("System.Xml.Schema.SymbolsDictionary")])
    );

    $.Field({Static:false, Public:false}, "namespaceList", $asm07.TypeRef("System.Xml.Schema.NamespaceList"));

    $.Field({Static:false, Public:false}, "particle", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.InteriorNode */ 

(function InteriorNode$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), 
      Name: "System.Xml.Schema.InteriorNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm07.TypeRef("System.Xml.Schema.Positions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpandTree", 
      new JSIL.MethodSignature(null, [
          $.Type, $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm07.TypeRef("System.Xml.Schema.Positions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LeftChild", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RightChild", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LeftChild", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RightChild", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"))
    );

    $.Field({Static:false, Public:false}, "leftChild", $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

    $.Field({Static:false, Public:false}, "rightChild", $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

    $.Property({Static:false, Public:true }, "LeftChild", $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

    $.Property({Static:false, Public:true }, "RightChild", $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SequenceNode */ 

(function SequenceNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.InteriorNode"), 
      Name: "System.Xml.Schema.SequenceNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ChoiceNode */ 

(function ChoiceNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.InteriorNode"), 
      Name: "System.Xml.Schema.ChoiceNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.PlusNode */ 

(function PlusNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.InteriorNode"), 
      Name: "System.Xml.Schema.PlusNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.QmarkNode */ 

(function QmarkNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.InteriorNode"), 
      Name: "System.Xml.Schema.QmarkNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.StarNode */ 

(function StarNode$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.InteriorNode"), 
      Name: "System.Xml.Schema.StarNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConstructPos", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.LeafRangeNode */ 

(function LeafRangeNode$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.LeafNode"), 
      Name: "System.Xml.Schema.LeafRangeNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm00.TypeRef("System.Decimal"), 
          $asm00.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Clone", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"), [$asm07.TypeRef("System.Xml.Schema.Positions")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsRangeNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Max", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Min", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NextIteration", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.BitSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NextIteration", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.BitSet"))
    );

    $.Field({Static:false, Public:false}, "min", $asm00.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "max", $asm00.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "nextIteration", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Property({Static:false, Public:true }, "Max", $asm00.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true }, "Min", $asm00.TypeRef("System.Decimal"));

    $.Property({Static:false, Public:true }, "NextIteration", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsRangeNode", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ContentValidator */ 

(function ContentValidator$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.ContentValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ValidationState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptiable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsOpen", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsOpen", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "contentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Field({Static:false, Public:false}, "isOpen", $.Boolean);

    $.Field({Static:false, Public:false}, "isEmptiable", $.Boolean);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "TextOnly", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Mixed", $.Type);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Any", $.Type);

    $.Property({Static:false, Public:true }, "ContentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:true }, "PreserveWhitespace", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptiable", $.Boolean);

    $.Property({Static:false, Public:true }, "IsOpen", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ParticleContentValidator */ 

(function ParticleContentValidator$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ContentValidator"), 
      Name: "System.Xml.Schema.ParticleContentValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddChoice", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddLeafNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddLeafRange", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddName", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddNamespaceList", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.NamespaceList"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddPlus", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddQMark", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSequence", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddStar", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildTransitionTable", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateTotalFollowposForRangeNodes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]), [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckCMUPAWithLeafRangeNodes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.BitSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueParticleAttribution", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUniqueParticleAttribution", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.BitSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CloseGroup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Closure", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.InteriorNode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ValidationState")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Exists", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ContentValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.ContentValidator"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetApplicableMinMaxFollowPos", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.BitSet"), [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:true }, "OpenGroup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Start", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "symbols", $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"));

    $.Field({Static:false, Public:false}, "positions", $asm07.TypeRef("System.Xml.Schema.Positions"));

    $.Field({Static:false, Public:false}, "stack", $asm00.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "contentNode", $asm07.TypeRef("System.Xml.Schema.SyntaxTreeNode"));

    $.Field({Static:false, Public:false}, "isPartial", $.Boolean);

    $.Field({Static:false, Public:false}, "minMaxNodesCount", $.Int32);

    $.Field({Static:false, Public:false}, "enableUpaCheck", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DfaContentValidator */ 

(function DfaContentValidator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ContentValidator"), 
      Name: "System.Xml.Schema.DfaContentValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]), $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ValidationState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "transitionTable", $jsilcore.TypeRef("System.Array", [$jsilcore.TypeRef("System.Array", [$.Int32])]));

    $.Field({Static:false, Public:false}, "symbols", $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.NfaContentValidator */ 

(function NfaContentValidator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ContentValidator"), 
      Name: "System.Xml.Schema.NfaContentValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]), 
          $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), $asm07.TypeRef("System.Xml.Schema.Positions"), 
          $.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ValidationState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "firstpos", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Field({Static:false, Public:false}, "followpos", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]));

    $.Field({Static:false, Public:false}, "symbols", $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"));

    $.Field({Static:false, Public:false}, "positions", $asm07.TypeRef("System.Xml.Schema.Positions"));

    $.Field({Static:false, Public:false}, "endMarkerPos", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.Schema.RangePositionInfo */ 

(function RangePositionInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.RangePositionInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "curpos", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Field({Static:false, Public:true }, "rangeCounters", $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Decimal")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.RangeContentValidator */ 

(function RangeContentValidator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ContentValidator"), 
      Name: "System.Xml.Schema.RangeContentValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 9, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.BitSet"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]), 
          $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"), $asm07.TypeRef("System.Xml.Schema.Positions"), 
          $.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), 
          $.Boolean, $asm07.TypeRef("System.Xml.Schema.BitSet"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ValidationState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "firstpos", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Field({Static:false, Public:false}, "followpos", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]));

    $.Field({Static:false, Public:false}, "positionsWithRangeTerminals", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Field({Static:false, Public:false}, "symbols", $asm07.TypeRef("System.Xml.Schema.SymbolsDictionary"));

    $.Field({Static:false, Public:false}, "positions", $asm07.TypeRef("System.Xml.Schema.Positions"));

    $.Field({Static:false, Public:false}, "minMaxNodesCount", $.Int32);

    $.Field({Static:false, Public:false}, "endMarkerPos", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.AllElementsContentValidator */ 

(function AllElementsContentValidator$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.ContentValidator"), 
      Name: "System.Xml.Schema.AllElementsContentValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddElement", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.ValidationState")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedElements", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ExpectedParticles", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.ValidationState"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptiable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "InitValidation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValidateElement", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.Field({Static:false, Public:false}, "elements", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "particles", $jsilcore.TypeRef("System.Array", [$.Object]));

    $.Field({Static:false, Public:false}, "isRequired", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Field({Static:false, Public:false}, "countRequired", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptiable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaDatatypeVariety */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaDatatypeVariety", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Atomic: 0, 
    List: 1, 
    Union: 2, 
  }
);

/* class System.Xml.Schema.XsdSimpleValue */ 

(function XsdSimpleValue$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XsdSimpleValue", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.Field({Static:false, Public:false}, "xmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "typedValue", $.Object);

    $.Property({Static:false, Public:true }, "XmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true }, "TypedValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.RestrictionFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.RestrictionFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    Length: 1, 
    MinLength: 2, 
    MaxLength: 4, 
    Pattern: 8, 
    Enumeration: 16, 
    WhiteSpace: 32, 
    MaxInclusive: 64, 
    MaxExclusive: 128, 
    MinInclusive: 256, 
    MinExclusive: 512, 
    TotalDigits: 1024, 
    FractionDigits: 2048, 
  }
);

/* enum System.Xml.Schema.XmlSchemaWhiteSpace */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaWhiteSpace", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Preserve: 0, 
    Replace: 1, 
    Collapse: 2, 
  }
);

/* class System.Xml.Schema.RestrictionFacets */ 

(function RestrictionFacets$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.RestrictionFacets", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Length", $.Int32);

    $.Field({Static:false, Public:false}, "MinLength", $.Int32);

    $.Field({Static:false, Public:false}, "MaxLength", $.Int32);

    $.Field({Static:false, Public:false}, "Patterns", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "Enumeration", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "WhiteSpace", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Field({Static:false, Public:false}, "MaxInclusive", $.Object);

    $.Field({Static:false, Public:false}, "MaxExclusive", $.Object);

    $.Field({Static:false, Public:false}, "MinInclusive", $.Object);

    $.Field({Static:false, Public:false}, "MinExclusive", $.Object);

    $.Field({Static:false, Public:false}, "TotalDigits", $.Int32);

    $.Field({Static:false, Public:false}, "FractionDigits", $.Int32);

    $.Field({Static:false, Public:false}, "Flags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Field({Static:false, Public:false}, "FixedFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaDatatype */ 

(function XmlSchemaDatatype$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaDatatype", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ConcatenatedToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByList", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByRestriction", 
      new JSIL.MethodSignature($.Type, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveByUnion", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXdrName", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XmlTokenizedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedTypeXsd", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XmlTokenizedType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasLexicalFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Restriction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFacets"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeCodeString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueConverter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Variety", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsComparable", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Restriction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.RestrictionFacets"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TypeCodeToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifySchemaValid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "XdrCanonizeUri", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.Schema.SchemaNames")
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Variety", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasLexicalFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ValueConverter", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Property({Static:false, Public:false, Virtual:true }, "Restriction", $asm07.TypeRef("System.Xml.Schema.RestrictionFacets"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false}, "TypeCodeString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DatatypeImplementation */ 

(function DatatypeImplementation$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
      Name: "System.Xml.Schema.DatatypeImplementation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Compare", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$.Byte]), $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateBuiltinTypes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeriveByList", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "DeriveByRestriction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DeriveByUnion", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FinishBuiltinType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTypeName", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXdrName", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XmlTokenizedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlTokenizedTypeXsd", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XmlTokenizedType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyAtomicType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnySimpleType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Base", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DayTimeDurationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasLexicalFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Restriction", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFacets"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UntypedAtomicType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValueConverter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Variety", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_YearMonthDurationType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBuiltInTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetNormalizedStringTypeV1Compat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"), [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSimpleTypeFromTypeCode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSimpleTypeFromXsdType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTokenTypeV1Compat", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsComparable", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsEqual", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Restriction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.RestrictionFacets"))
    );

    $.ExternalMethod({Static:true , Public:false}, "StartBuiltinType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifySchemaValid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.Constant({Static:true , Public:false}, "anySimpleTypeIndex", $.Int32, 11);

    $.Field({Static:false, Public:false}, "variety", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

    $.Field({Static:false, Public:false}, "restriction", $asm07.TypeRef("System.Xml.Schema.RestrictionFacets"));

    $.Field({Static:false, Public:false}, "baseType", $.Type);

    $.Field({Static:false, Public:false}, "valueConverter", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Field({Static:false, Public:false}, "parentSchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:true , Public:false}, "builtinTypes", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "enumToTypeCode", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Xml.Schema.XmlSchemaSimpleType, 55);
      });

    $.Field({Static:true , Public:false}, "anySimpleType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "anyAtomicType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "untypedAtomicType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "yearMonthDurationType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "dayTimeDurationType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "normalizedStringTypeV1Compat", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "tokenTypeV1Compat", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:true , Public:false}, "QnAnySimpleType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "QnAnyType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "stringFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "miscFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "numeric2FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "binaryFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "dateTimeFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "durationFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "listFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "qnameFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false}, "unionFacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_anySimpleType", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_anyURI", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_base64Binary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_boolean", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_byte", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_char", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_date", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTime", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTimeNoTz", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dateTimeTz", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_day", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_decimal", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_double", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_doubleXdr", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_duration", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENTITY", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENTITIES", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ENUMERATION", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_fixed", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_float", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_floatXdr", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_hexBinary", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_ID", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_IDREF", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_IDREFS", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_int", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_integer", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_language", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_long", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_month", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_monthDay", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_Name", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NCName", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_negativeInteger", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NMTOKEN", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NMTOKENS", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_nonNegativeInteger", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_nonPositiveInteger", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_normalizedString", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_NOTATION", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_positiveInteger", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_QName", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_QNameXdr", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_short", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_string", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_time", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_timeNoTz", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_timeTz", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_token", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedByte", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedInt", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedLong", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_unsignedShort", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_uuid", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_year", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_yearMonth", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_normalizedStringV1Compat", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenV1Compat", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_anyAtomicType", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_dayTimeDuration", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_untypedAtomicType", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_yearMonthDuration", $.Type);

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenizedTypes", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_tokenizedTypesXsd", $jsilcore.TypeRef("System.Array", [$.Type]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_XdrTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.DatatypeImplementation+SchemaDatatypeMap")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_XsdTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.DatatypeImplementation+SchemaDatatypeMap")]));

    $.Property({Static:true , Public:false}, "AnySimpleType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "AnyAtomicType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "UntypedAtomicType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "YearMonthDurationType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:true , Public:false}, "DayTimeDurationType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValueConverter", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "Variety", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatypeVariety"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "Restriction", $asm07.TypeRef("System.Xml.Schema.RestrictionFacets"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasLexicalFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:false}, "Base", $.Type);

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DatatypeImplementation+SchemaDatatypeMap */ 

(function SchemaDatatypeMap$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.DatatypeImplementation+SchemaDatatypeMap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Explicit", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"), [$.Type])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"));

    $.Field({Static:false, Public:false}, "parentIndex", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "ParentIndex", $.Int32);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.IComparable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_anySimpleType */ 

(function Datatype_anySimpleType$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"), 
      Name: "System.Xml.Schema.Datatype_anySimpleType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.String.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.String).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_List */ 

(function Datatype_List$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_List", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:false, Public:false}, "itemType", $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"));

    $.Field({Static:false, Public:false}, "minListSize", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false}, "ItemType", $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_union */ 

(function Datatype_union$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_union", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseMemberTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasAtomicMembers", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsUnionBaseOf", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.DatatypeImplementation")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.Object, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Object.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Object).__Type__;
      });

    $.Field({Static:false, Public:false}, "types", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:false}, "BaseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_anyAtomicType */ 

(function Datatype_anyAtomicType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_anyAtomicType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_untypedAtomicType */ 

(function Datatype_untypedAtomicType$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anyAtomicType"), 
      Name: "System.Xml.Schema.Datatype_untypedAtomicType", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_string */ 

(function Datatype_string$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_string", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_boolean */ 

(function Datatype_boolean$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_boolean", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Boolean.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Boolean).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_float */ 

(function Datatype_float$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_float", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Single.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Single).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_double */ 

(function Datatype_double$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_double", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Double.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Double).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_decimal */ 

(function Datatype_decimal$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_decimal", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Decimal.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Decimal).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_duration */ 

(function Datatype_duration$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_duration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.TimeSpan.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.TimeSpan).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_yearMonthDuration */ 

(function Datatype_yearMonthDuration$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_duration"), 
      Name: "System.Xml.Schema.Datatype_yearMonthDuration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_dayTimeDuration */ 

(function Datatype_dayTimeDuration$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_duration"), 
      Name: "System.Xml.Schema.Datatype_dayTimeDuration", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_dateTimeBase */ 

(function Datatype_dateTimeBase$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_dateTimeBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.DateTime.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.DateTime).__Type__;
      });

    $.Field({Static:false, Public:false}, "dateTimeFlags", $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_dateTimeNoTimeZone */ 

(function Datatype_dateTimeNoTimeZone$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_dateTimeNoTimeZone", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_dateTimeTimeZone */ 

(function Datatype_dateTimeTimeZone$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_dateTimeTimeZone", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_dateTime */ 

(function Datatype_dateTime$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_dateTime", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_timeNoTimeZone */ 

(function Datatype_timeNoTimeZone$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_timeNoTimeZone", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_timeTimeZone */ 

(function Datatype_timeTimeZone$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_timeTimeZone", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_time */ 

(function Datatype_time$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_time", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_date */ 

(function Datatype_date$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_date", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_yearMonth */ 

(function Datatype_yearMonth$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_yearMonth", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_year */ 

(function Datatype_year$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_year", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_monthDay */ 

(function Datatype_monthDay$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_monthDay", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_day */ 

(function Datatype_day$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_day", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_month */ 

(function Datatype_month$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_dateTimeBase"), 
      Name: "System.Xml.Schema.Datatype_month", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_hexBinary */ 

(function Datatype_hexBinary$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_hexBinary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Byte).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of(System.Array.Of($asm00.System.Byte)).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_base64Binary */ 

(function Datatype_base64Binary$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_base64Binary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Byte).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of(System.Array.Of($asm00.System.Byte)).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_anyURI */ 

(function Datatype_anyURI$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_anyURI", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm01.System.Uri.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm01.System.Uri).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_QName */ 

(function Datatype_QName$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_QName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.XmlQualifiedName.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm07.System.Xml.XmlQualifiedName).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_normalizedString */ 

(function Datatype_normalizedString$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_string"), 
      Name: "System.Xml.Schema.Datatype_normalizedString", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_normalizedStringV1Compat */ 

(function Datatype_normalizedStringV1Compat$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_string"), 
      Name: "System.Xml.Schema.Datatype_normalizedStringV1Compat", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_token */ 

(function Datatype_token$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_normalizedString"), 
      Name: "System.Xml.Schema.Datatype_token", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_tokenV1Compat */ 

(function Datatype_tokenV1Compat$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_normalizedStringV1Compat"), 
      Name: "System.Xml.Schema.Datatype_tokenV1Compat", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_language */ 

(function Datatype_language$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_token"), 
      Name: "System.Xml.Schema.Datatype_language", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_NMTOKEN */ 

(function Datatype_NMTOKEN$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_token"), 
      Name: "System.Xml.Schema.Datatype_NMTOKEN", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_Name */ 

(function Datatype_Name$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_token"), 
      Name: "System.Xml.Schema.Datatype_Name", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_NCName */ 

(function Datatype_NCName$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_Name"), 
      Name: "System.Xml.Schema.Datatype_NCName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_ID */ 

(function Datatype_ID$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_NCName"), 
      Name: "System.Xml.Schema.Datatype_ID", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_IDREF */ 

(function Datatype_IDREF$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_NCName"), 
      Name: "System.Xml.Schema.Datatype_IDREF", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_ENTITY */ 

(function Datatype_ENTITY$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_NCName"), 
      Name: "System.Xml.Schema.Datatype_ENTITY", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_NOTATION */ 

(function Datatype_NOTATION$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_NOTATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateValueConverter", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_BuiltInWhitespaceFacet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "VerifySchemaValid", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.XmlQualifiedName.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm07.System.Xml.XmlQualifiedName).__Type__;
      });

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "BuiltInWhitespaceFacet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaWhiteSpace"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_integer */ 

(function Datatype_integer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_decimal"), 
      Name: "System.Xml.Schema.Datatype_integer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_nonPositiveInteger */ 

(function Datatype_nonPositiveInteger$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_integer"), 
      Name: "System.Xml.Schema.Datatype_nonPositiveInteger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_negativeInteger */ 

(function Datatype_negativeInteger$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_nonPositiveInteger"), 
      Name: "System.Xml.Schema.Datatype_negativeInteger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_long */ 

(function Datatype_long$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_integer"), 
      Name: "System.Xml.Schema.Datatype_long", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Int64.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Int64).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_int */ 

(function Datatype_int$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_long"), 
      Name: "System.Xml.Schema.Datatype_int", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Int32.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Int32).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_short */ 

(function Datatype_short$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_int"), 
      Name: "System.Xml.Schema.Datatype_short", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Int16.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Int16).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_byte */ 

(function Datatype_byte$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_short"), 
      Name: "System.Xml.Schema.Datatype_byte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.SByte.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.SByte).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_nonNegativeInteger */ 

(function Datatype_nonNegativeInteger$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_integer"), 
      Name: "System.Xml.Schema.Datatype_nonNegativeInteger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_HasValueFacets", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false, Virtual:true }, "HasValueFacets", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_unsignedLong */ 

(function Datatype_unsignedLong$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_nonNegativeInteger"), 
      Name: "System.Xml.Schema.Datatype_unsignedLong", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.UInt64.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.UInt64).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_unsignedInt */ 

(function Datatype_unsignedInt$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_unsignedLong"), 
      Name: "System.Xml.Schema.Datatype_unsignedInt", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.UInt32.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.UInt32).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_unsignedShort */ 

(function Datatype_unsignedShort$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_unsignedInt"), 
      Name: "System.Xml.Schema.Datatype_unsignedShort", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.UInt16.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.UInt16).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_unsignedByte */ 

(function Datatype_unsignedByte$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_unsignedShort"), 
      Name: "System.Xml.Schema.Datatype_unsignedByte", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Byte.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Byte).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_positiveInteger */ 

(function Datatype_positiveInteger$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_nonNegativeInteger"), 
      Name: "System.Xml.Schema.Datatype_positiveInteger", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_FacetsChecker", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetsChecker"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "numeric10FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:false, Virtual:true }, "FacetsChecker", $asm07.TypeRef("System.Xml.Schema.FacetsChecker"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_doubleXdr */ 

(function Datatype_doubleXdr$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_double"), 
      Name: "System.Xml.Schema.Datatype_doubleXdr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_floatXdr */ 

(function Datatype_floatXdr$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_float"), 
      Name: "System.Xml.Schema.Datatype_floatXdr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_QNameXdr */ 

(function Datatype_QNameXdr$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_QNameXdr", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.XmlQualifiedName.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm07.System.Xml.XmlQualifiedName).__Type__;
      });

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_ENUMERATION */ 

(function Datatype_ENUMERATION$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_NMTOKEN"), 
      Name: "System.Xml.Schema.Datatype_ENUMERATION", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TokenizedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlTokenizedType"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "TokenizedType", $asm07.TypeRef("System.Xml.XmlTokenizedType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_char */ 

(function Datatype_char$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_char", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Char.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Char).__Type__;
      });

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_fixed */ 

(function Datatype_fixed$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_decimal"), 
      Name: "System.Xml.Schema.Datatype_fixed", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Datatype_uuid */ 

(function Datatype_uuid$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.Datatype_anySimpleType"), 
      Name: "System.Xml.Schema.Datatype_uuid", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ListValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_ValidRestrictionFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ParseValue", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "TryParseValue", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $jsilcore.TypeRef("JSIL.Reference", [$.Object])
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "atomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Guid.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "listValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Guid).__Type__;
      });

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ListValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false, Virtual:true }, "ValidRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DtdParser */ 

(function DtdParser$Members () {
  var $, $thisType;






































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.DtdParser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IDtdParserAdapter"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.IDtdParserAdapter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EatPublicKeyword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "EatSystemKeyword", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseUriStr", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IgnoreEntityReferences", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSubset", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNo", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParsingInternalSubset", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParsingTopLevelMarkup", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_PublicID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SaveInternalSubsetValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemID", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameQualified", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNameString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNmtokenString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetToken", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.DtdParser+Token"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetValueWithStrippedSpaces", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityEnd", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
      new JSIL.MethodSignature($.Boolean, [
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleEntityReference", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAttributeValueType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.DtdParser+Token")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadParsingBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "OnUnexpectedError", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaInfo"), [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $.Boolean, $.String, 
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Parse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaInfo"), [
          $asm07.TypeRef("System.Xml.XmlTextReaderImpl"), $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttlistDecl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttlistDefault", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseAttlistType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseCondSection", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementDecl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementMixedContent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseElementOnlyContent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEntityDecl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExternalId", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.DtdParser+Token"), $asm07.TypeRef("System.Xml.DtdParser+Token"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.String]), $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseExternalSubset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFreeFloatingDtd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseHowMany", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseInDocumentDtd", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseInternalSubset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseNotationDecl", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParsePI", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSubset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUnexpectedToken", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadData", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadDataInName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveParsingBuffer", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveParsingBuffer", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist4", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist5", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist6", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanAttlist7", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanClosingTag", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCondSection1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCondSection2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanCondSection3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDoctype1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanDoctype2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement4", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement5", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement6", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanElement7", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntity1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntity2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntity3", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanEntityName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanLiteral", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.DtdParser+Token"), [$asm07.TypeRef("System.Xml.DtdParser+LiteralType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNameExpected", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNmtoken", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNmtokenExpected", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanNotation1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanPublicId1", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanPublicId2", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanQName", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanQName", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanQNameExpected", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSubsetContent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ScanSystemId", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.DtdParser+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSeverityType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaException")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Throw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowInvalidChar", 
      new JSIL.MethodSignature(null, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [$.Int32, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowUnexpectedToken", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyEntityReference", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaEntity"), [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.Constant({Static:true , Public:false}, "CondSectionEntityIdsInitialSize", $.Int32, 2);

    $.Field({Static:false, Public:false}, "readerAdapter", $asm07.TypeRef("System.Xml.IDtdParserAdapter"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:false, Public:false}, "systemId", $.String);

    $.Field({Static:false, Public:false}, "publicId", $.String);

    $.Field({Static:false, Public:false}, "validate", $.Boolean);

    $.Field({Static:false, Public:false}, "normalize", $.Boolean);

    $.Field({Static:false, Public:false}, "supportNamespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "v1Compat", $.Boolean);

    $.Field({Static:false, Public:false}, "chars", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "charsUsed", $.Int32);

    $.Field({Static:false, Public:false}, "curPos", $.Int32);

    $.Field({Static:false, Public:false}, "scanningFunction", $asm07.TypeRef("System.Xml.DtdParser+ScanningFunction"));

    $.Field({Static:false, Public:false}, "nextScaningFunction", $asm07.TypeRef("System.Xml.DtdParser+ScanningFunction"));

    $.Field({Static:false, Public:false}, "savedScanningFunction", $asm07.TypeRef("System.Xml.DtdParser+ScanningFunction"));

    $.Field({Static:false, Public:false}, "whitespaceSeen", $.Boolean);

    $.Field({Static:false, Public:false}, "tokenStartPos", $.Int32);

    $.Field({Static:false, Public:false}, "colonPos", $.Int32);

    $.Field({Static:false, Public:false}, "internalSubsetValueSb", $asm07.TypeRef("System.Xml.BufferBuilder"));

    $.Field({Static:false, Public:false}, "internalSubsetValue", $.String);

    $.Field({Static:false, Public:false}, "externalEntitiesDepth", $.Int32);

    $.Field({Static:false, Public:false}, "currentEntityId", $.Int32);

    $.Field({Static:false, Public:false}, "nextEntityId", $.Int32);

    $.Field({Static:false, Public:false}, "condSectionEntityIds", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "freeFloatingDtd", $.Boolean);

    $.Field({Static:false, Public:false}, "hasFreeFloatingInternalSubset", $.Boolean);

    $.Field({Static:false, Public:false}, "stringBuilder", $asm07.TypeRef("System.Xml.BufferBuilder"));

    $.Field({Static:false, Public:false}, "undeclaredNotations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "condSectionDepth", $.Int32);

    $.Field({Static:false, Public:false}, "literalLineInfo", $asm07.TypeRef("System.Xml.LineInfo"));

    $.Field({Static:false, Public:false}, "literalQuoteChar", $.Char);

    $.Field({Static:false, Public:false}, "documentBaseUri", $.String);

    $.Field({Static:false, Public:false}, "externalDtdBaseUri", $.String);

    $.Property({Static:false, Public:false}, "SystemID", $.String);

    $.Property({Static:false, Public:false}, "PublicID", $.String);

    $.Property({Static:false, Public:false}, "InternalSubset", $.String);

    $.Property({Static:false, Public:false}, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "ParsingInternalSubset", $.Boolean);

    $.Property({Static:false, Public:false}, "IgnoreEntityReferences", $.Boolean);

    $.Property({Static:false, Public:false}, "SaveInternalSubsetValue", $.Boolean);

    $.Property({Static:false, Public:false}, "ParsingTopLevelMarkup", $.Boolean);

    $.Property({Static:false, Public:false}, "LineNo", $.Int32);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    $.Property({Static:false, Public:false}, "BaseUriStr", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.DtdParser+Token */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DtdParser+Token", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    CDATA: 0, 
    ID: 1, 
    IDREF: 2, 
    IDREFS: 3, 
    ENTITY: 4, 
    ENTITIES: 5, 
    NMTOKEN: 6, 
    NMTOKENS: 7, 
    NOTATION: 8, 
    None: 9, 
    PERef: 10, 
    AttlistDecl: 11, 
    ElementDecl: 12, 
    EntityDecl: 13, 
    NotationDecl: 14, 
    Comment: 15, 
    PI: 16, 
    CondSectionStart: 17, 
    CondSectionEnd: 18, 
    Eof: 19, 
    REQUIRED: 20, 
    IMPLIED: 21, 
    FIXED: 22, 
    QName: 23, 
    Name: 24, 
    Nmtoken: 25, 
    Quote: 26, 
    LeftParen: 27, 
    RightParen: 28, 
    GreaterThan: 29, 
    Or: 30, 
    LeftBracket: 31, 
    RightBracket: 32, 
    PUBLIC: 33, 
    SYSTEM: 34, 
    Literal: 35, 
    DOCTYPE: 36, 
    NData: 37, 
    Percent: 38, 
    Star: 39, 
    QMark: 40, 
    Plus: 41, 
    PCDATA: 42, 
    Comma: 43, 
    ANY: 44, 
    EMPTY: 45, 
    IGNORE: 46, 
    INCLUDE: 47, 
  }
);

/* enum System.Xml.DtdParser+ScanningFunction */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DtdParser+ScanningFunction", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    SubsetContent: 0, 
    Name: 1, 
    QName: 2, 
    Nmtoken: 3, 
    Doctype1: 4, 
    Doctype2: 5, 
    Element1: 6, 
    Element2: 7, 
    Element3: 8, 
    Element4: 9, 
    Element5: 10, 
    Element6: 11, 
    Element7: 12, 
    Attlist1: 13, 
    Attlist2: 14, 
    Attlist3: 15, 
    Attlist4: 16, 
    Attlist5: 17, 
    Attlist6: 18, 
    Attlist7: 19, 
    Entity1: 20, 
    Entity2: 21, 
    Entity3: 22, 
    Notation1: 23, 
    CondSection1: 24, 
    CondSection2: 25, 
    CondSection3: 26, 
    Literal: 27, 
    SystemId: 28, 
    PublicId1: 29, 
    PublicId2: 30, 
    ClosingTag: 31, 
    ParamEntitySpace: 32, 
    None: 33, 
  }
);

/* enum System.Xml.DtdParser+LiteralType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.DtdParser+LiteralType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AttributeValue: 0, 
    EntityReplText: 1, 
    SystemOrPublicID: 2, 
  }
);

/* class System.Xml.DtdParser+UndeclaredNotation */ 

(function UndeclaredNotation$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.DtdParser+UndeclaredNotation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "lineNo", $.Int32);

    $.Field({Static:false, Public:false}, "linePos", $.Int32);

    $.Field({Static:false, Public:false}, "next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.DtdParser+ParseElementOnlyContent_LocalFrame */ 

(function ParseElementOnlyContent_LocalFrame$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.DtdParser+ParseElementOnlyContent_LocalFrame", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:true }, "startParenEntityId", $.Int32);

    $.Field({Static:false, Public:true }, "parsingSchema", $asm07.TypeRef("System.Xml.DtdParser+Token"));

    $.Field({Static:false, Public:true }, "connectorEntityId", $.Int32);

    $.Field({Static:false, Public:true }, "contentEntityId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DtdValidator */ 

(function DtdValidator$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseValidator"), 
      Name: "System.Xml.Schema.DtdValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddID", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckDefaultValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $asm07.TypeRef("System.Xml.IDtdParserAdapter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenEntity", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEntity", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaEntity"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "MeetsStandAloneConstraint", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlTokenizedType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:true , Public:true }, "SetDefaultTypedValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $asm07.TypeRef("System.Xml.IDtdParserAdapter")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidatePIComment", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", $.Int32, 10);

    $.Field({Static:true , Public:false}, "namespaceManager", $asm07.TypeRef("System.Xml.Schema.DtdValidator+NamespaceManager"));

    $.Field({Static:false, Public:false}, "validationStack", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "attPresence", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "IDs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "idRefListHead", $asm07.TypeRef("System.Xml.Schema.IdRefNode"));

    $.Field({Static:false, Public:false}, "processIdentityConstraints", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DtdValidator+NamespaceManager */ 

(function NamespaceManager$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
      Name: "System.Xml.Schema.DtdValidator+NamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.FacetsChecker */ 

(function FacetsChecker$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.FacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckLexicalFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckPatternFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.Schema.RestrictionFacets"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Decimal"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Int64, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Int16, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Byte, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.DateTime"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Double, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Single, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckWhitespaceFacets", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.String]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ConstructRestriction", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.RestrictionFacets"), [
          $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Power", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int32, $.Int32])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.Schema.FacetsChecker+FacetsCompiler */ 

(function FacetsCompiler$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.FacetsChecker+FacetsCompiler", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"), $asm07.TypeRef("System.Xml.Schema.RestrictionFacets")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDupFlag", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckProhibitedFlag", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileEnumerationFacet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileFacetCombinations", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileFractionDigitsFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileLengthFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMaxExclusiveFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMaxInclusiveFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMaxLengthFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMinExclusiveFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMinInclusiveFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileMinLengthFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompilePatternFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileTotalDigitsFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileWhitespaceFacet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFacetsFromBaseType", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FinishFacetCompile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseFacetValue", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
          $.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $asm07.TypeRef("System.Xml.XmlNameTable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Preprocess", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), $asm07.TypeRef("System.Xml.Schema.RestrictionFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFlag", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.RestrictionFlags"))
    );

    $.Field({Static:false, Public:false}, "datatype", $asm07.TypeRef("System.Xml.Schema.DatatypeImplementation"));

    $.Field({Static:false, Public:false}, "derivedRestriction", $asm07.TypeRef("System.Xml.Schema.RestrictionFacets"));

    $.Field({Static:false, Public:false}, "baseFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Field({Static:false, Public:false}, "baseFixedFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Field({Static:false, Public:false}, "validRestrictionFlags", $asm07.TypeRef("System.Xml.Schema.RestrictionFlags"));

    $.Field({Static:false, Public:false}, "nonNegativeInt", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "builtInType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "builtInEnum", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Field({Static:false, Public:false}, "firstPattern", $.Boolean);

    $.Field({Static:false, Public:false}, "regStr", $asm00.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "pattern_facet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaPatternFacet"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "c_map", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.FacetsChecker+FacetsCompiler+Map")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.Schema.FacetsChecker+FacetsCompiler+Map */ 

(function Map$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.FacetsChecker+FacetsCompiler+Map", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Char, $.String])
    );

    $.Field({Static:false, Public:false}, "match", $.Char);

    $.Field({Static:false, Public:false}, "replacement", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Numeric10FacetsChecker */ 

(function Numeric10FacetsChecker$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.Numeric10FacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTotalAndFractionDigits", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $asm00.TypeRef("System.Decimal"), $.Int32, 
          $.Int32, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Decimal"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Int64, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Int16, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Byte, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlValueConverter")
        ])
    );

    $.Field({Static:true , Public:false, ReadOnly:true }, "signs", $jsilcore.TypeRef("System.Array", [$.Char]));

    $.Field({Static:false, Public:false}, "maxValue", $asm00.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "minValue", $asm00.TypeRef("System.Decimal"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Numeric2FacetsChecker */ 

(function Numeric2FacetsChecker$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.Numeric2FacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Double, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Single, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Double, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlValueConverter")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DurationFacetsChecker */ 

(function DurationFacetsChecker$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.DurationFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.TimeSpan"), $asm00.TypeRef("System.Collections.ArrayList")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.DateTimeFacetsChecker */ 

(function DateTimeFacetsChecker$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.DateTimeFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.DateTime"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.StringFacetsChecker */ 

(function StringFacetsChecker$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.StringFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckBuiltInFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_LanguagePattern", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Text.RegularExpressions.Regex"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.Field({Static:true , Public:false}, "languagePattern", $asm01.TypeRef("System.Text.RegularExpressions.Regex"));

    $.Property({Static:true , Public:false}, "LanguagePattern", $asm01.TypeRef("System.Text.RegularExpressions.Regex"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.QNameFacetsChecker */ 

(function QNameFacetsChecker$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.QNameFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Collections.ArrayList")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.MiscFacetsChecker */ 

(function MiscFacetsChecker$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.MiscFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.BinaryFacetsChecker */ 

(function BinaryFacetsChecker$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.BinaryFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ListFacetsChecker */ 

(function ListFacetsChecker$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.ListFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.UnionFacetsChecker */ 

(function UnionFacetsChecker$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.FacetsChecker"), 
      Name: "System.Xml.Schema.UnionFacetsChecker", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CheckValueFacets", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "MatchEnumeration", 
      new JSIL.MethodSignature($.Boolean, [
          $.Object, $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.NamespaceList */ 

(function NamespaceList$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.NamespaceList", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CompareSetToOther", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Enumerate", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Excluded", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.NamespaceList+ListType"))
    );

    $.ExternalMethod({Static:true , Public:true }, "Intersection", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:true }, "IsSubset", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:true }, "Union", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.Schema.NamespaceList+ListType"));

    $.Field({Static:false, Public:false}, "set", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "targetNamespace", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm07.TypeRef("System.Xml.Schema.NamespaceList+ListType"));

    $.Property({Static:false, Public:true }, "Excluded", $.String);

    $.Property({Static:false, Public:true }, "Enumerate", $asm00.TypeRef("System.Collections.ICollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.NamespaceList+ListType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.NamespaceList+ListType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Any: 0, 
    Other: 1, 
    Set: 2, 
  }
);

/* class System.Xml.Schema.NamespaceListV1Compat */ 

(function NamespaceListV1Compat$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.NamespaceList"), 
      Name: "System.Xml.Schema.NamespaceListV1Compat", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Parser */ 

(function Parser$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.Parser", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaType"), $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.Schema.SchemaNames"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSchemaRoot", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.SchemaType"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlNsAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlAttribute"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "FinishParsing", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XdrSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadAttributeNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadElementNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlElement"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadEntityReferenceInAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlEntityReference"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaType"), [$asm07.TypeRef("System.Xml.XmlReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ParseReaderNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAppInfoDocMarkup", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:true }, "StartParsing", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlReader"), $.String])
    );

    $.Field({Static:false, Public:false}, "schemaType", $asm07.TypeRef("System.Xml.Schema.SchemaType"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "namespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "positionInfo", $asm07.TypeRef("System.Xml.PositionInfo"));

    $.Field({Static:false, Public:false}, "isProcessNamespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaXmlDepth", $.Int32);

    $.Field({Static:false, Public:false}, "markupDepth", $.Int32);

    $.Field({Static:false, Public:false}, "builder", $asm07.TypeRef("System.Xml.Schema.SchemaBuilder"));

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "xdrSchema", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "dummyDocument", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "processMarkup", $.Boolean);

    $.Field({Static:false, Public:false}, "parentNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "annotationNSManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "xmlns", $.String);

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Property({Static:false, Public:true }, "XmlSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "XdrSchema", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.Compositor */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.Compositor", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Root: 0, 
    Include: 1, 
    Import: 2, 
    Redefine: 3, 
  }
);

/* class System.Xml.Schema.RedefineEntry */ 

(function RedefineEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.RedefineEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaRedefine"), $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.Field({Static:false, Public:false}, "redefine", $asm07.TypeRef("System.Xml.Schema.XmlSchemaRedefine"));

    $.Field({Static:false, Public:false}, "schemaToUpdate", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.Preprocessor */ 

(function Preprocessor$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseProcessor"), 
      Name: "System.Xml.Schema.Preprocessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildRefNamespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildSchemaList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CleanupRedefine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaExternal"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyIncludedComponents", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CountGroupSelfReference", 
      new JSIL.MethodSignature($.Int32, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderSettings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RootSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetBuildInSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChameleonSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetIncludedSet", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm00.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaEntity", 
      new JSIL.MethodSignature($.Object, [$asm01.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadExternals", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseUri", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Preprocess", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $asm00.TypeRef("System.Collections.ArrayList")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeContent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessComplexType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElementContent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessIdentityConstraint", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessNotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaNotation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessRedefine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.RedefineEntry"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessSimpleType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSchemaLocationUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Uri"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ChameleonSchemas", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReaderSettings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaLocations", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSchemaDefaults", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateIdAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNameAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQNameAttribute", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.Constant({Static:true , Public:false}, "schemaBlockDefaultAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 7);

    $.Constant({Static:true , Public:false}, "schemaFinalDefaultAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 30);

    $.Constant({Static:true , Public:false}, "elementBlockAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 7);

    $.Constant({Static:true , Public:false}, "elementFinalAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 6);

    $.Constant({Static:true , Public:false}, "simpleTypeFinalAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 30);

    $.Constant({Static:true , Public:false}, "complexTypeBlockAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 6);

    $.Constant({Static:true , Public:false}, "complexTypeFinalAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 6);

    $.Field({Static:false, Public:false}, "Xmlns", $.String);

    $.Field({Static:false, Public:false}, "NsXsi", $.String);

    $.Field({Static:false, Public:false}, "targetNamespace", $.String);

    $.Field({Static:false, Public:false}, "rootSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "currentSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "elementFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "attributeFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "blockDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "finalDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "schemaLocations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "chameleonSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "referenceNamespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "processedExternals", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "lockList", $asm00.TypeRef("System.Collections.SortedList"));

    $.Field({Static:false, Public:false}, "readerSettings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Field({Static:false, Public:false}, "rootSchemaForRedefine", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "redefinedList", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "builtInSchemaForXmlNS", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "ReaderSettings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:false}, "SchemaLocations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ChameleonSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "RootSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SchemaDeclBase */ 

(function SchemaDeclBase$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SchemaDeclBase", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckEnumeration", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckValue", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Datatype", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValueRaw", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValueTyped", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsDeclaredInExternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinLength", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Presence", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaDeclBase+Use"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Datatype", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValueRaw", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValueTyped", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDeclaredInExternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinLength", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Prefix", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Presence", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaDeclBase+Use"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Values", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "values", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "schemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "datatype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "isDeclaredInExternal", $.Boolean);

    $.Field({Static:false, Public:false}, "presence", $asm07.TypeRef("System.Xml.Schema.SchemaDeclBase+Use"));

    $.Field({Static:false, Public:false}, "defaultValueRaw", $.String);

    $.Field({Static:false, Public:false}, "defaultValueTyped", $.Object);

    $.Field({Static:false, Public:false}, "maxLength", $.Int64);

    $.Field({Static:false, Public:false}, "minLength", $.Int64);

    $.Property({Static:false, Public:true }, "Name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true }, "Values", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:true }, "Presence", $asm07.TypeRef("System.Xml.Schema.SchemaDeclBase+Use"));

    $.Property({Static:false, Public:true }, "MaxLength", $.Int64);

    $.Property({Static:false, Public:true }, "MinLength", $.Int64);

    $.Property({Static:false, Public:true }, "IsDeclaredInExternal", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true }, "Datatype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Property({Static:false, Public:true }, "DefaultValueRaw", $.String);

    $.Property({Static:false, Public:true }, "DefaultValueTyped", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.SchemaDeclBase+Use */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.SchemaDeclBase+Use", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Required: 1, 
    Implied: 2, 
    Fixed: 3, 
    RequiredFixed: 4, 
  }
);

/* class System.Xml.Schema.SchemaAttDef */ 

(function SchemaAttDef$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SchemaDeclBase"), 
      Name: "System.Xml.Schema.SchemaAttDef", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDefaultValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaInfo"), $asm07.TypeRef("System.Xml.IDtdParserAdapter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckXmlSpace", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultValueChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValueExpanded", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasEntityRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LineNum", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LinePos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Reserved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaAttDef+Reserve"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueLineNum", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueLinePos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValueExpanded", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasEntityRef", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LineNum", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_LinePos", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Reserved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaAttDef+Reserve"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValueLineNum", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValueLinePos", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "reserved", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef+Reserve"));

    $.Field({Static:false, Public:false}, "defExpanded", $.String);

    $.Field({Static:false, Public:false}, "hasEntityRef", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:false, Public:false}, "defaultValueChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "lineNum", $.Int32);

    $.Field({Static:false, Public:false}, "linePos", $.Int32);

    $.Field({Static:false, Public:false}, "valueLineNum", $.Int32);

    $.Field({Static:false, Public:false}, "valueLinePos", $.Int32);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Property({Static:false, Public:false}, "LinePos", $.Int32);

    $.Property({Static:false, Public:false}, "LineNum", $.Int32);

    $.Property({Static:false, Public:false}, "ValueLinePos", $.Int32);

    $.Property({Static:false, Public:false}, "ValueLineNum", $.Int32);

    $.Property({Static:false, Public:false}, "DefaultValueChecked", $.Boolean);

    $.Property({Static:false, Public:true }, "DefaultValueExpanded", $.String);

    $.Property({Static:false, Public:true }, "Reserved", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef+Reserve"));

    $.Property({Static:false, Public:true }, "HasEntityRef", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.SchemaAttDef+Reserve */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.SchemaAttDef+Reserve", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    XmlSpace: 1, 
    XmlLang: 2, 
  }
);

/* class System.Xml.Schema.SchemaBuilder */ 

(function SchemaBuilder$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SchemaBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndChildren", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsContentParsed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessElement", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessMarkup", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartChildren", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SchemaCollectionCompiler */ 

(function SchemaCollectionCompiler$Members () {
  var $, $thisType;


































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseProcessor"), 
      Name: "System.Xml.Schema.SchemaCollectionCompiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildParticleContentModel", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateEffectiveTotalRange", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CalculateSequenceRange", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Decimal")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeAll", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAll"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeChoice", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeGroupRef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeParticle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CannonicalizeSequence", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckParticleDerivation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSubstitutionGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckUnionType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Cleanup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CleanupSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeIntersection", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAnyAttributeUnion", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileBaseMemberTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileCompexTypeElements", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContent", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.ContentValidator"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentExtension", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexContentRestriction", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileContentTypeParticle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileIdentityConstraint", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileLocalAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileParticleElements", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSubstitutionGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAnySchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetComplexType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMappingParticle", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaContentType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSimpleType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAnyFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromElement", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsElementFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromAny", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGroupBaseFromGroupBase", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsParticleEmptiable", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromAll", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAll")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequenceFromChoice", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidOccurrenceRangeRestriction", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal"), 
          $asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Decimal")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsValidRestriction", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Output", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.Field({Static:false, Public:false}, "compileContentModel", $.Boolean);

    $.Field({Static:false, Public:false}, "examplars", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "complexTypeStack", $asm00.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SchemaCollectionPreprocessor */ 

(function SchemaCollectionPreprocessor$Members () {
  var $, $thisType;



































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseProcessor"), 
      Name: "System.Xml.Schema.SchemaCollectionPreprocessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildRefNamespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRefinedSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Cleanup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CountGroupSelfReference", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Execute", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaEntity", 
      new JSIL.MethodSignature($asm00.TypeRef("System.IO.Stream"), [$asm01.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadExternals", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Preprocess", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.SchemaCollectionPreprocessor+Compositor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeContent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessComplexType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessElementContent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessIdentityConstraint", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessLocalElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessNotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaNotation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessRedefine", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaRedefine"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessSimpleType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSchemaLocationUri", 
      new JSIL.MethodSignature($asm01.TypeRef("System.Uri"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateIdAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateNameAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateQNameAttribute", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.Constant({Static:true , Public:false}, "schemaBlockDefaultAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 7);

    $.Constant({Static:true , Public:false}, "schemaFinalDefaultAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 30);

    $.Constant({Static:true , Public:false}, "elementBlockAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 7);

    $.Constant({Static:true , Public:false}, "elementFinalAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 6);

    $.Constant({Static:true , Public:false}, "simpleTypeFinalAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 28);

    $.Constant({Static:true , Public:false}, "complexTypeBlockAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 6);

    $.Constant({Static:true , Public:false}, "complexTypeFinalAllowed", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"), 6);

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "targetNamespace", $.String);

    $.Field({Static:false, Public:false}, "buildinIncluded", $.Boolean);

    $.Field({Static:false, Public:false}, "elementFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "attributeFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "blockDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "finalDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "schemaLocations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "referenceNamespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "Xmlns", $.String);

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.SchemaCollectionPreprocessor+Compositor */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.SchemaCollectionPreprocessor+Compositor", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Root: 0, 
    Include: 1, 
    Import: 2, 
  }
);

/* class System.Xml.Schema.SchemaElementDecl */ 

(function SchemaElementDecl$Members () {
  var $, $thisType;




































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SchemaDeclBase"), 
      Name: "System.Xml.Schema.SchemaElementDecl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.SchemaType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddAttDef", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CheckAttributes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Hashtable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:true }, "CreateAnyTypeElementDecl", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "EndAddAttDef", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttDefs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Block", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constraints", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentValidator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ContentValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultAttDefs", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasDefaultAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasNonCDataAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_HasRequiredAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsIdDeclared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNillable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNotationDeclared", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProhibitedAttributes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttDef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Block", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Constraints", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentValidator", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ContentValidator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasNonCDataAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_HasRequiredAttribute", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsIdDeclared", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNillable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNotationDeclared", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.Field({Static:false, Public:false}, "contentValidator", $asm07.TypeRef("System.Xml.Schema.ContentValidator"));

    $.Field({Static:false, Public:false}, "attdefs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "prohibitedAttributes", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "tmpDefaultAttdefs", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "defaultAttdefs", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef")]));

    $.Field({Static:false, Public:false}, "isAbstract", $.Boolean);

    $.Field({Static:false, Public:false}, "isNillable", $.Boolean);

    $.Field({Static:false, Public:false}, "block", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "isIdDeclared", $.Boolean);

    $.Field({Static:false, Public:false}, "isNotationDeclared", $.Boolean);

    $.Field({Static:false, Public:false}, "hasRequiredAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "hasNonCDataAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "constraints", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]));

    $.Field({Static:false, Public:false}, "schemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNillable", $.Boolean);

    $.Property({Static:false, Public:true }, "Block", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Property({Static:false, Public:true }, "IsIdDeclared", $.Boolean);

    $.Property({Static:false, Public:true }, "IsNotationDeclared", $.Boolean);

    $.Property({Static:false, Public:true }, "HasDefaultAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "HasRequiredAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "HasNonCDataAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "ContentValidator", $asm07.TypeRef("System.Xml.Schema.ContentValidator"));

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Property({Static:false, Public:true }, "Constraints", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint")]));

    $.Property({Static:false, Public:true }, "SchemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true }, "AttDefs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "DefaultAttDefs", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef")]));

    $.Property({Static:false, Public:true }, "ProhibitedAttributes", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SchemaEntity */ 

(function SchemaEntity$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SchemaEntity", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeclaredInExternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeclaredURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExternal", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsParEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProcessed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Line", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NData", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pos", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pubid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Url", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsPredefinedEntity", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DeclaredInExternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DeclaredURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsExternal", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsParEntity", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsProcessed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Line", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NData", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pos", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pubid", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Text", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Url", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "url", $.String);

    $.Field({Static:false, Public:false}, "pubid", $.String);

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "ndata", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "isParameter", $.Boolean);

    $.Field({Static:false, Public:false}, "isExternal", $.Boolean);

    $.Field({Static:false, Public:false}, "isProcessed", $.Boolean);

    $.Field({Static:false, Public:false}, "isDeclaredInExternal", $.Boolean);

    $.Field({Static:false, Public:false}, "baseURI", $.String);

    $.Field({Static:false, Public:false}, "declaredURI", $.String);

    $.Property({Static:false, Public:false}, "Name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Url", $.String);

    $.Property({Static:false, Public:false}, "Pubid", $.String);

    $.Property({Static:false, Public:false}, "IsProcessed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsExternal", $.Boolean);

    $.Property({Static:false, Public:false}, "DeclaredInExternal", $.Boolean);

    $.Property({Static:false, Public:false}, "IsParEntity", $.Boolean);

    $.Property({Static:false, Public:false}, "NData", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Text", $.String);

    $.Property({Static:false, Public:false}, "Line", $.Int32);

    $.Property({Static:false, Public:false}, "Pos", $.Int32);

    $.Property({Static:false, Public:false}, "BaseURI", $.String);

    $.Property({Static:false, Public:false}, "DeclaredURI", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.AttributeMatchState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.AttributeMatchState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    AttributeFound: 0, 
    AnyIdAttributeFound: 1, 
    UndeclaredElementAndAttribute: 2, 
    UndeclaredAttribute: 3, 
    AnyAttributeLax: 4, 
    AnyAttributeSkip: 5, 
    ProhibitedAnyAttribute: 6, 
    ProhibitedAttribute: 7, 
    AttributeNameMismatch: 8, 
    ValidateAttributeInvalidCall: 9, 
  }
);

/* class System.Xml.Schema.SchemaInfo */ 

(function SchemaInfo$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SchemaInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.Type, $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Finish", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeDecls", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DocTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementDecls", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementDeclsByType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GeneralEntities", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasNonCDataAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParameterEntities", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespaces", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UndeclaredElementDecls", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeXdr", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeXsd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), [
          $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.AttributeMatchState")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetAttributeXsd", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), [
          $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetElementDecl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetTypeDecl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "HasSchema", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DocTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ErrorCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasDefaultAttributes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasNonCDataAttributes", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaType"))
    );

    $.Field({Static:false, Public:false}, "schemaType", $asm07.TypeRef("System.Xml.Schema.SchemaType"));

    $.Field({Static:false, Public:false}, "targetNamespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "elementDecls", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "undeclaredElementDecls", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "elementDeclsByType", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "attributeDecls", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "generalEntities", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "parameterEntities", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "notations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "docTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "errorCount", $.Int32);

    $.Field({Static:false, Public:false}, "hasNonCDataAttributes", $.Boolean);

    $.Field({Static:false, Public:false}, "hasDefaultAttributes", $.Boolean);

    $.Property({Static:false, Public:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.SchemaType"));

    $.Property({Static:false, Public:true }, "TargetNamespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "ElementDecls", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "UndeclaredElementDecls", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "ElementDeclsByType", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "AttributeDecls", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "GeneralEntities", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "ParameterEntities", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Notations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "DocTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "ErrorCount", $.Int32);

    $.Property({Static:false, Public:false}, "HasDefaultAttributes", $.Boolean);

    $.Property({Static:false, Public:false}, "HasNonCDataAttributes", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SchemaNames */ 

(function SchemaNames$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SchemaNames", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateTokenToQNameTable", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Schema.SchemaNames+Token")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsXDRRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsXSDRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "SchemaTypeFromRoot", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaType"), [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:true }, "NsDataType", $.String);

    $.Field({Static:false, Public:true }, "NsDataTypeAlias", $.String);

    $.Field({Static:false, Public:true }, "NsDataTypeOld", $.String);

    $.Field({Static:false, Public:true }, "NsXml", $.String);

    $.Field({Static:false, Public:true }, "NsXmlNs", $.String);

    $.Field({Static:false, Public:true }, "NsXdr", $.String);

    $.Field({Static:false, Public:true }, "NsXdrAlias", $.String);

    $.Field({Static:false, Public:true }, "NsXs", $.String);

    $.Field({Static:false, Public:true }, "NsXsi", $.String);

    $.Field({Static:false, Public:true }, "XsiType", $.String);

    $.Field({Static:false, Public:true }, "XsiNil", $.String);

    $.Field({Static:false, Public:true }, "XsiSchemaLocation", $.String);

    $.Field({Static:false, Public:true }, "XsiNoNamespaceSchemaLocation", $.String);

    $.Field({Static:false, Public:true }, "XsdSchema", $.String);

    $.Field({Static:false, Public:true }, "XdrSchema", $.String);

    $.Field({Static:false, Public:true }, "QnPCData", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXml", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXmlNs", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtDt", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXmlLang", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnMaxOccurs", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnMinOccurs", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnInfinite", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnModel", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnOpen", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnClosed", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnContent", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnMixed", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnEmpty", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnEltOnly", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnTextOnly", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnOrder", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnSeq", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnOne", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnMany", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnRequired", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnYes", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnNo", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnString", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnID", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnIDRef", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnIDRefs", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnEntity", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnEntities", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnNmToken", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnNmTokens", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnEnumeration", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDefault", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrSchema", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrElementType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrElement", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrGroup", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrAttributeType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrAttribute", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrDataType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrDescription", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrExtends", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXdrAliasSchema", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtValues", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtMaxLength", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtMinLength", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtMax", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtMin", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtMinExclusive", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDtMaxExclusive", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnTargetNamespace", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnVersion", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnFinalDefault", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnBlockDefault", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnFixed", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnAbstract", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnBlock", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnSubstitutionGroup", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnFinal", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnNillable", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnRef", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnBase", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnDerivedBy", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnNamespace", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnProcessContents", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnRefer", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnPublic", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnSystem", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnSchemaLocation", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnValue", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnUse", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnForm", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnElementFormDefault", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnAttributeFormDefault", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnItemType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnMemberTypes", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXPath", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdSchema", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAnnotation", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdInclude", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdImport", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdElement", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAttribute", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAttributeGroup", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAnyAttribute", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdGroup", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAll", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdChoice", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdSequence", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAny", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdNotation", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdSimpleType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdComplexType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdUnique", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdKey", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdKeyRef", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdSelector", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdField", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdMinExclusive", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdMinInclusive", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdMaxInclusive", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdMaxExclusive", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdTotalDigits", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdFractionDigits", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdLength", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdMinLength", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdMaxLength", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdEnumeration", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdPattern", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdDocumentation", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAppinfo", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnSource", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdComplexContent", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdSimpleContent", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdRestriction", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdExtension", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdUnion", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdList", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdWhiteSpace", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdRedefine", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:true }, "QnXsdAnyType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "TokenToQName", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.SchemaNames+Token */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.SchemaNames+Token", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Empty: 0, 
    SchemaName: 1, 
    SchemaType: 2, 
    SchemaMaxOccurs: 3, 
    SchemaMinOccurs: 4, 
    SchemaInfinite: 5, 
    SchemaModel: 6, 
    SchemaOpen: 7, 
    SchemaClosed: 8, 
    SchemaContent: 9, 
    SchemaMixed: 10, 
    SchemaEmpty: 11, 
    SchemaElementOnly: 12, 
    SchemaTextOnly: 13, 
    SchemaOrder: 14, 
    SchemaSeq: 15, 
    SchemaOne: 16, 
    SchemaMany: 17, 
    SchemaRequired: 18, 
    SchemaYes: 19, 
    SchemaNo: 20, 
    SchemaString: 21, 
    SchemaId: 22, 
    SchemaIdref: 23, 
    SchemaIdrefs: 24, 
    SchemaEntity: 25, 
    SchemaEntities: 26, 
    SchemaNmtoken: 27, 
    SchemaNmtokens: 28, 
    SchemaEnumeration: 29, 
    SchemaDefault: 30, 
    XdrRoot: 31, 
    XdrElementType: 32, 
    XdrElement: 33, 
    XdrGroup: 34, 
    XdrAttributeType: 35, 
    XdrAttribute: 36, 
    XdrDatatype: 37, 
    XdrDescription: 38, 
    XdrExtends: 39, 
    SchemaXdrRootAlias: 40, 
    SchemaDtType: 41, 
    SchemaDtValues: 42, 
    SchemaDtMaxLength: 43, 
    SchemaDtMinLength: 44, 
    SchemaDtMax: 45, 
    SchemaDtMin: 46, 
    SchemaDtMinExclusive: 47, 
    SchemaDtMaxExclusive: 48, 
    SchemaTargetNamespace: 49, 
    SchemaVersion: 50, 
    SchemaFinalDefault: 51, 
    SchemaBlockDefault: 52, 
    SchemaFixed: 53, 
    SchemaAbstract: 54, 
    SchemaBlock: 55, 
    SchemaSubstitutionGroup: 56, 
    SchemaFinal: 57, 
    SchemaNillable: 58, 
    SchemaRef: 59, 
    SchemaBase: 60, 
    SchemaDerivedBy: 61, 
    SchemaNamespace: 62, 
    SchemaProcessContents: 63, 
    SchemaRefer: 64, 
    SchemaPublic: 65, 
    SchemaSystem: 66, 
    SchemaSchemaLocation: 67, 
    SchemaValue: 68, 
    SchemaSource: 69, 
    SchemaAttributeFormDefault: 70, 
    SchemaElementFormDefault: 71, 
    SchemaUse: 72, 
    SchemaForm: 73, 
    XsdSchema: 74, 
    XsdAnnotation: 75, 
    XsdInclude: 76, 
    XsdImport: 77, 
    XsdElement: 78, 
    XsdAttribute: 79, 
    xsdAttributeGroup: 80, 
    XsdAnyAttribute: 81, 
    XsdGroup: 82, 
    XsdAll: 83, 
    XsdChoice: 84, 
    XsdSequence: 85, 
    XsdAny: 86, 
    XsdNotation: 87, 
    XsdSimpleType: 88, 
    XsdComplexType: 89, 
    XsdUnique: 90, 
    XsdKey: 91, 
    XsdKeyref: 92, 
    XsdSelector: 93, 
    XsdField: 94, 
    XsdMinExclusive: 95, 
    XsdMinInclusive: 96, 
    XsdMaxExclusive: 97, 
    XsdMaxInclusive: 98, 
    XsdTotalDigits: 99, 
    XsdFractionDigits: 100, 
    XsdLength: 101, 
    XsdMinLength: 102, 
    XsdMaxLength: 103, 
    XsdEnumeration: 104, 
    XsdPattern: 105, 
    XsdDocumentation: 106, 
    XsdAppInfo: 107, 
    XsdComplexContent: 108, 
    XsdComplexContentExtension: 109, 
    XsdComplexContentRestriction: 110, 
    XsdSimpleContent: 111, 
    XsdSimpleContentExtension: 112, 
    XsdSimpleContentRestriction: 113, 
    XsdSimpleTypeList: 114, 
    XsdSimpleTypeRestriction: 115, 
    XsdSimpleTypeUnion: 116, 
    XsdWhitespace: 117, 
    XsdRedefine: 118, 
    SchemaItemType: 119, 
    SchemaMemberTypes: 120, 
    SchemaXPath: 121, 
    XmlLang: 122, 
  }
);

/* class System.Xml.Schema.SchemaNamespaceManager */ 

(function SchemaNamespaceManager$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
      Name: "System.Xml.Schema.SchemaNamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "node", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.SchemaNotation */ 

(function SchemaNotation$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.SchemaNotation", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Pubid", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SystemLiteral", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Pubid", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SystemLiteral", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Constant({Static:true , Public:false}, "SYSTEM", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "PUBLIC", $.Int32, 1);

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "systemLiteral", $.String);

    $.Field({Static:false, Public:false}, "pubid", $.String);

    $.Property({Static:false, Public:false}, "Name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "SystemLiteral", $.String);

    $.Property({Static:false, Public:false}, "Pubid", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.SchemaType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.SchemaType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    DTD: 1, 
    XDR: 2, 
    XSD: 3, 
  }
);

/* class System.Xml.Schema.ValidationEventArgs */ 

(function ValidationEventArgs$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.Schema.ValidationEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Exception", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Severity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSeverityType"))
    );

    $.Field({Static:false, Public:false}, "ex", $asm07.TypeRef("System.Xml.Schema.XmlSchemaException"));

    $.Field({Static:false, Public:false}, "severity", $asm07.TypeRef("System.Xml.Schema.XmlSeverityType"));

    $.Property({Static:false, Public:true }, "Severity", $asm07.TypeRef("System.Xml.Schema.XmlSeverityType"));

    $.Property({Static:false, Public:true }, "Exception", $asm07.TypeRef("System.Xml.Schema.XmlSchemaException"));

    $.Property({Static:false, Public:true }, "Message", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Schema.ValidationEventHandler */ 

JSIL.MakeDelegate("System.Xml.Schema.ValidationEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")]));

/* struct System.Xml.Schema.StateUnion */ 

(function StateUnion$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.StateUnion", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "State", $.Int32);

    $.Field({Static:false, Public:true , Offset: 0}, "AllElementsRequired", $.Int32);

    $.Field({Static:false, Public:true , Offset: 0}, "CurPosIndex", $.Int32);

    $.Field({Static:false, Public:true , Offset: 0}, "NumberOfRunningPos", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.ValidationState */ 

(function ValidationState$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.ValidationState", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:true }, "IsNill", $.Boolean);

    $.Field({Static:false, Public:true }, "IsDefault", $.Boolean);

    $.Field({Static:false, Public:true }, "NeedValidateChildren", $.Boolean);

    $.Field({Static:false, Public:true }, "CheckRequiredAttribute", $.Boolean);

    $.Field({Static:false, Public:true }, "ValidationSkipped", $.Boolean);

    $.Field({Static:false, Public:true }, "Depth", $.Int32);

    $.Field({Static:false, Public:true }, "ProcessContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Field({Static:false, Public:true }, "Validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Field({Static:false, Public:true }, "ElementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Field({Static:false, Public:true }, "ElementDeclBeforeXsi", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Field({Static:false, Public:true }, "LocalName", $.String);

    $.Field({Static:false, Public:true }, "Namespace", $.String);

    $.Field({Static:false, Public:true }, "Constr", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.ConstraintStruct")]));

    $.Field({Static:false, Public:true }, "CurrentState", $asm07.TypeRef("System.Xml.Schema.StateUnion"));

    $.Field({Static:false, Public:true }, "HasMatched", $.Boolean);

    $.Field({Static:false, Public:true }, "CurPos", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.BitSet")]));

    $.Field({Static:false, Public:true }, "AllElementsSet", $asm07.TypeRef("System.Xml.Schema.BitSet"));

    $.Field({Static:false, Public:true }, "RunningPositions", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.RangePositionInfo")]));

    $.Field({Static:false, Public:true }, "TooComplex", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrBuilder */ 

(function XdrBuilder$Members () {
  var $, $thisType;






















































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SchemaBuilder"), 
      Name: "System.Xml.Schema.XdrBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.SchemaNames"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddOrder", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDatatype", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDefaultAttValue", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CompareMinMaxLength", 
      new JSIL.MethodSignature(null, [
          $.UInt32, $.UInt32, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndChildren", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContent", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetModel", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextState", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetOrder", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HandleMinMax", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"), $.UInt32, 
          $.UInt32
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsContentParsed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsGlobal", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSkipableAttribute", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSkipableElement", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsXdrSchema", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsYes", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDtMaxLength", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Object, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseDtMinLength", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$.UInt32]), $.Object, 
          $.Type
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseInteger", 
      new JSIL.MethodSignature($.Boolean, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.UInt32])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMaxOccurs", 
      new JSIL.MethodSignature($.UInt32, [$.Object, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseMinOccurs", 
      new JSIL.MethodSignature($.UInt32, [$.Object, $.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PopGroupInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessElement", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessMarkup", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "PushGroupInfo", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributePresence", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartChildren", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginAttribute", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginAttributeType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginElementType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BeginRoot", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Default", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Required", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttribute_Type", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Default", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtMaxLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtMinLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_DtValues", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Name", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildAttributeType_Required", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_MaxOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_MinOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElement_Type", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Content", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtMaxLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtMinLength", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtType", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_DtValues", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Model", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Name", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildElementType_Order", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_MaxOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_MinOccurs", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildGroup_Order", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildRoot_ID", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_BuildRoot_Name", 
      new JSIL.MethodSignature(null, [
          $.Type, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "XDR_CheckAttributeDefault", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+DeclBaseInfo"), $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttribute", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttributeDtType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndAttributeType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndElement", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndElementDtType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndElementType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndGroup", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_EndRoot", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttribute", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttributeDtType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitAttributeType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitElement", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitElementDtType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitElementType", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "XDR_InitRoot", 
      new JSIL.MethodSignature(null, [$.Type, $.Object])
    );

    $.Constant({Static:true , Public:false}, "XdrSchema", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "XdrElementType", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "XdrAttributeType", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "XdrElement", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "XdrAttribute", $.Int32, 5);

    $.Constant({Static:true , Public:false}, "XdrGroup", $.Int32, 6);

    $.Constant({Static:true , Public:false}, "XdrElementDatatype", $.Int32, 7);

    $.Constant({Static:true , Public:false}, "XdrAttributeDatatype", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "SchemaFlagsNs", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "StackIncrement", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "SchemaOrderNone", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SchemaOrderMany", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "SchemaOrderSequence", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "SchemaOrderChoice", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "SchemaOrderAll", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "SchemaContentNone", $.Int32, 0);

    $.Constant({Static:true , Public:false}, "SchemaContentEmpty", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "SchemaContentText", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "SchemaContentMixed", $.Int32, 3);

    $.Constant({Static:true , Public:false}, "SchemaContentElement", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "x_schema", $.String, "x-schema:");

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_Element", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementType_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeType_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Group_SubElements", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Root_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementType_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeType_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Element_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Attribute_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_Group_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_ElementDataType_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_XDR_AttributeDataType_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "S_SchemaEntries", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrEntry")]));

    $.Field({Static:false, Public:false}, "_SchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "_TargetNamespace", $.String);

    $.Field({Static:false, Public:false}, "_reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "positionInfo", $asm07.TypeRef("System.Xml.PositionInfo"));

    $.Field({Static:false, Public:false}, "_contentValidator", $asm07.TypeRef("System.Xml.Schema.ParticleContentValidator"));

    $.Field({Static:false, Public:false}, "_CurState", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrEntry"));

    $.Field({Static:false, Public:false}, "_NextState", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrEntry"));

    $.Field({Static:false, Public:false}, "_StateHistory", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "_GroupStack", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "_XdrName", $.String);

    $.Field({Static:false, Public:false}, "_XdrPrefix", $.String);

    $.Field({Static:false, Public:false}, "_ElementDef", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+ElementContent"));

    $.Field({Static:false, Public:false}, "_GroupDef", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+GroupContent"));

    $.Field({Static:false, Public:false}, "_AttributeDef", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+AttributeContent"));

    $.Field({Static:false, Public:false}, "_UndefinedAttributeTypes", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+DeclBaseInfo"));

    $.Field({Static:false, Public:false}, "_BaseDecl", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+DeclBaseInfo"));

    $.Field({Static:false, Public:false}, "_NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "_SchemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "_CurNsMgr", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "_Text", $.String);

    $.Field({Static:false, Public:false}, "validationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "_UndeclaredElements", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrBuilder+DeclBaseInfo */ 

(function DeclBaseInfo$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XdrBuilder+DeclBaseInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_Name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "_Prefix", $.String);

    $.Field({Static:false, Public:false}, "_TypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "_TypePrefix", $.String);

    $.Field({Static:false, Public:false}, "_Default", $.Object);

    $.Field({Static:false, Public:false}, "_Revises", $.Object);

    $.Field({Static:false, Public:false}, "_MaxOccurs", $.UInt32);

    $.Field({Static:false, Public:false}, "_MinOccurs", $.UInt32);

    $.Field({Static:false, Public:false}, "_Checking", $.Boolean);

    $.Field({Static:false, Public:false}, "_ElementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Field({Static:false, Public:false}, "_Attdef", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"));

    $.Field({Static:false, Public:false}, "_Next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrBuilder+GroupContent */ 

(function GroupContent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XdrBuilder+GroupContent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature(null, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:true , Public:false}, "Copy", 
      new JSIL.MethodSignature($.Type, [$.Type])
    );

    $.Field({Static:false, Public:false}, "_MinVal", $.UInt32);

    $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32);

    $.Field({Static:false, Public:false}, "_HasMaxAttr", $.Boolean);

    $.Field({Static:false, Public:false}, "_HasMinAttr", $.Boolean);

    $.Field({Static:false, Public:false}, "_Order", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrBuilder+ElementContent */ 

(function ElementContent$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XdrBuilder+ElementContent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_ElementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Field({Static:false, Public:false}, "_ContentAttr", $.Int32);

    $.Field({Static:false, Public:false}, "_OrderAttr", $.Int32);

    $.Field({Static:false, Public:false}, "_MasterGroupRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "_ExistTerminal", $.Boolean);

    $.Field({Static:false, Public:false}, "_AllowDataType", $.Boolean);

    $.Field({Static:false, Public:false}, "_HasDataType", $.Boolean);

    $.Field({Static:false, Public:false}, "_HasType", $.Boolean);

    $.Field({Static:false, Public:false}, "_EnumerationRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "_MinVal", $.UInt32);

    $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32);

    $.Field({Static:false, Public:false}, "_MaxLength", $.UInt32);

    $.Field({Static:false, Public:false}, "_MinLength", $.UInt32);

    $.Field({Static:false, Public:false}, "_AttDefList", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrBuilder+AttributeContent */ 

(function AttributeContent$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XdrBuilder+AttributeContent", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "_AttDef", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"));

    $.Field({Static:false, Public:false}, "_Name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "_Prefix", $.String);

    $.Field({Static:false, Public:false}, "_Required", $.Boolean);

    $.Field({Static:false, Public:false}, "_MinVal", $.UInt32);

    $.Field({Static:false, Public:false}, "_MaxVal", $.UInt32);

    $.Field({Static:false, Public:false}, "_MaxLength", $.UInt32);

    $.Field({Static:false, Public:false}, "_MinLength", $.UInt32);

    $.Field({Static:false, Public:false}, "_EnumerationRequired", $.Boolean);

    $.Field({Static:false, Public:false}, "_HasDataType", $.Boolean);

    $.Field({Static:false, Public:false}, "_Global", $.Boolean);

    $.Field({Static:false, Public:false}, "_Default", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Schema.XdrBuilder+XdrBuildFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder+XdrBuildFunction", false, [], 
  new JSIL.MethodSignature(null, [
      $asm07.TypeRef("System.Xml.Schema.XdrBuilder"), $asm00.TypeRef("System.Object"), 
      $asm00.TypeRef("System.String")
    ]));

/* delegate System.Xml.Schema.XdrBuilder+XdrInitFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder+XdrInitFunction", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XdrBuilder"), $asm00.TypeRef("System.Object")]));

/* delegate System.Xml.Schema.XdrBuilder+XdrBeginChildFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder+XdrBeginChildFunction", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XdrBuilder")));

/* delegate System.Xml.Schema.XdrBuilder+XdrEndChildFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XdrBuilder+XdrEndChildFunction", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XdrBuilder")));

/* class System.Xml.Schema.XdrBuilder+XdrAttributeEntry */ 

(function XdrAttributeEntry$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XdrBuilder+XdrAttributeEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"), $asm07.TypeRef("System.Xml.XmlTokenizedType"), 
          $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrBuildFunction")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"), $asm07.TypeRef("System.Xml.XmlTokenizedType"), 
          $.Int32, $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrBuildFunction")
        ])
    );

    $.Field({Static:false, Public:false}, "_Attribute", $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"));

    $.Field({Static:false, Public:false}, "_SchemaFlags", $.Int32);

    $.Field({Static:false, Public:false}, "_Datatype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "_BuildFunc", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrBuildFunction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrBuilder+XdrEntry */ 

(function XdrEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XdrBuilder+XdrEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"), $jsilcore.TypeRef("System.Array", [$.Int32]), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]), $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrInitFunction"), 
          $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrBeginChildFunction"), $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrEndChildFunction"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "_Name", $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"));

    $.Field({Static:false, Public:false}, "_NextStates", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:false, Public:false}, "_Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrAttributeEntry")]));

    $.Field({Static:false, Public:false}, "_InitFunc", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrInitFunction"));

    $.Field({Static:false, Public:false}, "_BeginChildFunc", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrBeginChildFunction"));

    $.Field({Static:false, Public:false}, "_EndChildFunc", $asm07.TypeRef("System.Xml.Schema.XdrBuilder+XdrEndChildFunction"));

    $.Field({Static:false, Public:false}, "_AllowText", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XdrValidator */ 

(function XdrValidator$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseValidator"), 
      Name: "System.Xml.Schema.XdrValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.BaseValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddID", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:true , Public:true }, "CheckDefaultValue", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), 
          $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $asm07.TypeRef("System.Xml.XmlNameTable"), $.Object, 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInlineSchemaStarted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchemaFromLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlTokenizedType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "QualifiedName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ThoroughGetElementDecl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "x_schema", $.String, "x-schema:");

    $.Field({Static:false, Public:false}, "validationStack", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "attPresence", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "$name", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "nsManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "isProcessContents", $.Boolean);

    $.Field({Static:false, Public:false}, "IDs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "idRefListHead", $asm07.TypeRef("System.Xml.Schema.IdRefNode"));

    $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm07.TypeRef("System.Xml.Schema.Parser"));

    $.Property({Static:false, Public:false}, "IsInlineSchemaStarted", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlAtomicValue */ 

(function XmlAtomicValue$Members () {
  var $, $thisType;

























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XPath.XPathItem"), 
      Name: "System.Xml.Schema.XmlAtomicValue", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Double])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Object, 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNode", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrefixFromQName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.ICloneable.Clone", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.ICloneable"), "Clone");

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ValueAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.Field({Static:false, Public:false}, "xmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "objVal", $.Object);

    $.Field({Static:false, Public:false}, "clrType", $asm00.TypeRef("System.TypeCode"));

    $.Field({Static:false, Public:false}, "unionVal", $asm07.TypeRef("System.Xml.Schema.XmlAtomicValue+Union"));

    $.Field({Static:false, Public:false}, "nsPrefix", $asm07.TypeRef("System.Xml.Schema.XmlAtomicValue+NamespacePrefixForQName"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsNode", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypedValue", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsBoolean", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDateTime", $asm00.TypeRef("System.DateTime"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsDouble", $.Double);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsInt", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "ValueAsLong", $.Int64);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.ICloneable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.Schema.XmlAtomicValue+Union */ 

(function Union$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.XmlAtomicValue+Union", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      ExplicitLayout: true, 
      SizeBytes: 8, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true , Offset: 0}, "boolVal", $.Boolean);

    $.Field({Static:false, Public:true , Offset: 0}, "dblVal", $.Double);

    $.Field({Static:false, Public:true , Offset: 0}, "i64Val", $.Int64);

    $.Field({Static:false, Public:true , Offset: 0}, "i32Val", $.Int32);

    $.Field({Static:false, Public:true , Offset: 0}, "dtVal", $asm00.TypeRef("System.DateTime"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlAtomicValue+NamespacePrefixForQName */ 

(function NamespacePrefixForQName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlAtomicValue+NamespacePrefixForQName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetNamespacesInScope", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.IDictionary`2", [$.String, $.String]), [$asm07.TypeRef("System.Xml.XmlNamespaceScope")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:true }, "prefix", $.String);

    $.Field({Static:false, Public:true }, "ns", $.String);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObject */ 

(function XmlSchemaObject$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaObject", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProcessing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Parent", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnAdd", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsProcessing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineNumber", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LinePosition", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespaces", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Parent", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceUri", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.Field({Static:false, Public:false}, "lineNum", $.Int32);

    $.Field({Static:false, Public:false}, "linePos", $.Int32);

    $.Field({Static:false, Public:false}, "sourceUri", $.String);

    $.Field({Static:false, Public:false}, "namespaces", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    $.Field({Static:false, Public:false}, "parent", $.Type);

    $.Field({Static:false, Public:false}, "isProcessing", $.Boolean);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SourceUri", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Parent", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Namespaces", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlNamespaceDeclarationsAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsProcessing", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchema */ 

(function XmlSchema$Members () {
  var $, $thisType;




































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchema", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddCompiledInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    )
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.XmlResolver")])
    )
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; });

    $.ExternalMethod({Static:false, Public:false}, "CompileSchema", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompileSchemaInSet", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeepClone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeFormDefault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeGroups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseUri", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BlockDefault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementFormDefault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Elements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ErrorCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FinalDefault", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Groups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IdentityConstraints", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ids", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedNamespaces", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedSchemas", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Includes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsChameleon", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCompiledBySet", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPreprocessed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRedefined", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Notations", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TargetNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetExternalSchemasList", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.IList"), $.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.TextReader"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Read", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeFormDefault", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseUri", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BlockDefault", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementFormDefault", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ErrorCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FinalDefault", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsChameleon", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsCompiledBySet", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsPreprocessed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsRedefined", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TargetNamespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetIsCompiled", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.Stream"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Write", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.XmlNamespaceManager")])
    );

    $.Constant({Static:true , Public:true }, "Namespace", $.String, "http://www.w3.org/2001/XMLSchema");

    $.Constant({Static:true , Public:true }, "InstanceNamespace", $.String, "http://www.w3.org/2001/XMLSchema-instance");

    $.Field({Static:false, Public:false}, "attributeFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "elementFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "blockDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "finalDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "targetNs", $.String);

    $.Field({Static:false, Public:false}, "version", $.String);

    $.Field({Static:false, Public:false}, "includes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]));

    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean);

    $.Field({Static:false, Public:false}, "isCompiledBySet", $.Boolean);

    $.Field({Static:false, Public:false}, "isPreprocessed", $.Boolean);

    $.Field({Static:false, Public:false}, "isRedefined", $.Boolean);

    $.Field({Static:false, Public:false}, "errorCount", $.Int32);

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "attributeGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "elements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "types", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "groups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "notations", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "identityConstraints", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:true , Public:false}, "globalIdCounter", $.Int32, -1);

    $.Field({Static:false, Public:false}, "importedSchemas", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "importedNamespaces", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "schemaId", $.Int32);

    $.Field({Static:false, Public:false}, "baseUri", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "isChameleon", $.Boolean);

    $.Field({Static:false, Public:false}, "ids", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "AttributeFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["attributeFormDefault"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaForm.None]; });

    $.Property({Static:false, Public:true }, "BlockDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["blockDefault"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "FinalDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["finalDefault"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "ElementFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["elementFormDefault"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaForm.None]; });

    $.Property({Static:false, Public:true }, "TargetNamespace", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["targetNamespace"]; });

    $.Property({Static:false, Public:true }, "Version", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["version"]; });

    $.Property({Static:false, Public:true }, "Includes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["redefine", $asm07.System.Xml.Schema.XmlSchemaRedefine.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["include", $asm07.System.Xml.Schema.XmlSchemaInclude.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["import", $asm07.System.Xml.Schema.XmlSchemaImport.__Type__]; });

    $.Property({Static:false, Public:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["notation", $asm07.System.Xml.Schema.XmlSchemaNotation.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroup.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm07.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroup.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm07.System.Xml.Schema.XmlSchemaComplexType.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm07.System.Xml.Schema.XmlSchemaElement.__Type__]; });

    $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsCompiledBySet", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsPreprocessed", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsRedefined", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SchemaTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Elements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:true }, "Groups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Notations", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IdentityConstraints", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "BaseUri", $asm01.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SchemaId", $.Int32)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "IsChameleon", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Ids", $asm00.TypeRef("System.Collections.Hashtable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Document", $asm07.TypeRef("System.Xml.XmlDocument"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ErrorCount", $.Int32)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "ImportedSchemas", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "ImportedNamespaces", $asm00.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), function () { return ["schema"]; });

})();

/* class System.Xml.Schema.XmlSchemaAnnotated */ 

(function XmlSchemaAnnotated$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchemaAnnotated", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"));

    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]));

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "Annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm07.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaParticle */ 

(function XmlSchemaParticle$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaParticle", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMultipleOccurrence", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxOccurs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MaxOccursString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinOccurs", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MinOccursString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxOccurs", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MaxOccursString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinOccurs", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Decimal"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MinOccursString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "minOccurs", $asm00.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "maxOccurs", $asm00.TypeRef("System.Decimal"));

    $.Field({Static:false, Public:false}, "flags", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle+Occurs"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "Empty", $.Type);

    $.Property({Static:false, Public:true }, "MinOccursString", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["minOccurs"]; });

    $.Property({Static:false, Public:true }, "MaxOccursString", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["maxOccurs"]; });

    $.Property({Static:false, Public:true }, "MinOccurs", $asm00.TypeRef("System.Decimal"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "MaxOccurs", $asm00.TypeRef("System.Decimal"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMultipleOccurrence", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaParticle+Occurs */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaParticle+Occurs", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Min: 1, 
    Max: 2, 
  }
);

/* class System.Xml.Schema.XmlSchemaParticle+EmptyParticle */ 

(function EmptyParticle$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
      Name: "System.Xml.Schema.XmlSchemaParticle+EmptyParticle", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaGroupBase */ 

(function XmlSchemaGroupBase$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
      Name: "System.Xml.Schema.XmlSchemaGroupBase", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAll */ 

(function XmlSchemaAll$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
      Name: "System.Xml.Schema.XmlSchemaAll", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm07.System.Xml.Schema.XmlSchemaElement.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAnnotation */ 

(function XmlSchemaAnnotation$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchemaAnnotation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]));

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["documentation", $asm07.System.Xml.Schema.XmlSchemaDocumentation.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["appinfo", $asm07.System.Xml.Schema.XmlSchemaAppInfo.__Type__]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAny */ 

(function XmlSchemaAny$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
      Name: "System.Xml.Schema.XmlSchemaAny", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceList", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceListV1Compat", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.NamespaceList"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessContents", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessContentsCorrect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ResolvedNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProcessContents", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "processContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Field({Static:false, Public:false}, "namespaceList", $asm07.TypeRef("System.Xml.Schema.NamespaceList"));

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "ProcessContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaContentProcessing.None]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["processContents"]; });

    $.Property({Static:false, Public:false}, "NamespaceList", $asm07.TypeRef("System.Xml.Schema.NamespaceList"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ResolvedNamespace", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ProcessContentsCorrect", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAnyAttribute */ 

(function XmlSchemaAnyAttribute$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaAnyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Allows", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceList", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "BuildNamespaceListV1Compat", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.NamespaceList"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ProcessContents", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessContentsCorrect", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Intersection", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSubset", 
      new JSIL.MethodSignature($.Boolean, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ProcessContents", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Union", 
      new JSIL.MethodSignature($.Type, [
          $.Type, $.Type, 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "processContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Field({Static:false, Public:false}, "namespaceList", $asm07.TypeRef("System.Xml.Schema.NamespaceList"));

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "ProcessContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["processContents"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaContentProcessing.None]; });

    $.Property({Static:false, Public:false}, "NamespaceList", $asm07.TypeRef("System.Xml.Schema.NamespaceList"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ProcessContentsCorrect", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAppInfo */ 

(function XmlSchemaAppInfo$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchemaAppInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Markup", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Markup", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "source", $.String);

    $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]));

    $.Property({Static:false, Public:true }, "Source", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["source"]; });

    $.Property({Static:false, Public:true }, "Markup", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlTextAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAttribute */ 

(function XmlSchemaAttribute$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttDef", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeSchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Datatype", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FixedValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Use", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaUse"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AttDef", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FixedValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Use", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaUse"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributeType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.Field({Static:false, Public:false}, "defaultValue", $.String);

    $.Field({Static:false, Public:false}, "fixedValue", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "prefix", $.String);

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "use", $asm07.TypeRef("System.Xml.Schema.XmlSchemaUse"));

    $.Field({Static:false, Public:false}, "refName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "typeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "qualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "attributeType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "attDef", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"));

    $.Property({Static:false, Public:true }, "DefaultValue", $.String)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["default"]; });

    $.Property({Static:false, Public:true }, "FixedValue", $.String)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; });

    $.Property({Static:false, Public:true }, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaForm.None]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["form"]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "RefName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "SchemaTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType"]; });

    $.Property({Static:false, Public:true }, "Use", $asm07.TypeRef("System.Xml.Schema.XmlSchemaUse"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["use"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaUse.None]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeType", $.Object)
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use AttributeSchemaType property that returns a strongly typed attribute type. http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeSchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Datatype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Prefix", $.String);

    $.Property({Static:false, Public:false}, "AttDef", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"));

    $.Property({Static:false, Public:false}, "HasDefault", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAttributeGroup */ 

(function XmlSchemaAttributeGroup$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaAttributeGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeUses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AttributeWildcard", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RedefinedAttributeGroup", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SelfReferenceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AttributeWildcard", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SelfReferenceCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "qname", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "redefined", $.Type);

    $.Field({Static:false, Public:false}, "attributeUses", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "attributeWildcard", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "selfReferenceCount", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "AttributeUses", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "AttributeWildcard", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "RedefinedAttributeGroup", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Redefined", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SelfReferenceCount", $.Int32)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaAttributeGroupRef */ 

(function XmlSchemaAttributeGroupRef$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaAttributeGroupRef", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "refName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "RefName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaChoice */ 

(function XmlSchemaChoice$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
      Name: "System.Xml.Schema.XmlSchemaChoice", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["any", $asm07.System.Xml.Schema.XmlSchemaAny.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm07.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm07.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm07.System.Xml.Schema.XmlSchemaElement.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaCollection */ 

(function XmlSchemaCollection$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [
          $.String, $asm07.TypeRef("System.Xml.XmlReader"), 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Xml.XmlResolver")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [
          $.String, $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [
          $.String, $asm07.TypeRef("System.Xml.Schema.SchemaInfo"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean, 
          $asm07.TypeRef("System.Xml.XmlResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode")])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCollectionEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaInfo", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaNames", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaNames"), [$asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.CopyTo", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Array"), $.Int32])
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "CopyTo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_Count");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_IsSynchronized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.ICollection"), "get_SyncRoot");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerable.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerable"), "GetEnumerator");

    $.Field({Static:false, Public:false}, "collection", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "wLock", $asm00.TypeRef("System.Threading.ReaderWriterLock"));

    $.Field({Static:false, Public:false}, "timeout", $.Int32);

    $.Field({Static:false, Public:false}, "isThreadSafe", $.Boolean);

    $.Field({Static:false, Public:false}, "validationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:false}, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.IsSynchronized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.SyncRoot", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.ICollection.Count", $.Int32);

    $.Property({Static:false, Public:false}, "EventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Event({Static:false, Public:true }, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202"]; })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Schema.XmlSchemaCollectionNode */ 

(function XmlSchemaCollectionNode$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaCollectionNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamespaceURI", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Schema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.Field({Static:false, Public:false}, "namespaceUri", $.String);

    $.Field({Static:false, Public:false}, "schemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "NamespaceURI", $.String);

    $.Property({Static:false, Public:false}, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "Schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaCollectionEnumerator */ 

(function XmlSchemaCollectionEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaCollectionEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "enumerator", $asm00.TypeRef("System.Collections.IDictionaryEnumerator"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.Property({Static:false, Public:true }, "Current", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "CurrentNode", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollectionNode"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaContentModel */ 

(function XmlSchemaContentModel$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaContentModel", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaComplexContent */ 

(function XmlSchemaComplexContent$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), 
      Name: "System.Xml.Schema.XmlSchemaComplexContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasMixedAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsMixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsMixed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"));

    $.Field({Static:false, Public:false}, "isMixed", $.Boolean);

    $.Field({Static:false, Public:false}, "hasMixedAttribute", $.Boolean);

    $.Property({Static:false, Public:true }, "IsMixed", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mixed"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["extension", $asm07.System.Xml.Schema.XmlSchemaComplexContentExtension.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm07.System.Xml.Schema.XmlSchemaComplexContentRestriction.__Type__]; });

    $.Property({Static:false, Public:false}, "HasMixedAttribute", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaContent */ 

(function XmlSchemaContent$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaComplexContentExtension */ 

(function XmlSchemaComplexContentExtension$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"), 
      Name: "System.Xml.Schema.XmlSchemaComplexContentExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "baseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "BaseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm07.System.Xml.Schema.XmlSchemaAll.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm07.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm07.System.Xml.Schema.XmlSchemaSequence.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaComplexContentRestriction */ 

(function XmlSchemaComplexContentRestriction$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"), 
      Name: "System.Xml.Schema.XmlSchemaComplexContentRestriction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "baseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "BaseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm07.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm07.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm07.System.Xml.Schema.XmlSchemaAll.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaType */ 

(function XmlSchemaType$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseSchemaType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseXmlSchemaType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Datatype", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DerivedBy", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DerivedFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementDecl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Final", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FinalResolved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsMixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaContentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValueConverter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"))
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInComplexType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInComplexType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInSimpleType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetBuiltInSimpleType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [
          $.Type, $.Type, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDerivedFromDatatype", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementDecl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Final", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsMixed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseSchemaType", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDatatype", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDerivedBy", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFinalResolved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "final", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "derivedBy", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "baseSchemaType", $.Type);

    $.Field({Static:false, Public:false}, "datatype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "finalResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "elementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Field({Static:false, Public:false}, "qname", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "redefined", $.Type);

    $.Field({Static:false, Public:false}, "contentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Final", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["final"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "FinalResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BaseSchemaType", $.Object)
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BaseXmlSchemaType", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "DerivedBy", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Datatype", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsMixed", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "ValueConverter", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SchemaContentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:false}, "ElementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Property({Static:false, Public:false}, "Redefined", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaComplexType */ 

(function XmlSchemaComplexType$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), 
      Name: "System.Xml.Schema.XmlSchemaComplexType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearCompiledState", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneGroupBaseParticles", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CloneParticle", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ContainsIdAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateAnyType", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyTypeContentValidator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ContentValidator"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_AnyTypeSkip", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeUses", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeWildcard", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Block", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BlockResolved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentModel", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentModel"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentTypeParticle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DerivedFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDuplicateDecls", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasWildCard", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsMixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalElements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UntypedAnyType", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "HasAttributeQNameRef", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "HasParticleRef", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Block", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentModel", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentModel"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasDuplicateDecls", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasWildCard", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsMixed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributeWildcard", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBlockResolved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentTypeParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.Constant({Static:true , Public:false}, "wildCardMask", $.Byte, 1);

    $.Constant({Static:true , Public:false}, "dupDeclMask", $.Byte, 2);

    $.Constant({Static:true , Public:false}, "isMixedMask", $.Byte, 4);

    $.Constant({Static:true , Public:false}, "isAbstractMask", $.Byte, 8);

    $.Field({Static:false, Public:false}, "block", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "contentModel", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentModel"));

    $.Field({Static:false, Public:false}, "particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "contentTypeParticle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"));

    $.Field({Static:false, Public:false}, "blockResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "localElements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "attributeUses", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "attributeWildcard", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:true , Public:false}, "anyTypeLax", $.Type);

    $.Field({Static:true , Public:false}, "anyTypeSkip", $.Type);

    $.Field({Static:true , Public:false}, "untypedAnyType", $.Type);

    $.Field({Static:false, Public:false}, "pvFlags", $.Byte);

    $.Property({Static:true , Public:false}, "AnyType", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:false}, "UntypedAnyType", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:false}, "AnyTypeSkip", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:true , Public:false}, "AnyTypeContentValidator", $asm07.TypeRef("System.Xml.Schema.ContentValidator"));

    $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["abstract"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Block", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["block"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsMixed", $.Boolean)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["mixed"]; });

    $.Property({Static:false, Public:true }, "ContentModel", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentModel"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleContent", $asm07.System.Xml.Schema.XmlSchemaSimpleContent.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexContent", $asm07.System.Xml.Schema.XmlSchemaComplexContent.__Type__]; });

    $.Property({Static:false, Public:true }, "Particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm07.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm07.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm07.System.Xml.Schema.XmlSchemaAll.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });

    $.Property({Static:false, Public:true }, "ContentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ContentTypeParticle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BlockResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeUses", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "AttributeWildcard", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "LocalElements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasWildCard", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDuplicateDecls", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm07.TypeRef("System.Xml.XmlQualifiedName"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaContentProcessing */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaContentProcessing", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Skip: 1, 
    Lax: 2, 
    Strict: 3, 
  }
);

/* enum System.Xml.Schema.XmlSchemaContentType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaContentType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    TextOnly: 0, 
    Empty: 1, 
    ElementOnly: 2, 
    Mixed: 3, 
  }
);

/* enum System.Xml.Schema.XmlSchemaDerivationMethod */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaDerivationMethod", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    Empty: 0, 
    Substitution: 1, 
    Extension: 2, 
    Restriction: 4, 
    List: 8, 
    Union: 16, 
    All: 255, 
    None: 256, 
  }
);

/* class System.Xml.Schema.XmlSchemaDocumentation */ 

(function XmlSchemaDocumentation$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchemaDocumentation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Language", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Markup", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Language", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Markup", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "source", $.String);

    $.Field({Static:false, Public:false}, "language", $.String);

    $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:true , Public:false}, "languageType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true }, "Source", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["source"]; });

    $.Property({Static:false, Public:true }, "Language", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["xml:lang"]; });

    $.Property({Static:false, Public:true }, "Markup", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlTextAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaElement */ 

(function XmlSchemaElement$Members () {
  var $, $thisType;

















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
      Name: "System.Xml.Schema.XmlSchemaElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Block", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BlockResolved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Constraints", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DefaultValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementDecl", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementSchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementType", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Final", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FinalResolved", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_FixedValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasAbstractAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasNillableAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAbstract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsLocalTypeDerivationChecked", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNillable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SubstitutionGroup", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Block", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DefaultValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ElementDecl", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Final", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_FixedValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAbstract", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsLocalTypeDerivationChecked", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNillable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SubstitutionGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBlockResolved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetElementType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetFinalResolved", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Validate", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlReader"), [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlResolver"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.Field({Static:false, Public:false}, "isAbstract", $.Boolean);

    $.Field({Static:false, Public:false}, "hasAbstractAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isNillable", $.Boolean);

    $.Field({Static:false, Public:false}, "hasNillableAttribute", $.Boolean);

    $.Field({Static:false, Public:false}, "isLocalTypeDerivationChecked", $.Boolean);

    $.Field({Static:false, Public:false}, "block", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "final", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "defaultValue", $.String);

    $.Field({Static:false, Public:false}, "fixedValue", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "refName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "substitutionGroup", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "typeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "qualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "elementType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "blockResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "finalResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"));

    $.Field({Static:false, Public:false}, "constraints", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "elementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Property({Static:false, Public:true }, "IsAbstract", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["abstract"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:true }, "Block", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["block"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "DefaultValue", $.String)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["default"]; });

    $.Property({Static:false, Public:true }, "Final", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["final"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaDerivationMethod.None]; });

    $.Property({Static:false, Public:true }, "FixedValue", $.String)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [null]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; });

    $.Property({Static:false, Public:true }, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [$asm07.System.Xml.Schema.XmlSchemaForm.None]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["form"]; });

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "IsNillable", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["nillable"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "HasNillableAttribute", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasAbstractAttribute", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "RefName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "SubstitutionGroup", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["substitutionGroup"]; });

    $.Property({Static:false, Public:true }, "SchemaTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm07.System.Xml.Schema.XmlSchemaComplexType.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "Constraints", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["key", $asm07.System.Xml.Schema.XmlSchemaKey.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["keyref", $asm07.System.Xml.Schema.XmlSchemaKeyref.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["unique", $asm07.System.Xml.Schema.XmlSchemaUnique.__Type__]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ElementType", $.Object)
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202"]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "ElementSchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "BlockResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "FinalResolved", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasDefault", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "HasConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "IsLocalTypeDerivationChecked", $.Boolean);

    $.Property({Static:false, Public:false}, "ElementDecl", $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameString", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaException */ 

(function XmlSchemaException$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.SystemException"), 
      Name: "System.Xml.Schema.XmlSchemaException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception"), $.String, 
          $.Int32, $.Int32, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateMessage", 
      new JSIL.MethodSignature($.String, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Args", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GetRes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Message", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceSchemaObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetResourceId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSchemaObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSource", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSource", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.Field({Static:false, Public:false}, "res", $.String);

    $.Field({Static:false, Public:false}, "args", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "sourceUri", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Field({Static:false, Public:false}, "sourceSchemaObject", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Field({Static:false, Public:false}, "message", $.String);

    $.Property({Static:false, Public:false}, "GetRes", $.String);

    $.Property({Static:false, Public:false}, "Args", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "SourceUri", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "SourceSchemaObject", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Message", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaExternal */ 

(function XmlSchemaExternal$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchemaExternal", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseUri", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Compositor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.Compositor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Id", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IdAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Schema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaLocation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnhandledAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseUri", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Compositor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.Compositor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Id", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IdAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Schema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetUnhandledAttributes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
    );

    $.Field({Static:false, Public:false}, "location", $.String);

    $.Field({Static:false, Public:false}, "baseUri", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Field({Static:false, Public:false}, "moreAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]));

    $.Field({Static:false, Public:false}, "compositor", $asm07.TypeRef("System.Xml.Schema.Compositor"));

    $.Property({Static:false, Public:true }, "SchemaLocation", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["schemaLocation"]; });

    $.Property({Static:false, Public:true }, "Schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Id", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["id"]; });

    $.Property({Static:false, Public:true }, "UnhandledAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:false}, "BaseUri", $asm01.TypeRef("System.Uri"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "IdAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Compositor", $asm07.TypeRef("System.Xml.Schema.Compositor"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.FacetType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.FacetType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Length: 1, 
    MinLength: 2, 
    MaxLength: 3, 
    Pattern: 4, 
    Whitespace: 5, 
    Enumeration: 6, 
    MinExclusive: 7, 
    MinInclusive: 8, 
    MaxExclusive: 9, 
    MaxInclusive: 10, 
    TotalDigits: 11, 
    FractionDigits: 12, 
  }
);

/* class System.Xml.Schema.XmlSchemaFacet */ 

(function XmlSchemaFacet$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FacetType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.FacetType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsFixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FacetType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.FacetType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_IsFixed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Value", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "value", $.String);

    $.Field({Static:false, Public:false}, "isFixed", $.Boolean);

    $.Field({Static:false, Public:false}, "facetType", $asm07.TypeRef("System.Xml.Schema.FacetType"));

    $.Property({Static:false, Public:true }, "Value", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["value"]; });

    $.Property({Static:false, Public:true , Virtual:true }, "IsFixed", $.Boolean)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["fixed"]; })
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [false]; });

    $.Property({Static:false, Public:false}, "FacetType", $asm07.TypeRef("System.Xml.Schema.FacetType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaNumericFacet */ 

(function XmlSchemaNumericFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaNumericFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaLengthFacet */ 

(function XmlSchemaLengthFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), 
      Name: "System.Xml.Schema.XmlSchemaLengthFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaMinLengthFacet */ 

(function XmlSchemaMinLengthFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), 
      Name: "System.Xml.Schema.XmlSchemaMinLengthFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaMaxLengthFacet */ 

(function XmlSchemaMaxLengthFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), 
      Name: "System.Xml.Schema.XmlSchemaMaxLengthFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaPatternFacet */ 

(function XmlSchemaPatternFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaPatternFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaEnumerationFacet */ 

(function XmlSchemaEnumerationFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaEnumerationFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaMinExclusiveFacet */ 

(function XmlSchemaMinExclusiveFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaMinExclusiveFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaMinInclusiveFacet */ 

(function XmlSchemaMinInclusiveFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaMinInclusiveFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaMaxExclusiveFacet */ 

(function XmlSchemaMaxExclusiveFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaMaxExclusiveFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaMaxInclusiveFacet */ 

(function XmlSchemaMaxInclusiveFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaMaxInclusiveFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaTotalDigitsFacet */ 

(function XmlSchemaTotalDigitsFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), 
      Name: "System.Xml.Schema.XmlSchemaTotalDigitsFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaFractionDigitsFacet */ 

(function XmlSchemaFractionDigitsFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaNumericFacet"), 
      Name: "System.Xml.Schema.XmlSchemaFractionDigitsFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaWhiteSpaceFacet */ 

(function XmlSchemaWhiteSpaceFacet$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"), 
      Name: "System.Xml.Schema.XmlSchemaWhiteSpaceFacet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaForm */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaForm", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Qualified: 1, 
    Unqualified: 2, 
  }
);

/* class System.Xml.Schema.XmlSchemaGroup */ 

(function XmlSchemaGroup$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanonicalParticle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SelfReferenceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CanonicalParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Particle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SelfReferenceCount", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"));

    $.Field({Static:false, Public:false}, "canonicalParticle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"));

    $.Field({Static:false, Public:false}, "qname", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "redefined", $.Type);

    $.Field({Static:false, Public:false}, "selfReferenceCount", $.Int32);

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["all", $asm07.System.Xml.Schema.XmlSchemaAll.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm07.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm07.System.Xml.Schema.XmlSchemaChoice.__Type__]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "CanonicalParticle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Redefined", $.Type)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "SelfReferenceCount", $.Int32)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaGroupRef */ 

(function XmlSchemaGroupRef$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), 
      Name: "System.Xml.Schema.XmlSchemaGroupRef", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Particle", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Redefined", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_RefName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Redefined", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_RefName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
    );

    $.Field({Static:false, Public:false}, "refName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"));

    $.Field({Static:false, Public:false}, "refined", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"));

    $.Property({Static:false, Public:true }, "RefName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["ref"]; });

    $.Property({Static:false, Public:true }, "Particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Redefined", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaIdentityConstraint */ 

(function XmlSchemaIdentityConstraint$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaIdentityConstraint", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompiledConstraint", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fields", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Selector", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaXPath"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CompiledConstraint", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Selector", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaXPath"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetQualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "selector", $asm07.TypeRef("System.Xml.Schema.XmlSchemaXPath"));

    $.Field({Static:false, Public:false}, "fields", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "qualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "compiledConstraint", $asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Selector", $asm07.TypeRef("System.Xml.Schema.XmlSchemaXPath"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["selector", $asm07.System.Xml.Schema.XmlSchemaXPath.__Type__]; });

    $.Property({Static:false, Public:true }, "Fields", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["field", $asm07.System.Xml.Schema.XmlSchemaXPath.__Type__]; });

    $.Property({Static:false, Public:true }, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "CompiledConstraint", $asm07.TypeRef("System.Xml.Schema.CompiledIdentityConstraint"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaXPath */ 

(function XmlSchemaXPath$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaXPath", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XPath", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "xpath", $.String);

    $.Property({Static:false, Public:true }, "XPath", $.String)
      .Attribute($asm01.TypeRef("System.ComponentModel.DefaultValueAttribute"), function () { return [""]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["xpath"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaUnique */ 

(function XmlSchemaUnique$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), 
      Name: "System.Xml.Schema.XmlSchemaUnique", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaKey */ 

(function XmlSchemaKey$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), 
      Name: "System.Xml.Schema.XmlSchemaKey", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaKeyref */ 

(function XmlSchemaKeyref$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"), 
      Name: "System.Xml.Schema.XmlSchemaKeyref", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Refer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Refer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "refer", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "Refer", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["refer"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaImport */ 

(function XmlSchemaImport$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaExternal"), 
      Name: "System.Xml.Schema.XmlSchemaImport", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"));

    $.Property({Static:false, Public:true }, "Namespace", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["namespace"]; });

    $.Property({Static:false, Public:true }, "Annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm07.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaInclude */ 

(function XmlSchemaInclude$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaExternal"), 
      Name: "System.Xml.Schema.XmlSchemaInclude", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Annotation", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Annotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.Field({Static:false, Public:false}, "annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"));

    $.Property({Static:false, Public:true }, "Annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm07.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaInfo */ 

(function XmlSchemaInfo$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaInfo", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ContentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsNil", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnionType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Validity", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ContentType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsDefault", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNil", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SchemaType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Validity", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"))
    );

    $.Field({Static:false, Public:false}, "isDefault", $.Boolean);

    $.Field({Static:false, Public:false}, "isNil", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Field({Static:false, Public:false}, "schemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:false, Public:false}, "schemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "memberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Field({Static:false, Public:false}, "contentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Validity", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidity"));

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsNil", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "MemberType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Property({Static:false, Public:true }, "ContentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:false}, "XmlType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "HasDefaultValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnionType", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaNotation */ 

(function XmlSchemaNotation$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaNotation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_NameAttribute", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Public", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_System", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_NameAttribute", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Public", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_QualifiedName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_System", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "publicId", $.String);

    $.Field({Static:false, Public:false}, "systemId", $.String);

    $.Field({Static:false, Public:false}, "qname", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:true }, "Public", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["public"]; });

    $.Property({Static:false, Public:true }, "System", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["system"]; });

    $.Property({Static:false, Public:false}, "QualifiedName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false, Virtual:true }, "NameAttribute", $.String)
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObjectCollection */ 

(function XmlSchemaObjectCollection$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Xml.Schema.XmlSchemaObjectCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.Field({Static:false, Public:false}, "parent", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Schema.XmlSchemaObjectEnumerator */ 

(function XmlSchemaObjectEnumerator$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaObjectEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "MoveNext");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "enumerator", $asm00.TypeRef("System.Collections.IEnumerator"));

    $.Property({Static:false, Public:true }, "Current", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObjectTable */ 

(function XmlSchemaObjectTable$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaObjectTable", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindIndexByValue", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Names", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Values", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IDictionaryEnumerator"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Insert", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Replace", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.Field({Static:false, Public:false}, "table", $asm00.TypeRef("System.Collections.Generic.Dictionary`2", [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")]));

    $.Field({Static:false, Public:false}, "entries", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:true }, "Names", $asm00.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:true }, "Values", $asm00.TypeRef("System.Collections.ICollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.Schema.XmlSchemaObjectTable+EnumeratorType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaObjectTable+EnumeratorType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Keys: 0, 
    Values: 1, 
    DictionaryEntry: 2, 
  }
);

/* struct System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry */ 

(function XmlSchemaObjectEntry$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IsMatch", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "qname", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "xso", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObjectTable+NamesCollection */ 

(function NamesCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaObjectTable+NamesCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false}, "entries", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]));

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObjectTable+ValuesCollection */ 

(function ValuesCollection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaObjectTable+ValuesCollection", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Array"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsSynchronized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SyncRoot", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.IEnumerator"))
    );

    $.Field({Static:false, Public:false}, "entries", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]));

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "SyncRoot", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "IsSynchronized", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.ICollection"), 
      /* 1 */ $asm00.TypeRef("System.Collections.IEnumerable")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObjectTable+XSOEnumerator */ 

(function XSOEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaObjectTable+XSOEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]), $.Int32, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+EnumeratorType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "entries", $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]));

    $.Field({Static:false, Public:false}, "enumType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+EnumeratorType"));

    $.Field({Static:false, Public:false}, "currentIndex", $.Int32);

    $.Field({Static:false, Public:false}, "size", $.Int32);

    $.Field({Static:false, Public:false}, "currentKey", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "currentValue", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaObjectTable+XSODictionaryEnumerator */ 

(function XSODictionaryEnumerator$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XSOEnumerator"), 
      Name: "System.Xml.Schema.XmlSchemaObjectTable+XSODictionaryEnumerator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Collections.Generic.List`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+XmlSchemaObjectEntry")]), $.Int32, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable+EnumeratorType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Entry", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.DictionaryEntry"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Key", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Entry", $asm00.TypeRef("System.Collections.DictionaryEntry"));

    $.Property({Static:false, Public:true , Virtual:true }, "Key", $.Object);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.Object);

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("System.Collections.IDictionaryEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaRedefine */ 

(function XmlSchemaRedefine$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaExternal"), 
      Name: "System.Xml.Schema.XmlSchemaRedefine", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "AddAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeGroups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Groups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "attributeGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "types", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "groups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroup.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroup.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["complexType", $asm07.System.Xml.Schema.XmlSchemaComplexType.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["annotation", $asm07.System.Xml.Schema.XmlSchemaAnnotation.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "AttributeGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "SchemaTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:true }, "Groups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSequence */ 

(function XmlSchemaSequence$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), 
      Name: "System.Xml.Schema.XmlSchemaSequence", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Items", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "SetItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Property({Static:false, Public:true , Virtual:true }, "Items", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["sequence", $asm07.System.Xml.Schema.XmlSchemaSequence.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["group", $asm07.System.Xml.Schema.XmlSchemaGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["choice", $asm07.System.Xml.Schema.XmlSchemaChoice.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["element", $asm07.System.Xml.Schema.XmlSchemaElement.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["any", $asm07.System.Xml.Schema.XmlSchemaAny.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "IsEmpty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSet */ 

(function XmlSchemaSet$Members () {
  var $, $thisType;



























































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaSet", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlReader"), 
          $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaToSet", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddToTable", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearTables", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CopyFromCompiledSet", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindSchemaByNSAndUrl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [
          $asm01.TypeRef("System.Uri"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Collections.DictionaryEntry")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CompilationSettings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompileAll", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CompiledInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalElements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_GlobalTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderSettings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaLocations", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SortedSchemas", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.SortedList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SubstitutionGroups", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeExtensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEventHandler", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetResolver", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaByUri", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.Uri"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaNames", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaNames"), [$asm07.TypeRef("System.Xml.XmlNameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTargetNamespace", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidationCallback", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSchemaLoaded", 
      new JSIL.MethodSignature($.Boolean, [
          $asm01.TypeRef("System.Uri"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "PreprocessSchema", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessNewSubstitutionGroups", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Remove", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveRecursive", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveSchemaFromCaches", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveSchemaFromGlobalTables", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Reprocess", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ResolveSubstitutionGroup", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Schemas", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Schemas", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ICollection"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CompilationSettings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetProhibitDtd", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "VerifyTables", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "schemas", $asm00.TypeRef("System.Collections.SortedList"));

    $.Field({Static:false, Public:false}, "internalEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaLocations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "chameleonSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "targetNamespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "compileAll", $.Boolean);

    $.Field({Static:false, Public:false}, "cachedCompiledInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "readerSettings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Field({Static:false, Public:false}, "schemaForSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "compilationSettings", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

    $.Field({Static:false, Public:false}, "elements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "schemaTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "substitutionGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "typeExtensions", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Field({Static:false, Public:false}, "internalSyncObject", $.Object);

    $.Property({Static:false, Public:false}, "InternalSyncObject", $.Object);

    $.Property({Static:false, Public:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "CompilationSettings", $asm07.TypeRef("System.Xml.Schema.XmlSchemaCompilationSettings"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:true }, "GlobalElements", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:true }, "GlobalAttributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:true }, "GlobalTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:false}, "SubstitutionGroups", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:false}, "SchemaLocations", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "TypeExtensions", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable"));

    $.Property({Static:false, Public:false}, "CompiledInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Property({Static:false, Public:false}, "ReaderSettings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:false}, "SortedSchemas", $asm00.TypeRef("System.Collections.SortedList"));

    $.Property({Static:false, Public:false}, "CompileAll", $.Boolean);

    $.Event({Static:false, Public:true }, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaCompilationSettings */ 

(function XmlSchemaCompilationSettings$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaCompilationSettings", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_EnableUpaCheck", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_EnableUpaCheck", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "enableUpaCheck", $.Boolean);

    $.Property({Static:false, Public:true }, "EnableUpaCheck", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleContent */ 

(function XmlSchemaSimpleContent$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentModel"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
    );

    $.Field({Static:false, Public:false}, "content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"));

    $.Property({Static:false, Public:true , Virtual:true }, "Content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["extension", $asm07.System.Xml.Schema.XmlSchemaSimpleContentExtension.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm07.System.Xml.Schema.XmlSchemaSimpleContentRestriction.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleContentExtension */ 

(function XmlSchemaSimpleContentExtension$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleContentExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "baseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "BaseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleContentRestriction */ 

(function XmlSchemaSimpleContentRestriction$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaContent"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleContentRestriction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Facets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.Field({Static:false, Public:false}, "baseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "baseType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "facets", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Property({Static:false, Public:true }, "BaseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "BaseType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "Facets", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fractionDigits", $asm07.System.Xml.Schema.XmlSchemaFractionDigitsFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["whiteSpace", $asm07.System.Xml.Schema.XmlSchemaWhiteSpaceFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minLength", $asm07.System.Xml.Schema.XmlSchemaMinLengthFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxLength", $asm07.System.Xml.Schema.XmlSchemaMaxLengthFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["pattern", $asm07.System.Xml.Schema.XmlSchemaPatternFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["enumeration", $asm07.System.Xml.Schema.XmlSchemaEnumerationFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxInclusive", $asm07.System.Xml.Schema.XmlSchemaMaxInclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxExclusive", $asm07.System.Xml.Schema.XmlSchemaMaxExclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minInclusive", $asm07.System.Xml.Schema.XmlSchemaMinInclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minExclusive", $asm07.System.Xml.Schema.XmlSchemaMinExclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["totalDigits", $asm07.System.Xml.Schema.XmlSchemaTotalDigitsFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["length", $asm07.System.Xml.Schema.XmlSchemaLengthFacet.__Type__]; });

    $.Property({Static:false, Public:true }, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attribute", $asm07.System.Xml.Schema.XmlSchemaAttribute.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["attributeGroup", $asm07.System.Xml.Schema.XmlSchemaAttributeGroupRef.__Type__]; });

    $.Property({Static:false, Public:true }, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["anyAttribute"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleType */ 

(function XmlSchemaSimpleType$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleType", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Content", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DerivedFrom", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Content", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"))
    );

    $.Field({Static:false, Public:false}, "content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"));

    $.Property({Static:false, Public:true }, "Content", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["list", $asm07.System.Xml.Schema.XmlSchemaSimpleTypeList.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["union", $asm07.System.Xml.Schema.XmlSchemaSimpleTypeUnion.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["restriction", $asm07.System.Xml.Schema.XmlSchemaSimpleTypeRestriction.__Type__]; });

    $.Property({Static:false, Public:false, Virtual:true }, "DerivedFrom", $asm07.TypeRef("System.Xml.XmlQualifiedName"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleTypeContent */ 

(function XmlSchemaSimpleTypeContent$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotated"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleTypeContent", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleTypeList */ 

(function XmlSchemaSimpleTypeList$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleTypeList", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ItemTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseItemType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ItemTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "itemTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "itemType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "baseItemType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Property({Static:false, Public:true }, "ItemTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["itemType"]; });

    $.Property({Static:false, Public:true }, "ItemType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "BaseItemType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleTypeRestriction */ 

(function XmlSchemaSimpleTypeRestriction$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleTypeRestriction", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypeName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Facets", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_BaseTypeName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "baseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "baseType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "facets", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Property({Static:false, Public:true }, "BaseTypeName", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["base"]; });

    $.Property({Static:false, Public:true }, "BaseType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "Facets", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["totalDigits", $asm07.System.Xml.Schema.XmlSchemaTotalDigitsFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minInclusive", $asm07.System.Xml.Schema.XmlSchemaMinInclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["length", $asm07.System.Xml.Schema.XmlSchemaLengthFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minLength", $asm07.System.Xml.Schema.XmlSchemaMinLengthFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxExclusive", $asm07.System.Xml.Schema.XmlSchemaMaxExclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["minExclusive", $asm07.System.Xml.Schema.XmlSchemaMinExclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["enumeration", $asm07.System.Xml.Schema.XmlSchemaEnumerationFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxInclusive", $asm07.System.Xml.Schema.XmlSchemaMaxInclusiveFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["fractionDigits", $asm07.System.Xml.Schema.XmlSchemaFractionDigitsFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["pattern", $asm07.System.Xml.Schema.XmlSchemaPatternFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["maxLength", $asm07.System.Xml.Schema.XmlSchemaMaxLengthFacet.__Type__]; })
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["whiteSpace", $asm07.System.Xml.Schema.XmlSchemaWhiteSpaceFacet.__Type__]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSimpleTypeUnion */ 

(function XmlSchemaSimpleTypeUnion$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeContent"), 
      Name: "System.Xml.Schema.XmlSchemaSimpleTypeUnion", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Clone", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseMemberTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_BaseTypes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberTypes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberTypes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseMemberTypes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
    );

    $.Field({Static:false, Public:false}, "baseTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "memberTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:false, Public:false}, "baseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]));

    $.Property({Static:false, Public:true }, "BaseTypes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), function () { return ["simpleType", $asm07.System.Xml.Schema.XmlSchemaSimpleType.__Type__]; });

    $.Property({Static:false, Public:true }, "MemberTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"), function () { return ["memberTypes"]; });

    $.Property({Static:false, Public:true }, "BaseMemberTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")]))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSubstitutionGroup */ 

(function XmlSchemaSubstitutionGroup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
      Name: "System.Xml.Schema.XmlSchemaSubstitutionGroup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Examplar", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Examplar", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "membersList", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "examplar", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Members", $asm00.TypeRef("System.Collections.ArrayList"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));

    $.Property({Static:false, Public:false}, "Examplar", $asm07.TypeRef("System.Xml.XmlQualifiedName"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat */ 

(function XmlSchemaSubstitutionGroupV1Compat$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaSubstitutionGroup"), 
      Name: "System.Xml.Schema.XmlSchemaSubstitutionGroupV1Compat", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Choice", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"))
    );

    $.Field({Static:false, Public:false}, "choice", $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"));

    $.Property({Static:false, Public:false}, "Choice", $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"))
      .Attribute($asm07.TypeRef("System.Xml.Serialization.XmlIgnoreAttribute"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaUse */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaUse", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Optional: 1, 
    Prohibited: 2, 
    Required: 3, 
  }
);

/* class System.Xml.Schema.XmlSchemaValidationException */ 

(function XmlSchemaValidationException$Members () {
  var $, $thisType;


















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), 
      Name: "System.Xml.Schema.XmlSchemaValidationException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception"), $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSourceObject", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "sourceNodeObject", $.Object);

    $.Property({Static:false, Public:true }, "SourceObject", $.Object);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Schema.XmlValueGetter */ 

JSIL.MakeDelegate("System.Xml.Schema.XmlValueGetter", true, [], 
  JSIL.MethodSignature.Return($asm00.TypeRef("System.Object")));

/* enum System.Xml.Schema.XmlSchemaValidationFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaValidationFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    ProcessInlineSchema: 1, 
    ProcessSchemaLocation: 2, 
    ReportValidationWarnings: 4, 
    ProcessIdentityConstraints: 8, 
    AllowXmlAttributes: 16, 
  }
);

/* enum System.Xml.Schema.ValidatorState */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.ValidatorState", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Start: 1, 
    TopLevelAttribute: 2, 
    TopLevelTextOrWS: 3, 
    Element: 4, 
    Attribute: 5, 
    EndOfAttributes: 6, 
    Text: 7, 
    Whitespace: 8, 
    EndElement: 9, 
    SkipToEndElement: 10, 
    Finish: 11, 
  }
);

/* class System.Xml.Schema.IdRefNode */ 

(function IdRefNode$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.IdRefNode", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Type, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:false, Public:false}, "Id", $.String);

    $.Field({Static:false, Public:false}, "LineNo", $.Int32);

    $.Field({Static:false, Public:false}, "LinePos", $.Int32);

    $.Field({Static:false, Public:false}, "Next", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaValidator */ 

(function XmlSchemaValidator$Members () {
  var $, $thisType;












































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNameTable"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "AddSchema", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlNamespaceSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXsiAttributes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeIdentityConstraints", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElementName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElementName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildXsiAttributes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAttributeValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckElementProperties", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckElementValue", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckIsXmlAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaAttDef"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckMixedValueConstraint", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckRequiredAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckStateTransition", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ValidatorState"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTokenizedTypes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"), $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckXsiTypeAndNil", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [
          $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), $.String, 
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ClearPSVI", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CompleteValidationError", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.ValidationState"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), 
          $.Object, $.String, 
          $.Int32, $.Int32, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementValidationError", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.ValidationState"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Object, 
          $.String, $.Int32, 
          $.Int32, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EndElementIdentityConstraints", 
      new JSIL.MethodSignature(null, [
          $.Object, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "EndValidation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EnumerateAny", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Text.StringBuilder"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FastGetElementDecl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentContentType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentProcessContents", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIdentityConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineInfoProvider", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessIdentityConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessInlineSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessSchemaHints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ProcessSchemaLocation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReportValidationWarnings", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SourceUri", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StrictlyAssessed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ValidationEventSender", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidationFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConcatenatedValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultAttributePrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExpectedAttributes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "GetExpectedParticles", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSchemaElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetSubstitutionGroupHead", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.SchemaDeclBase")])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetUnspecifiedDefaultAttributes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetUnspecifiedDefaultAttributes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.ArrayList"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Initialize", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InternalValidateEndElement", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintExpectedElements", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Collections.ArrayList"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintNames", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:true , Public:false}, "PrintNamesWithNS", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.ArrayList"), $asm00.TypeRef("System.Text.StringBuilder")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessEntity", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessSchemaLocations", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlTokenizedType"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:true , Public:false}, "QNameString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "RecompileSchemaSet", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_ValidationEventHandler", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Reset", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SaveTextValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm00.TypeRef("System.Exception")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Object, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_LineInfoProvider", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.IXmlLineInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SourceUri", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.Uri"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ValidationEventSender", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlResolver", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlResolver"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetDtdSchemaInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.SchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true }, "SkipToEndElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThrowDeclNotFoundWarningOrError", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAtomicValue", 
      new JSIL.MethodSignature($.Object, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAtomicValue", 
      new JSIL.MethodSignature($.Object, [$.Object, $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateAttribute", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateAttribute", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlValueGetter"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateAttribute", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlValueGetter"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.String, 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElementContext", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateEndElement", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateEndElement", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateEndOfAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElementIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateText", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlValueGetter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateText", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XmlValueGetter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ValidateWhitespace", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlValueGetter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateWhitespace", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XmlValueGetter")])
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", $.Int32, 10);

    $.Constant({Static:true , Public:false}, "Quote", $.String, "'");

    $.Field({Static:false, Public:false}, "schemaSet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "validationFlags", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

    $.Field({Static:false, Public:false}, "startIDConstraint", $.Int32);

    $.Field({Static:false, Public:false}, "isRoot", $.Boolean);

    $.Field({Static:false, Public:false}, "rootHasSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "attrValid", $.Boolean);

    $.Field({Static:false, Public:false}, "checkEntity", $.Boolean);

    $.Field({Static:false, Public:false}, "compiledSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "dtdSchemaInfo", $asm07.TypeRef("System.Xml.Schema.SchemaInfo"));

    $.Field({Static:false, Public:false}, "validatedNamespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "validationStack", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Xml.Schema.ValidationState"));

    $.Field({Static:false, Public:false}, "currentState", $asm07.TypeRef("System.Xml.Schema.ValidatorState"));

    $.Field({Static:false, Public:false}, "attPresence", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "wildID", $asm07.TypeRef("System.Xml.Schema.SchemaAttDef"));

    $.Field({Static:false, Public:false}, "IDs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "idRefListHead", $asm07.TypeRef("System.Xml.Schema.IdRefNode"));

    $.Field({Static:false, Public:false}, "contextQName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "NsXs", $.String);

    $.Field({Static:false, Public:false}, "NsXsi", $.String);

    $.Field({Static:false, Public:false}, "NsXmlNs", $.String);

    $.Field({Static:false, Public:false}, "NsXml", $.String);

    $.Field({Static:false, Public:false}, "partialValidationType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Field({Static:false, Public:false}, "textValue", $asm00.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "eventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "validationEventSender", $.Object);

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "positionInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "dummyPositionInfo", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Field({Static:false, Public:false}, "xmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Field({Static:false, Public:false}, "sourceUri", $asm01.TypeRef("System.Uri"));

    $.Field({Static:false, Public:false}, "sourceUriString", $.String);

    $.Field({Static:false, Public:false}, "nsResolver", $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"));

    $.Field({Static:false, Public:false}, "processContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Field({Static:true , Public:false}, "xsiTypeSO", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:true , Public:false}, "xsiNilSO", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:true , Public:false}, "xsiSLSO", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:true , Public:false}, "xsiNoNsSLSO", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:false, Public:false}, "xsiTypeString", $.String);

    $.Field({Static:false, Public:false}, "xsiNilString", $.String);

    $.Field({Static:false, Public:false}, "xsiSchemaLocationString", $.String);

    $.Field({Static:false, Public:false}, "xsiNoNamespaceSchemaLocationString", $.String);

    $.Field({Static:true , Public:false, ReadOnly:true }, "dtQName", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dtCDATA", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dtStringArray", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:true , Public:false}, "EmptyParticleArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Xml.Schema.XmlSchemaParticle, 0);
      });

    $.Field({Static:true , Public:false}, "EmptyAttributeArray", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute")]), function ($pi) {
        return JSIL.Array.New($asm07.System.Xml.Schema.XmlSchemaAttribute, 0);
      });

    $.Field({Static:false, Public:false}, "xmlCharType", $asm07.TypeRef("System.Xml.XmlCharType"));

    $.Field({Static:true , Public:false}, "ValidStates", $jsilcore.TypeRef("System.Array", [$.Boolean]));

    $.Field({Static:true , Public:false}, "MethodNames", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "XmlResolver", $asm07.TypeRef("System.Xml.XmlResolver"));

    $.Property({Static:false, Public:true }, "LineInfoProvider", $asm07.TypeRef("System.Xml.IXmlLineInfo"));

    $.Property({Static:false, Public:true }, "SourceUri", $asm01.TypeRef("System.Uri"));

    $.Property({Static:false, Public:true }, "ValidationEventSender", $.Object);

    $.Property({Static:false, Public:false}, "SchemaSet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "ValidationFlags", $asm07.TypeRef("System.Xml.Schema.XmlSchemaValidationFlags"));

    $.Property({Static:false, Public:false}, "CurrentContentType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentType"));

    $.Property({Static:false, Public:false}, "CurrentProcessContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Property({Static:false, Public:false}, "StrictlyAssessed", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

    $.Property({Static:false, Public:false}, "HasIdentityConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessIdentityConstraints", $.Boolean);

    $.Property({Static:false, Public:false}, "ReportValidationWarnings", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessInlineSchema", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessSchemaLocation", $.Boolean);

    $.Property({Static:false, Public:false}, "ProcessSchemaHints", $.Boolean);

    $.Event({Static:false, Public:true }, "ValidationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaValidity */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaValidity", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    NotKnown: 0, 
    Valid: 1, 
    Invalid: 2, 
  }
);

/* enum System.Xml.Schema.XmlSeverityType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSeverityType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    Error: 0, 
    Warning: 1, 
  }
);

/* enum System.Xml.XmlTokenizedType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.XmlTokenizedType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    CDATA: 0, 
    ID: 1, 
    IDREF: 2, 
    IDREFS: 3, 
    ENTITY: 4, 
    ENTITIES: 5, 
    NMTOKEN: 6, 
    NMTOKENS: 7, 
    NOTATION: 8, 
    ENUMERATION: 9, 
    QName: 10, 
    NCName: 11, 
    None: 12, 
  }
);

/* enum System.Xml.Schema.XmlTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlTypeCode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Item: 1, 
    Node: 2, 
    Document: 3, 
    Element: 4, 
    Attribute: 5, 
    Namespace: 6, 
    ProcessingInstruction: 7, 
    Comment: 8, 
    Text: 9, 
    AnyAtomicType: 10, 
    UntypedAtomic: 11, 
    String: 12, 
    Boolean: 13, 
    Decimal: 14, 
    Float: 15, 
    Double: 16, 
    Duration: 17, 
    DateTime: 18, 
    Time: 19, 
    Date: 20, 
    GYearMonth: 21, 
    GYear: 22, 
    GMonthDay: 23, 
    GDay: 24, 
    GMonth: 25, 
    HexBinary: 26, 
    Base64Binary: 27, 
    AnyUri: 28, 
    QName: 29, 
    Notation: 30, 
    NormalizedString: 31, 
    Token: 32, 
    Language: 33, 
    NmToken: 34, 
    Name: 35, 
    NCName: 36, 
    Id: 37, 
    Idref: 38, 
    Entity: 39, 
    Integer: 40, 
    NonPositiveInteger: 41, 
    NegativeInteger: 42, 
    Long: 43, 
    Int: 44, 
    Short: 45, 
    Byte: 46, 
    NonNegativeInteger: 47, 
    UnsignedLong: 48, 
    UnsignedInt: 49, 
    UnsignedShort: 50, 
    UnsignedByte: 51, 
    PositiveInteger: 52, 
    YearMonthDuration: 53, 
    DayTimeDuration: 54, 
  }
);

/* class System.Xml.Schema.XmlValueConverter */ 

(function XmlValueConverter$Members () {
  var $, $thisType;










































































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlValueConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTimeOffset"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlBaseConverter */ 

(function XmlBaseConverter$Members () {
  var $, $thisType;












































































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), 
      Name: "System.Xml.Schema.XmlBaseConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AnyUriToString", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Base64BinaryToString", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeListType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTimeOffset"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Object, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidClrMappingException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTimeOffsetToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTimeToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DayTimeDurationToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DecimalToUInt64", 
      new JSIL.MethodSignature($.UInt64, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:true , Public:false}, "DurationToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GDayOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GDayToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DefaultClrType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthDayOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthDayToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GMonthToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearMonthOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearMonthToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GYearToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToByte", 
      new JSIL.MethodSignature($.Byte, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToInt16", 
      new JSIL.MethodSignature($.Int16, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToSByte", 
      new JSIL.MethodSignature($.SByte, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int32ToUInt16", 
      new JSIL.MethodSignature($.UInt16, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int64ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "Int64ToUInt32", 
      new JSIL.MethodSignature($.UInt32, [$.Int64])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "QNameToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "QNameToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToBase64Binary", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDate", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDateOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDayTimeDuration", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToDuration", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGDay", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGDayOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonth", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonthDay", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonthDayOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGMonthOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYear", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYearMonth", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYearMonthOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToGYearOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToHexBinary", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToQName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "StringToYearMonthDuration", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeOffsetToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TimeToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "UntypedAtomicToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UntypedAtomicToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "YearMonthDurationToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.TimeSpan")])
    );

    $.Field({Static:false, Public:false}, "schemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "typeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Field({Static:false, Public:false}, "clrTypeDefault", $asm00.TypeRef("System.Type"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ICollectionType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Collections.ICollection.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "IEnumerableType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Collections.IEnumerable.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "IListType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Collections.IList.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectArrayType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Object).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "StringArrayType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.String).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "XmlAtomicValueArrayType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm07.System.Xml.Schema.XmlAtomicValue).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DecimalType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Decimal.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "Int32Type", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Int32.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "Int64Type", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Int64.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "StringType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.String.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "XmlAtomicValueType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.Schema.XmlAtomicValue.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ObjectType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Object.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ByteType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Byte.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "Int16Type", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Int16.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SByteType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.SByte.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "UInt16Type", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.UInt16.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "UInt32Type", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.UInt32.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "UInt64Type", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.UInt64.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "XPathItemType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.XPath.XPathItem.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DoubleType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Double.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "SingleType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Single.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.DateTime.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "DateTimeOffsetType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.DateTimeOffset.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "BooleanType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.Boolean.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "ByteArrayType", $asm00.TypeRef("System.Type"), function ($pi) {
        return System.Array.Of($asm00.System.Byte).__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "XmlQualifiedNameType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.XmlQualifiedName.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "UriType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm01.System.Uri.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "TimeSpanType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm00.System.TimeSpan.__Type__;
      });

    $.Field({Static:true , Public:false, ReadOnly:true }, "XPathNavigatorType", $asm00.TypeRef("System.Type"), function ($pi) {
        return $asm07.System.Xml.XPath.XPathNavigator.__Type__;
      });

    $.Property({Static:false, Public:false}, "SchemaType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:false}, "XmlTypeName", $.String);

    $.Property({Static:false, Public:false}, "DefaultClrType", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlNumeric10Converter */ 

(function XmlNumeric10Converter$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlNumeric10Converter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlNumeric2Converter */ 

(function XmlNumeric2Converter$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlNumeric2Converter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlDateTimeConverter */ 

(function XmlDateTimeConverter$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlDateTimeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTimeOffset"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlBooleanConverter */ 

(function XmlBooleanConverter$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlBooleanConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlMiscConverter */ 

(function XmlMiscConverter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlMiscConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlStringConverter */ 

(function XmlStringConverter$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlStringConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlListConverter */ 

(function XmlListConverter$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlListConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeListType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlValueConverter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidClrMappingException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsListType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListAsString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Collections.IEnumerable"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:false}, "StringAsList", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Generic.List`1", [$.String]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", ["!!0"]), [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")], ["T"])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToList", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.IList"), [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.Field({Static:false, Public:false}, "atomicConverter", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlUntypedConverter */ 

(function XmlUntypedConverter$Members () {
  var $, $thisType;











































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlListConverter"), 
      Name: "System.Xml.Schema.XmlUntypedConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.Type, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ChangeListType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTimeOffset"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SupportsType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTimeOffset")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Decimal")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Double])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Int64])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Single])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.String, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToString", 
      new JSIL.MethodSignature($.String, [$.Object, $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.Field({Static:false, Public:false}, "allowListToList", $.Boolean);

    $.Field({Static:true , Public:true , ReadOnly:true }, "Untyped", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "UntypedList", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlNodeConverter */ 

(function XmlNodeConverter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlNodeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Node", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlAnyConverter */ 

(function XmlAnyConverter$Members () {
  var $, $thisType;























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlAnyConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Boolean, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTime"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.DateTimeOffset"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Decimal"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Double, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int32, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Int64, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [$.Single, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardDestination", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ChangeTypeWildcardSource", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDateTimeOffset", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDecimal", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Decimal"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToDouble", 
      new JSIL.MethodSignature($.Double, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt32", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToInt64", 
      new JSIL.MethodSignature($.Int64, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToNavigator", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XPath.XPathNavigator"), [$asm07.TypeRef("System.Xml.XPath.XPathNavigator")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ToSingle", 
      new JSIL.MethodSignature($.Single, [$.Object])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "Item", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "AnyAtomic", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlAnyListConverter */ 

(function XmlAnyListConverter$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlListConverter"), 
      Name: "System.Xml.Schema.XmlAnyListConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.Field({Static:true , Public:true , ReadOnly:true }, "ItemList", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));

    $.Field({Static:true , Public:true , ReadOnly:true }, "AnyAtomicList", $asm07.TypeRef("System.Xml.Schema.XmlValueConverter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlUnionConverter */ 

(function XmlUnionConverter$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlBaseConverter"), 
      Name: "System.Xml.Schema.XmlUnionConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ChangeType", 
      new JSIL.MethodSignature($.Object, [
          $.Object, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "Create", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlValueConverter"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.Field({Static:false, Public:false}, "converters", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlValueConverter")]));

    $.Field({Static:false, Public:false}, "hasAtomicMember", $.Boolean);

    $.Field({Static:false, Public:false}, "hasListMember", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XsdBuilder */ 

(function XsdBuilder$Members () {
  var $, $thisType;










































































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.SchemaBuilder"), 
      Name: "System.Xml.Schema.XsdBuilder", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm07.TypeRef("System.Xml.XmlNameTable"), 
          $asm07.TypeRef("System.Xml.Schema.SchemaNames"), $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddParticle", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"))
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAnnotated_Id", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAny_Namespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAny_ProcessContents", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAnyAttribute_Namespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAnyAttribute_ProcessContents", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAppinfo_Source", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Default", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Fixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Form", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Type", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttribute_Use", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttributeGroup_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildAttributeGroupRef_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexContent_Mixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexContentExtension_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexContentRestriction_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Abstract", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Block", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Final", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Mixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildComplexType_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildDocumentation_Source", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildDocumentation_XmlLang", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Abstract", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Block", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Default", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Final", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Fixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Form", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_MaxOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_MinOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Nillable", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_SubstitutionGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildElement_Type", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFacet_Fixed", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildFacet_Value", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildField_XPath", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildGroup_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildGroupRef_Ref", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildIdentityConstraint_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildIdentityConstraint_Refer", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildImport_Namespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildImport_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildInclude_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildNotation_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildNotation_Public", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildNotation_System", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildParticle_MaxOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildParticle_MinOccurs", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildRedefine_SchemaLocation", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_AttributeFormDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_BlockDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_ElementFormDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_FinalDefault", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_TargetNamespace", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSchema_Version", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSelector_XPath", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleContentExtension_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleContentRestriction_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleType_Final", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleType_Name", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeList_ItemType", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeRestriction_Base", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "BuildSimpleTypeUnion_MemberTypes", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EndAppinfo", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EndChildren", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EndDocumentation", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "EndRedefine", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CurrentElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentContainer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParentElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetContainer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNextState", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAll", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAnnotation", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAny", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAnyAttribute", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAppinfo", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAttribute", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAttributeGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitAttributeGroupRef", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitChoice", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexContent", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexContentExtension", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexContentRestriction", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitComplexType", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitDocumentation", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitElement", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitFacet", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitField", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitGroup", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitGroupRef", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitIdentityConstraint", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitImport", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitInclude", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitNotation", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitRedefine", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSchema", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSelector", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSequence", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleContent", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleContentExtension", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleContentRestriction", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleType", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeList", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeRestriction", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "InitSimpleTypeUnion", 
      new JSIL.MethodSignature(null, [$.Type, $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "IsContentParsed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSkipableElement", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBlockFinalEnum", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseEnum", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseQName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseUriReference", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessCData", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessElement", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ProcessMarkup", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "RecordPosition", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $asm07.TypeRef("System.Xml.Schema.XmlSeverityType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SendValidationEvent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaException"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContainer", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMaxOccurs", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMinOccurs", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "StartChildren", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", $.Int32, 10);

    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaElement", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexTypeSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentExtensionSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentExtensionSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeRestrictionSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeListSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeUnionSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RedefineSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "GroupSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AllSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ChoiceSequenceSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "IdentityConstraintSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotationSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotatedSubelements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ElementAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexTypeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentExtensionAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleContentRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentExtensionAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ComplexContentRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeRestrictionAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeUnionAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SimpleTypeListAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AttributeGroupRefAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "GroupAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "GroupRefAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ParticleAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AnyAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "IdentityConstraintAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SelectorAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FieldAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "NotationAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "IncludeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ImportAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FacetAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AnyAttributeAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DocumentationAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AppinfoAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "RedefineAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "AnnotationAttributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "SchemaEntries", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdEntry")]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DerivationMethodValues", $jsilcore.TypeRef("System.Array", [$.Int32]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "DerivationMethodStrings", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "FormStringValues", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "UseStringValues", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false, ReadOnly:true }, "ProcessContentsStringValues", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "positionInfo", $asm07.TypeRef("System.Xml.PositionInfo"));

    $.Field({Static:false, Public:false}, "currentEntry", $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdEntry"));

    $.Field({Static:false, Public:false}, "nextEntry", $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdEntry"));

    $.Field({Static:false, Public:false}, "hasChild", $.Boolean);

    $.Field({Static:false, Public:false}, "stateHistory", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "containerStack", $asm00.TypeRef("System.Collections.Stack"));

    $.Field({Static:false, Public:false}, "nameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Field({Static:false, Public:false}, "schemaNames", $asm07.TypeRef("System.Xml.Schema.SchemaNames"));

    $.Field({Static:false, Public:false}, "namespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "canIncludeImport", $.Boolean);

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "xso", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Field({Static:false, Public:false}, "element", $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"));

    $.Field({Static:false, Public:false}, "anyElement", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"));

    $.Field({Static:false, Public:false}, "attribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"));

    $.Field({Static:false, Public:false}, "anyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "complexType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"));

    $.Field({Static:false, Public:false}, "simpleType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"));

    $.Field({Static:false, Public:false}, "complexContent", $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"));

    $.Field({Static:false, Public:false}, "complexContentExtension", $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension"));

    $.Field({Static:false, Public:false}, "complexContentRestriction", $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction"));

    $.Field({Static:false, Public:false}, "simpleContent", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent"));

    $.Field({Static:false, Public:false}, "simpleContentExtension", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"));

    $.Field({Static:false, Public:false}, "simpleContentRestriction", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction"));

    $.Field({Static:false, Public:false}, "simpleTypeUnion", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion"));

    $.Field({Static:false, Public:false}, "simpleTypeList", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList"));

    $.Field({Static:false, Public:false}, "simpleTypeRestriction", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction"));

    $.Field({Static:false, Public:false}, "group", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"));

    $.Field({Static:false, Public:false}, "groupRef", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"));

    $.Field({Static:false, Public:false}, "all", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAll"));

    $.Field({Static:false, Public:false}, "choice", $asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"));

    $.Field({Static:false, Public:false}, "sequence", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"));

    $.Field({Static:false, Public:false}, "particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"));

    $.Field({Static:false, Public:false}, "attributeGroup", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"));

    $.Field({Static:false, Public:false}, "attributeGroupRef", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef"));

    $.Field({Static:false, Public:false}, "notation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaNotation"));

    $.Field({Static:false, Public:false}, "identityConstraint", $asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"));

    $.Field({Static:false, Public:false}, "xpath", $asm07.TypeRef("System.Xml.Schema.XmlSchemaXPath"));

    $.Field({Static:false, Public:false}, "include", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInclude"));

    $.Field({Static:false, Public:false}, "$import", $asm07.TypeRef("System.Xml.Schema.XmlSchemaImport"));

    $.Field({Static:false, Public:false}, "annotation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"));

    $.Field({Static:false, Public:false}, "appInfo", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAppInfo"));

    $.Field({Static:false, Public:false}, "documentation", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDocumentation"));

    $.Field({Static:false, Public:false}, "facet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet"));

    $.Field({Static:false, Public:false}, "markup", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlNode")]));

    $.Field({Static:false, Public:false}, "redefine", $asm07.TypeRef("System.Xml.Schema.XmlSchemaRedefine"));

    $.Field({Static:false, Public:false}, "validationEventHandler", $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"));

    $.Field({Static:false, Public:false}, "unhandledAttributes", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "namespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "CurrentElement", $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"));

    $.Property({Static:false, Public:false}, "ParentElement", $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"));

    $.Property({Static:false, Public:false}, "ParentContainer", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XsdBuilder+State */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XsdBuilder+State", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Root: 0, 
    Schema: 1, 
    Annotation: 2, 
    Include: 3, 
    Import: 4, 
    Element: 5, 
    Attribute: 6, 
    AttributeGroup: 7, 
    AttributeGroupRef: 8, 
    AnyAttribute: 9, 
    Group: 10, 
    GroupRef: 11, 
    All: 12, 
    Choice: 13, 
    Sequence: 14, 
    Any: 15, 
    Notation: 16, 
    SimpleType: 17, 
    ComplexType: 18, 
    ComplexContent: 19, 
    ComplexContentRestriction: 20, 
    ComplexContentExtension: 21, 
    SimpleContent: 22, 
    SimpleContentExtension: 23, 
    SimpleContentRestriction: 24, 
    SimpleTypeUnion: 25, 
    SimpleTypeList: 26, 
    SimpleTypeRestriction: 27, 
    Unique: 28, 
    Key: 29, 
    KeyRef: 30, 
    Selector: 31, 
    Field: 32, 
    MinExclusive: 33, 
    MinInclusive: 34, 
    MaxExclusive: 35, 
    MaxInclusive: 36, 
    TotalDigits: 37, 
    FractionDigits: 38, 
    Length: 39, 
    MinLength: 40, 
    MaxLength: 41, 
    Enumeration: 42, 
    Pattern: 43, 
    WhiteSpace: 44, 
    AppInfo: 45, 
    Documentation: 46, 
    Redefine: 47, 
  }
);

/* delegate System.Xml.Schema.XsdBuilder+XsdBuildFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder+XsdBuildFunction", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XsdBuilder"), $asm00.TypeRef("System.String")]));

/* delegate System.Xml.Schema.XsdBuilder+XsdInitFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder+XsdInitFunction", false, [], 
  new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XsdBuilder"), $asm00.TypeRef("System.String")]));

/* delegate System.Xml.Schema.XsdBuilder+XsdEndChildFunction */ 

JSIL.MakeDelegate("System.Xml.Schema.XsdBuilder+XsdEndChildFunction", false, [], 
  JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XsdBuilder")));

/* class System.Xml.Schema.XsdBuilder+XsdAttributeEntry */ 

(function XsdAttributeEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XsdBuilder+XsdAttributeEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"), $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdBuildFunction")])
    );

    $.Field({Static:false, Public:true }, "Attribute", $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"));

    $.Field({Static:false, Public:true }, "BuildFunc", $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdBuildFunction"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XsdBuilder+XsdEntry */ 

(function XsdEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XsdBuilder+XsdEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"), $asm07.TypeRef("System.Xml.Schema.XsdBuilder+State"), 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]), 
          $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdInitFunction"), $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdEndChildFunction"), 
          $.Boolean
        ])
    );

    $.Field({Static:false, Public:true }, "Name", $asm07.TypeRef("System.Xml.Schema.SchemaNames+Token"));

    $.Field({Static:false, Public:true }, "CurrentState", $asm07.TypeRef("System.Xml.Schema.XsdBuilder+State"));

    $.Field({Static:false, Public:true }, "NextStates", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+State")]));

    $.Field({Static:false, Public:true }, "Attributes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdAttributeEntry")]));

    $.Field({Static:false, Public:true }, "InitFunc", $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdInitFunction"));

    $.Field({Static:false, Public:true }, "EndChildFunc", $asm07.TypeRef("System.Xml.Schema.XsdBuilder+XsdEndChildFunction"));

    $.Field({Static:false, Public:true }, "ParseContent", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XsdBuilder+BuilderNamespaceManager */ 

(function BuilderNamespaceManager$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlNamespaceManager"), 
      Name: "System.Xml.Schema.XsdBuilder+BuilderNamespaceManager", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNamespaceManager"), $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "nsMgr", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XsdDateTimeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XsdDateTimeFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: true, 
  }, 
  {
    DateTime: 1, 
    Time: 2, 
    Date: 4, 
    GYearMonth: 8, 
    GYear: 16, 
    GMonthDay: 32, 
    GDay: 64, 
    GMonth: 128, 
    AllXsd: 255, 
    XdrDateTimeNoTz: 256, 
    XdrDateTime: 512, 
    XdrTimeNoTz: 1024, 
  }
);

/* struct System.Xml.Schema.XsdDateTime */ 

(function XsdDateTime$Members () {
  var $, $thisType;


































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.XsdDateTime", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 2, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XsdDateTime+Parser"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.DateTime"), $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.DateTimeOffset"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.DateTimeOffset"), $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags")])
    );

    $.ExternalMethod({Static:true , Public:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Type, $.Type])
    );

    $.ExternalMethod({Static:false, Public:true }, "CompareTo", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Day", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Fraction", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hour", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalKind", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XsdDateTime+XsdDateTimeKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_InternalTypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XsdDateTime+DateTimeTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Kind", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTimeKind"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minute", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Month", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Second", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeCode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlTypeCode"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Year", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ZoneHour", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ZoneMinute", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetZuluDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:false}, "InitiateXsdDateTime", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XsdDateTime+Parser"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IntToCharArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.Type])
    );

    $.ExternalMethod({Static:true , Public:true }, "op_Implicit", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTimeOffset"), [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintDate", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintTime", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "PrintZone", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Text.StringBuilder"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ShortToCharArray", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToZulu", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($.Boolean, [
          $.String, $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.Constant({Static:true , Public:false}, "TypeMask", $.UInt32, 4278190080);

    $.Constant({Static:true , Public:false}, "KindMask", $.UInt32, 16711680);

    $.Constant({Static:true , Public:false}, "ZoneHourMask", $.UInt32, 65280);

    $.Constant({Static:true , Public:false}, "ZoneMinuteMask", $.UInt32, 255);

    $.Constant({Static:true , Public:false}, "TypeShift", $.Int32, 24);

    $.Constant({Static:true , Public:false}, "KindShift", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "ZoneHourShift", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "maxFractionDigits", $.Int16, 7);

    $.Field({Static:false, Public:false}, "dt", $asm00.TypeRef("System.DateTime"));

    $.Field({Static:false, Public:false}, "extra", $.UInt32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_dd", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lzyyyy_MM_ddT", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "LzHH_mm_ss", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz_zz_zz", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm_", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm__", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz__mm_dd", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz___", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "Lz___dd", $.Int32);

    $.Field({Static:true , Public:false, ReadOnly:true }, "typeCodes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlTypeCode")]));

    $.Property({Static:false, Public:false}, "InternalTypeCode", $asm07.TypeRef("System.Xml.Schema.XsdDateTime+DateTimeTypeCode"));

    $.Property({Static:false, Public:false}, "InternalKind", $asm07.TypeRef("System.Xml.Schema.XsdDateTime+XsdDateTimeKind"));

    $.Property({Static:false, Public:true }, "TypeCode", $asm07.TypeRef("System.Xml.Schema.XmlTypeCode"));

    $.Property({Static:false, Public:true }, "Kind", $asm00.TypeRef("System.DateTimeKind"));

    $.Property({Static:false, Public:true }, "Year", $.Int32);

    $.Property({Static:false, Public:true }, "Month", $.Int32);

    $.Property({Static:false, Public:true }, "Day", $.Int32);

    $.Property({Static:false, Public:true }, "Hour", $.Int32);

    $.Property({Static:false, Public:true }, "Minute", $.Int32);

    $.Property({Static:false, Public:true }, "Second", $.Int32);

    $.Property({Static:false, Public:true }, "Fraction", $.Int32);

    $.Property({Static:false, Public:true }, "ZoneHour", $.Int32);

    $.Property({Static:false, Public:true }, "ZoneMinute", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XsdDateTime+DateTimeTypeCode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XsdDateTime+DateTimeTypeCode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    DateTime: 0, 
    Time: 1, 
    Date: 2, 
    GYearMonth: 3, 
    GYear: 4, 
    GMonthDay: 5, 
    GDay: 6, 
    GMonth: 7, 
    XdrDateTime: 8, 
  }
);

/* enum System.Xml.Schema.XsdDateTime+XsdDateTimeKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XsdDateTime+XsdDateTimeKind", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Unspecified: 0, 
    Zulu: 1, 
    LocalWestOfZulu: 2, 
    LocalEastOfZulu: 3, 
  }
);

/* struct System.Xml.Schema.XsdDateTime+Parser */ 

(function Parser$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.XsdDateTime+Parser", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "Parse", 
      new JSIL.MethodSignature($.Boolean, [$.String, $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse2Dig", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Parse4Dig", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseChar", 
      new JSIL.MethodSignature($.Boolean, [$.Int32, $.Char])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseDate", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTime", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTimeAndWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseTimeAndZoneAndWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseZoneAndWhitespace", 
      new JSIL.MethodSignature($.Boolean, [$.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "Test", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags"), $asm07.TypeRef("System.Xml.Schema.XsdDateTimeFlags")])
    );

    $.Constant({Static:true , Public:false}, "leapYear", $.Int32, 1904);

    $.Constant({Static:true , Public:false}, "firstMonth", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "firstDay", $.Int32, 1);

    $.Field({Static:false, Public:true }, "typeCode", $asm07.TypeRef("System.Xml.Schema.XsdDateTime+DateTimeTypeCode"));

    $.Field({Static:false, Public:true }, "year", $.Int32);

    $.Field({Static:false, Public:true }, "month", $.Int32);

    $.Field({Static:false, Public:true }, "day", $.Int32);

    $.Field({Static:false, Public:true }, "hour", $.Int32);

    $.Field({Static:false, Public:true }, "minute", $.Int32);

    $.Field({Static:false, Public:true }, "second", $.Int32);

    $.Field({Static:false, Public:true }, "fraction", $.Int32);

    $.Field({Static:false, Public:true }, "kind", $asm07.TypeRef("System.Xml.Schema.XsdDateTime+XsdDateTimeKind"));

    $.Field({Static:false, Public:true }, "zoneHour", $.Int32);

    $.Field({Static:false, Public:true }, "zoneMinute", $.Int32);

    $.Field({Static:false, Public:false}, "text", $.String);

    $.Field({Static:false, Public:false}, "$length", $.Int32);

    $.Field({Static:true , Public:false}, "Power10", $jsilcore.TypeRef("System.Array", [$.Int32]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.Schema.XsdDuration */ 

(function XsdDuration$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Schema.XsdDuration", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 8, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.TimeSpan"), $asm07.TypeRef("System.Xml.Schema.XsdDuration+DurationType")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XsdDuration+DurationType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Days", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Hours", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNegative", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Microseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Milliseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Minutes", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Months", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Nanoseconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Seconds", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Years", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "Normalize", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XsdDuration+DurationType")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ToTimeSpan", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.TimeSpan"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ToTimeSpan", 
      new JSIL.MethodSignature($asm00.TypeRef("System.TimeSpan"), [$asm07.TypeRef("System.Xml.Schema.XsdDuration+DurationType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Type])])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParse", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $asm07.TypeRef("System.Xml.Schema.XsdDuration+DurationType"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Type])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TryParseDigits", 
      new JSIL.MethodSignature($.String, [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Int32])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryToTimeSpan", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.TimeSpan")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "TryToTimeSpan", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.Schema.XsdDuration+DurationType"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.TimeSpan")])])
    );

    $.Constant({Static:true , Public:false}, "NegativeBit", $.UInt32, 2147483648);

    $.Field({Static:false, Public:false}, "years", $.Int32);

    $.Field({Static:false, Public:false}, "months", $.Int32);

    $.Field({Static:false, Public:false}, "days", $.Int32);

    $.Field({Static:false, Public:false}, "hours", $.Int32);

    $.Field({Static:false, Public:false}, "minutes", $.Int32);

    $.Field({Static:false, Public:false}, "seconds", $.Int32);

    $.Field({Static:false, Public:false}, "nanoseconds", $.UInt32);

    $.Property({Static:false, Public:true }, "IsNegative", $.Boolean);

    $.Property({Static:false, Public:true }, "Years", $.Int32);

    $.Property({Static:false, Public:true }, "Months", $.Int32);

    $.Property({Static:false, Public:true }, "Days", $.Int32);

    $.Property({Static:false, Public:true }, "Hours", $.Int32);

    $.Property({Static:false, Public:true }, "Minutes", $.Int32);

    $.Property({Static:false, Public:true }, "Seconds", $.Int32);

    $.Property({Static:false, Public:true }, "Nanoseconds", $.Int32);

    $.Property({Static:false, Public:true }, "Microseconds", $.Int32);

    $.Property({Static:false, Public:true }, "Milliseconds", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XsdDuration+Parts */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XsdDuration+Parts", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    HasNone: 0, 
    HasYears: 1, 
    HasMonths: 2, 
    HasDays: 4, 
    HasHours: 8, 
    HasMinutes: 16, 
    HasSeconds: 32, 
  }
);

/* enum System.Xml.Schema.XsdDuration+DurationType */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XsdDuration+DurationType", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Duration: 0, 
    YearMonthDuration: 1, 
    DayTimeDuration: 2, 
  }
);

/* class System.Xml.Schema.XsdValidator */ 

(function XsdValidator$Members () {
  var $, $thisType;






































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.BaseValidator"), 
      Name: "System.Xml.Schema.XsdValidator", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.BaseValidator"))
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlValidatingReaderImpl"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaCollection"), 
          $asm07.TypeRef("System.Xml.Schema.ValidationEventHandler")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddID", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeIdentityConstraints", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.String, 
          $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForwardRefs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckValue", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.SchemaAttDef")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CompleteValidation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EndElementIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "FastGetElementDecl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "FindId", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "get_DtQName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIdentityConstraints", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsInlineSchemaStarted", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_PreserveWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "IsXSDRoot", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchema", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "LoadSchemaFromLocation", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Pop", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessElement", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessInlineSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessTokenizedType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlTokenizedType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessXsiAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "Push", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Context", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.ValidationState"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ThoroughGetElementDecl", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), [
          $asm07.TypeRef("System.Xml.Schema.SchemaElementDecl"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnWrapUnion", 
      new JSIL.MethodSignature($.Object, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateChildElement", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEndStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateStartElementIdentityConstraints", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "STACK_INCREMENT", $.Int32, 10);

    $.Field({Static:false, Public:false}, "startIDConstraint", $.Int32);

    $.Field({Static:false, Public:false}, "validationStack", $asm07.TypeRef("System.Xml.HWStack"));

    $.Field({Static:false, Public:false}, "attPresence", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "nsManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "bManageNamespaces", $.Boolean);

    $.Field({Static:false, Public:false}, "IDs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "idRefListHead", $asm07.TypeRef("System.Xml.Schema.IdRefNode"));

    $.Field({Static:false, Public:false}, "inlineSchemaParser", $asm07.TypeRef("System.Xml.Schema.Parser"));

    $.Field({Static:false, Public:false}, "processContents", $asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dtCDATA", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dtQName", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:true , Public:false, ReadOnly:true }, "dtStringArray", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Field({Static:false, Public:false}, "NsXmlNs", $.String);

    $.Field({Static:false, Public:false}, "NsXs", $.String);

    $.Field({Static:false, Public:false}, "NsXsi", $.String);

    $.Field({Static:false, Public:false}, "XsiType", $.String);

    $.Field({Static:false, Public:false}, "XsiNil", $.String);

    $.Field({Static:false, Public:false}, "XsiSchemaLocation", $.String);

    $.Field({Static:false, Public:false}, "XsiNoNamespaceSchemaLocation", $.String);

    $.Field({Static:false, Public:false}, "XsdSchema", $.String);

    $.Property({Static:false, Public:true }, "Context", $asm07.TypeRef("System.Xml.Schema.ValidationState"));

    $.Property({Static:true , Public:true }, "DtQName", $asm07.TypeRef("System.Xml.Schema.XmlSchemaDatatype"));

    $.Property({Static:false, Public:false}, "IsInlineSchemaStarted", $.Boolean);

    $.Property({Static:false, Public:false}, "HasSchema", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "PreserveWhitespace", $.Boolean);

    $.Property({Static:false, Public:false}, "HasIdentityConstraints", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Schema.XmlSchemaInference */ 

(function XmlSchemaInference$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Schema.XmlSchemaInference", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [
          $.String, $.String, 
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.Schema.XmlSchema"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectTable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchema"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSimpleContentExtension", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNewElementforChoice", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateXmlSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "DateTime", 
      new JSIL.MethodSignature($.Int32, [
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm00.TypeRef("System.Collections.ICollection"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttributeRef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [
          $asm00.TypeRef("System.Collections.ICollection"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElementRef", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindGlobalElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindMatchingElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [
          $.Boolean, $asm07.TypeRef("System.Xml.XmlReader"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("JSIL.Reference", [$.Int32]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $asm07.TypeRef("System.Xml.Schema.XmlSchema"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Occurrence", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeInference", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEffectiveSchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaType", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InferElement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchema")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "InferSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InferSchema1", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"), [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:true , Public:false}, "InferSimpleType", 
      new JSIL.MethodSignature($.Int32, [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeExistingAttributesOptional", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveAttributes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "MoveAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ProcessAttributes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $.Boolean, $asm07.TypeRef("System.Xml.Schema.XmlSchema")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RefineSimpleType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Occurrence", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeInference", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetMinMaxOccurs", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SwitchUseToOptional", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.Constant({Static:true , Public:false}, "HC_ST_boolean", $.Int16, 0);

    $.Constant({Static:true , Public:false}, "HC_ST_byte", $.Int16, 1);

    $.Constant({Static:true , Public:false}, "HC_ST_unsignedByte", $.Int16, 2);

    $.Constant({Static:true , Public:false}, "HC_ST_short", $.Int16, 3);

    $.Constant({Static:true , Public:false}, "HC_ST_unsignedShort", $.Int16, 4);

    $.Constant({Static:true , Public:false}, "HC_ST_int", $.Int16, 5);

    $.Constant({Static:true , Public:false}, "HC_ST_unsignedInt", $.Int16, 6);

    $.Constant({Static:true , Public:false}, "HC_ST_long", $.Int16, 7);

    $.Constant({Static:true , Public:false}, "HC_ST_unsignedLong", $.Int16, 8);

    $.Constant({Static:true , Public:false}, "HC_ST_integer", $.Int16, 9);

    $.Constant({Static:true , Public:false}, "HC_ST_decimal", $.Int16, 10);

    $.Constant({Static:true , Public:false}, "HC_ST_float", $.Int16, 11);

    $.Constant({Static:true , Public:false}, "HC_ST_double", $.Int16, 12);

    $.Constant({Static:true , Public:false}, "HC_ST_duration", $.Int16, 13);

    $.Constant({Static:true , Public:false}, "HC_ST_dateTime", $.Int16, 14);

    $.Constant({Static:true , Public:false}, "HC_ST_time", $.Int16, 15);

    $.Constant({Static:true , Public:false}, "HC_ST_date", $.Int16, 16);

    $.Constant({Static:true , Public:false}, "HC_ST_gYearMonth", $.Int16, 17);

    $.Constant({Static:true , Public:false}, "HC_ST_string", $.Int16, 18);

    $.Constant({Static:true , Public:false}, "HC_ST_Count", $.Int16, 19);

    $.Constant({Static:true , Public:false}, "TF_boolean", $.Int32, 1);

    $.Constant({Static:true , Public:false}, "TF_byte", $.Int32, 2);

    $.Constant({Static:true , Public:false}, "TF_unsignedByte", $.Int32, 4);

    $.Constant({Static:true , Public:false}, "TF_short", $.Int32, 8);

    $.Constant({Static:true , Public:false}, "TF_unsignedShort", $.Int32, 16);

    $.Constant({Static:true , Public:false}, "TF_int", $.Int32, 32);

    $.Constant({Static:true , Public:false}, "TF_unsignedInt", $.Int32, 64);

    $.Constant({Static:true , Public:false}, "TF_long", $.Int32, 128);

    $.Constant({Static:true , Public:false}, "TF_unsignedLong", $.Int32, 256);

    $.Constant({Static:true , Public:false}, "TF_integer", $.Int32, 512);

    $.Constant({Static:true , Public:false}, "TF_decimal", $.Int32, 1024);

    $.Constant({Static:true , Public:false}, "TF_float", $.Int32, 2048);

    $.Constant({Static:true , Public:false}, "TF_double", $.Int32, 4096);

    $.Constant({Static:true , Public:false}, "TF_duration", $.Int32, 8192);

    $.Constant({Static:true , Public:false}, "TF_dateTime", $.Int32, 16384);

    $.Constant({Static:true , Public:false}, "TF_time", $.Int32, 32768);

    $.Constant({Static:true , Public:false}, "TF_date", $.Int32, 65536);

    $.Constant({Static:true , Public:false}, "TF_gYearMonth", $.Int32, 131072);

    $.Constant({Static:true , Public:false}, "TF_string", $.Int32, 262144);

    $.Field({Static:true , Public:false}, "ST_boolean", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_byte", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_unsignedByte", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_short", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_unsignedShort", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_int", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_unsignedInt", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_long", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_unsignedLong", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_integer", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_decimal", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_float", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_double", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_duration", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_dateTime", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_time", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_date", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_gYearMonth", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_string", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ST_anySimpleType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "SimpleTypes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]));

    $.Field({Static:false, Public:false}, "rootSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "schemaSet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "xtr", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "nametable", $asm07.TypeRef("System.Xml.NameTable"));

    $.Field({Static:false, Public:false}, "TargetNamespace", $.String);

    $.Field({Static:false, Public:false}, "NamespaceManager", $asm07.TypeRef("System.Xml.XmlNamespaceManager"));

    $.Field({Static:false, Public:false}, "schemaList", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "occurrence", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"));

    $.Field({Static:false, Public:false}, "typeInference", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"));

    $.Property({Static:false, Public:true }, "Occurrence", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"));

    $.Property({Static:false, Public:true }, "TypeInference", $asm07.TypeRef("System.Xml.Schema.XmlSchemaInference+InferenceOption"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Schema.XmlSchemaInference+InferenceOption */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Schema.XmlSchemaInference+InferenceOption", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Restricted: 0, 
    Relaxed: 1, 
  }
);

/* class System.Xml.Schema.XmlSchemaInferenceException */ 

(function XmlSchemaInferenceException$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), 
      Name: "System.Xml.Schema.XmlSchemaInferenceException", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Exception"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.String]), 
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetObjectData", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Runtime.Serialization.SerializationInfo"), $asm00.TypeRef("System.Runtime.Serialization.StreamingContext")])
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Serialization");
/* class System.Xml.Serialization.CodeExporter */ 

(function CodeExporter$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.CodeExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddIncludeMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.StructMapping"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddPropertyChangedNotifier", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTypeMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm00.TypeRef("System.Type"), 
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddWarningComment", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreatePropertyDeclaration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeMemberProperty"), [
          $asm01.TypeRef("System.CodeDom.CodeMemberField"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.Accessor")]), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportConstant", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm07.TypeRef("System.Xml.Serialization.ConstantMapping"), 
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $.Int64
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExportDerivedStructs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnum", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportRoot", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.StructMapping"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindAttributeDeclaration", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeAttributeDeclaration"), [$asm00.TypeRef("System.Type"), $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeCompileUnit", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.CodeCompileUnit"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeNamespace", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EnableDataBinding", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExportedClasses", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExportedMappings", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GeneratedCodeAttribute", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.CodeAttributeDeclaration"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateProperties", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeMetadata", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PropertyChangedEvent", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.CodeMemberEvent"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_RaisePropertyChangedEventMethod", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.CodeMemberMethod"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetProductVersion", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeFieldName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "PromoteType", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "ShouldInclude", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.ArrayMapping")])
    );

    $.Field({Static:false, Public:false}, "exportedMappings", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "exportedClasses", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "codeNamespace", $asm01.TypeRef("System.CodeDom.CodeNamespace"));

    $.Field({Static:false, Public:false}, "codeCompileUnit", $asm01.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Field({Static:false, Public:false}, "rootExported", $.Boolean);

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "includeMetadata", $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));

    $.Field({Static:false, Public:false}, "options", $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));

    $.Field({Static:false, Public:false}, "codeProvider", $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Field({Static:false, Public:false}, "generatedCodeAttribute", $asm01.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

    $.Property({Static:false, Public:false}, "CodeCompileUnit", $asm01.TypeRef("System.CodeDom.CodeCompileUnit"));

    $.Property({Static:false, Public:false}, "CodeNamespace", $asm01.TypeRef("System.CodeDom.CodeNamespace"));

    $.Property({Static:false, Public:false}, "CodeProvider", $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:false}, "ExportedClasses", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ExportedMappings", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "GenerateProperties", $.Boolean);

    $.Property({Static:false, Public:false}, "GeneratedCodeAttribute", $asm01.TypeRef("System.CodeDom.CodeAttributeDeclaration"));

    $.Property({Static:false, Public:true }, "IncludeMetadata", $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"));

    $.Property({Static:false, Public:false}, "Scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Property({Static:false, Public:false}, "EnableDataBinding", $.Boolean);

    $.Property({Static:true , Public:false}, "RaisePropertyChangedEventMethod", $asm01.TypeRef("System.CodeDom.CodeMemberMethod"));

    $.Property({Static:true , Public:false}, "PropertyChangedEvent", $asm01.TypeRef("System.CodeDom.CodeMemberEvent"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Serialization.CodeGenerationOptions */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.CodeGenerationOptions", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    GenerateProperties: 1, 
    GenerateNewAsync: 2, 
    GenerateOldAsync: 4, 
    GenerateOrder: 8, 
    EnableDataBinding: 16, 
  }
);

/* class System.Xml.Serialization.CodeIdentifier */ 

(function CodeIdentifier$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.CodeIdentifier", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    )
      .Attribute($asm00.TypeRef("System.ObsoleteAttribute"), function () { return ["This class should never get constructed as it contains only static methods."]; });

    $.ExternalMethod({Static:true , Public:false}, "CheckValidIdentifier", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeKeywords", 
      new JSIL.MethodSignature(null, [
          $.String, $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), 
          $asm00.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeKeywords", 
      new JSIL.MethodSignature($.String, [$.String, $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
      new JSIL.MethodSignature($.Int32, [
          $asm00.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), 
          $.Int32, $asm00.TypeRef("System.Text.StringBuilder")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCSharpName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValid", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsValidStart", 
      new JSIL.MethodSignature($.Boolean, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeCamel", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakePascal", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:true }, "MakeValid", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "MakeValidInternal", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "MaxIdentifierLength", $.Int32, 511);

    $.Field({Static:true , Public:false}, "csharp", $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.CaseInsensitiveKeyComparer */ 

(function CaseInsensitiveKeyComparer$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CaseInsensitiveComparer"), 
      Name: "System.Xml.Serialization.CaseInsensitiveKeyComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object, $.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IEqualityComparer"), "Equals");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEqualityComparer.GetHashCode", 
      new JSIL.MethodSignature($.Int32, [$.Object])
    )
      .Overrides($asm00.TypeRef("System.Collections.IEqualityComparer"), "GetHashCode");

    $.ImplementInterfaces(
      /* 1 */ $asm00.TypeRef("System.Collections.IEqualityComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.CodeIdentifiers */ 

(function CodeIdentifiers$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.CodeIdentifiers", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReserved", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "AddUnique", 
      new JSIL.MethodSignature($.String, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UseCamelCasing", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "IsInUse", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeRightCase", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "MakeUnique", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveReserved", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_UseCamelCasing", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "identifiers", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "reservedIdentifiers", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "list", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "camelCase", $.Boolean);

    $.Property({Static:false, Public:true }, "UseCamelCasing", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TempAssembly */ 

(function TempAssembly$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TempAssembly", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), 
          $.String, $.String, 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm00.TypeRef("System.Reflection.Assembly"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CanRead", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.XmlMapping"), $asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateAssembly", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), 
          $.String, $asm00.TypeRef("System.Security.Policy.Evidence"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerCompilerParameters"), $asm00.TypeRef("System.Reflection.Assembly"), 
          $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateAssemblyId", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Contract", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_FileIOPermission", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Permissions.FileIOPermission"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NeedAssembyResolve", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodFromType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [
          $asm00.TypeRef("System.Type"), $.String, 
          $asm00.TypeRef("System.Reflection.Assembly")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.AssemblyName"), [$asm00.TypeRef("System.Reflection.Assembly"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReferencedAssembly", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTypeFromAssembly", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Reflection.Assembly"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitAssemblyMethods", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeReader", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), $asm07.TypeRef("System.Xml.XmlReader"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InvokeWriter", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), $asm07.TypeRef("System.Xml.XmlWriter"), 
          $.Object, $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsSerializerVersionMatch", 
      new JSIL.MethodSignature($.Boolean, [
          $asm00.TypeRef("System.Reflection.Assembly"), $asm00.TypeRef("System.Type"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "LoadGeneratedAssembly", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [
          $asm00.TypeRef("System.Type"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializerImplementation")])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "Log", 
      new JSIL.MethodSignature(null, [$.String, $asm01.TypeRef("System.Diagnostics.EventLogEntryType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ValidateEncodingStyle", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.Constant({Static:true , Public:false}, "GeneratedAssemblyNamespace", $.String, "Microsoft.Xml.Serialization.GeneratedAssembly");

    $.Field({Static:false, Public:false}, "assembly", $asm00.TypeRef("System.Reflection.Assembly"));

    $.Field({Static:false, Public:false}, "pregeneratedAssmbly", $.Boolean);

    $.Field({Static:false, Public:false}, "contract", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"));

    $.Field({Static:false, Public:false}, "writerMethods", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "readerMethods", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "methods", $asm07.TypeRef("System.Xml.Serialization.TempAssembly+TempMethodDictionary"));

    $.Field({Static:true , Public:false}, "emptyObjectArray", $jsilcore.TypeRef("System.Array", [$.Object]), function ($pi) {
        return JSIL.Array.New($asm00.System.Object, 0);
      });

    $.Field({Static:false, Public:false}, "assemblies", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "fileIOPermission", $asm00.TypeRef("System.Security.Permissions.FileIOPermission"));

    $.Property({Static:false, Public:false}, "Contract", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerImplementation"));

    $.Property({Static:true , Public:false}, "FileIOPermission", $asm00.TypeRef("System.Security.Permissions.FileIOPermission"));

    $.Property({Static:false, Public:false}, "NeedAssembyResolve", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TempAssembly+TempMethod */ 

(function TempMethod$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TempAssembly+TempMethod", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "writeMethod", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "readMethod", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "isSoap", $.Boolean);

    $.Field({Static:false, Public:false}, "methodKey", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TempAssembly+TempMethodDictionary */ 

(function TempMethodDictionary$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.DictionaryBase"), 
      Name: "System.Xml.Serialization.TempAssembly+TempMethodDictionary", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Serialization.TempAssembly+TempMethod")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TempAssembly+TempMethod"), [$.String])
    );

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Xml.Serialization.TempAssembly+TempMethod"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlSerializerCompilerParameters */ 

(function XmlSerializerCompilerParameters$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializerCompilerParameters", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Create", 
      new JSIL.MethodSignature($.Type, [$asm01.TypeRef("System.CodeDom.Compiler.CompilerParameters"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeDomParameters", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.CompilerParameters"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNeedTempDirAccess", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "needTempDirAccess", $.Boolean);

    $.Field({Static:false, Public:false}, "parameters", $asm01.TypeRef("System.CodeDom.Compiler.CompilerParameters"));

    $.Property({Static:false, Public:false}, "IsNeedTempDirAccess", $.Boolean);

    $.Property({Static:false, Public:false}, "CodeDomParameters", $asm01.TypeRef("System.CodeDom.Compiler.CompilerParameters"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TempAssemblyCacheKey */ 

(function TempAssemblyCacheKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TempAssemblyCacheKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "type", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TempAssemblyCache */ 

(function TempAssemblyCache$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TempAssemblyCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.TempAssembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TempAssembly"), [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "cache", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Xml.Serialization.TempAssembly"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.Compiler */ 

(function Compiler$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Compiler", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Collections.Hashtable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:true , Public:false}, "AssemblyNameFromOptions", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Compile", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [
          $asm00.TypeRef("System.Reflection.Assembly"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerCompilerParameters"), $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Imports", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Source", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.IO.TextWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCurrentUser", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTempAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Reflection.AssemblyName"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTempAssemblyPath", 
      new JSIL.MethodSignature($.String, [
          $.String, $asm00.TypeRef("System.Reflection.Assembly"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "debugEnabled", $.Boolean);

    $.Field({Static:false, Public:false}, "imports", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "writer", $asm00.TypeRef("System.IO.StringWriter"));

    $.Property({Static:false, Public:false}, "Imports", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "Source", $asm00.TypeRef("System.IO.TextWriter"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ImportContext */ 

(function ImportContext$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.ImportContext", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mappings", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ShareTypes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeIdentifiers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Warnings", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.Field({Static:false, Public:false}, "shareTypes", $.Boolean);

    $.Field({Static:false, Public:false}, "cache", $asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

    $.Field({Static:false, Public:false}, "mappings", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "elements", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "typeIdentifiers", $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:false}, "Cache", $asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

    $.Property({Static:false, Public:false}, "Elements", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Mappings", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "TypeIdentifiers", $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:true }, "ShareTypes", $.Boolean);

    $.Property({Static:false, Public:true }, "Warnings", $asm01.TypeRef("System.Collections.Specialized.StringCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SchemaObjectCache */ 

(function SchemaObjectCache$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SchemaObjectCache", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddItem", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CompositeHash", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSchemaGraph", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Graph", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Hash", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ObjectCache", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Warnings", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDependencies", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm00.TypeRef("System.Collections.ArrayList"), 
          $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetHash", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Serialization.SchemaObjectWriter")])
    );

    $.Field({Static:false, Public:false}, "graph", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "hash", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "objectCache", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "warnings", $asm01.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Field({Static:false, Public:false}, "looks", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Graph", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Hash", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ObjectCache", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Warnings", $asm01.TypeRef("System.Collections.Specialized.StringCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SchemaGraph */ 

(function SchemaGraph$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SchemaGraph", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Hashtable"), $asm07.TypeRef("System.Xml.Serialization.XmlSchemas")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRef", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.ArrayList"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Depends", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.ArrayList"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Depends", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm00.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetItems", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.Field({Static:false, Public:false}, "empty", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "scope", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "items", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.IndentedWriter */ 

(function IndentedWriter$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.IndentedWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Indent", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Indent", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write", 
      JSIL.MethodSignature.Action($.Char)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLine", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "writer", $asm00.TypeRef("System.IO.TextWriter"));

    $.Field({Static:false, Public:false}, "needIndent", $.Boolean);

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);

    $.Field({Static:false, Public:false}, "compact", $.Boolean);

    $.Property({Static:false, Public:false}, "Indent", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.Serialization.IXmlSerializable */ 

JSIL.MakeInterface(
  "System.Xml.Serialization.IXmlSerializable", true, [], function ($) {
    $.Method({}, "GetSchema", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema")));
    $.Method({}, "ReadXml", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader")));
    $.Method({}, "WriteXml", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter")));
  }, []);

/* interface System.Xml.Serialization.IXmlTextParser */ 

JSIL.MakeInterface(
  "System.Xml.Serialization.IXmlTextParser", true, [], function ($) {
    $.Method({}, "get_Normalized", JSIL.MethodSignature.Return($.Boolean));
    $.Method({}, "set_Normalized", JSIL.MethodSignature.Action($.Boolean));
    $.Method({}, "get_WhitespaceHandling", JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WhitespaceHandling")));
    $.Method({}, "set_WhitespaceHandling", JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.WhitespaceHandling")));
    $.Property({}, "Normalized");
    $.Property({}, "WhitespaceHandling");
  }, []);

/* class System.Xml.Serialization.Accessor */ 

(function Accessor$Members () {
  var $, $thisType;



























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Accessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "EscapeQName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Any", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AnyNamespaces", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Default", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOptional", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsTopLevelInSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Any", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_AnyNamespaces", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Default", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFixed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsOptional", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsTopLevelInSchema", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Mapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnescapeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "defaultValue", $.Object);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "mapping", $asm07.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Field({Static:false, Public:false}, "any", $.Boolean);

    $.Field({Static:false, Public:false}, "anyNs", $.String);

    $.Field({Static:false, Public:false}, "topLevelInSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "isFixed", $.Boolean);

    $.Field({Static:false, Public:false}, "isOptional", $.Boolean);

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:false}, "Mapping", $asm07.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:false}, "Default", $.Object);

    $.Property({Static:false, Public:false}, "HasDefault", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:false}, "Any", $.Boolean);

    $.Property({Static:false, Public:false}, "AnyNamespaces", $.String);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:false}, "IsFixed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOptional", $.Boolean);

    $.Property({Static:false, Public:false}, "IsTopLevelInSchema", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ElementAccessor */ 

(function ElementAccessor$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Accessor"), 
      Name: "System.Xml.Serialization.ElementAccessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnbounded", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsUnbounded", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "nullable", $.Boolean);

    $.Field({Static:false, Public:false}, "isSoap", $.Boolean);

    $.Field({Static:false, Public:false}, "unbounded", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnbounded", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ChoiceIdentifierAccessor */ 

(function ChoiceIdentifierAccessor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Accessor"), 
      Name: "System.Xml.Serialization.ChoiceIdentifierAccessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberIds", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberIds", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MemberName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "memberName", $.String);

    $.Field({Static:false, Public:false}, "memberIds", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "MemberName", $.String);

    $.Property({Static:false, Public:false}, "MemberIds", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TextAccessor */ 

(function TextAccessor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Accessor"), 
      Name: "System.Xml.Serialization.TextAccessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlnsAccessor */ 

(function XmlnsAccessor$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Accessor"), 
      Name: "System.Xml.Serialization.XmlnsAccessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.AttributeAccessor */ 

(function AttributeAccessor$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Accessor"), 
      Name: "System.Xml.Serialization.AttributeAccessor", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSpecial", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSpecialXmlNamespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsList", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "isSpecial", $.Boolean);

    $.Field({Static:false, Public:false}, "isList", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSpecialXmlNamespace", $.Boolean);

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Mapping */ 

(function Mapping$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Mapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "isSoap", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TypeMapping */ 

(function TypeMapping$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Mapping"), 
      Name: "System.Xml.Serialization.TypeMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DefaultElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IncludeInSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAnonymousType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReference", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedByElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedByTopLevelElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IncludeInSchema", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsList", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReference", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferencedByElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReferencedByTopLevelElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeDesc", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "typeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Field({Static:false, Public:false}, "typeNs", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Field({Static:false, Public:false}, "referencedByElement", $.Boolean);

    $.Field({Static:false, Public:false}, "referencedByTopLevelElement", $.Boolean);

    $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "reference", $.Boolean);

    $.Property({Static:false, Public:false}, "ReferencedByTopLevelElement", $.Boolean);

    $.Property({Static:false, Public:false}, "ReferencedByElement", $.Boolean);

    $.Property({Static:false, Public:false}, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "TypeName", $.String);

    $.Property({Static:false, Public:false}, "TypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "IncludeInSchema", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsList", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReference", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAnonymousType", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "DefaultElementName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.PrimitiveMapping */ 

(function PrimitiveMapping$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
      Name: "System.Xml.Serialization.PrimitiveMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "set_IsList", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "isList", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "IsList", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.NullableMapping */ 

(function NullableMapping$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
      Name: "System.Xml.Serialization.NullableMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_DefaultElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.Field({Static:false, Public:false}, "baseMapping", $asm07.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:false}, "BaseMapping", $asm07.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:false, Virtual:true }, "DefaultElementName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ArrayMapping */ 

(function ArrayMapping$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
      Name: "System.Xml.Serialization.ArrayMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementsSortedByDerivation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TopLevelMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Elements", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TopLevelMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Field({Static:false, Public:false}, "sortedElements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Field({Static:false, Public:false}, "topLevelMapping", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));

    $.Property({Static:false, Public:false}, "Elements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "ElementsSortedByDerivation", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "TopLevelMapping", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.EnumMapping */ 

(function EnumMapping$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), 
      Name: "System.Xml.Serialization.EnumMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Constants", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFlags", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Constants", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsFlags", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "constants", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantMapping")]));

    $.Field({Static:false, Public:false}, "isFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "IsFlags", $.Boolean);

    $.Property({Static:false, Public:false}, "Constants", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantMapping")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ConstantMapping */ 

(function ConstantMapping$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Mapping"), 
      Name: "System.Xml.Serialization.ConstantMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Value", 
      JSIL.MethodSignature.Action($.Int64)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "xmlName", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "value", $.Int64);

    $.Property({Static:false, Public:false}, "XmlName", $.String);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $.Int64);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* interface System.Xml.Serialization.INameScope */ 

JSIL.MakeInterface(
  "System.Xml.Serialization.INameScope", false, [], function ($) {
    $.Method({}, "get_Item", new JSIL.MethodSignature($.Object, [$.String, $.String]));
    $.Method({}, "set_Item", new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ]));
    $.Property({}, "Item");
  }, [])
  .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

/* class System.Xml.Serialization.StructMapping */ 

(function StructMapping$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
      Name: "System.Xml.Serialization.StructMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Declares", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDeclaringMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $jsilcore.TypeRef("JSIL.Reference", [$.Type]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseMapping", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DerivedMappings", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasElements", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasSimpleContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasXmlnsMember", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsFullyInitialized", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOpenModel", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSequence", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.NameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_LocalElements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.NameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextDerivedMapping", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HasExplicitSequence", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseMapping", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsOpenModel", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSequence", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Scope", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlnsMember", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetContentModel", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TextAccessor"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetSequence", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.INameScope"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.set_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.INameScope"), "set_Item");

    $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]));

    $.Field({Static:false, Public:false}, "baseMapping", $.Type);

    $.Field({Static:false, Public:false}, "derivedMappings", $.Type);

    $.Field({Static:false, Public:false}, "nextDerivedMapping", $.Type);

    $.Field({Static:false, Public:false}, "xmlnsMember", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Field({Static:false, Public:false}, "hasSimpleContent", $.Boolean);

    $.Field({Static:false, Public:false}, "openModel", $.Boolean);

    $.Field({Static:false, Public:false}, "isSequence", $.Boolean);

    $.Field({Static:false, Public:false}, "elements", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "attributes", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:false}, "BaseMapping", $.Type);

    $.Property({Static:false, Public:false}, "DerivedMappings", $.Type);

    $.Property({Static:false, Public:false}, "IsFullyInitialized", $.Boolean);

    $.Property({Static:false, Public:false}, "LocalElements", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false}, "LocalAttributes", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.Item", $.Object);

    $.Property({Static:false, Public:false}, "NextDerivedMapping", $.Type);

    $.Property({Static:false, Public:false}, "HasSimpleContent", $.Boolean);

    $.Property({Static:false, Public:false}, "HasXmlnsMember", $.Boolean);

    $.Property({Static:false, Public:false}, "Members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]));

    $.Property({Static:false, Public:false}, "XmlnsMember", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "IsOpenModel", $.Boolean);

    $.Property({Static:false, Public:false}, "Scope", $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:false}, "HasElements", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSequence", $.Boolean);

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.Serialization.INameScope")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.AccessorMapping */ 

(function AccessorMapping$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.Mapping"), 
      Name: "System.Xml.Serialization.AccessorMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ElementsMatch", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Accessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Attribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Elements", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ElementsSortedByDerivation", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Ignore", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNeedNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsParticle", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsText", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Text", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TextAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Xmlns", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlnsAccessor"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsNeedNullableMember", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Attribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ChoiceIdentifier", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Elements", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Ignore", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Text", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TextAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_TypeDesc", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Xmlns", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlnsAccessor"))
    );

    $.ExternalMethod({Static:true , Public:false}, "SortMostToLeastDerived", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]))
    );

    $.Field({Static:false, Public:false}, "typeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Field({Static:false, Public:false}, "attribute", $asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"));

    $.Field({Static:false, Public:false}, "elements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Field({Static:false, Public:false}, "sortedElements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Field({Static:false, Public:false}, "text", $asm07.TypeRef("System.Xml.Serialization.TextAccessor"));

    $.Field({Static:false, Public:false}, "choiceIdentifier", $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"));

    $.Field({Static:false, Public:false}, "xmlns", $asm07.TypeRef("System.Xml.Serialization.XmlnsAccessor"));

    $.Field({Static:false, Public:false}, "ignore", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAttribute", $.Boolean);

    $.Property({Static:false, Public:false}, "IsText", $.Boolean);

    $.Property({Static:false, Public:false}, "IsParticle", $.Boolean);

    $.Property({Static:false, Public:false}, "TypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "Attribute", $asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"));

    $.Property({Static:false, Public:false}, "Elements", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "ElementsSortedByDerivation", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]));

    $.Property({Static:false, Public:false}, "Text", $asm07.TypeRef("System.Xml.Serialization.TextAccessor"));

    $.Property({Static:false, Public:false}, "ChoiceIdentifier", $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"));

    $.Property({Static:false, Public:false}, "Xmlns", $asm07.TypeRef("System.Xml.Serialization.XmlnsAccessor"));

    $.Property({Static:false, Public:false}, "Ignore", $.Boolean);

    $.Property({Static:false, Public:false}, "Accessor", $asm07.TypeRef("System.Xml.Serialization.Accessor"));

    $.Property({Static:false, Public:false}, "IsNeedNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.AccessorMapping+AccessorComparer */ 

(function AccessorComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.AccessorMapping+AccessorComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.MemberMappingComparer */ 

(function MemberMappingComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.MemberMappingComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.MemberMapping */ 

(function MemberMapping$Members () {
  var $, $thisType;

















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.AccessorMapping"), 
      Name: "System.Xml.Serialization.MemberMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckShouldPersist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReturnValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSequence", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SequenceId", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullableType", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckShouldPersist", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckSpecified", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReturnValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ReadOnly", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_SequenceId", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "checkShouldPersist", $.Boolean);

    $.Field({Static:false, Public:false}, "checkSpecified", $asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

    $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean);

    $.Field({Static:false, Public:false}, "readOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "sequenceId", $.Int32);

    $.Property({Static:false, Public:false}, "CheckShouldPersist", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckSpecified", $asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "IsReturnValue", $.Boolean);

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSequence", $.Boolean);

    $.Property({Static:false, Public:false}, "SequenceId", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.MembersMapping */ 

(function MembersMapping$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
      Name: "System.Xml.Serialization.MembersMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasWrapperElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Members", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ValidateRpcWrapperElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_WriteAccessors", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlnsMember", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_HasWrapperElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Members", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ValidateRpcWrapperElement", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_WriteAccessors", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_XmlnsMember", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.Field({Static:false, Public:false}, "members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]));

    $.Field({Static:false, Public:false}, "hasWrapperElement", $.Boolean);

    $.Field({Static:false, Public:false}, "validateRpcWrapperElement", $.Boolean);

    $.Field({Static:false, Public:false}, "writeAccessors", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlnsMember", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "Members", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]));

    $.Property({Static:false, Public:false}, "XmlnsMember", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "HasWrapperElement", $.Boolean);

    $.Property({Static:false, Public:false}, "ValidateRpcWrapperElement", $.Boolean);

    $.Property({Static:false, Public:false}, "WriteAccessors", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SpecialMapping */ 

(function SpecialMapping$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
      Name: "System.Xml.Serialization.SpecialMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamedAny", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NamedAny", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "namedAny", $.Boolean);

    $.Property({Static:false, Public:false}, "NamedAny", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SerializableMapping */ 

(function SerializableMapping$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.SpecialMapping"), 
      Name: "System.Xml.Serialization.SerializableMapping", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.MethodInfo"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckDuplicateElement", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DerivedMappings", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAny", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Next", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextDerivedMapping", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XsdType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XsiType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Match", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RetrieveSerializableSchema", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Next", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBaseMapping", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.Field({Static:false, Public:false}, "schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "needSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "getSchemaMethod", $asm00.TypeRef("System.Reflection.MethodInfo"));

    $.Field({Static:false, Public:false}, "xsiType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "xsdType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "any", $.Boolean);

    $.Field({Static:false, Public:false}, "namespaces", $.String);

    $.Field({Static:false, Public:false}, "baseMapping", $.Type);

    $.Field({Static:false, Public:false}, "derivedMappings", $.Type);

    $.Field({Static:false, Public:false}, "nextDerivedMapping", $.Type);

    $.Field({Static:false, Public:false}, "next", $.Type);

    $.Property({Static:false, Public:false}, "IsAny", $.Boolean);

    $.Property({Static:false, Public:false}, "NamespaceList", $.String);

    $.Property({Static:false, Public:false}, "DerivedMappings", $.Type);

    $.Property({Static:false, Public:false}, "NextDerivedMapping", $.Type);

    $.Property({Static:false, Public:false}, "Next", $.Type);

    $.Property({Static:false, Public:false}, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "Schemas", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:false}, "Schema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "XsiType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "XsdType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ModelScope */ 

(function ModelScope$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.ModelScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ArrayModel"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeModel"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeModel"), [$asm00.TypeRef("System.Type"), $.Boolean])
    );

    $.Field({Static:false, Public:false}, "typeScope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "models", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "arrayModels", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "TypeScope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TypeModel */ 

(function TypeModel$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TypeModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.ModelScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ModelScope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.ModelScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.Field({Static:false, Public:false}, "typeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.ModelScope"));

    $.Property({Static:false, Public:false}, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "ModelScope", $asm07.TypeRef("System.Xml.Serialization.ModelScope"));

    $.Property({Static:false, Public:false}, "TypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ArrayModel */ 

(function ArrayModel$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeModel"), 
      Name: "System.Xml.Serialization.ArrayModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.ModelScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Element", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeModel"))
    );

    $.Property({Static:false, Public:false}, "Element", $asm07.TypeRef("System.Xml.Serialization.TypeModel"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.PrimitiveModel */ 

(function PrimitiveModel$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeModel"), 
      Name: "System.Xml.Serialization.PrimitiveModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.ModelScope")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SpecialModel */ 

(function SpecialModel$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeModel"), 
      Name: "System.Xml.Serialization.SpecialModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.ModelScope")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.StructModel */ 

(function StructModel$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeModel"), 
      Name: "System.Xml.Serialization.StructModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.ModelScope")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckPropertyRead", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Reflection.PropertyInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSupportedMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm00.TypeRef("System.Reflection.MemberInfo"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.FieldModel"), [$asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetFieldModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.FieldModel"), [$asm00.TypeRef("System.Reflection.FieldInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetMemberInfos", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Reflection.MemberInfo")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPropertyModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.FieldModel"), [$asm00.TypeRef("System.Reflection.PropertyInfo")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Serialization.SpecifiedAccessor */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.SpecifiedAccessor", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    ReadOnly: 1, 
    ReadWrite: 2, 
  }
);

/* class System.Xml.Serialization.FieldModel */ 

(function FieldModel$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.FieldModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 6, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Reflection.MemberInfo"), $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckShouldPersist", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecified", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldTypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsProperty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReadOnly", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.Field({Static:false, Public:false}, "checkSpecified", $asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

    $.Field({Static:false, Public:false}, "checkShouldPersist", $.Boolean);

    $.Field({Static:false, Public:false}, "readOnly", $.Boolean);

    $.Field({Static:false, Public:false}, "isProperty", $.Boolean);

    $.Field({Static:false, Public:false}, "fieldType", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "fieldTypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "FieldType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FieldTypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "CheckShouldPersist", $.Boolean);

    $.Property({Static:false, Public:false}, "CheckSpecified", $asm07.TypeRef("System.Xml.Serialization.SpecifiedAccessor"));

    $.Property({Static:false, Public:false}, "ReadOnly", $.Boolean);

    $.Property({Static:false, Public:false}, "IsProperty", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ConstantModel */ 

(function ConstantModel$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.ConstantModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.FieldInfo"), $.Int64])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FieldInfo", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Reflection.FieldInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Value", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.Field({Static:false, Public:false}, "fieldInfo", $asm00.TypeRef("System.Reflection.FieldInfo"));

    $.Field({Static:false, Public:false}, "value", $.Int64);

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "Value", $.Int64);

    $.Property({Static:false, Public:false}, "FieldInfo", $asm00.TypeRef("System.Reflection.FieldInfo"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.EnumModel */ 

(function EnumModel$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.TypeModel"), 
      Name: "System.Xml.Serialization.EnumModel", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.ModelScope")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Constants", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantModel")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetConstantModel", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ConstantModel"), [$asm00.TypeRef("System.Reflection.FieldInfo")])
    );

    $.Field({Static:false, Public:false}, "constants", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantModel")]));

    $.Property({Static:false, Public:false}, "Constants", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ConstantModel")]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.NameKey */ 

(function NameKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.NameKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.NameTable */ 

(function NameTable$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.NameTable", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Values", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.get_Item", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.INameScope"), "get_Item");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.set_Item", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.INameScope"), "set_Item");

    $.ExternalMethod({Static:false, Public:false}, "ToArray", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Array"), [$asm00.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "table", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false}, "Item", $.Object);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.INameScope.Item", $.Object);

    $.Property({Static:false, Public:false}, "Values", $asm00.TypeRef("System.Collections.ICollection"));

    $.ImplementInterfaces(
      /* 0 */ $asm07.TypeRef("System.Xml.Serialization.INameScope")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.SchemaImporter */ 

(function SchemaImporter$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SchemaImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm07.TypeRef("System.Xml.Serialization.ImportContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReference", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Serialization.NameTable"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReservedIdentifiersForDataBinding", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUniqueTypeName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CodeProvider", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Context", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.ImportContext"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Extensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GroupsInUse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.NameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedElements", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ImportedMappings", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Options", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Schemas", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeIdentifiers", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypesInUse", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.NameTable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportDerivedTypes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeDerived", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.StructMapping"), $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveReference", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Serialization.NameTable")])
    );

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "root", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));

    $.Field({Static:false, Public:false}, "options", $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));

    $.Field({Static:false, Public:false}, "codeProvider", $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Xml.Serialization.ImportContext"));

    $.Field({Static:false, Public:false}, "rootImported", $.Boolean);

    $.Field({Static:false, Public:false}, "typesInUse", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "groupsInUse", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "extensions", $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));

    $.Property({Static:false, Public:false}, "Context", $asm07.TypeRef("System.Xml.Serialization.ImportContext"));

    $.Property({Static:false, Public:false}, "CodeProvider", $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"));

    $.Property({Static:false, Public:true }, "Extensions", $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));

    $.Property({Static:false, Public:false}, "ImportedElements", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "ImportedMappings", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "TypeIdentifiers", $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"));

    $.Property({Static:false, Public:false}, "Schemas", $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Property({Static:false, Public:false}, "Scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Property({Static:false, Public:false}, "GroupsInUse", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false}, "TypesInUse", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Property({Static:false, Public:false}, "Options", $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlAttributeComparer */ 

(function XmlAttributeComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlAttributeComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlFacetComparer */ 

(function XmlFacetComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlFacetComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.QNameComparer */ 

(function QNameComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.QNameComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSchemaObjectComparer */ 

(function XmlSchemaObjectComparer$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSchemaObjectComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ExternalMethod({Static:true , Public:false}, "NameOf", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "NameOf", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "Namespace", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.Field({Static:false, Public:false}, "comparer", $asm07.TypeRef("System.Xml.Serialization.QNameComparer"));

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SchemaObjectWriter */ 

(function SchemaObjectWriter$Members () {
  var $, $thisType;


















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SchemaObjectWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GetString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "NewLine", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "ToString", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.NamespaceList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_XmlSchemaFacet", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write1_XmlSchemaAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write11_XmlSchemaDerivationMethod", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaDerivationMethod")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write12_XmlSchemaSimpleTypeUnion", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeUnion"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write14_XmlSchemaSimpleTypeList", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write15_XmlSchemaSimpleTypeRestriction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleTypeRestriction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write3_XmlSchemaObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write30_XmlSchemaUse", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaUse")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write31_XmlSchemaAttributeGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write32_XmlSchemaAttributeGroupRef", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroupRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write33_XmlSchemaAnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write34_XmlSchemaContentProcessing", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaContentProcessing")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write35_XmlSchemaComplexType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write36_XmlSchemaSimpleContent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write38_XmlSchemaSimpleContentExtension", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write40_XmlSchemaSimpleContentRestriction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleContentRestriction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write41_XmlSchemaComplexContent", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContent"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write42_XmlSchemaComplexContentExtension", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write43_XmlSchemaAll", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAll"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write46_XmlSchemaElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write47_XmlSchemaKey", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaKey"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write48_XmlSchemaIdentityConstraint", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaIdentityConstraint"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write49_XmlSchemaXPath", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaXPath")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Write5_XmlSchemaAnnotation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAnnotation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write50_XmlSchemaKeyref", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaKeyref"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write51_XmlSchemaUnique", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaUnique"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write52_XmlSchemaChoice", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaChoice"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write53_XmlSchemaAny", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write54_XmlSchemaSequence", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSequence"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write55_XmlSchemaGroupRef", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupRef"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write56_XmlSchemaComplexContentRestriction", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexContentRestriction"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write57_XmlSchemaGroup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write6_XmlSchemaDocumentation", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaDocumentation"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write7_XmlSchemaAppInfo", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaAppInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Write9_XmlSchemaSimpleType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributes", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlAttribute")]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFacets", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIndent", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSortedItems", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlSchemaObject", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.Field({Static:false, Public:false}, "w", $asm00.TypeRef("System.Text.StringBuilder"));

    $.Field({Static:false, Public:false}, "indentLevel", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapAttributeAttribute */ 

(function SoapAttributeAttribute$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.SoapAttributeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "attributeName", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Property({Static:false, Public:true }, "AttributeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.SoapAttributeOverrides */ 

(function SoapAttributeOverrides$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SoapAttributeOverrides", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.SoapAttributes")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.SoapAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.Field({Static:false, Public:false}, "types", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.Serialization.SoapAttributeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.SoapAttributeFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Enum: 1, 
    Type: 2, 
    Element: 4, 
    Attribute: 8, 
  }
);

/* class System.Xml.Serialization.SoapAttributes */ 

(function SoapAttributes$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SoapAttributes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapDefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SoapElementAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapEnum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SoapEnumAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SoapFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SoapAttributeFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapIgnore", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SoapTypeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapDefaultValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SoapElementAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapEnum", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SoapEnumAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapIgnore", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SoapTypeAttribute"))
    );

    $.Field({Static:false, Public:false}, "soapIgnore", $.Boolean);

    $.Field({Static:false, Public:false}, "soapType", $asm07.TypeRef("System.Xml.Serialization.SoapTypeAttribute"));

    $.Field({Static:false, Public:false}, "soapElement", $asm07.TypeRef("System.Xml.Serialization.SoapElementAttribute"));

    $.Field({Static:false, Public:false}, "soapAttribute", $asm07.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"));

    $.Field({Static:false, Public:false}, "soapEnum", $asm07.TypeRef("System.Xml.Serialization.SoapEnumAttribute"));

    $.Field({Static:false, Public:false}, "soapDefaultValue", $.Object);

    $.Property({Static:false, Public:false}, "SoapFlags", $asm07.TypeRef("System.Xml.Serialization.SoapAttributeFlags"));

    $.Property({Static:false, Public:true }, "SoapType", $asm07.TypeRef("System.Xml.Serialization.SoapTypeAttribute"));

    $.Property({Static:false, Public:true }, "SoapEnum", $asm07.TypeRef("System.Xml.Serialization.SoapEnumAttribute"));

    $.Property({Static:false, Public:true }, "SoapIgnore", $.Boolean);

    $.Property({Static:false, Public:true }, "SoapElement", $asm07.TypeRef("System.Xml.Serialization.SoapElementAttribute"));

    $.Property({Static:false, Public:true }, "SoapAttribute", $asm07.TypeRef("System.Xml.Serialization.SoapAttributeAttribute"));

    $.Property({Static:false, Public:true }, "SoapDefaultValue", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapCodeExporter */ 

(function SoapCodeExporter$Members () {
  var $, $thisType;



















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.CodeExporter"), 
      Name: "System.Xml.Serialization.SoapCodeExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddElementMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMemberMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.Accessor")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExportDerivedStructs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMember", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm07.TypeRef("System.Xml.Serialization.MemberMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportProperty", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStruct", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapElementAttribute */ 

(function SoapElementAttribute$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.SoapElementAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "elementName", $.String);

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Field({Static:false, Public:false}, "nullable", $.Boolean);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.SoapEnumAttribute */ 

(function SoapEnumAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.SoapEnumAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Field]; });

})();

/* class System.Xml.Serialization.SoapIgnoreAttribute */ 

(function SoapIgnoreAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.SoapIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.SoapIncludeAttribute */ 

(function SoapIncludeAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.SoapIncludeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Interface", "Method", "Struct")]; });

})();

/* class System.Xml.Serialization.SoapReflectionImporter */ 

(function SoapReflectionImporter$Members () {
  var $, $thisType;







































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SoapReflectionImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SoapAttributeOverrides"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.SoapAttributeOverrides"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateElementAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNullableMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.NullableMapping"), [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), [$asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm07.TypeRef("System.Xml.Serialization.SoapAttributes")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAccessorMapping", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $asm07.TypeRef("System.Xml.Serialization.FieldModel"), 
          $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayLikeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), [$asm07.TypeRef("System.Xml.Serialization.ArrayModel"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportConstantMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ConstantMapping"), [$asm07.TypeRef("System.Xml.Serialization.ConstantModel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.EnumMapping"), [$asm07.TypeRef("System.Xml.Serialization.EnumModel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportFieldMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.FieldModel"), $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMemberMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MembersMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm07.TypeRef("System.Xml.Serialization.PrimitiveModel"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructLikeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.StructMapping"), [$asm07.TypeRef("System.Xml.Serialization.StructModel"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm07.TypeRef("System.Xml.Serialization.TypeModel"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeType", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeTypes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeStructMembers", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Serialization.StructMapping"), $asm07.TypeRef("System.Xml.Serialization.StructModel"), 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReflectionException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetArrayMappingType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.ArrayMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "typeScope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "attributeOverrides", $asm07.TypeRef("System.Xml.Serialization.SoapAttributeOverrides"));

    $.Field({Static:false, Public:false}, "types", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "nullables", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "root", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));

    $.Field({Static:false, Public:false}, "defaultNs", $.String);

    $.Field({Static:false, Public:false}, "modelScope", $asm07.TypeRef("System.Xml.Serialization.ModelScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapSchemaExporter */ 

(function SoapSchemaExporter$Members () {
  var $, $thisType;
























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SoapSchemaExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaImport", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaItem", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateType", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportDerivedMappings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessors", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.MembersMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportNonXsdPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportRootMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStructMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.StructMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeMembers", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindImport", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaContainsItem", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String])
    );

    $.Constant({Static:true , Public:false}, "elementFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), 1);

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "types", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "exportedRoot", $.Boolean);

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:true , Public:false}, "ArrayQName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:true , Public:false}, "ArrayTypeQName", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:false}, "Document", $asm07.TypeRef("System.Xml.XmlDocument"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapSchemaImporter */ 

(function SoapSchemaImporter$Members () {
  var $, $thisType;































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.SchemaImporter"), 
      Name: "System.Xml.Serialization.SoapSchemaImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm07.TypeRef("System.Xml.Serialization.ImportContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm07.TypeRef("System.Xml.Serialization.ImportContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindType", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypeSource", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportDerivedTypes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroup", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroupMembers", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.SoapSchemaMember")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.SoapSchemaMember")])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.SoapSchemaMember")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.SoapSchemaMember")]), $.Boolean, 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportNonXsdPrimitiveDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapSchemaMember */ 

(function SoapSchemaMember$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.SoapSchemaMember", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.Field({Static:false, Public:false}, "memberName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "MemberType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Property({Static:false, Public:true }, "MemberName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.SoapTypeAttribute */ 

(function SoapTypeAttribute$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.SoapTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeInSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeInSchema", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean);

    $.Property({Static:false, Public:true }, "IncludeInSchema", $.Boolean);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* enum System.Xml.Serialization.TypeKind */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.TypeKind", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Root: 0, 
    Primitive: 1, 
    Enum: 2, 
    Struct: 3, 
    Class: 4, 
    Array: 5, 
    Collection: 6, 
    Enumerable: 7, 
    Void: 8, 
    Node: 9, 
    Attribute: 10, 
    Serializable: 11, 
  }
);

/* enum System.Xml.Serialization.TypeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.TypeFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    None: 0, 
    Abstract: 1, 
    Reference: 2, 
    Special: 4, 
    CanBeAttributeValue: 8, 
    CanBeTextValue: 16, 
    CanBeElementValue: 32, 
    HasCustomFormatter: 64, 
    AmbiguousDataType: 128, 
    IgnoreDefault: 512, 
    HasIsEmpty: 1024, 
    HasDefaultConstructor: 2048, 
    XmlEncodingNotRequired: 4096, 
    UseReflection: 16384, 
    CollapseWhitespace: 32768, 
    OptionalValue: 65536, 
    CtorInaccessible: 131072, 
    UsePrivateImplementation: 262144, 
    GenericInterface: 524288, 
    Unsupported: 1048576, 
  }
);

/* class System.Xml.Serialization.TypeDesc */ 

(function TypeDesc$Members () {
  var $, $thisType;


































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TypeDesc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm07.TypeRef("System.Xml.Serialization.TypeKind"), 
          $.Type, $asm07.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm07.TypeRef("System.Xml.Serialization.TypeKind"), 
          $.Type, $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeKind"), $.Type, 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeKind"), 
          $.Type, $asm07.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.Type
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckNeedConstructor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckSupported", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArrayTypeDesc", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMappedTypeDesc", 
      new JSIL.MethodSignature($.Type, [$asm07.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindCommonBaseTypeDesc", 
      new JSIL.MethodSignature($.Type, [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayElementTypeDesc", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayLengthName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_BaseTypeDesc", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeElementValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CanBeTextValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CannotNew", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CollapseWhitespace", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ConstructorInaccessible", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CSharpName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DataType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Exception", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ExtendedType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Flags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeFlags"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FormatterName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasCustomFormatter", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultConstructor", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasDefaultSupport", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_HasIsEmpty", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAbstract", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsAmbiguousDataType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArray", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArrayLike", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsClass", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsCollection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEnum", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsEnumerable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsGenericInterface", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMappedType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsMixed", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsOptionalValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrimitive", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsPrivateImplementation", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsRoot", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSpecial", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsStructLike", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsUnsupported", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsValueType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsVoid", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsXsdType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Kind", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeKind"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_UseReflection", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Weight", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlEncodingNotRequired", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullableTypeDesc", 
      new JSIL.MethodSignature($.Type, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsDerivedFrom", 
      new JSIL.MethodSignature($.Boolean, [$.Type])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ArrayElementTypeDesc", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_BaseTypeDesc", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Exception", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsMixed", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "toString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "fullName", $.String);

    $.Field({Static:false, Public:false}, "cSharpName", $.String);

    $.Field({Static:false, Public:false}, "arrayElementTypeDesc", $.Type);

    $.Field({Static:false, Public:false}, "arrayTypeDesc", $.Type);

    $.Field({Static:false, Public:false}, "nullableTypeDesc", $.Type);

    $.Field({Static:false, Public:false}, "kind", $asm07.TypeRef("System.Xml.Serialization.TypeKind"));

    $.Field({Static:false, Public:false}, "dataType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "baseTypeDesc", $.Type);

    $.Field({Static:false, Public:false}, "flags", $asm07.TypeRef("System.Xml.Serialization.TypeFlags"));

    $.Field({Static:false, Public:false}, "formatterName", $.String);

    $.Field({Static:false, Public:false}, "isXsdType", $.Boolean);

    $.Field({Static:false, Public:false}, "isMixed", $.Boolean);

    $.Field({Static:false, Public:false}, "extendedType", $asm07.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"));

    $.Field({Static:false, Public:false}, "weight", $.Int32);

    $.Field({Static:false, Public:false}, "exception", $asm00.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "Flags", $asm07.TypeRef("System.Xml.Serialization.TypeFlags"));

    $.Property({Static:false, Public:false}, "IsXsdType", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMappedType", $.Boolean);

    $.Property({Static:false, Public:false}, "ExtendedType", $asm07.TypeRef("System.Xml.Serialization.Advanced.MappedTypeDesc"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "FullName", $.String);

    $.Property({Static:false, Public:false}, "CSharpName", $.String);

    $.Property({Static:false, Public:false}, "DataType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Property({Static:false, Public:false}, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "FormatterName", $.String);

    $.Property({Static:false, Public:false}, "Kind", $asm07.TypeRef("System.Xml.Serialization.TypeKind"));

    $.Property({Static:false, Public:false}, "IsValueType", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBeAttributeValue", $.Boolean);

    $.Property({Static:false, Public:false}, "XmlEncodingNotRequired", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBeElementValue", $.Boolean);

    $.Property({Static:false, Public:false}, "CanBeTextValue", $.Boolean);

    $.Property({Static:false, Public:false}, "IsMixed", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSpecial", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAmbiguousDataType", $.Boolean);

    $.Property({Static:false, Public:false}, "HasCustomFormatter", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDefaultSupport", $.Boolean);

    $.Property({Static:false, Public:false}, "HasIsEmpty", $.Boolean);

    $.Property({Static:false, Public:false}, "CollapseWhitespace", $.Boolean);

    $.Property({Static:false, Public:false}, "HasDefaultConstructor", $.Boolean);

    $.Property({Static:false, Public:false}, "IsUnsupported", $.Boolean);

    $.Property({Static:false, Public:false}, "IsGenericInterface", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrivateImplementation", $.Boolean);

    $.Property({Static:false, Public:false}, "CannotNew", $.Boolean);

    $.Property({Static:false, Public:false}, "IsAbstract", $.Boolean);

    $.Property({Static:false, Public:false}, "IsOptionalValue", $.Boolean);

    $.Property({Static:false, Public:false}, "UseReflection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsVoid", $.Boolean);

    $.Property({Static:false, Public:false}, "IsClass", $.Boolean);

    $.Property({Static:false, Public:false}, "IsStructLike", $.Boolean);

    $.Property({Static:false, Public:false}, "IsArrayLike", $.Boolean);

    $.Property({Static:false, Public:false}, "IsCollection", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEnumerable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsArray", $.Boolean);

    $.Property({Static:false, Public:false}, "IsPrimitive", $.Boolean);

    $.Property({Static:false, Public:false}, "IsEnum", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsRoot", $.Boolean);

    $.Property({Static:false, Public:false}, "ConstructorInaccessible", $.Boolean);

    $.Property({Static:false, Public:false}, "Exception", $asm00.TypeRef("System.Exception"));

    $.Property({Static:false, Public:false}, "ArrayLengthName", $.String);

    $.Property({Static:false, Public:false}, "ArrayElementTypeDesc", $.Type);

    $.Property({Static:false, Public:false}, "Weight", $.Int32);

    $.Property({Static:false, Public:false}, "BaseTypeDesc", $.Type);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.TypeScope */ 

(function TypeScope$Members () {
  var $, $thisType;
































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.TypeScope", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "AddNonXsdPrimitive", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaFacet")]), 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddPrimitive", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSoapEncodedPrimitive", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddSoapEncodedTypes", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTypeMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_PrimtiveTypes", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeMappings", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Types", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ICollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]), [$asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAllMembers", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.StructMapping"), $asm00.TypeRef("System.Collections.ArrayList")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetArrayElementType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetCollectionElementType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetConstructorFlags", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeFlags"), [$asm00.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm00.TypeRef("System.Exception")])])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetDefaultIndexer", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.PropertyInfo"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetEnumeratorElementType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm00.TypeRef("System.Type"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Serialization.TypeFlags")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeFromTypeDesc", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeMappingFromTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeDesc", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Reflection.MemberInfo"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsKnownType", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsOptionalValue", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ParseWsdlArrayType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [
          $.String, $jsilcore.TypeRef("JSIL.Reference", [$.String]), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "TypeName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.Field({Static:false, Public:false}, "typeDescs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "arrayTypeDescs", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "typeMappings", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "primitiveTypes", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "primitiveDataTypes", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "primitiveNames", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:true , Public:false}, "unsupportedTypes", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:false}, "Types", $asm00.TypeRef("System.Collections.ICollection"));

    $.Property({Static:false, Public:false}, "TypeMappings", $asm00.TypeRef("System.Collections.ICollection"));

    $.Property({Static:true , Public:false}, "PrimtiveTypes", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Soap */ 

(function Soap$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Soap", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Encoding", $.String, "http://schemas.xmlsoap.org/soap/encoding/");

    $.Constant({Static:true , Public:false}, "UrType", $.String, "anyType");

    $.Constant({Static:true , Public:false}, "Array", $.String, "Array");

    $.Constant({Static:true , Public:false}, "ArrayType", $.String, "arrayType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Soap12 */ 

(function Soap12$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Soap12", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Encoding", $.String, "http://www.w3.org/2003/05/soap-encoding");

    $.Constant({Static:true , Public:false}, "RpcNamespace", $.String, "http://www.w3.org/2003/05/soap-rpc");

    $.Constant({Static:true , Public:false}, "RpcResult", $.String, "result");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Wsdl */ 

(function Wsdl$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Wsdl", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://schemas.xmlsoap.org/wsdl/");

    $.Constant({Static:true , Public:false}, "ArrayType", $.String, "arrayType");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.UrtTypes */ 

(function UrtTypes$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.UrtTypes", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Constant({Static:true , Public:false}, "Namespace", $.String, "http://microsoft.com/wsdl/types/");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlAnyAttributeAttribute */ 

(function XmlAnyAttributeAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlAnyAttributeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlAnyElementAttribute */ 

(function XmlAnyElementAttribute$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlAnyElementAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "order", $.Int32);

    $.Field({Static:false, Public:false}, "nsSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.Property({Static:false, Public:false}, "NamespaceSpecified", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlAnyElementAttributes */ 

(function XmlAnyElementAttributes$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Xml.Serialization.XmlAnyElementAttributes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlArrayAttribute */ 

(function XmlArrayAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlArrayAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "elementName", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "nullable", $.Boolean);

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "order", $.Int32);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlArrayItemAttribute */ 

(function XmlArrayItemAttribute$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlArrayItemAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NestingLevel", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_NestingLevel", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "elementName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Field({Static:false, Public:false}, "nullable", $.Boolean);

    $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "nestingLevel", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "NestingLevel", $.Int32);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlArrayItemAttributes */ 

(function XmlArrayItemAttributes$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Xml.Serialization.XmlArrayItemAttributes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlAttributeAttribute */ 

(function XmlAttributeAttribute$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlAttributeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AttributeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AttributeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "attributeName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "AttributeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlAttributeOverrides */ 

(function XmlAttributeOverrides$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlAttributeOverrides", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributes")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.Field({Static:false, Public:false}, "types", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"));


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* enum System.Xml.Serialization.XmlAttributeFlags */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.XmlAttributeFlags", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Enum: 1, 
    Array: 2, 
    Text: 4, 
    ArrayItems: 8, 
    Elements: 16, 
    Attribute: 32, 
    Root: 64, 
    Type: 128, 
    AnyElements: 256, 
    AnyAttribute: 512, 
    ChoiceIdentifier: 1024, 
    XmlnsDeclarations: 2048, 
  }
);

/* class System.Xml.Serialization.XmlAttributes */ 

(function XmlAttributes$Members () {
  var $, $thisType;






























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlAttributes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_IgnoreAttribute", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAnyAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAnyElements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlArray", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlArrayAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlArrayItems", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlChoiceIdentifier", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlDefaultValue", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlElements", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlElementAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlEnum", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlEnumAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_XmlFlags", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlAttributeFlags"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlIgnore", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Xmlns", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlRoot", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlText", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlTextAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlTypeAttribute"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetAttr", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAnyAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlArray", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlArrayAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlDefaultValue", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlEnum", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlEnumAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlIgnore", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Xmlns", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlRoot", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlText", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTextAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTypeAttribute"))
    );

    $.Field({Static:false, Public:false}, "xmlElements", $asm07.TypeRef("System.Xml.Serialization.XmlElementAttributes"));

    $.Field({Static:false, Public:false}, "xmlArrayItems", $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"));

    $.Field({Static:false, Public:false}, "xmlAnyElements", $asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"));

    $.Field({Static:false, Public:false}, "xmlArray", $asm07.TypeRef("System.Xml.Serialization.XmlArrayAttribute"));

    $.Field({Static:false, Public:false}, "xmlAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"));

    $.Field({Static:false, Public:false}, "xmlText", $asm07.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

    $.Field({Static:false, Public:false}, "xmlEnum", $asm07.TypeRef("System.Xml.Serialization.XmlEnumAttribute"));

    $.Field({Static:false, Public:false}, "xmlIgnore", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlns", $.Boolean);

    $.Field({Static:false, Public:false}, "xmlDefaultValue", $.Object);

    $.Field({Static:false, Public:false}, "xmlRoot", $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"));

    $.Field({Static:false, Public:false}, "xmlType", $asm07.TypeRef("System.Xml.Serialization.XmlTypeAttribute"));

    $.Field({Static:false, Public:false}, "xmlAnyAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Field({Static:false, Public:false}, "xmlChoiceIdentifier", $asm07.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"));

    $.Field({Static:true , Public:false}, "ignoreAttributeType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:false}, "XmlFlags", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeFlags"));

    $.Property({Static:true , Public:false}, "IgnoreAttribute", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "XmlElements", $asm07.TypeRef("System.Xml.Serialization.XmlElementAttributes"));

    $.Property({Static:false, Public:true }, "XmlAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeAttribute"));

    $.Property({Static:false, Public:true }, "XmlEnum", $asm07.TypeRef("System.Xml.Serialization.XmlEnumAttribute"));

    $.Property({Static:false, Public:true }, "XmlText", $asm07.TypeRef("System.Xml.Serialization.XmlTextAttribute"));

    $.Property({Static:false, Public:true }, "XmlArray", $asm07.TypeRef("System.Xml.Serialization.XmlArrayAttribute"));

    $.Property({Static:false, Public:true }, "XmlArrayItems", $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"));

    $.Property({Static:false, Public:true }, "XmlDefaultValue", $.Object);

    $.Property({Static:false, Public:true }, "XmlIgnore", $.Boolean);

    $.Property({Static:false, Public:true }, "XmlType", $asm07.TypeRef("System.Xml.Serialization.XmlTypeAttribute"));

    $.Property({Static:false, Public:true }, "XmlRoot", $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"));

    $.Property({Static:false, Public:true }, "XmlAnyElements", $asm07.TypeRef("System.Xml.Serialization.XmlAnyElementAttributes"));

    $.Property({Static:false, Public:true }, "XmlAnyAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAnyAttributeAttribute"));

    $.Property({Static:false, Public:true }, "XmlChoiceIdentifier", $asm07.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"));

    $.Property({Static:false, Public:true }, "Xmlns", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlChoiceIdentifierAttribute */ 

(function XmlChoiceIdentifierAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlChoiceIdentifierAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlCodeExporter */ 

(function XmlCodeExporter$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.CodeExporter"), 
      Name: "System.Xml.Serialization.XmlCodeExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.CodeDom.CodeNamespace"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddDefaultValueAttribute", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeMemberField"), $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $.Object, $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
          $asm01.TypeRef("System.CodeDom.CodeCommentStatementCollection"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.Accessor"), $asm01.TypeRef("System.CodeDom.CodeConstructor")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddInitializationStatement", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeConstructor"), $asm01.TypeRef("System.CodeDom.CodeMemberField"), 
          $asm01.TypeRef("System.CodeDom.CodeExpression")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "AddMappingMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddMemberMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeMemberField"), $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), 
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $.String, 
          $.Boolean, $asm01.TypeRef("System.CodeDom.CodeCommentStatementCollection"), 
          $asm01.TypeRef("System.CodeDom.CodeConstructor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddRootMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.ElementAccessor")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "DropDefaultAttribute", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.Accessor"), $asm01.TypeRef("System.CodeDom.CodeCommentStatementCollection"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.Accessor")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureTypesExported", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.Accessor"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAnyAttribute", 
      JSIL.MethodSignature.Action($asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAnyElement", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArray", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $.Boolean, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayElements", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayItem", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAttribute", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ExportDerivedStructs", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMember", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.String, $asm01.TypeRef("System.CodeDom.CodeConstructor")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMetadata", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm00.TypeRef("System.Type"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.Object, $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportProperty", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm01.TypeRef("System.CodeDom.CodeConstructor")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStruct", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportText", 
      new JSIL.MethodSignature(null, [
          $asm01.TypeRef("System.CodeDom.CodeAttributeDeclarationCollection"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultValueArguments", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm01.TypeRef("System.CodeDom.CodeAttributeArgument")]), [
          $asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.Object, 
          $jsilcore.TypeRef("JSIL.Reference", [$asm01.TypeRef("System.CodeDom.CodeExpression")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDefault", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDefaultValue", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlCountingReader */ 

(function XmlCountingReader$Members () {
  var $, $thisType;









































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.XmlReader"), 
      Name: "System.Xml.Serialization.XmlCountingReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Close", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_AdvanceCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_AttributeCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_BaseURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadBinaryContent", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanReadValueChunk", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_CanResolveEntity", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_EOF", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasAttributes", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_HasValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsDefault", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_IsEmptyElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Item", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NameTable", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNameTable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Prefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_QuoteChar", 
      JSIL.MethodSignature.Return($.Char)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadState", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.ReadState"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_SchemaInfo", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Settings", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReaderSettings"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Value", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ValueType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlLang", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_XmlSpace", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlSpace"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetAttribute", 
      new JSIL.MethodSignature($.String, [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IncrementCount", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "IsStartElement", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "LookupNamespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToAttribute", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToContent", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToElement", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToFirstAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveToNextAttribute", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Read", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadAttributeValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAs", 
      new JSIL.MethodSignature($.Object, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.IXmlNamespaceResolver"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBase64", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBinHex", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Byte]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsBoolean", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.DateTime"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      JSIL.MethodSignature.Return($.Double)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsDouble", 
      new JSIL.MethodSignature($.Double, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsInt", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      JSIL.MethodSignature.Return($.Int64)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsLong", 
      new JSIL.MethodSignature($.Int64, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsObject", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementContentAsString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadElementString", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadInnerXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadOuterXml", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadSubtree", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToDescendant", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToFollowing", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadToNextSibling", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ReadValueChunk", 
      new JSIL.MethodSignature($.Int32, [
          $jsilcore.TypeRef("System.Array", [$.Char]), $.Int32, 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ResolveEntity", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Skip", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlLineInfo"), "get_LineNumber");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlLineInfo"), "get_LinePosition");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.HasLineInfo", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.IXmlLineInfo"), "HasLineInfo");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_Normalized", 
      JSIL.MethodSignature.Return($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.IXmlTextParser"), "get_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.get_WhitespaceHandling", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.WhitespaceHandling"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.IXmlTextParser"), "get_WhitespaceHandling");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_Normalized", 
      JSIL.MethodSignature.Action($.Boolean)
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.IXmlTextParser"), "set_Normalized");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.set_WhitespaceHandling", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.WhitespaceHandling"))
    )
      .Overrides($asm07.TypeRef("System.Xml.Serialization.IXmlTextParser"), "set_WhitespaceHandling");

    $.Field({Static:false, Public:false}, "innerReader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "advanceCount", $.Int32);

    $.Property({Static:false, Public:false}, "AdvanceCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Settings", $asm07.TypeRef("System.Xml.XmlReaderSettings"));

    $.Property({Static:false, Public:true , Virtual:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true , Virtual:true }, "Name", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Prefix", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "HasValue", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "Value", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Depth", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "BaseURI", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "IsEmptyElement", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "IsDefault", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "QuoteChar", $.Char);

    $.Property({Static:false, Public:true , Virtual:true }, "XmlSpace", $asm07.TypeRef("System.Xml.XmlSpace"));

    $.Property({Static:false, Public:true , Virtual:true }, "XmlLang", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "SchemaInfo", $asm07.TypeRef("System.Xml.Schema.IXmlSchemaInfo"));

    $.Property({Static:false, Public:true , Virtual:true }, "ValueType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true , Virtual:true }, "AttributeCount", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "Item", $.String);

    $.Property({Static:false, Public:true , Virtual:true }, "EOF", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "ReadState", $asm07.TypeRef("System.Xml.ReadState"));

    $.Property({Static:false, Public:true , Virtual:true }, "NameTable", $asm07.TypeRef("System.Xml.XmlNameTable"));

    $.Property({Static:false, Public:true , Virtual:true }, "CanResolveEntity", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadBinaryContent", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "CanReadValueChunk", $.Boolean);

    $.Property({Static:false, Public:true , Virtual:true }, "HasAttributes", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.Normalized", $.Boolean);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.Serialization.IXmlTextParser.WhitespaceHandling", $asm07.TypeRef("System.Xml.WhitespaceHandling"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LineNumber", $.Int32);

    $.Property({Static:false, Public:false, Virtual:true }, "System.Xml.IXmlLineInfo.LinePosition", $.Int32);

    $.ImplementInterfaces(
      /* 1 */ $asm07.TypeRef("System.Xml.Serialization.IXmlTextParser"), 
      /* 2 */ $asm07.TypeRef("System.Xml.IXmlLineInfo")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlCustomFormatter */ 

(function XmlCustomFormatter$Members () {
  var $, $thisType;





























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlCustomFormatter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "CollapseWhitespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromByteArrayHex", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromChar", 
      new JSIL.MethodSignature($.String, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDate", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDefaultValue", 
      new JSIL.MethodSignature($.String, [$.Object, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTime", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_Mode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode"))
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDate", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String, $jsilcore.TypeRef("System.Array", [$.String])])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDefaultValue", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToEnum", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $asm00.TypeRef("System.Collections.Hashtable"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "WriteArrayBase64", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $.Int32, $.Int32
        ])
    );

    $.Field({Static:true , Public:false}, "mode", $asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode"));

    $.Field({Static:true , Public:false}, "allDateTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "allDateFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Field({Static:true , Public:false}, "allTimeFormats", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:true , Public:false}, "Mode", $asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlElementAttribute */ 

(function XmlElementAttribute$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlElementAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Form", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Order", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Form", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Order", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "elementName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Field({Static:false, Public:false}, "nullable", $.Boolean);

    $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean);

    $.Field({Static:false, Public:false}, "form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Field({Static:false, Public:false}, "order", $.Int32);

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "Form", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"));

    $.Property({Static:false, Public:true }, "Order", $.Int32);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlElementAttributes */ 

(function XmlElementAttributes$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Xml.Serialization.XmlElementAttributes", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlEnumAttribute */ 

(function XmlEnumAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlEnumAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Field]; });

})();

/* class System.Xml.Serialization.XmlIgnoreAttribute */ 

(function XmlIgnoreAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlIgnoreAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlIncludeAttribute */ 

(function XmlIncludeAttribute$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlIncludeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Interface", "Method", "Struct")]; });

})();

/* enum System.Xml.Serialization.XmlMappingAccess */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.XmlMappingAccess", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: true, 
    IsFlags: true, 
  }, 
  {
    None: 0, 
    Read: 1, 
    Write: 2, 
  }
);

/* class System.Xml.Serialization.XmlMapping */ 

(function XmlMapping$Members () {
  var $, $thisType;




















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeScope"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeScope"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckShallow", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateKey", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateSerializer", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReadable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsSoap", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsWriteable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scope", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "IsShallow", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$.Type])])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_GenerateSerializer", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsSoap", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "SetKey", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "SetKeyInternal", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "generateSerializer", $.Boolean);

    $.Field({Static:false, Public:false}, "isSoap", $.Boolean);

    $.Field({Static:false, Public:false}, "accessor", $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"));

    $.Field({Static:false, Public:false}, "key", $.String);

    $.Field({Static:false, Public:false}, "shallow", $.Boolean);

    $.Field({Static:false, Public:false}, "access", $asm07.TypeRef("System.Xml.Serialization.XmlMappingAccess"));

    $.Property({Static:false, Public:false}, "Accessor", $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"));

    $.Property({Static:false, Public:false}, "Scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "XsdElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:false}, "GenerateSerializer", $.Boolean);

    $.Property({Static:false, Public:false}, "IsReadable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsWriteable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsSoap", $.Boolean);

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlMemberMapping */ 

(function XmlMemberMapping$Members () {
  var $, $thisType;















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlMemberMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "GenerateTypeName", 
      new JSIL.MethodSignature($.String, [$asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Accessor", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Accessor"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Any", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "mapping", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "Mapping", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "Accessor", $asm07.TypeRef("System.Xml.Serialization.Accessor"));

    $.Property({Static:false, Public:true }, "Any", $.Boolean);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "XsdElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "TypeFullName", $.String);

    $.Property({Static:false, Public:true }, "CheckSpecified", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlMembersMapping */ 

(function XmlMembersMapping$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), 
      Name: "System.Xml.Serialization.XmlMembersMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeScope"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "mappings", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping")]));

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "TypeNamespace", $.String);

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.XmlMemberMapping"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlNamespaceDeclarationsAttribute */ 

(function XmlNamespaceDeclarationsAttribute$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlNamespaceDeclarationsAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlReflectionImporter */ 

(function XmlReflectionImporter$Members () {
  var $, $thisType;









































































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlReflectionImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUniqueAccessor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.INameScope"), $asm07.TypeRef("System.Xml.Serialization.Accessor")])
    );

    $.ExternalMethod({Static:true , Public:false}, "AddUniqueAccessor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $asm07.TypeRef("System.Xml.Serialization.INameScope"), 
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckAmbiguousChoice", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $asm00.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckChoiceIdentifierMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.EnumMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckChoiceIdentifierType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckContext", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckForm", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "CheckNullable", 
      new JSIL.MethodSignature(null, [
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckTopLevelAttributes", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CountAtLevel", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArrayAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlArrayAttribute"), [$asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateArrayElementsFromAttributes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"), 
          $asm00.TypeRef("System.Type"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateArrayItemAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttribute"), [$asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateElementAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateElementAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlElementAttribute"), [$asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMemberReflectionException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.Serialization.FieldModel"), $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateNullableMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.NullableMapping"), [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReflectionException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateTypeReflectionException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm00.TypeRef("System.Exception")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSpecifiedMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember"), [$.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm00.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetAttributes", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), [$asm00.TypeRef("System.Reflection.MemberInfo")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [
          $asm07.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [
          $asm07.TypeRef("System.Xml.Serialization.XmlChoiceIdentifierAttribute"), $asm07.TypeRef("System.Xml.Serialization.StructModel"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetContextName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultValue", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMappingName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.Mapping")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetMethodFromSchemaProvider", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.MethodInfo"), [$asm07.TypeRef("System.Xml.Serialization.XmlSchemaProviderAttribute"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetRootMapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetTopLevelMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm07.TypeRef("System.Xml.Serialization.NameTable"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAccessorMapping", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $asm07.TypeRef("System.Xml.Serialization.FieldModel"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String, 
          $asm00.TypeRef("System.Type"), $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayLikeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.ArrayModel"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportConstantMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ConstantMapping"), [$asm07.TypeRef("System.Xml.Serialization.ConstantModel")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm07.TypeRef("System.Xml.Serialization.TypeModel"), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.EnumMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.EnumModel"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportFieldMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.StructModel"), $asm07.TypeRef("System.Xml.Serialization.FieldModel"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMemberMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember"), $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.Boolean, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Xml.Serialization.XmlMappingAccess")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MembersMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlReflectionMember")]), $.String, 
          $.Boolean, $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.PrimitiveModel"), $asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSpecialMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.SpecialMapping"), [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext"), 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructLikeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.StructModel"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Serialization.TypeModel"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $.Boolean, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeType", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IncludeTypes", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.ICustomAttributeProvider"))
    );

    $.ExternalMethod({Static:false, Public:false}, "IncludeTypes", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Reflection.ICustomAttributeProvider"), $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeStructMembers", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Serialization.StructMapping"), $asm07.TypeRef("System.Xml.Serialization.StructModel"), 
          $.Boolean, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.RecursionLimiter")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "InvalidAttributeUseException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAnonymousType", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReconcileAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.Accessor"), [$asm07.TypeRef("System.Xml.Serialization.Accessor"), $asm07.TypeRef("System.Xml.Serialization.NameTable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReconcileLocalAccessor", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetArrayMappingType", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetBase", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.SerializableMapping"), $asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:true , Public:false}, "UnsupportedException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $asm07.TypeRef("System.Xml.Serialization.XmlReflectionImporter+ImportContext")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ValidationCallbackWithErrorCode", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "XsdTypeName", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"), 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "typeScope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));

    $.Field({Static:false, Public:false}, "attributeOverrides", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"));

    $.Field({Static:false, Public:false}, "defaultAttributes", $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Field({Static:false, Public:false}, "types", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "nullables", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "elements", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "xsdAttributes", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "specials", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "anonymous", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "serializables", $asm07.TypeRef("System.Xml.Serialization.NameTable"));

    $.Field({Static:false, Public:false}, "root", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));

    $.Field({Static:false, Public:false}, "defaultNs", $.String);

    $.Field({Static:false, Public:false}, "modelScope", $asm07.TypeRef("System.Xml.Serialization.ModelScope"));

    $.Field({Static:false, Public:false}, "arrayNestingLevel", $.Int32);

    $.Field({Static:false, Public:false}, "savedArrayItemAttributes", $asm07.TypeRef("System.Xml.Serialization.XmlArrayItemAttributes"));

    $.Field({Static:false, Public:false}, "savedArrayNamespace", $.String);

    $.Field({Static:false, Public:false}, "choiceNum", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Serialization.XmlReflectionImporter+ImportContext */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.XmlReflectionImporter+ImportContext", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Text: 0, 
    Attribute: 1, 
    Element: 2, 
  }
);

/* class System.Xml.Serialization.ImportStructWorkItem */ 

(function ImportStructWorkItem$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.ImportStructWorkItem", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.StructModel"), $asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Model", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.StructModel"))
    );

    $.Field({Static:false, Public:false}, "model", $asm07.TypeRef("System.Xml.Serialization.StructModel"));

    $.Field({Static:false, Public:false}, "mapping", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));

    $.Property({Static:false, Public:false}, "Model", $asm07.TypeRef("System.Xml.Serialization.StructModel"));

    $.Property({Static:false, Public:false}, "Mapping", $asm07.TypeRef("System.Xml.Serialization.StructMapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.WorkItems */ 

(function WorkItems$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.WorkItems", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.ImportStructWorkItem"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ImportStructWorkItem"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.StructMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.ImportStructWorkItem")])
    );

    $.Field({Static:false, Public:false}, "list", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Item", $asm07.TypeRef("System.Xml.Serialization.ImportStructWorkItem"));

    $.Property({Static:false, Public:false}, "Count", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.RecursionLimiter */ 

(function RecursionLimiter$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.RecursionLimiter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DeferredWorkItems", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.WorkItems"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Depth", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsExceededLimit", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Depth", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.Field({Static:false, Public:false}, "maxDepth", $.Int32);

    $.Field({Static:false, Public:false}, "depth", $.Int32);

    $.Field({Static:false, Public:false}, "deferredWorkItems", $asm07.TypeRef("System.Xml.Serialization.WorkItems"));

    $.Property({Static:false, Public:false}, "IsExceededLimit", $.Boolean);

    $.Property({Static:false, Public:false}, "Depth", $.Int32);

    $.Property({Static:false, Public:false}, "DeferredWorkItems", $asm07.TypeRef("System.Xml.Serialization.WorkItems"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlReflectionMember */ 

(function XmlReflectionMember$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlReflectionMember", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsReturnValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MemberType", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OverrideIsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SoapAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SoapAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlAttributes", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsReturnValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_MemberType", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OverrideIsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_SoapAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.SoapAttributes"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_XmlAttributes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAttributes"))
    );

    $.Field({Static:false, Public:false}, "memberName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "xmlAttributes", $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Field({Static:false, Public:false}, "soapAttributes", $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"));

    $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean);

    $.Field({Static:false, Public:false}, "overrideIsNullable", $.Boolean);

    $.Property({Static:false, Public:true }, "MemberType", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "XmlAttributes", $asm07.TypeRef("System.Xml.Serialization.XmlAttributes"));

    $.Property({Static:false, Public:true }, "SoapAttributes", $asm07.TypeRef("System.Xml.Serialization.SoapAttributes"));

    $.Property({Static:false, Public:true }, "MemberName", $.String);

    $.Property({Static:false, Public:true }, "IsReturnValue", $.Boolean);

    $.Property({Static:false, Public:true }, "OverrideIsNullable", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlRootAttribute */ 

(function XmlRootAttribute$Members () {
  var $, $thisType;













  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlRootAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ElementName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullableSpecified", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ElementName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "elementName", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Field({Static:false, Public:false}, "nullable", $.Boolean);

    $.Field({Static:false, Public:false}, "nullableSpecified", $.Boolean);

    $.Property({Static:false, Public:true }, "ElementName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.Property({Static:false, Public:true }, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullableSpecified", $.Boolean);

    $.Property({Static:false, Public:false}, "Key", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags(
          "Class", "Enum", "Interface", "ReturnValue", 
          "Struct"
      )]; });

})();

/* class System.Xml.Serialization.XmlSchemaExporter */ 

(function XmlSchemaExporter$Members () {
  var $, $thisType;





































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSchemaExporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaImport", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddSchemaItem", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddXmlnsAnnotation", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckForDuplicateType", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckScope", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAnonymousPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportAnyType", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportAnyType", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportArrayMapping", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportAttributeAccessor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ExportDefaultValue", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportDerivedMappings", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementAccessors", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportElementMapping", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $asm07.TypeRef("System.Xml.Serialization.Mapping"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportEnumMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMapping", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.Mapping"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportMembersMapping", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.Serialization.MembersMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportNonXsdPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportPrimitiveMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportRootIfNecessary", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportSpecialMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [
          $asm07.TypeRef("System.Xml.Serialization.SpecialMapping"), $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportStructMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [
          $asm07.TypeRef("System.Xml.Serialization.StructMapping"), $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ExportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeMembers", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]), 
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindImport", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaImport"), [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FindSchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsAnyType", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "NamespacesEqual", 
      new JSIL.MethodSignature($.Boolean, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "SchemaContainsItem", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String])
    );

    $.Constant({Static:true , Public:false}, "elementFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), 1);

    $.Constant({Static:true , Public:false}, "attributeFormDefault", $asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), 2);

    $.Field({Static:false, Public:false}, "schemas", $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "elements", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "attributes", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "types", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "references", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "needToExportRoot", $.Boolean);

    $.Field({Static:false, Public:false}, "scope", $asm07.TypeRef("System.Xml.Serialization.TypeScope"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSchemaImporter */ 

(function XmlSchemaImporter$Members () {
  var $, $thisType;













































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.SchemaImporter"), 
      Name: "System.Xml.Serialization.XmlSchemaImporter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm07.TypeRef("System.Xml.Serialization.ImportContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider"), $asm07.TypeRef("System.Xml.Serialization.ImportContext")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddScopeElement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddScopeElements", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AttributeForm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute")])
    );

    $.ExternalMethod({Static:true , Public:false}, "BaseTypeName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ElementForm", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaForm"), [$.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindAttributeGroup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindExtendedAnyElement", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), $asm01.TypeRef("System.CodeDom.CodeNamespace"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindExtendedType", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindExtendedType", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), $asm01.TypeRef("System.CodeDom.CodeNamespace"), 
          $jsilcore.TypeRef("JSIL.Reference", [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindGroup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherGroupChoices", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroup"), $asm07.TypeRef("System.Xml.Serialization.NameTable"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GatherGroupChoices", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $asm07.TypeRef("System.Xml.Serialization.NameTable"), 
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateUniqueTypeName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GenerateOrder", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDataTypeSource", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeDesc"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetDefaultMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [$asm07.TypeRef("System.Xml.Serialization.TypeFlags")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetEquivalentElements", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")]), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTopLevelElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeItems", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSchemaImporter+TypeItems"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAny", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyAttributeMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.SpecialMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAnyMember", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportAnyType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArray", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportArrayMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributeGroupMembers", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttributeGroup"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportAttributeMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAttribute"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportChoiceGroup", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MemberMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $asm00.TypeRef("System.Type"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportDerivedTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "ImportDerivedTypes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElement", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportElementType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm00.TypeRef("System.Type"), $asm00.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedChoice", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.EnumMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportEnumeratedDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroup", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportGroupMembers", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaParticle"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.INameScope"), $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]), $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportMembersMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping"), [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.SoapSchemaMember")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportMembersType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.MembersMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportNonXsdPrimitiveDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportPrimitiveDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.PrimitiveMapping"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSpecialAttribute", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructDataType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaSimpleType"), $.String, 
          $.String, $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportStructType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.StructMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportSubstitutionGroupMember", 
      new JSIL.MethodSignature($.Boolean, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaElement"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTextMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TypeMapping"), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaComplexType"), $.String, 
          $.String, $asm00.TypeRef("System.Type"), 
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "ImportTypeMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportTypeMembers", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]), [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), $asm07.TypeRef("System.Xml.Serialization.INameScope"), 
          $jsilcore.TypeRef("JSIL.Reference", [$.Boolean]), $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ImportXmlnsDeclarationsMember", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsAllGroup", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsMixed", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsNeedXmlSerializationAttributes", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.ArrayMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "KeepXmlnsDeclarations", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "RunSchemaExtensions", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeFlags")
        ])
    );

    $.Property({Static:false, Public:false}, "GenerateOrder", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSchemaImporter+TypeItems */ 

(function TypeItems$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSchemaImporter+TypeItems", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "Attributes", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObjectCollection"));

    $.Field({Static:false, Public:false}, "AnyAttribute", $asm07.TypeRef("System.Xml.Schema.XmlSchemaAnyAttribute"));

    $.Field({Static:false, Public:false}, "Particle", $asm07.TypeRef("System.Xml.Schema.XmlSchemaGroupBase"));

    $.Field({Static:false, Public:false}, "baseSimpleType", $asm07.TypeRef("System.Xml.XmlQualifiedName"));

    $.Field({Static:false, Public:false}, "IsUnbounded", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSchemaImporter+ElementComparer */ 

(function ElementComparer$Members () {
  var $, $thisType;



  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSchemaImporter+ElementComparer", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Compare", 
      new JSIL.MethodSignature($.Int32, [$.Object, $.Object])
    );

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.IComparer")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSchemaProviderAttribute */ 

(function XmlSchemaProviderAttribute$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlSchemaProviderAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsAny", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_MethodName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IsAny", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.Field({Static:false, Public:false}, "methodName", $.String);

    $.Field({Static:false, Public:false}, "any", $.Boolean);

    $.Property({Static:false, Public:true }, "MethodName", $.String);

    $.Property({Static:false, Public:true }, "IsAny", $.Boolean);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Interface", "Struct")]; });

})();

/* class System.Xml.Serialization.XmlSchemas */ 

(function XmlSchemas$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Xml.Serialization.XmlSchemas", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchema"), $asm01.TypeRef("System.Uri")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:false}, "AddImport", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.IList"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "AddReference", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Compile", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Schema.ValidationEventHandler"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]), $.Int32])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateFakeXsdSchema", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String, $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "CreateValidationException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaException"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "Dump", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Find", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Find", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm00.TypeRef("System.Collections.IList")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Cache", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IsCompiled", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Schema.XmlSchema"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MergedSchemas", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_References", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaSet", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XmlSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XsdSchema", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetParentName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSchemaItem", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "GetSchemas", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.IList"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "IgnoreCompileErrors", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Schema.ValidationEventArgs")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:true , Public:true }, "IsDataSet", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsReference", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:true , Public:false}, "ItemName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Schema.XmlSchemaObject")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Merge", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.IList"), $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:true , Public:false}, "MergeFailedMessage", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnClear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnInsert", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnRemove", 
      new JSIL.MethodSignature(null, [$.Int32, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "OnSet", 
      new JSIL.MethodSignature(null, [
          $.Int32, $.Object, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "Prepare", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Preprocess", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:false}, "RemoveName", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetCache", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.Generic.IEnumerable$lSystem.Xml.Schema.XmlSchema$g.GetEnumerator", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]))
    )
      .Overrides($asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]), "GetEnumerator");

    $.Constant({Static:true , Public:false}, "xmlSchema", $.String, "<?xml version='1.0' encoding='UTF-8' ?> \r\n<xs:schema targetNamespace='http://www.w3.org/XML/1998/namespace' xmlns:xs='http://www.w3.org/2001/XMLSchema' xml:lang='en'>\r\n <xs:attribute name='lang' type='xs:language'/>\r\n <xs:attribute name='space'>\r\n  <xs:simpleType>\r\n   <xs:restriction base='xs:NCName'>\r\n    <xs:enumeration value='default'/>\r\n    <xs:enumeration value='preserve'/>\r\n   </xs:restriction>\r\n  </xs:simpleType>\r\n </xs:attribute>\r\n <xs:attribute name='base' type='xs:anyURI'/>\r\n <xs:attribute name='id' type='xs:ID' />\r\n <xs:attributeGroup name='specialAttrs'>\r\n  <xs:attribute ref='xml:base'/>\r\n  <xs:attribute ref='xml:lang'/>\r\n  <xs:attribute ref='xml:space'/>\r\n </xs:attributeGroup>\r\n</xs:schema>");

    $.Field({Static:false, Public:false}, "schemaSet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Field({Static:false, Public:false}, "references", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "cache", $asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

    $.Field({Static:false, Public:false}, "shareTypes", $.Boolean);

    $.Field({Static:false, Public:false}, "mergedSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "delayedSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "isCompiled", $.Boolean);

    $.Field({Static:true , Public:false}, "xsd", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Field({Static:true , Public:false}, "xml", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false}, "Cache", $asm07.TypeRef("System.Xml.Serialization.SchemaObjectCache"));

    $.Property({Static:false, Public:false}, "MergedSchemas", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "References", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "SchemaSet", $asm07.TypeRef("System.Xml.Schema.XmlSchemaSet"));

    $.Property({Static:false, Public:true }, "IsCompiled", $.Boolean);

    $.Property({Static:true , Public:false}, "XsdSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:true , Public:false}, "XmlSchema", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.ImplementInterfaces(
      /* 3 */ $asm00.TypeRef("System.Collections.Generic.IEnumerable`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.XmlSchemaEnumerator */ 

(function XmlSchemaEnumerator$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSchemaEnumerator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSchemas"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Current", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Schema.XmlSchema"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "MoveNext", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.get_Current", 
      JSIL.MethodSignature.Return($.Object)
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "get_Current");

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Reset", 
      JSIL.MethodSignature.Void
    )
      .Overrides($asm00.TypeRef("System.Collections.IEnumerator"), "Reset");

    $.Field({Static:false, Public:false}, "list", $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"));

    $.Field({Static:false, Public:false}, "idx", $.Int32);

    $.Field({Static:false, Public:false}, "end", $.Int32);

    $.Property({Static:false, Public:true , Virtual:true }, "Current", $asm07.TypeRef("System.Xml.Schema.XmlSchema"));

    $.Property({Static:false, Public:false, Virtual:true }, "System.Collections.IEnumerator.Current", $.Object);

    $.ImplementInterfaces(
      /* 0 */ $asm00.TypeRef("System.Collections.Generic.IEnumerator`1", [$asm07.TypeRef("System.Xml.Schema.XmlSchema")]), 
      /* 1 */ $asm00.TypeRef("System.IDisposable"), 
      /* 2 */ $asm00.TypeRef("System.Collections.IEnumerator")
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationGeneratedCode */ 

(function XmlSerializationGeneratedCode$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationGeneratedCode", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Dispose", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TempAssembly"))
    );

    $.ExternalMethod({Static:false, Public:false}, "OnAssemblyResolve", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [$.Object, $asm00.TypeRef("System.ResolveEventArgs")])
    );

    $.Field({Static:false, Public:false}, "tempAssembly", $asm07.TypeRef("System.Xml.Serialization.TempAssembly"));

    $.Field({Static:false, Public:false}, "threadCode", $.Int32);

    $.Field({Static:false, Public:false}, "assemblyResolver", $asm00.TypeRef("System.ResolveEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationCodeGen */ 

(function XmlSerializationCodeGen$Members () {
  var $, $thisType;




























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationCodeGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeScope")]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureArrayIndex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeMapping")]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeMapping")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBaseSerializer", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateGetSerializer", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Collections.Hashtable"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHashtableGetBegin", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateHashtableGetEnd", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GeneratePublicMethods", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateReferencedMethods", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSerializerContract", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $.String, 
          $jsilcore.TypeRef("System.Array", [$.String]), $asm00.TypeRef("System.Collections.Hashtable")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateSupportedTypes", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypedSerializer", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), $asm07.TypeRef("System.Xml.Serialization.CodeIdentifiers"), 
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypedSerializers", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Access", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ClassName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_GeneratedMethods", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MethodNames", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NextMethodNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_QnameTypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_RaCodeGen", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Scopes", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeScope")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_StringTypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.IndentedWriter"))
    );

    $.ExternalMethod({Static:true , Public:false}, "IsWildcard", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.SpecialMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReferenceMapping", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_NextMethodNumber", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQuotedCSharpString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "writer", $asm07.TypeRef("System.Xml.Serialization.IndentedWriter"));

    $.Field({Static:false, Public:false}, "nextMethodNumber", $.Int32);

    $.Field({Static:false, Public:false}, "methodNames", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "raCodeGen", $asm07.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"));

    $.Field({Static:false, Public:false}, "scopes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeScope")]));

    $.Field({Static:false, Public:false}, "stringTypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Field({Static:false, Public:false}, "qnameTypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Field({Static:false, Public:false}, "access", $.String);

    $.Field({Static:false, Public:false}, "className", $.String);

    $.Field({Static:false, Public:false}, "referencedMethods", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeMapping")]));

    $.Field({Static:false, Public:false}, "references", $.Int32);

    $.Field({Static:false, Public:false}, "generatedMethods", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Writer", $asm07.TypeRef("System.Xml.Serialization.IndentedWriter"));

    $.Property({Static:false, Public:false}, "NextMethodNumber", $.Int32);

    $.Property({Static:false, Public:false}, "RaCodeGen", $asm07.TypeRef("System.Xml.Serialization.ReflectionAwareCodeGen"));

    $.Property({Static:false, Public:false}, "StringTypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "QnameTypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "ClassName", $.String);

    $.Property({Static:false, Public:false}, "Access", $.String);

    $.Property({Static:false, Public:false}, "Scopes", $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeScope")]));

    $.Property({Static:false, Public:false}, "MethodNames", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "GeneratedMethods", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationReader */ 

(function XmlSerializationReader$Members () {
  var $, $thisType;


































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlSerializationGeneratedCode"), 
      Name: "System.Xml.Serialization.XmlSerializationReader", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFixup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader+Fixup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddFixup", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader+CollectionFixup"))
    );

    $.ExternalMethod({Static:false, Public:false}, "AddReadCallback", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReadCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddTarget", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CheckReaderCount", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "CollapseWhitespace", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateAbstractTypeException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateBadDerivationException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateCtorHasSecurityException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInaccessibleConstructorException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidCastException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Type"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidCastException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $asm00.TypeRef("System.Type"), $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMissingIXmlSerializableType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateReadOnlyCollectionException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownConstantException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownNodeException", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Exception"))
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CurrentTag", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "DoFixups", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "EnsureArrayIndex", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Array"), [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FixupArrayRefs", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_DecodeName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Document", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlDocument"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsReturnValue", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Reader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlReader"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReaderCount", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArrayLength", 
      new JSIL.MethodSignature($.Int32, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetCurrentPosition", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("JSIL.Reference", [$.Int32]), $jsilcore.TypeRef("JSIL.Reference", [$.Int32])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetNullAttr", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveType", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Type"), [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTarget", 
      new JSIL.MethodSignature($.Object, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetXsiType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "HandleUnreferencedObjects", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TempAssembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "InitPrimitiveIDs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsPrimitiveNamespace", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsXmlnsAttribute", 
      new JSIL.MethodSignature($.Boolean, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseArrayType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader+SoapArrayInfo"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseSoap12ArrayType", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader+SoapArrayInfo"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ParseWsdlArrayType", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadArray", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadByteArray", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadElementQualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNull", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNullableQualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadNullableString", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReference", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElement", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElement", 
      new JSIL.MethodSignature($.Object, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencedElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
      new JSIL.MethodSignature($.Object, [$jsilcore.TypeRef("JSIL.Reference", [$.String])])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadReferencingElement", 
      new JSIL.MethodSignature($.Object, [
          $.String, $.String, 
          $.Boolean, $jsilcore.TypeRef("JSIL.Reference", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSerializable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.IXmlSerializable"), [$asm07.TypeRef("System.Xml.Serialization.IXmlSerializable")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadSerializable", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.IXmlSerializable"), [$asm07.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadString", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadStringValue", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTypedNull", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTypedPrimitive", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadTypedPrimitive", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlDocument", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlDocument"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlNode", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlNode"), [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlNodes", 
      new JSIL.MethodSignature($.Object, [$.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "ReadXmlQualifiedName", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlQualifiedName"))
    );

    $.ExternalMethod({Static:false, Public:false}, "Referenced", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveDynamicAssembly", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_DecodeName", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsReturnValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "ShrinkArray", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Array"), [
          $asm00.TypeRef("System.Array"), $.Int32, 
          $asm00.TypeRef("System.Type"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToByteArrayHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToByteArrayHex", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToChar", 
      new JSIL.MethodSignature($.Char, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDate", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToDateTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToEnum", 
      new JSIL.MethodSignature($.Int64, [
          $.String, $asm00.TypeRef("System.Collections.Hashtable"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToTime", 
      new JSIL.MethodSignature($asm00.TypeRef("System.DateTime"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "ToXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlQualifiedName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "ToXmlQualifiedName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownAttribute", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.XmlAttribute")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownAttribute", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.XmlAttribute"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.XmlElement")])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownElement", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.XmlElement"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnknownNode", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "UnreferencedObject", 
      new JSIL.MethodSignature(null, [$.String, $.Object])
    );

    $.Field({Static:false, Public:false}, "r", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Field({Static:false, Public:false}, "countingReader", $asm07.TypeRef("System.Xml.Serialization.XmlCountingReader"));

    $.Field({Static:false, Public:false}, "d", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Field({Static:false, Public:false}, "callbacks", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "types", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "typesReverse", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "events", $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"));

    $.Field({Static:false, Public:false}, "targets", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "referencedTargets", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "targetsWithoutIds", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "fixups", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "collectionFixups", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "soap12", $.Boolean);

    $.Field({Static:false, Public:false}, "isReturnValue", $.Boolean);

    $.Field({Static:false, Public:false}, "decodeName", $.Boolean);

    $.Field({Static:false, Public:false}, "schemaNsID", $.String);

    $.Field({Static:false, Public:false}, "schemaNs1999ID", $.String);

    $.Field({Static:false, Public:false}, "schemaNs2000ID", $.String);

    $.Field({Static:false, Public:false}, "schemaNonXsdTypesNsID", $.String);

    $.Field({Static:false, Public:false}, "instanceNsID", $.String);

    $.Field({Static:false, Public:false}, "instanceNs2000ID", $.String);

    $.Field({Static:false, Public:false}, "instanceNs1999ID", $.String);

    $.Field({Static:false, Public:false}, "soapNsID", $.String);

    $.Field({Static:false, Public:false}, "soap12NsID", $.String);

    $.Field({Static:false, Public:false}, "schemaID", $.String);

    $.Field({Static:false, Public:false}, "wsdlNsID", $.String);

    $.Field({Static:false, Public:false}, "wsdlArrayTypeID", $.String);

    $.Field({Static:false, Public:false}, "nullID", $.String);

    $.Field({Static:false, Public:false}, "nilID", $.String);

    $.Field({Static:false, Public:false}, "typeID", $.String);

    $.Field({Static:false, Public:false}, "arrayTypeID", $.String);

    $.Field({Static:false, Public:false}, "itemTypeID", $.String);

    $.Field({Static:false, Public:false}, "arraySizeID", $.String);

    $.Field({Static:false, Public:false}, "arrayID", $.String);

    $.Field({Static:false, Public:false}, "urTypeID", $.String);

    $.Field({Static:false, Public:false}, "stringID", $.String);

    $.Field({Static:false, Public:false}, "intID", $.String);

    $.Field({Static:false, Public:false}, "booleanID", $.String);

    $.Field({Static:false, Public:false}, "shortID", $.String);

    $.Field({Static:false, Public:false}, "longID", $.String);

    $.Field({Static:false, Public:false}, "floatID", $.String);

    $.Field({Static:false, Public:false}, "doubleID", $.String);

    $.Field({Static:false, Public:false}, "decimalID", $.String);

    $.Field({Static:false, Public:false}, "dateTimeID", $.String);

    $.Field({Static:false, Public:false}, "qnameID", $.String);

    $.Field({Static:false, Public:false}, "dateID", $.String);

    $.Field({Static:false, Public:false}, "timeID", $.String);

    $.Field({Static:false, Public:false}, "hexBinaryID", $.String);

    $.Field({Static:false, Public:false}, "base64BinaryID", $.String);

    $.Field({Static:false, Public:false}, "base64ID", $.String);

    $.Field({Static:false, Public:false}, "unsignedByteID", $.String);

    $.Field({Static:false, Public:false}, "byteID", $.String);

    $.Field({Static:false, Public:false}, "unsignedShortID", $.String);

    $.Field({Static:false, Public:false}, "unsignedIntID", $.String);

    $.Field({Static:false, Public:false}, "unsignedLongID", $.String);

    $.Field({Static:false, Public:false}, "oldDecimalID", $.String);

    $.Field({Static:false, Public:false}, "oldTimeInstantID", $.String);

    $.Field({Static:false, Public:false}, "anyURIID", $.String);

    $.Field({Static:false, Public:false}, "durationID", $.String);

    $.Field({Static:false, Public:false}, "ENTITYID", $.String);

    $.Field({Static:false, Public:false}, "ENTITIESID", $.String);

    $.Field({Static:false, Public:false}, "gDayID", $.String);

    $.Field({Static:false, Public:false}, "gMonthID", $.String);

    $.Field({Static:false, Public:false}, "gMonthDayID", $.String);

    $.Field({Static:false, Public:false}, "gYearID", $.String);

    $.Field({Static:false, Public:false}, "gYearMonthID", $.String);

    $.Field({Static:false, Public:false}, "IDID", $.String);

    $.Field({Static:false, Public:false}, "IDREFID", $.String);

    $.Field({Static:false, Public:false}, "IDREFSID", $.String);

    $.Field({Static:false, Public:false}, "integerID", $.String);

    $.Field({Static:false, Public:false}, "languageID", $.String);

    $.Field({Static:false, Public:false}, "NameID", $.String);

    $.Field({Static:false, Public:false}, "NCNameID", $.String);

    $.Field({Static:false, Public:false}, "NMTOKENID", $.String);

    $.Field({Static:false, Public:false}, "NMTOKENSID", $.String);

    $.Field({Static:false, Public:false}, "negativeIntegerID", $.String);

    $.Field({Static:false, Public:false}, "nonPositiveIntegerID", $.String);

    $.Field({Static:false, Public:false}, "nonNegativeIntegerID", $.String);

    $.Field({Static:false, Public:false}, "normalizedStringID", $.String);

    $.Field({Static:false, Public:false}, "NOTATIONID", $.String);

    $.Field({Static:false, Public:false}, "positiveIntegerID", $.String);

    $.Field({Static:false, Public:false}, "tokenID", $.String);

    $.Field({Static:false, Public:false}, "charID", $.String);

    $.Field({Static:false, Public:false}, "guidID", $.String);

    $.Field({Static:true , Public:false}, "checkDeserializeAdvances", $.Boolean);

    $.Property({Static:false, Public:false}, "DecodeName", $.Boolean);

    $.Property({Static:false, Public:false}, "Reader", $asm07.TypeRef("System.Xml.XmlReader"));

    $.Property({Static:false, Public:false}, "ReaderCount", $.Int32);

    $.Property({Static:false, Public:false}, "Document", $asm07.TypeRef("System.Xml.XmlDocument"));

    $.Property({Static:false, Public:false}, "IsReturnValue", $.Boolean);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* struct System.Xml.Serialization.XmlSerializationReader+SoapArrayInfo */ 

(function SoapArrayInfo$Members () {
  var $, $thisType;

  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Serialization.XmlSerializationReader+SoapArrayInfo", 
      IsPublic: false, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.Field({Static:false, Public:true }, "qname", $.String);

    $.Field({Static:false, Public:true }, "dimensions", $.Int32);

    $.Field({Static:false, Public:true }, "$length", $.Int32);

    $.Field({Static:false, Public:true }, "jaggedDimensions", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationReader+Fixup */ 

(function Fixup$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationReader+Fixup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), 
          $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"), 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Ids", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$.String]))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Source", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Source", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"));

    $.Field({Static:false, Public:false}, "source", $.Object);

    $.Field({Static:false, Public:false}, "ids", $jsilcore.TypeRef("System.Array", [$.String]));

    $.Property({Static:false, Public:true }, "Callback", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationFixupCallback"));

    $.Property({Static:false, Public:true }, "Source", $.Object);

    $.Property({Static:false, Public:true }, "Ids", $jsilcore.TypeRef("System.Array", [$.String]));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationReader+CollectionFixup */ 

(function CollectionFixup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationReader+CollectionFixup", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 3, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.Object, $asm07.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Callback", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Collection", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CollectionItems", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"));

    $.Field({Static:false, Public:false}, "collection", $.Object);

    $.Field({Static:false, Public:false}, "collectionItems", $.Object);

    $.Property({Static:false, Public:true }, "Callback", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationCollectionFixupCallback"));

    $.Property({Static:false, Public:true }, "Collection", $.Object);

    $.Property({Static:false, Public:true }, "CollectionItems", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Serialization.XmlSerializationFixupCallback */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationFixupCallback", true, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("System.Object")));

/* delegate System.Xml.Serialization.XmlSerializationCollectionFixupCallback */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationCollectionFixupCallback", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm00.TypeRef("System.Object")]));

/* delegate System.Xml.Serialization.XmlSerializationReadCallback */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationReadCallback", true, [], 
  JSIL.MethodSignature.Return($asm00.TypeRef("System.Object")));

/* class System.Xml.Serialization.XmlSerializationReaderCodeGen */ 

(function XmlSerializationReaderCodeGen$Members () {
  var $, $thisType;











































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlSerializationCodeGen"), 
      Name: "System.Xml.Serialization.XmlSerializationReaderCodeGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeScope")]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExpectedElements", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBegin", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEncodedMembersElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$.String]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitCallbacksMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateLiteralMembersElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMembersElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypeElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Enums", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArraySource", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetArraySource", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierSource", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")]), $asm07.TypeRef("System.Xml.Serialization.MemberMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetChoiceIdentifierSource", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitializeValueTypes", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "IsSequence", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "MakeUnique", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextIdName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextMethodName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAddCollectionFixup", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.Boolean, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.ArrayMapping"), $.Boolean, 
          $.Boolean, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttributes", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteBooleanValue", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCatchCastException", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCatchException", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateCollection", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateCollectionMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+CreateCollectionInfo"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateInstance", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateMapping", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDerivedSerializable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.SerializableMapping"), $asm07.TypeRef("System.Xml.Serialization.SerializableMapping"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDerivedTypes", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.StructMapping"), $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $.String, 
          $.Boolean, $.Boolean, 
          $.Int32, $.Int32
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncodedStructMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumAndArrayTypes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.EnumMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteFixupMethod", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), 
          $.String, $.Boolean, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHandleHrefList", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteHashtable", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteID", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIfNotSoapRoot", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInitCheckTypeHrefList", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteIsStartTag", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLiteralStructMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberBegin", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElements", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsCheckType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsElse", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberElementsIf", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberEnd", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberEnd", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberFixupBegin", 
      new JSIL.MethodSignature($.Boolean, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member")]), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberText", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.NullableMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteParamsRead", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitive", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQNameEqual", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReadNonRoots", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSourceBegin", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSourceBeginTyped", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSourceEnd", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStructMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteText", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen+Member"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteUnknownNode", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopEnd", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopEndCheck", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileLoopStartCheck", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteWhileNotLoopStart", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlNodeEqual", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.Field({Static:false, Public:false}, "idNames", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "enums", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "createMethods", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "nextCreateMethodNumber", $.Int32);

    $.Field({Static:false, Public:false}, "nextIdNumber", $.Int32);

    $.Field({Static:false, Public:false}, "nextWhileLoopIndex", $.Int32);

    $.Property({Static:false, Public:false}, "Enums", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationReaderCodeGen+CreateCollectionInfo */ 

(function CreateCollectionInfo$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationReaderCodeGen+CreateCollectionInfo", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_TypeDesc", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeDesc"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "td", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "TypeDesc", $asm07.TypeRef("System.Xml.Serialization.TypeDesc"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationReaderCodeGen+Member */ 

(function Member$Members () {
  var $, $thisType;


























  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationReaderCodeGen+Member", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Xml.Serialization.MemberMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.Int32, 
          $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReaderCodeGen"), $.String, 
          $.String, $.String, 
          $.Int32, $asm07.TypeRef("System.Xml.Serialization.MemberMapping"), 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArrayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ArraySource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_CheckSpecifiedSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceArrayName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceArraySource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ChoiceSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_FixupIndex", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsArrayLike", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsList", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_IsNullable", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.MemberMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_MultiRef", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ParamsReadSource", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Source", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_CheckSpecifiedSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_FixupIndex", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_IsNullable", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_MultiRef", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_ParamsReadSource", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "source", $.String);

    $.Field({Static:false, Public:false}, "arrayName", $.String);

    $.Field({Static:false, Public:false}, "arraySource", $.String);

    $.Field({Static:false, Public:false}, "choiceArrayName", $.String);

    $.Field({Static:false, Public:false}, "choiceSource", $.String);

    $.Field({Static:false, Public:false}, "choiceArraySource", $.String);

    $.Field({Static:false, Public:false}, "mapping", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Field({Static:false, Public:false}, "isArray", $.Boolean);

    $.Field({Static:false, Public:false}, "isList", $.Boolean);

    $.Field({Static:false, Public:false}, "isNullable", $.Boolean);

    $.Field({Static:false, Public:false}, "multiRef", $.Boolean);

    $.Field({Static:false, Public:false}, "fixupIndex", $.Int32);

    $.Field({Static:false, Public:false}, "paramsReadSource", $.String);

    $.Field({Static:false, Public:false}, "checkSpecifiedSource", $.String);

    $.Property({Static:false, Public:false}, "Mapping", $asm07.TypeRef("System.Xml.Serialization.MemberMapping"));

    $.Property({Static:false, Public:false}, "Source", $.String);

    $.Property({Static:false, Public:false}, "ArrayName", $.String);

    $.Property({Static:false, Public:false}, "ArraySource", $.String);

    $.Property({Static:false, Public:false}, "IsList", $.Boolean);

    $.Property({Static:false, Public:false}, "IsArrayLike", $.Boolean);

    $.Property({Static:false, Public:false}, "IsNullable", $.Boolean);

    $.Property({Static:false, Public:false}, "MultiRef", $.Boolean);

    $.Property({Static:false, Public:false}, "FixupIndex", $.Int32);

    $.Property({Static:false, Public:false}, "ParamsReadSource", $.String);

    $.Property({Static:false, Public:false}, "CheckSpecifiedSource", $.String);

    $.Property({Static:false, Public:false}, "ChoiceSource", $.String);

    $.Property({Static:false, Public:false}, "ChoiceArrayName", $.String);

    $.Property({Static:false, Public:false}, "ChoiceArraySource", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationWriter */ 

(function XmlSerializationWriter$Members () {
  var $, $thisType;


















































































































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlSerializationGeneratedCode"), 
      Name: "System.Xml.Serialization.XmlSerializationWriter", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "AddWriteCallback", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriteCallback")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateChoiceIdentifierValueException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidAnyTypeException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidAnyTypeException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidChoiceIdentifierValueException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateInvalidEnumValueException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateMismatchChoiceException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownAnyElementException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "CreateUnknownTypeException", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Exception"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromByteArrayBase64", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Byte]), [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromByteArrayHex", 
      new JSIL.MethodSignature($.String, [$jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromChar", 
      new JSIL.MethodSignature($.String, [$.Char])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDate", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromDateTime", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int64])
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromEnum", 
      new JSIL.MethodSignature($.String, [
          $.Int64, $jsilcore.TypeRef("System.Array", [$.String]), 
          $jsilcore.TypeRef("System.Array", [$.Int64]), $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromTime", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.DateTime")])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNCName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmToken", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "FromXmlNmTokens", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromXmlQualifiedName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FromXmlQualifiedName", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.XmlQualifiedName"), $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_EscapeName", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Writer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GetId", 
      new JSIL.MethodSignature($.String, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveTypeName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetPrimitiveTypeName", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm00.TypeRef("System.Type"), $.Boolean])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetPrimitiveTypeNameInternal", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.XmlQualifiedName"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetQualifiedName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetTypeEntry", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriter+TypeEntry"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Init", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), 
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TempAssembly")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "IsIdDefined", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "ListUsedPrefixes", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Collections.Hashtable"), [$asm00.TypeRef("System.Collections.Hashtable"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextPrefix", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "ResolveDynamicAssembly", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_EscapeName", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Writer", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "TopLevelElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementEncoded", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementLiteral", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.XmlQualifiedName")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.XmlQualifiedName"), 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementQualifiedName", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementString", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [$.String, $jsilcore.TypeRef("System.Array", [$.Byte])])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$.Byte]), 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementStringRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteId", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteId", 
      new JSIL.MethodSignature(null, [$.Object, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNamespaceDeclarations", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableQualifiedNameEncoded", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName"), $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableQualifiedNameLiteral", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncoded", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncodedRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringEncodedRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte]), $asm07.TypeRef("System.Xml.XmlQualifiedName")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteral", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteralRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullableStringLiteralRaw", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$.Byte])
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagEncoded", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagEncoded", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagLiteral", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullTagLiteral", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm00.TypeRef("System.Type"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePotentiallyReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm00.TypeRef("System.Type"), 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElement", 
      new JSIL.MethodSignature(null, [$.Object, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencedElements", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReferencingElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteRpcResult", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSerializable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteSerializable", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.IXmlSerializable"), $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartDocument", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypedPrimitive", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$.Byte]))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.XmlNode"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXmlAttribute", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlNode"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteXsiType", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.Field({Static:false, Public:false}, "w", $asm07.TypeRef("System.Xml.XmlWriter"));

    $.Field({Static:false, Public:false}, "namespaces", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    $.Field({Static:false, Public:false}, "tempNamespacePrefix", $.Int32);

    $.Field({Static:false, Public:false}, "usedPrefixes", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "references", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "idBase", $.String);

    $.Field({Static:false, Public:false}, "nextId", $.Int32);

    $.Field({Static:false, Public:false}, "typeEntries", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "referencesToWrite", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:false, Public:false}, "objectsInUse", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "aliasBase", $.String);

    $.Field({Static:false, Public:false}, "soap12", $.Boolean);

    $.Field({Static:false, Public:false}, "escapeName", $.Boolean);

    $.Property({Static:false, Public:false}, "EscapeName", $.Boolean);

    $.Property({Static:false, Public:false}, "Writer", $asm07.TypeRef("System.Xml.XmlWriter"));

    $.Property({Static:false, Public:false}, "Namespaces", $asm00.TypeRef("System.Collections.ArrayList"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationWriter+TypeEntry */ 

(function TypeEntry$Members () {
  var $, $thisType;


  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializationWriter+TypeEntry", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "callback", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriteCallback"));

    $.Field({Static:false, Public:false}, "typeNs", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Serialization.XmlSerializationWriteCallback */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlSerializationWriteCallback", true, [], 
  JSIL.MethodSignature.Action($asm00.TypeRef("System.Object")));

/* class System.Xml.Serialization.XmlSerializationWriterCodeGen */ 

(function XmlSerializationWriterCodeGen$Members () {
  var $, $thisType;



















































  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlSerializationCodeGen"), 
      Name: "System.Xml.Serialization.XmlSerializationWriterCodeGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.IndentedWriter"), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.TypeScope")]), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "CanOptimizeWriteListSequence", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.TypeDesc")])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindChoiceEnumValue", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), $asm07.TypeRef("System.Xml.Serialization.EnumMapping"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "FindXmlnsIndex", 
      new JSIL.MethodSignature($.Int32, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.MemberMapping")])])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateBegin", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateEnd", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateInitCallbacksMethod", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateMembersElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlMembersMapping")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GenerateMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateTypeElement", 
      new JSIL.MethodSignature($.String, [$asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping")])
    );

    $.ExternalMethod({Static:false, Public:false}, "NextMethodName", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArray", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm07.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayItems", 
      new JSIL.MethodSignature(null, [
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm07.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAttribute", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCheckDefault", 
      new JSIL.MethodSignature(null, [
          $.String, $.Object, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteChoiceTypeCheck", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDerivedTypes", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElement", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Serialization.ElementAccessor"), 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElementCall", 
      new JSIL.MethodSignature(null, [
          $.String, $asm00.TypeRef("System.Type"), 
          $.String, $.String, 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElements", 
      new JSIL.MethodSignature(null, [
          $.String, $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), 
          $asm07.TypeRef("System.Xml.Serialization.TextAccessor"), $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), 
          $.String, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteElements", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm07.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEmptyTag", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEncodedNullTag", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEndElement", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumAndArrayTypes", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumCase", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Serialization.ConstantMapping"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.EnumMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumValue", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteExtraMembers", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInstanceOf", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLiteralNullTag", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMember", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Serialization.AttributeAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMember", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.ElementAccessor")]), $asm07.TypeRef("System.Xml.Serialization.TextAccessor"), 
          $asm07.TypeRef("System.Xml.Serialization.ChoiceIdentifierAccessor"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNamespaces", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteNullCheckBegin", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Serialization.ElementAccessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitive", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Object, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), 
          $.Boolean, $.Boolean, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WritePrimitiveValue", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQualifiedNameElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Object, $.String, 
          $.Boolean, $.Boolean, 
          $asm07.TypeRef("System.Xml.Serialization.TypeMapping")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStartElement", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteStructMethod", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.StructMapping"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTag", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTag", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteText", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Serialization.TextAccessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteValue", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.DynamicAssemblies */ 

(function DynamicAssemblies$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.DynamicAssemblies", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:true , Public:false}, "Add", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Reflection.Assembly"))
    );

    $.ExternalMethod({Static:true , Public:false}, "Get", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [$.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_InternalSyncObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_UnrestrictedFileIOPermission", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Security.Permissions.FileIOPermission"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Reflection.Assembly")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeDynamic", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:false}, "IsTypeDynamic", 
      new JSIL.MethodSignature($.Boolean, [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    );

    $.Field({Static:true , Public:false}, "assembliesInConfig", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Field({Static:true , Public:false}, "nameToAssemblyMap", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "assemblyToNameMap", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "tableIsTypeDynamic", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:true , Public:false}, "fileIOPermission", $asm00.TypeRef("System.Security.Permissions.FileIOPermission"));

    $.Field({Static:true , Public:false}, "s_InternalSyncObject", $.Object);

    $.Property({Static:true , Public:false}, "UnrestrictedFileIOPermission", $asm00.TypeRef("System.Security.Permissions.FileIOPermission"));

    $.Property({Static:true , Public:false}, "InternalSyncObject", $.Object);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.ReflectionAwareCodeGen */ 

(function ReflectionAwareCodeGen$Members () {
  var $, $thisType;

































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.ReflectionAwareCodeGen", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.IndentedWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "GenerateVariableName", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetReflectionVariable", 
      new JSIL.MethodSignature($.String, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForArrayMember", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
      new JSIL.MethodSignature($.String, [
          $.String, $.Boolean, 
          $.Boolean, $.Boolean, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForCreateInstance", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumCompare", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Serialization.EnumMapping"), $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumLongValue", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForEnumMember", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForMember", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForMethod", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "GetStringForMethodInvoke", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(4, "args", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:false, Public:false}, "GetStringForTypeof", 
      new JSIL.MethodSignature($.String, [$.String, $.Boolean])
    );

    $.ExternalMethod({Static:false, Public:false}, "InitTheFirstTime", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteArrayTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteAssemblyInfo", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCollectionInfo", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteCreateInstance", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteDefaultIndexerInit", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.Boolean, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteEnumCase", 
      new JSIL.MethodSignature(null, [
          $.String, $asm07.TypeRef("System.Xml.Serialization.ConstantMapping"), 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteInstanceOf", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteLocalDecl", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMappingInfo", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.Serialization.TypeMapping"), $.String, 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMemberInfo", 
      new JSIL.MethodSignature($.String, [
          $asm00.TypeRef("System.Type"), $.String, 
          $.String, $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteMethodInfo", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $.String, $.Boolean, 
          $jsilcore.TypeRef("System.Array", [$.String])
        ])
    )
      .Parameter(4, "paramTypes", function (_) {
          _.Attribute($asm00.TypeRef("System.ParamArrayAttribute"))
        });

    $.ExternalMethod({Static:true , Public:false}, "WriteQuotedCSharpString", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.IndentedWriter"), $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteQuotedCSharpString", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteReflectionInit", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.TypeScope"))
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeCompare", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.Boolean
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "WriteTypeInfo", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Serialization.TypeScope"), $asm07.TypeRef("System.Xml.Serialization.TypeDesc"), 
          $asm00.TypeRef("System.Type")
        ])
    );

    $.Constant({Static:true , Public:false}, "hexDigits", $.String, "0123456789ABCDEF");

    $.Constant({Static:true , Public:false}, "arrayMemberKey", $.String, "0");

    $.Field({Static:false, Public:false}, "reflectionVariables", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Field({Static:false, Public:false}, "nextReflectionVariableNumber", $.Int32);

    $.Field({Static:false, Public:false}, "writer", $asm07.TypeRef("System.Xml.Serialization.IndentedWriter"));

    $.Field({Static:true , Public:false}, "helperClassesForUseReflection", $.String, "\r\n    sealed class XSFieldInfo {{\r\n       {3} fieldInfo;\r\n        public XSFieldInfo({2} t, {1} memberName){{\r\n            fieldInfo = t.GetField(memberName);\r\n        }}\r\n        public {0} this[{0} o] {{\r\n            get {{\r\n                return fieldInfo.GetValue(o);\r\n            }}\r\n            set {{\r\n                fieldInfo.SetValue(o, value);\r\n            }}\r\n        }}\r\n\r\n    }}\r\n    sealed class XSPropInfo {{\r\n        {4} propInfo;\r\n        public XSPropInfo({2} t, {1} memberName){{\r\n            propInfo = t.GetProperty(memberName);\r\n        }}\r\n        public {0} this[{0} o] {{\r\n            get {{\r\n                return propInfo.GetValue(o, null);\r\n            }}\r\n            set {{\r\n                propInfo.SetValue(o, value, null);\r\n            }}\r\n        }}\r\n    }}\r\n    sealed class XSArrayInfo {{\r\n        {4} propInfo;\r\n        public XSArrayInfo({4} propInfo){{\r\n            this.propInfo = propInfo;\r\n        }}\r\n        public {0} this[{0} a, int i] {{\r\n            get {{\r\n                return propInfo.GetValue(a, new {0}[]{{i}});\r\n            }}\r\n            set {{\r\n                propInfo.SetValue(a, value, new {0}[]{{i}});\r\n            }}\r\n        }}\r\n    }}\r\n");


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializerAssemblyAttribute */ 

(function XmlSerializerAssemblyAttribute$Members () {
  var $, $thisType;








  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlSerializerAssemblyAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AssemblyName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CodeBase", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AssemblyName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CodeBase", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "assemblyName", $.String);

    $.Field({Static:false, Public:false}, "codeBase", $.String);

    $.Property({Static:false, Public:true }, "CodeBase", $.String);

    $.Property({Static:false, Public:true }, "AssemblyName", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* struct System.Xml.Serialization.XmlDeserializationEvents */ 

(function XmlDeserializationEvents$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.ValueType"), 
      Name: "System.Xml.Serialization.XmlDeserializationEvents", 
      IsPublic: true, 
      IsReferenceType: false, 
      MaximumConstructorArguments: 0, 
      SequentialLayout: true, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownAttribute", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownElement", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnknownNode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_OnUnreferencedObject", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnknownNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_OnUnreferencedObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"))
    );

    $.Field({Static:false, Public:false}, "onUnknownNode", $asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"));

    $.Field({Static:false, Public:false}, "onUnknownAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"));

    $.Field({Static:false, Public:false}, "onUnknownElement", $asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"));

    $.Field({Static:false, Public:false}, "onUnreferencedObject", $asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"));

    $.Field({Static:false, Public:false}, "sender", $.Object);

    $.Property({Static:false, Public:true }, "OnUnknownNode", $asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"));

    $.Property({Static:false, Public:true }, "OnUnknownAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"));

    $.Property({Static:false, Public:true }, "OnUnknownElement", $asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"));

    $.Property({Static:false, Public:true }, "OnUnreferencedObject", $asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializerImplementation */ 

(function XmlSerializerImplementation$Members () {
  var $, $thisType;









  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializerImplementation", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanSerialize", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Reader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_ReadMethods", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_TypedSerializers", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_WriteMethods", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "get_Writer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriter"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm00.TypeRef("System.Type")])
    );

    $.Property({Static:false, Public:true , Virtual:true }, "Reader", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader"));

    $.Property({Static:false, Public:true , Virtual:true }, "Writer", $asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriter"));

    $.Property({Static:false, Public:true , Virtual:true }, "ReadMethods", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "WriteMethods", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true , Virtual:true }, "TypedSerializers", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializer */ 

(function XmlSerializer$Members () {
  var $, $thisType;























































  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializer", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 7, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String, $.String, 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnknownAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnknownElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnknownNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "add_UnreferencedObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanDeserialize", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateReader", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateWriter", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriter"))
    );

    $.ExternalMethod({Static:false, Public:false}, "DemandForUserLocation", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.IO.Stream")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm00.TypeRef("System.IO.TextReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlReader")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlReader"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [
          $asm07.TypeRef("System.Xml.XmlReader"), $.String, 
          $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Deserialize", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader")])
    );

    $.ExternalMethod({Static:false, Public:false}, "DeserializePrimitive", 
      new JSIL.MethodSignature($.Object, [$asm07.TypeRef("System.Xml.XmlReader"), $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromMappings", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm00.TypeRef("System.Security.Policy.Evidence")])
    );

    $.ExternalMethod({Static:true , Public:true }, "FromTypes", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateSerializer", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [$jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])])
    );

    $.ExternalMethod({Static:true , Public:true }, "GenerateSerializer", 
      new JSIL.MethodSignature($asm00.TypeRef("System.Reflection.Assembly"), [
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), 
          $asm01.TypeRef("System.CodeDom.Compiler.CompilerParameters")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TempAssembly"), [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TempAssembly"), [
          $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), $asm00.TypeRef("System.Type"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "GenerateTempAssembly", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.TempAssembly"), [
          $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), $asm00.TypeRef("System.Type"), 
          $.String, $.String, 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.ExternalMethod({Static:true , Public:false}, "get_DefaultNamespaces", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetKnownMapping", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSerializersFromCache", 
      new JSIL.MethodSignature($jsilcore.TypeRef("System.Array", [$.Type]), [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.XmlMapping")]), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXmlSerializerAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:true , Public:true }, "GetXmlSerializerAssemblyName", 
      new JSIL.MethodSignature($.String, [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnknownAttribute", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnknownElement", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnknownNode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "remove_UnreferencedObject", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.TextWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.TextWriter"), $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm00.TypeRef("System.IO.Stream"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm00.TypeRef("System.IO.Stream"), $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.XmlWriter"), $.Object])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "Serialize", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"), $.String, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "Serialize", 
      new JSIL.MethodSignature(null, [$.Object, $asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriter")])
    );

    $.ExternalMethod({Static:false, Public:false}, "SerializePrimitive", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlWriter"), $.Object, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "SetTempAssembly", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TempAssembly"), $asm07.TypeRef("System.Xml.Serialization.XmlMapping")])
    );

    $.Field({Static:false, Public:false}, "tempAssembly", $asm07.TypeRef("System.Xml.Serialization.TempAssembly"));

    $.Field({Static:false, Public:false}, "typedSerializer", $.Boolean);

    $.Field({Static:false, Public:false}, "primitiveType", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "mapping", $asm07.TypeRef("System.Xml.Serialization.XmlMapping"));

    $.Field({Static:false, Public:false}, "events", $asm07.TypeRef("System.Xml.Serialization.XmlDeserializationEvents"));

    $.Field({Static:true , Public:false}, "cache", $asm07.TypeRef("System.Xml.Serialization.TempAssemblyCache"));

    $.Field({Static:true , Public:false}, "defaultNamespaces", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    $.Field({Static:true , Public:false}, "xmlSerializerTable", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:true , Public:false}, "DefaultNamespaces", $asm07.TypeRef("System.Xml.Serialization.XmlSerializerNamespaces"));

    $.Event({Static:false, Public:true }, "UnknownNode", $asm07.TypeRef("System.Xml.Serialization.XmlNodeEventHandler"));

    $.Event({Static:false, Public:true }, "UnknownAttribute", $asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventHandler"));

    $.Event({Static:false, Public:true }, "UnknownElement", $asm07.TypeRef("System.Xml.Serialization.XmlElementEventHandler"));

    $.Event({Static:false, Public:true }, "UnreferencedObject", $asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventHandler"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializer+XmlSerializerMappingKey */ 

(function XmlSerializerMappingKey$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializer+XmlSerializerMappingKey", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.XmlMapping"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true }, "Mapping", $asm07.TypeRef("System.Xml.Serialization.XmlMapping"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializerFactory */ 

(function XmlSerializerFactory$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializerFactory", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm00.TypeRef("System.Type"), $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")])])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm07.TypeRef("System.Xml.Serialization.XmlTypeMapping")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [$asm00.TypeRef("System.Type"), $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "CreateSerializer", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.XmlSerializer"), [
          $asm00.TypeRef("System.Type"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeOverrides"), 
          $jsilcore.TypeRef("System.Array", [$asm00.TypeRef("System.Type")]), $asm07.TypeRef("System.Xml.Serialization.XmlRootAttribute"), 
          $.String, $.String, 
          $asm00.TypeRef("System.Security.Policy.Evidence")
        ])
    );

    $.Field({Static:true , Public:false}, "cache", $asm07.TypeRef("System.Xml.Serialization.TempAssemblyCache"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializerNamespaces */ 

(function XmlSerializerNamespaces$Members () {
  var $, $thisType;












  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.XmlSerializerNamespaces", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]))
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "AddInternal", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Count", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_NamespaceList", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.ArrayList"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Namespaces", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:false}, "LookupPrefix", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false}, "set_Namespaces", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "ToArray", 
      JSIL.MethodSignature.Return($jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.XmlQualifiedName")]))
    );

    $.Field({Static:false, Public:false}, "namespaces", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Count", $.Int32);

    $.Property({Static:false, Public:false}, "NamespaceList", $asm00.TypeRef("System.Collections.ArrayList"));

    $.Property({Static:false, Public:false}, "Namespaces", $asm00.TypeRef("System.Collections.Hashtable"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializerVersionAttribute */ 

(function XmlSerializerVersionAttribute$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlSerializerVersionAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ParentAssemblyId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Version", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_ParentAssemblyId", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Version", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "mvid", $.String);

    $.Field({Static:false, Public:false}, "serializerVersion", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "ParentAssemblyId", $.String);

    $.Property({Static:false, Public:true }, "Version", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.Assembly]; });

})();

/* class System.Xml.Serialization.XmlTextAttribute */ 

(function XmlTextAttribute$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlTextAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DataType", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_DataType", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:false}, "dataType", $.String);

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"));

    $.Property({Static:false, Public:true }, "DataType", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Field", "Parameter", "Property", "ReturnValue")]; });

})();

/* class System.Xml.Serialization.XmlTypeAttribute */ 

(function XmlTypeAttribute$Members () {
  var $, $thisType;











  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Attribute"), 
      Name: "System.Xml.Serialization.XmlTypeAttribute", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_AnonymousType", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_IncludeInSchema", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Namespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_AnonymousType", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_IncludeInSchema", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Namespace", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TypeName", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "includeInSchema", $.Boolean);

    $.Field({Static:false, Public:false}, "anonymousType", $.Boolean);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "typeName", $.String);

    $.Property({Static:false, Public:true }, "AnonymousType", $.Boolean);

    $.Property({Static:false, Public:true }, "IncludeInSchema", $.Boolean);

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "Namespace", $.String);

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.AttributeUsageAttribute"), function () { return [$asm00.System.AttributeTargets.$Flags("Class", "Enum", "Interface", "Struct")]; });

})();

/* class System.Xml.Serialization.XmlTypeMapping */ 

(function XmlTypeMapping$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlMapping"), 
      Name: "System.Xml.Serialization.XmlTypeMapping", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [$asm07.TypeRef("System.Xml.Serialization.TypeScope"), $asm07.TypeRef("System.Xml.Serialization.ElementAccessor")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Mapping", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.TypeMapping"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeFullName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdTypeName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XsdTypeNamespace", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Property({Static:false, Public:false}, "Mapping", $asm07.TypeRef("System.Xml.Serialization.TypeMapping"));

    $.Property({Static:false, Public:true }, "TypeName", $.String);

    $.Property({Static:false, Public:true }, "TypeFullName", $.String);

    $.Property({Static:false, Public:true }, "XsdTypeName", $.String);

    $.Property({Static:false, Public:true }, "XsdTypeNamespace", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Serialization.XmlAttributeEventHandler */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlAttributeEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.Serialization.XmlAttributeEventArgs")]));

/* class System.Xml.Serialization.XmlAttributeEventArgs */ 

(function XmlAttributeEventArgs$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.Serialization.XmlAttributeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlAttribute"), $.Int32, 
          $.Int32, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Attr", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlAttribute"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpectedAttributes", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "o", $.Object);

    $.Field({Static:false, Public:false}, "attr", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Field({Static:false, Public:false}, "qnames", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

    $.Property({Static:false, Public:true }, "Attr", $asm07.TypeRef("System.Xml.XmlAttribute"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ExpectedAttributes", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Serialization.XmlElementEventHandler */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlElementEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.Serialization.XmlElementEventArgs")]));

/* class System.Xml.Serialization.XmlElementEventArgs */ 

(function XmlElementEventArgs$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.Serialization.XmlElementEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 5, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlElement"), $.Int32, 
          $.Int32, $.Object, 
          $.String
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Element", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ExpectedElements", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "o", $.Object);

    $.Field({Static:false, Public:false}, "elem", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Field({Static:false, Public:false}, "qnames", $.String);

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

    $.Property({Static:false, Public:true }, "Element", $asm07.TypeRef("System.Xml.XmlElement"));

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ExpectedElements", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Serialization.XmlNodeEventHandler */ 

JSIL.MakeDelegate("System.Xml.Serialization.XmlNodeEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.Serialization.XmlNodeEventArgs")]));

/* class System.Xml.Serialization.XmlNodeEventArgs */ 

(function XmlNodeEventArgs$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.Serialization.XmlNodeEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 4, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $asm07.TypeRef("System.Xml.XmlNode"), $.Int32, 
          $.Int32, $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LineNumber", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LinePosition", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_LocalName", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NamespaceURI", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_NodeType", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.XmlNodeType"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_ObjectBeingDeserialized", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Text", 
      JSIL.MethodSignature.Return($.String)
    );

    $.Field({Static:false, Public:false}, "o", $.Object);

    $.Field({Static:false, Public:false}, "xmlNode", $asm07.TypeRef("System.Xml.XmlNode"));

    $.Field({Static:false, Public:false}, "lineNumber", $.Int32);

    $.Field({Static:false, Public:false}, "linePosition", $.Int32);

    $.Property({Static:false, Public:true }, "ObjectBeingDeserialized", $.Object);

    $.Property({Static:false, Public:true }, "NodeType", $asm07.TypeRef("System.Xml.XmlNodeType"));

    $.Property({Static:false, Public:true }, "Name", $.String);

    $.Property({Static:false, Public:true }, "LocalName", $.String);

    $.Property({Static:false, Public:true }, "NamespaceURI", $.String);

    $.Property({Static:false, Public:true }, "Text", $.String);

    $.Property({Static:false, Public:true }, "LineNumber", $.Int32);

    $.Property({Static:false, Public:true }, "LinePosition", $.Int32);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* delegate System.Xml.Serialization.UnreferencedObjectEventHandler */ 

JSIL.MakeDelegate("System.Xml.Serialization.UnreferencedObjectEventHandler", true, [], 
  new JSIL.MethodSignature(null, [$asm00.TypeRef("System.Object"), $asm07.TypeRef("System.Xml.Serialization.UnreferencedObjectEventArgs")]));

/* class System.Xml.Serialization.UnreferencedObjectEventArgs */ 

(function UnreferencedObjectEventArgs$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.EventArgs"), 
      Name: "System.Xml.Serialization.UnreferencedObjectEventArgs", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.Object, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnreferencedId", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_UnreferencedObject", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "o", $.Object);

    $.Field({Static:false, Public:false}, "id", $.String);

    $.Property({Static:false, Public:true }, "UnreferencedObject", $.Object);

    $.Property({Static:false, Public:true }, "UnreferencedId", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Serialization.Advanced");
/* class System.Xml.Serialization.Advanced.SchemaImporterExtension */ 

(function SchemaImporterExtension$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Advanced.SchemaImporterExtension", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportAnyElement", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaAny"), $.Boolean, 
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
          $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), $asm01.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportDefaultValue", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeExpression"), [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $.String, $.String, 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), 
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), 
          $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ImportSchemaType", 
      new JSIL.MethodSignature($.String, [
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), 
          $asm07.TypeRef("System.Xml.Serialization.XmlSchemas"), $asm07.TypeRef("System.Xml.Serialization.XmlSchemaImporter"), 
          $asm01.TypeRef("System.CodeDom.CodeCompileUnit"), $asm01.TypeRef("System.CodeDom.CodeNamespace"), 
          $asm07.TypeRef("System.Xml.Serialization.CodeGenerationOptions"), $asm01.TypeRef("System.CodeDom.Compiler.CodeDomProvider")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection */ 

(function SchemaImporterExtensionCollection$Members () {
  var $, $thisType;
















  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Collections.CollectionBase"), 
      Name: "System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "Add", 
      new JSIL.MethodSignature($.Int32, [$.String, $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Clone", 
      JSIL.MethodSignature.Return($.Type)
    );

    $.ExternalMethod({Static:false, Public:true }, "Contains", 
      new JSIL.MethodSignature($.Boolean, [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
    );

    $.ExternalMethod({Static:false, Public:true }, "CopyTo", 
      new JSIL.MethodSignature(null, [$jsilcore.TypeRef("System.Array", [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")]), $.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Names", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Collections.Hashtable"))
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Insert", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension")])
    );

    $.Field({Static:false, Public:false}, "exNames", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:false}, "Names", $asm00.TypeRef("System.Collections.Hashtable"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.Advanced.MappedTypeDesc */ 

(function MappedTypeDesc$Members () {
  var $, $thisType;






  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Advanced.MappedTypeDesc", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 8, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:false}, ".ctor", 
      new JSIL.MethodSignature(null, [
          $.String, $.String, 
          $.String, $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"), 
          $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"), $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"), 
          $asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.Collections.Specialized.StringCollection")
        ])
    );

    $.ExternalMethod({Static:false, Public:false}, "ExportTypeDefinition", 
      new JSIL.MethodSignature($asm01.TypeRef("System.CodeDom.CodeTypeDeclaration"), [$asm01.TypeRef("System.CodeDom.CodeNamespace"), $asm01.TypeRef("System.CodeDom.CodeCompileUnit")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Extension", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false}, "get_ReferencedAssemblies", 
      JSIL.MethodSignature.Return($asm01.TypeRef("System.Collections.Specialized.StringCollection"))
    );

    $.Field({Static:false, Public:false}, "$name", $.String);

    $.Field({Static:false, Public:false}, "ns", $.String);

    $.Field({Static:false, Public:false}, "xsdType", $asm07.TypeRef("System.Xml.Schema.XmlSchemaType"));

    $.Field({Static:false, Public:false}, "context", $asm07.TypeRef("System.Xml.Schema.XmlSchemaObject"));

    $.Field({Static:false, Public:false}, "clrType", $.String);

    $.Field({Static:false, Public:false}, "extension", $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

    $.Field({Static:false, Public:false}, "code", $asm01.TypeRef("System.CodeDom.CodeNamespace"));

    $.Field({Static:false, Public:false}, "exported", $.Boolean);

    $.Field({Static:false, Public:false}, "references", $asm01.TypeRef("System.Collections.Specialized.StringCollection"));

    $.Property({Static:false, Public:false}, "Extension", $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtension"));

    $.Property({Static:false, Public:false}, "Name", $.String);

    $.Property({Static:false, Public:false}, "ReferencedAssemblies", $asm01.TypeRef("System.Collections.Specialized.StringCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationPrimitiveWriter */ 

(function XmlSerializationPrimitiveWriter$Members () {
  var $, $thisType;





















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlSerializationWriter"), 
      Name: "System.Xml.Serialization.XmlSerializationPrimitiveWriter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_base64Binary", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_boolean", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_byte", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_char", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_dateTime", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_decimal", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_double", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_float", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_guid", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_int", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_long", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_QName", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_short", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_string", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedByte", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedInt", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedLong", 
      JSIL.MethodSignature.Action($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Write_unsignedShort", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.XmlSerializationPrimitiveReader */ 

(function XmlSerializationPrimitiveReader$Members () {
  var $, $thisType;






















  JSIL.MakeType({
      BaseType: $asm07.TypeRef("System.Xml.Serialization.XmlSerializationReader"), 
      Name: "System.Xml.Serialization.XmlSerializationPrimitiveReader", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitCallbacks", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitIDs", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_base64Binary", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_boolean", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_byte", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_char", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_dateTime", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_decimal", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_double", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_float", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_guid", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_int", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_long", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_QName", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_short", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_string", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedByte", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedInt", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedLong", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.ExternalMethod({Static:false, Public:false}, "Read_unsignedShort", 
      JSIL.MethodSignature.Return($.Object)
    );

    $.Field({Static:false, Public:false}, "id4_boolean", $.String);

    $.Field({Static:false, Public:false}, "id14_unsignedInt", $.String);

    $.Field({Static:false, Public:false}, "id15_unsignedLong", $.String);

    $.Field({Static:false, Public:false}, "id7_float", $.String);

    $.Field({Static:false, Public:false}, "id10_dateTime", $.String);

    $.Field({Static:false, Public:false}, "id6_long", $.String);

    $.Field({Static:false, Public:false}, "id9_decimal", $.String);

    $.Field({Static:false, Public:false}, "id8_double", $.String);

    $.Field({Static:false, Public:false}, "id17_guid", $.String);

    $.Field({Static:false, Public:false}, "id2_Item", $.String);

    $.Field({Static:false, Public:false}, "id13_unsignedShort", $.String);

    $.Field({Static:false, Public:false}, "id18_char", $.String);

    $.Field({Static:false, Public:false}, "id3_int", $.String);

    $.Field({Static:false, Public:false}, "id12_byte", $.String);

    $.Field({Static:false, Public:false}, "id16_base64Binary", $.String);

    $.Field({Static:false, Public:false}, "id11_unsignedByte", $.String);

    $.Field({Static:false, Public:false}, "id5_short", $.String);

    $.Field({Static:false, Public:false}, "id1_string", $.String);

    $.Field({Static:false, Public:false}, "id1_QName", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

JSIL.DeclareNamespace("System.Xml.Serialization.Configuration");
/* class System.Xml.Serialization.Configuration.ConfigurationStrings */ 

(function ConfigurationStrings$Members () {
  var $, $thisType;





  JSIL.MakeStaticClass("System.Xml.Serialization.Configuration.ConfigurationStrings", false, [], function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:true , Public:false}, "get_DateTimeSerializationSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_SchemaImporterExtensionsSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "get_XmlSerializerSectionPath", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSectionPath", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.Constant({Static:true , Public:false}, "Name", $.String, "name");

    $.Constant({Static:true , Public:false}, "SchemaImporterExtensionsSectionName", $.String, "schemaImporterExtensions");

    $.Constant({Static:true , Public:false}, "DateTimeSerializationSectionName", $.String, "dateTimeSerialization");

    $.Constant({Static:true , Public:false}, "XmlSerializerSectionName", $.String, "xmlSerializer");

    $.Constant({Static:true , Public:false}, "SectionGroupName", $.String, "system.xml.serialization");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterChar", $.String, "SqlTypesSchemaImporterChar");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNChar", $.String, "SqlTypesSchemaImporterNChar");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterVarChar", $.String, "SqlTypesSchemaImporterVarChar");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNVarChar", $.String, "SqlTypesSchemaImporterNVarChar");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterText", $.String, "SqlTypesSchemaImporterText");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNText", $.String, "SqlTypesSchemaImporterNText");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterVarBinary", $.String, "SqlTypesSchemaImporterVarBinary");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBinary", $.String, "SqlTypesSchemaImporterBinary");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterImage", $.String, "SqlTypesSchemaImporterImage");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterDecimal", $.String, "SqlTypesSchemaImporterDecimal");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterNumeric", $.String, "SqlTypesSchemaImporterNumeric");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBigInt", $.String, "SqlTypesSchemaImporterBigInt");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterInt", $.String, "SqlTypesSchemaImporterInt");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallInt", $.String, "SqlTypesSchemaImporterSmallInt");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterTinyInt", $.String, "SqlTypesSchemaImporterTinyInt");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterBit", $.String, "SqlTypesSchemaImporterBit");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterFloat", $.String, "SqlTypesSchemaImporterFloat");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterReal", $.String, "SqlTypesSchemaImporterReal");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterDateTime", $.String, "SqlTypesSchemaImporterDateTime");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallDateTime", $.String, "SqlTypesSchemaImporterSmallDateTime");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterMoney", $.String, "SqlTypesSchemaImporterMoney");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterSmallMoney", $.String, "SqlTypesSchemaImporterSmallMoney");

    $.Constant({Static:true , Public:false}, "SqlTypesSchemaImporterUniqueIdentifier", $.String, "SqlTypesSchemaImporterUniqueIdentifier");

    $.Constant({Static:true , Public:false}, "Type", $.String, "type");

    $.Constant({Static:true , Public:false}, "Mode", $.String, "mode");

    $.Constant({Static:true , Public:false}, "CheckDeserializeAdvances", $.String, "checkDeserializeAdvances");

    $.Constant({Static:true , Public:false}, "TempFilesLocation", $.String, "tempFilesLocation");

    $.Property({Static:true , Public:false}, "SchemaImporterExtensionsSectionPath", $.String);

    $.Property({Static:true , Public:false}, "DateTimeSerializationSectionPath", $.String);

    $.Property({Static:true , Public:false}, "XmlSerializerSectionPath", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.DateTimeSerializationSection */ 

(function DateTimeSerializationSection$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Xml.Serialization.Configuration.DateTimeSerializationSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Mode", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode"))
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Mode", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "mode", $asm02.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Mode", $asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode"))
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["mode"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* enum System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode */ 

JSIL.MakeEnum(
  {
    FullName: "System.Xml.Serialization.Configuration.DateTimeSerializationSection+DateTimeSerializationMode", 
    BaseType: $asm00.TypeRef("System.Int32"), 
    IsPublic: false, 
    IsFlags: false, 
  }, 
  {
    Default: 0, 
    Roundtrip: 1, 
    Local: 2, 
  }
);

/* class System.Xml.Serialization.Configuration.SchemaImporterExtensionElement */ 

(function SchemaImporterExtensionElement$Members () {
  var $, $thisType;










  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationElement"), 
      Name: "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 2, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $.String])
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      new JSIL.MethodSignature(null, [$.String, $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:false}, "get_Key", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Name", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Type", 
      JSIL.MethodSignature.Return($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Name", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Type", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.Field({Static:false, Public:false}, "properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "$name", $asm02.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "type", $asm02.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:true }, "Name", $.String)
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["name"]; });

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "Type", $asm00.TypeRef("System.Type"))
      .Attribute($asm01.TypeRef("System.ComponentModel.TypeConverterAttribute"), function () { return [$asm07.System.Xml.Serialization.Configuration.SchemaImporterExtensionElement_TypeTypeConverter.__Type__]; })
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["type"]; });

    $.Property({Static:false, Public:false}, "Key", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.SchemaImporterExtensionElement+TypeAndName */ 

(function TypeAndName$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm00.TypeRef("System.Object"), 
      Name: "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement+TypeAndName", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 1, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Action($asm00.TypeRef("System.Type"))
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Object.Equals", 
      new JSIL.MethodSignature($.Boolean, [$.Object])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "GetHashCode", 
      JSIL.MethodSignature.Return($.Int32)
    );

    $.Field({Static:false, Public:true , ReadOnly:true }, "type", $asm00.TypeRef("System.Type"));

    $.Field({Static:false, Public:true , ReadOnly:true }, "$name", $.String);


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.SchemaImporterExtensionElement+TypeTypeConverter */ 

(function TypeTypeConverter$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm01.TypeRef("System.ComponentModel.TypeConverter"), 
      Name: "System.Xml.Serialization.Configuration.SchemaImporterExtensionElement+TypeTypeConverter", 
      IsPublic: false, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanConvertFrom", 
      new JSIL.MethodSignature($.Boolean, [$asm01.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertFrom", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm00.TypeRef("System.Globalization.CultureInfo"), 
          $.Object
        ])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "ConvertTo", 
      new JSIL.MethodSignature($.Object, [
          $asm01.TypeRef("System.ComponentModel.ITypeDescriptorContext"), $asm00.TypeRef("System.Globalization.CultureInfo"), 
          $.Object, $asm00.TypeRef("System.Type")
        ])
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection */ 

(function SchemaImporterExtensionElementCollection$Members () {
  var $, $thisType;














  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationElementCollection"), 
      Name: "System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "Add", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Clear", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "CreateNewElement", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Configuration.ConfigurationElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"), [$.Int32])
    );

    $.ExternalMethod({Static:false, Public:true }, "get_Item", 
      new JSIL.MethodSignature($asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"), [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "GetElementKey", 
      new JSIL.MethodSignature($.Object, [$asm02.TypeRef("System.Configuration.ConfigurationElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "IndexOf", 
      new JSIL.MethodSignature($.Int32, [$asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"))
    );

    $.ExternalMethod({Static:false, Public:true }, "Remove", 
      JSIL.MethodSignature.Action($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "RemoveAt", 
      JSIL.MethodSignature.Action($.Int32)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.Int32, $asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")])
    );

    $.ExternalMethod({Static:false, Public:true }, "set_Item", 
      new JSIL.MethodSignature(null, [$.String, $asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement")])
    );

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"));

    $.Property({Static:false, Public:true }, "Item", $asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElement"));

    $.ImplementInterfaces(
    );


    return function (newThisType) { $thisType = newThisType; }; 
  })
    .Attribute($asm02.TypeRef("System.Configuration.ConfigurationCollectionAttribute"), function () { return [$asm07.System.Xml.Serialization.Configuration.SchemaImporterExtensionElement.__Type__]; })
    .Attribute($asm00.TypeRef("System.Reflection.DefaultMemberAttribute"), function () { return ["Item"]; });

})();

/* class System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection */ 

(function SchemaImporterExtensionsSection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"))
    );

    $.ExternalMethod({Static:false, Public:false}, "get_SchemaImporterExtensionsInternal", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"))
    );

    $.ExternalMethod({Static:true , Public:false}, "GetSqlTypeSchemaImporter", 
      new JSIL.MethodSignature($.String, [$.String])
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "InitializeDefault", 
      JSIL.MethodSignature.Void
    );

    $.Field({Static:false, Public:false}, "properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "schemaImporterExtensions", $asm02.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection"))
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return [""]; });

    $.Property({Static:false, Public:false}, "SchemaImporterExtensionsInternal", $asm07.TypeRef("System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.SerializationSectionGroup */ 

(function SerializationSectionGroup$Members () {
  var $, $thisType;





  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationSectionGroup"), 
      Name: "System.Xml.Serialization.Configuration.SerializationSectionGroup", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_DateTimeSerialization", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_SchemaImporterExtensions", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_XmlSerializer", 
      JSIL.MethodSignature.Return($asm07.TypeRef("System.Xml.Serialization.Configuration.XmlSerializerSection"))
    );

    $.Property({Static:false, Public:true }, "SchemaImporterExtensions", $asm07.TypeRef("System.Xml.Serialization.Configuration.SchemaImporterExtensionsSection"))
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["schemaImporterExtensions"]; });

    $.Property({Static:false, Public:true }, "DateTimeSerialization", $asm07.TypeRef("System.Xml.Serialization.Configuration.DateTimeSerializationSection"))
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["dateTimeSerialization"]; });

    $.Property({Static:false, Public:true }, "XmlSerializer", $asm07.TypeRef("System.Xml.Serialization.Configuration.XmlSerializerSection"));


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.XmlSerializerSection */ 

(function XmlSerializerSection$Members () {
  var $, $thisType;







  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationSection"), 
      Name: "System.Xml.Serialization.Configuration.XmlSerializerSection", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true }, "get_CheckDeserializeAdvances", 
      JSIL.MethodSignature.Return($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:false, Virtual:true }, "get_Properties", 
      JSIL.MethodSignature.Return($asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"))
    );

    $.ExternalMethod({Static:false, Public:true }, "get_TempFilesLocation", 
      JSIL.MethodSignature.Return($.String)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_CheckDeserializeAdvances", 
      JSIL.MethodSignature.Action($.Boolean)
    );

    $.ExternalMethod({Static:false, Public:true }, "set_TempFilesLocation", 
      JSIL.MethodSignature.Action($.String)
    );

    $.Field({Static:false, Public:false}, "properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "checkDeserializeAdvances", $asm02.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Field({Static:false, Public:false, ReadOnly:true }, "tempFilesLocation", $asm02.TypeRef("System.Configuration.ConfigurationProperty"));

    $.Property({Static:false, Public:false, Virtual:true }, "Properties", $asm02.TypeRef("System.Configuration.ConfigurationPropertyCollection"));

    $.Property({Static:false, Public:true }, "CheckDeserializeAdvances", $.Boolean)
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["checkDeserializeAdvances"]; });

    $.Property({Static:false, Public:true }, "TempFilesLocation", $.String)
      .Attribute($asm02.TypeRef("System.Configuration.ConfigurationPropertyAttribute"), function () { return ["tempFilesLocation"]; });


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

/* class System.Xml.Serialization.Configuration.RootedPathValidator */ 

(function RootedPathValidator$Members () {
  var $, $thisType;




  JSIL.MakeType({
      BaseType: $asm02.TypeRef("System.Configuration.ConfigurationValidatorBase"), 
      Name: "System.Xml.Serialization.Configuration.RootedPathValidator", 
      IsPublic: true, 
      IsReferenceType: true, 
      MaximumConstructorArguments: 0, 
    }, function ($ib) {
    $ = $ib;

    $.ExternalMethod({Static:false, Public:true }, ".ctor", 
      JSIL.MethodSignature.Void
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "CanValidate", 
      new JSIL.MethodSignature($.Boolean, [$asm00.TypeRef("System.Type")])
    );

    $.ExternalMethod({Static:false, Public:true , Virtual:true }, "Validate", 
      JSIL.MethodSignature.Action($.Object)
    );


    return function (newThisType) { $thisType = newThisType; }; 
  });

})();

